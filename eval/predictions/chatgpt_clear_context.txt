SELECT COUNT(*) FROM singer
SELECT COUNT(*) FROM singer
SELECT name, country, age  FROM      singer  ORDER BY      age DESC
SELECT name, country, age     FROM singer     ORDER BY age DESC
SELECT AVG(age), MIN(age), MAX(age)     FROM singer     WHERE country = 'France'
SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France'
SELECT singer.name, singer.song_release_year FROM singer WHERE singer.age = ( SELECT MIN(age) FROM singer )
SELECT name, song_release_year FROM singer WHERE age = (     SELECT MIN(age) FROM singer )
SELECT DISTINCT country FROM singer WHERE age > 20
SELECT DISTINCT country FROM singer WHERE age > 20
SELECT country, COUNT(name)     FROM singer     GROUP BY country
SELECT country,      COUNT(*) AS count     FROM singer     GROUP BY country;
SELECT song.name FROM song JOIN singer ON song.singer_id = singer.singer_id WHERE singer.age > (SELECT AVG(age) FROM singer)
SELECT song_name FROM     singer WHERE     age > (SELECT AVG(age) FROM singer)
SELECT location, name     FROM      stadium     WHERE      capacity BETWEEN 5000 AND 10000
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT MAX(capacity) AS maximum_capacity, AVG(capacity) AS average_capacity FROM stadium
SELECT AVG(capacity),      MAX(capacity) FROM      stadium
SELECT stadium.name, stadium.capacity     FROM     stadium     WHERE     stadium.average = (SELECT MAX(average) FROM stadium)
SELECT stadium.name, stadium.capacity FROM     stadium WHERE     stadium.highest = (         SELECT             MAX(stadium.average)         FROM             stadium     )
SELECT COUNT(*) FROM concert WHERE year = 2014 OR year = 2015
SELECT COUNT(concert_id) FROM concert WHERE year = 2014 OR year = 2015;
SELECT stadium.name, COUNT(concert.concert_id)     FROM stadium     LEFT JOIN concert ON concert.stadium_id = stadium.stadium_id     GROUP BY stadium.name;
SELECT stadium.name,      COUNT(concert.concert_id) AS num_concerts     FROM      stadium     LEFT JOIN      concert ON stadium.stadium_id = concert.stadium_id     GROUP BY      stadium.name;
SELECT stadium.name, stadium.capacity FROM     stadium JOIN     concert ON stadium.stadium_id = concert.stadium_id WHERE     concert.year >= 2014 GROUP BY     stadium.stadium_id ORDER BY     COUNT(concert.concert_id) DESC LIMIT 1;
SELECT stadium.name, stadium.capacity FROM     stadium WHERE     stadium.stadium_id IN (         SELECT             concert.stadium_id         FROM             concert         WHERE             concert.date > '2013-01-01'         GROUP BY             concert.stadium_id         HAVING             COUNT(*) = (                 SELECT                     MAX(concert_count)                 FROM                     (                         SELECT                             COUNT(*) as concert_count                         FROM                             concert                         WHERE                             concert.date > '2013-01-01'                         GROUP BY                             concert.stadium_id                     ) as subquery             )     )
SELECT year     FROM     concert     GROUP BY     year     ORDER BY     COUNT(*) DESC     LIMIT 1;
SELECT year     FROM     concert     GROUP BY     year     ORDER BY     COUNT(*) DESC     LIMIT 1
SELECT stadium.stadium_id, stadium.stadium_name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.concert_id IS NULL
SELECT stadium.name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.stadium_id IS NULL
SELECT DISTINCT country FROM singer WHERE age > 40 AND age < 30
SELECT stadium.name FROM stadium WHERE stadium.stadium_id NOT IN (     SELECT concert.stadium_id     FROM concert     WHERE concert.year = 2014 )
SELECT stadium.name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year <> 2014 OR concert.year IS NULL;
SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) as number_of_singers FROM concert INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme
SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) as number_of_singers FROM concert INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme
SELECT singer.name, COUNT(singer_in_concert.concert_id) as num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name;
SELECT singer.name, COUNT(singer_in_concert.concert_id) FROM singer INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name;
SELECT singer.name FROM singer INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id INNER JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014
SELECT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id WHERE concert.year = 2014
SELECT name, country FROM singer WHERE song_name LIKE '%Hey%'
SELECT name, country     FROM      singer     WHERE      song_name LIKE '%Hey%'
SELECT stadium.name, stadium.location     FROM      stadium     INNER JOIN concert ON concert.stadium_id = stadium.stadium_id     WHERE      concert.year = 2014      AND stadium.name IN (SELECT stadium.name FROM concert INNER JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2015)
SELECT stadium.name, stadium.location FROM stadium JOIN concert ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2014 AND concert.year = 2015
SELECT COUNT(concert_id) FROM concert WHERE stadium_id = (     SELECT stadium_id     FROM stadium     ORDER BY capacity DESC     LIMIT 1 )
SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)
SELECT COUNT(*) FROM pets WHERE weight > 10;
SELECT COUNT(*) FROM pets WHERE weight > 10;
SELECT MIN(pet_age) AS weight FROM     pets WHERE     petid IN (         SELECT             petid         FROM             has_pet         WHERE             petid IN (                 SELECT                     petid                 FROM                     pets                 WHERE                     pet_age IN (                         SELECT                             MIN(pet_age)                         FROM                             pets                         WHERE                             petid IN (                                 SELECT                                     petid                                 FROM                                     has_pet                                 WHERE                                     petid IN (                                         SELECT                                             petid                                         FROM                                             pets                                         WHERE                                             pet_age IN (                                                 SELECT                                                     MIN(pet_age)                                                 FROM                                                     pets                                                 WHERE                                                     petid IN (                                                         SELECT                                                             petid                                                         FROM                                                             has_pet                                                         WHERE                                                             petid IN (                                                                 SELECT                                                                     petid                                                                 FROM                                                                     pets                                                                 WHERE                                                                     pet_age IN (                                                                         SELECT                                                                             MIN(pet_age)                                                                         FROM                                                                             pets                                                                         WHERE                                                                             petid IN (                                                                                 SELECT                                                                                     petid                                                                                 FROM                                                                                     has_pet                                                                                 WHERE                                                                                     petid IN (                                                                                         SELECT                                                                                             petid                                                                                         FROM                                                                                             pets                                                                                         WHERE                                                                                             pet_age IN (                                                                                                 SELECT                                                                                                     MIN(pet_age)                                                                                                 FROM                                                                                                     petspetid IN (         SELECT             petid         FROM             pets             WHERE pet_age = (SELECT MIN(pet_age) FROM pets WHERE petid IN (SELECT petid FROM has_pet))     )
SELECT MIN(pets.weight) FROM pets JOIN has_pet ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pet_age = (SELECT MIN(pets.pet_age) FROM pets WHERE pets.pet_type = 'dog')
SELECT MAX(weight) as maximum_weight, pettype FROM pets GROUP BY pettype
SELECT pettype,      MAX(weight) AS max_weight FROM     pets GROUP BY     pettype
SELECT COUNT(*) FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20
SELECT COUNT(*) FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20
SELECT COUNT(*) FROM   student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE   student.sex = 'F' AND   pets.pettype = 'dog'
SELECT COUNT(*) FROM     student     JOIN has_pet ON student.stuid = has_pet.stuid     JOIN pets ON has_pet.petid = pets.petid WHERE     student.sex = 'female'     AND pets.pettype = 'dog'
SELECT COUNT(DISTINCT pettype) FROM pets
SELECT COUNT(DISTINCT pettype) FROM pets
SELECT student.fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog'
SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog'
SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pettype = 'dog'
SELECT student.fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pettype = 'dog'
SELECT student.major, student.age FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid LEFT JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype != 'cat' OR pets.pettype IS NULL
SELECT student.major, student.age FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid LEFT JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype != 'cat' OR pets.pettype IS NULL
SELECT student.stuid FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid LEFT JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype != 'cat'
SELECT student.stuid FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid LEFT JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype <> 'cat' OR pets.pettype IS NULL
SELECT student.fname, student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' AND student.stuid NOT IN (     SELECT student.stuid     FROM student     JOIN has_pet ON student.stuid = has_pet.stuid     JOIN pets ON has_pet.petid = pets.petid     WHERE pets.pettype = 'cat' )
SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' AND student.stuid NOT IN (SELECT student.stuid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat')
SELECT pets.pettype, pets.weight FROM pets WHERE pet_age = (   SELECT     MIN(pet_age)   FROM     pets )
SELECT pets.pettype, pets.weight FROM pets WHERE pets.pet_age = (SELECT MIN(pet_age) FROM pets)
SELECT pets.petid, pets.weight FROM pets WHERE pets.pet_age > 1
SELECT pets.petid, pets.weight FROM pets WHERE pets.pet_age > 1
SELECT pettype, AVG(pet_age), MAX(pet_age) FROM pets GROUP BY pettype
SELECT pettype, AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age FROM pets GROUP BY pettype
SELECT pettype, AVG(weight) as average_weight FROM pets GROUP BY pettype
SELECT pets.pettype, AVG(pets.weight) FROM pets GROUP BY pets.pettype;
SELECT student.fname, student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid
SELECT student.fname, student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid
SELECT has_pet.petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.lname = 'Smith'
SELECT has_pet.petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.lname = 'Smith'
SELECT student.stuid, COUNT(has_pet.petid) as num_pets FROM  student INNER JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid;
SELECT student.stuid, COUNT(pets.petid) FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid GROUP BY student.stuid
SELECT student.fname, student.sex FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.fname, student.sex HAVING COUNT(has_pet.stuid) > 1
SELECT student.fname, student.sex FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid HAVING COUNT(has_pet.stuid) > 1
SELECT student.lname FROM student JOIN pets ON student.stuid = pets.stuid WHERE pets.pettype = 'cat' AND pets.pet_age = 3
SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pet_age = 3
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)
SELECT COUNT(*) FROM continents;
SELECT COUNT(contid) FROM continents
SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS num_countries FROM continents INNER JOIN countries ON countries.continent = continents.contid GROUP BY continents.contid, continents.continent
SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS num_countries FROM continents JOIN countries ON countries.continent = continents.contid GROUP BY continents.contid, continents.continent;
SELECT COUNT(countryname) FROM countries
SELECT COUNT(countryname) FROM countries
SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid) FROM     car_makers INNER JOIN     model_list ON car_makers.id = model_list.maker GROUP BY     car_makers.id;
SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid) AS number_of_models FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id
SELECT model FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model ORDER BY cars_data.horsepower ASC LIMIT 1;
SELECT car_names.model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY cars_data.horsepower ASC LIMIT 1;
SELECT car_names.model FROM     car_names JOIN     cars_data ON car_names.makeid = cars_data.id WHERE     cars_data.weight < (SELECT AVG(weight) FROM cars_data)
SELECT model FROM car_names WHERE model IN ( SELECT car_names.model FROM car_names INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < ( SELECT AVG(weight) FROM cars_data ) )
SELECT car_makers.fullname FROM   car_makers JOIN   model_list ON car_makers.id = model_list.maker JOIN   car_names ON model_list.modelid = car_names.model JOIN   cars_data ON car_names.makeid = cars_data.id WHERE   cars_data.year = 1970
SELECT car_makers.maker FROM   car_makers INNER JOIN   model_list ON car_makers.id = model_list.maker INNER JOIN   car_names ON model_list.model = car_names.model INNER JOIN   cars_data ON car_names.makeid = cars_data.id WHERE   cars_data.year = 1970
SELECT car_makers.maker, cars_data.year FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.year = (SELECT MIN(year) FROM cars_data)
SELECT car_makers.maker, MIN(cars_data.year) FROM     car_makers     INNER JOIN car_names ON car_makers.id = car_names.makeid     INNER JOIN cars_data ON car_names.model = cars_data.id GROUP BY     car_makers.maker ORDER BY     MIN(cars_data.year) LIMIT 1;
SELECT DISTINCT model FROM     model_list JOIN     cars_data ON model_list.model = cars_data.model WHERE     cars_data.year > 1980
SELECT car_names.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.year > 1980
SELECT continents.contid,      COUNT(DISTINCT car_makers.id) AS maker_count     FROM      continents     INNER JOIN countries ON continents.contid = countries.continent     INNER JOIN car_makers ON countries.countryid = car_makers.country     GROUP BY      continents.contid;
SELECT continents.continent,      COUNT(car_makers.maker) as car_makers_count     FROM      continents     LEFT JOIN countries ON continents.continent = countries.continent     LEFT JOIN car_makers ON countries.countryname = car_makers.country     GROUP BY      continents.continent
SELECT countries.countryname     FROM     countries     INNER JOIN car_makers ON countries.countryid = car_makers.country     GROUP BY     countries.countryname     ORDER BY     COUNT(car_makers.maker) DESC     LIMIT 1;
SELECT countries.countryname FROM     countries JOIN     car_makers ON car_makers.country = countries.countryid GROUP BY     countries.countryname ORDER BY     COUNT(car_makers.maker) DESC LIMIT 1;
SELECT car_makers.fullname, COUNT(model_list.modelid) AS count     FROM     car_makers     INNER JOIN model_list ON car_makers.id = model_list.maker     GROUP BY car_makers.fullname
SELECT car_makers.id, car_makers.fullname, COUNT(model_list.model) FROM     car_makers JOIN     model_list ON model_list.maker = car_makers.id GROUP BY     car_makers.id, car_makers.fullname
SELECT cars_data.accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.maker = 'amc' AND car_names.model = 'hornet sportabout (sw)'
SELECT cars_data.accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.model = 'amc hornet sportabout (sw)'
SELECT COUNT(*) FROM     car_makers JOIN     countries ON car_makers.country = countries.countryid WHERE     countries.countryname = 'france'
SELECT COUNT(*) FROM     car_makers WHERE     country = (SELECT countryid FROM countries WHERE countryname = 'France')
SELECT COUNT(DISTINCT model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.country = 'usa'
SELECT COUNT(model_list.model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'United States'
SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4
SELECT AVG(mpg)     FROM cars_data     WHERE cylinders = 4
SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;
SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974
SELECT car_makers.maker, model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker
SELECT car_makers.maker, model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker
SELECT countries.countryname, countries.countryid FROM countries INNER JOIN car_makers ON car_makers.country = countries.countryid
SELECT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country
SELECT COUNT(*) FROM     cars_data WHERE     horsepower > 150
SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;
SELECT year, AVG(weight) FROM cars_data GROUP BY year
SELECT year, AVG(weight) as average_weight, AVG(year) as average_year FROM cars_data GROUP BY year
SELECT countries.countryname     FROM     countries     INNER JOIN continents ON countries.continent = continents.contid     INNER JOIN car_makers ON car_makers.country = countries.countryid     WHERE     continents.continent = 'Europe'     GROUP BY     countries.countryname     HAVING     COUNT(car_makers.maker) >= 3;
SELECT countries.countryname FROM     countries INNER JOIN     continents ON countries.continent = continents.contid INNER JOIN     car_makers ON car_makers.country = countries.countryid GROUP BY     countries.countryname HAVING     COUNT(DISTINCT car_makers.maker) >= 3 AND     continents.contid = 'Europe'
SELECT MAX(cars_data.horsepower), car_makers.maker FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE model_list.cylinders = 3
SELECT MAX(cars_data.horsepower) AS max_horsepower, car_makers.fullname AS make FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3
SELECT model FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model ORDER BY cars_data.mpg DESC LIMIT 1
SELECT car_names.model FROM     car_names INNER JOIN     cars_data ON cars_data.id = car_names.makeid ORDER BY     cars_data.mpg DESC LIMIT 1
SELECT AVG(horsepower) FROM cars_data WHERE year < 1980
SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;
SELECT AVG(cars_data.edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.maker = 'volvo'
SELECT AVG(cars_data.edispl) FROM     cars_data JOIN     car_names ON cars_data.id = car_names.makeid JOIN     model_list ON car_names.model = model_list.model JOIN     car_makers ON model_list.maker = car_makers.id WHERE     car_makers.maker = 'volvo'
SELECT cylinders,      MAX(accelerate)     FROM cars_data     GROUP BY cylinders;
SELECT cylinders,      MAX(accelerate) AS max_accelerate FROM  cars_data GROUP BY  cylinders
SELECT model, COUNT(DISTINCT makeid) as num_versions FROM car_names GROUP BY model ORDER BY num_versions DESC LIMIT 1;
SELECT model_list.model,      COUNT(DISTINCT model_list.modelid) AS num_versions     FROM model_list     GROUP BY model_list.model     ORDER BY num_versions DESC     LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;
SELECT COUNT(*)  FROM cars_data WHERE cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE year = 1980
SELECT COUNT(*) FROM cars_data WHERE year = 1980
SELECT COUNT(model_list.modelid) FROM car_makers JOIN model_list ON model_list.maker = car_makers.id WHERE car_makers.fullname = "American Motor Company"
SELECT COUNT(DISTINCT model_list.model) FROM     car_makers     INNER JOIN model_list ON car_makers.id = model_list.maker WHERE     car_makers.fullname = 'American Motor Company'
SELECT car_makers.id,      car_makers.fullname     FROM      car_makers     JOIN model_list ON car_makers.id = model_list.maker     GROUP BY      car_makers.id,      car_makers.fullname     HAVING      COUNT(model_list.modelid) > 3;
SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.maker HAVING COUNT(model_list.model) > 3;
SELECT DISTINCT model FROM     car_makers     JOIN model_list ON car_makers.maker = model_list.maker     JOIN cars_data ON model_list.model = cars_data.id WHERE     (car_makers.fullname = "General Motors" OR cars_data.weight > 3500)
SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON model_list.modelid = cars_data.id WHERE car_makers.fullname = 'General Motors' OR cars_data.weight > 3500
SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000
SELECT DISTINCT year FROM cars_data WHERE (weight < 4000 OR weight > 3000)
SELECT cars_data.horsepower FROM cars_data WHERE cars_data.accelerate = ( SELECT MAX(accelerate) FROM cars_data )
SELECT cars_data.horsepower FROM cars_data WHERE cars_data.accelerate = (SELECT MAX(accelerate) FROM cars_data)
SELECT MIN(cars_data.cylinders)  FROM     car_names     INNER JOIN model_list ON car_names.model = model_list.model     INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE     model_list.model = 'volvo';
SELECT MIN(cars_data.cylinders) FROM     cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE     car_makers.maker = 'volvo'
SELECT COUNT(*) FROM cars_data WHERE accelerate > (   SELECT MAX(horsepower)   FROM cars_data )
SELECT COUNT(*) FROM     cars_data WHERE     accelerate > (         SELECT             MAX(horsepower)         FROM             cars_data     )
SELECT COUNT(*)  FROM  countries  INNER JOIN car_makers ON countries.countryname = car_makers.country  GROUP BY  countries.countryname  HAVING  COUNT(car_makers.country) > 2
SELECT COUNT(DISTINCT countries.countryid)  FROM      countries  INNER JOIN      car_makers  ON      countries.countryid = car_makers.country  GROUP BY      countries.countryid  HAVING      COUNT(DISTINCT car_makers.id) > 2;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;
SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1
SELECT model FROM model_list JOIN cars_data ON model_list.model = cars_data.model WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1
SELECT car_names.makeid, car_names.make FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cars_data.cylinders <= 3
SELECT car_names.makeid, car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cars_data.cylinders < 4;
SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980
SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;
SELECT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.weight < 3500 AND car_makers.maker != 'Ford Motor Company'
SELECT model_list.model FROM model_list INNER JOIN cars_data ON model_list.modelid = cars_data.id INNER JOIN car_makers ON model_list.maker = car_makers.maker WHERE cars_data.weight < 3500 AND car_makers.fullname != 'Ford Motor Company'
SELECT countries.countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.maker IS NULL
SELECT countries.countryname     FROM     countries     LEFT JOIN     car_makers ON countries.countryid = car_makers.country     WHERE     car_makers.country IS NULL
SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2 AND COUNT(DISTINCT car_makers.id) > 3;
SELECT car_makers.id, car_makers.maker FROM     car_makers INNER JOIN model_list ON model_list.maker = car_makers.id INNER JOIN car_names ON car_names.model = model_list.model GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2 AND COUNT(DISTINCT car_names.makeid) > 3
SELECT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON car_makers.country = countries.countryid INNER JOIN model_list ON model_list.maker = car_makers.id INNER JOIN car_names ON car_names.model = model_list.model GROUP BY countries.countryid, countries.countryname HAVING COUNT(DISTINCT car_makers.id) > 3 OR car_names.make = 'fiat'
SELECT countries.countryid, countries.countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country LEFT JOIN model_list ON car_makers.id = model_list.maker LEFT JOIN car_names ON model_list.model = car_names.model WHERE (     (         SELECT COUNT(DISTINCT car_makers.id) FROM car_makers WHERE car_makers.country = countries.countryid     ) > 3 ) OR car_names.make = 'fiat'
SELECT country     FROM      airlines     WHERE      airline = "JetBlue Airways"
SELECT airlines.country FROM     airlines WHERE     airlines.airline = 'Jetblue Airways';
SELECT abbreviation     FROM airlines     WHERE airline = "JetBlue Airways"
SELECT abbreviation     FROM airlines     WHERE abbreviation = 'Jetblue Airways'
SELECT airline, abbreviation FROM airlines WHERE country = "USA"
SELECT airline, abbreviation FROM airlines WHERE country = 'USA'
SELECT airportcode, airportname     FROM airports     WHERE city = 'Anthony';
SELECT airports.airportcode, airports.airportname     FROM     airports     WHERE     airports.city = 'Anthony'
SELECT COUNT(DISTINCT airline) FROM airlines
SELECT COUNT(*) FROM airlines
SELECT COUNT(*) FROM airports
SELECT COUNT(airportcode) FROM airports
SELECT COUNT(*) FROM flights
SELECT COUNT(*) FROM flights
SELECT airline FROM airlines WHERE abbreviation = 'UAL'
SELECT airline FROM     airlines WHERE     abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines WHERE country = 'USA'
SELECT COUNT(airline) FROM airlines WHERE country = 'USA'
SELECT city, country     FROM      airports     WHERE      airportname = 'Alton'
SELECT airports.city, airports.country FROM airports WHERE airports.airportname = 'Alton'
SELECT airportname FROM airports WHERE airportcode = 'AKO'
SELECT airportname FROM airports WHERE airportcode = 'AKO';
SELECT airportname FROM airports WHERE city = 'Aberdeen'
SELECT airportname FROM airports WHERE city = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG'
SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG'
SELECT COUNT(*) FROM     flights WHERE     destairport = 'ATO'
SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';
SELECT COUNT(*) FROM     flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE     airports.city = 'Aberdeen';
SELECT COUNT(*) FROM     flights JOIN     airports ON flights.sourceairport = airports.airportcode WHERE     airports.city = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'
SELECT COUNT(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen' AND flights.destairport IN (SELECT airportcode FROM airports WHERE city = 'Ashley')
SELECT COUNT(*)  FROM flights  WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley'
SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways'
SELECT COUNT(*) FROM     flights WHERE     airline = 'Jetblue Airways'
SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY'
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.abbreviation = 'United Airlines' AND airports.airportcode = 'ASY'
SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD'
SELECT COUNT(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE flights.airline = 'United Airlines' AND airports.airportcode = 'AHD';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.abbreviation = 'UA' AND airports.city = 'Aberdeen'
SELECT COUNT(*) FROM     flights JOIN     airlines ON flights.airline = airlines.airline JOIN     airports ON flights.destairport = airports.airportcode WHERE     airlines.airline = 'United Airlines'     AND airports.city = 'Aberdeen';
SELECT airports.city FROM airports JOIN flights ON flights.destairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT(flights.flightno) DESC LIMIT 1
SELECT airports.city FROM     flights JOIN     airports ON flights.destairport = airports.airportcode GROUP BY     airports.city ORDER BY     COUNT(flights.destairport) DESC LIMIT 1
SELECT airports.city     FROM      airports     JOIN flights ON airports.airportcode = flights.sourceairport     GROUP BY      airports.city     ORDER BY      COUNT(flights.sourceairport) DESC     LIMIT 1
SELECT airports.city     FROM         flights     JOIN         airports     ON         flights.sourceairport = airports.airportcode     GROUP BY         airports.city     ORDER BY         COUNT(flights.sourceairport) DESC     LIMIT 1
SELECT airportcode     FROM      airports     ORDER BY      COUNT(*) DESC     LIMIT 1
SELECT flights.destairport,      COUNT(*) AS num_flights     FROM      flights     GROUP BY      flights.destairport     ORDER BY      num_flights DESC     LIMIT 1
SELECT airports.airportcode FROM airports LEFT JOIN flights ON airports.airportcode = flights.destairport OR airports.airportcode = flights.sourceairport GROUP BY airports.airportcode ORDER BY COUNT(flights.destairport) + COUNT(flights.sourceairport) ASC LIMIT 1;
SELECT airportcode FROM      airports LEFT JOIN      flights ON airports.airportcode = flights.destairport GROUP BY      airports.airportcode ORDER BY      COUNT(flights.flightno) LIMIT 1;
SELECT airline FROM   flights GROUP BY   airline ORDER BY   COUNT(*) DESC LIMIT 1
SELECT airline FROM     flights GROUP BY     airline ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT abbreviation, country FROM airlines WHERE airline = ( SELECT  airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1 )
SELECT abbreviation, country FROM airlines WHERE uid = (     SELECT airline     FROM flights     GROUP BY airline     ORDER BY COUNT(*) ASC     LIMIT 1 )
SELECT DISTINCT airlines.airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airlines ON flights.airline = airlines.airline WHERE airports.airportcode = 'AHD';
SELECT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport = 'AHD'
SELECT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportcode = 'AHD'
SELECT airline FROM airlines WHERE airline IN (SELECT airline FROM flights WHERE destairport = 'AHD')
SELECT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'APG' AND EXISTS (     SELECT 1     FROM flights     JOIN airports ON flights.destairport = airports.airportcode     WHERE airports.airportcode = 'CVO'     AND airlines.airline = flights.airline )
SELECT airlines.airline FROM airlines INNER JOIN flights ON airlines.airline = flights.airline INNER JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode IN ('APG', 'CVO') GROUP BY airlines.airline HAVING COUNT(DISTINCT airports.airportcode) = 2;
SELECT airlines.airline FROM airlines JOIN flights ON airlines.abbreviation = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'CVO' AND airlines.airline NOT IN (     SELECT airlines.airline     FROM airlines     JOIN flights ON airlines.abbreviation = flights.airline     JOIN airports ON flights.sourceairport = airports.airportcode     WHERE airports.airportcode = 'APG' )
SELECT airlines.airline FROM   airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE   airports.city = 'CVO'   AND airlines.airline NOT IN (     SELECT airlines.airline     FROM airlines     JOIN flights ON airlines.uid = flights.airline     JOIN airports ON flights.sourceairport = airports.airportcode     WHERE airports.city = 'APG'   )
SELECT airline FROM airlines WHERE airline IN (   SELECT airline   FROM flights   GROUP BY airline   HAVING COUNT(*) >= 10 )
SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10
SELECT airline FROM airlines WHERE airline IN ( SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200 )
SELECT airline FROM airlines WHERE uid IN (     SELECT airline     FROM flights     GROUP BY airline     HAVING COUNT(*) < 200 )
SELECT flightno FROM flights WHERE airline = "United Airlines"
SELECT flightno FROM flights WHERE airline = 'United Airlines'
SELECT flights.flightno FROM flights WHERE flights.sourceairport = "APG"
SELECT flights.flightno FROM flights WHERE flights.sourceairport = 'APG'
SELECT flights.flightno FROM   flights JOIN   airports ON flights.destairport = airports.airportcode WHERE   airports.airportname = "APG";
SELECT flightno FROM flights WHERE landing = 'APG'
SELECT flights.flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = "Aberdeen";
SELECT flights.flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'
SELECT flights.flightno FROM airports JOIN flights ON airports.airportcode = flights.destairport WHERE airports.city = 'Aberdeen'
SELECT flights.flightno FROM     flights JOIN     airports ON flights.destairport = airports.airportcode WHERE     airports.city = 'Aberdeen';
SELECT COUNT(*)  FROM flights  INNER JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.city = 'Aberdeen' OR airports.city = 'Abilene'
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.city = 'Aberdeen' OR airports.city = 'Abilene'
SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT destairport FROM flights) AND airportcode NOT IN (SELECT sourceairport FROM flights)
SELECT airportname, city, country, countryabbrev FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights) AND airportcode NOT IN (SELECT destairport FROM flights)
SELECT COUNT(*) FROM employee
SELECT COUNT(employee_id) FROM employee
SELECT name FROM employee ORDER BY age ASC;
SELECT employee.name FROM employee ORDER BY employee.age ASC;
SELECT city,      COUNT(*) as number_of_employees     FROM employee     GROUP BY city
SELECT city, COUNT(*) as num_employees     FROM employee     GROUP BY city;
SELECT city FROM employee GROUP BY city HAVING COUNT(*) > 1 AND age < 30
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1
SELECT location, COUNT(shop_id) AS number_of_shops FROM shop GROUP BY location;
SELECT shop.location, COUNT(shop.shop_id) AS number_of_shops FROM shop GROUP BY shop.location
SELECT shop.manager_name, shop.district FROM shop WHERE shop.number_products = (SELECT MAX(number_products) FROM shop)
SELECT shop.manager_name, shop.district FROM shop WHERE shop.number_products = (     SELECT MAX(number_products)     FROM shop )
SELECT MIN(number_products) AS min_number_products, MAX(number_products) AS max_number_products FROM shop
SELECT MIN(number_products) AS min_number_products, MAX(number_products) AS max_number_products FROM shop
SELECT shop.name, shop.location, shop.district FROM shop ORDER BY shop.number_products DESC
SELECT name, location, district     FROM         shop     ORDER BY         number_products DESC;
SELECT shop.name FROM shop WHERE shop.number_products > (     SELECT AVG(number_products)     FROM shop )
SELECT shop.name FROM shop WHERE shop.number_products > (SELECT AVG(number_products) FROM shop)
SELECT employee.name FROM     employee JOIN     evaluation ON employee.employee_id = evaluation.employee_id GROUP BY     employee.name ORDER BY     COUNT(evaluation.employee_id) DESC LIMIT 1;
SELECT employee.name     FROM     employee     INNER JOIN     evaluation     ON employee.employee_id = evaluation.employee_id     GROUP BY     employee.name     ORDER BY     COUNT(evaluation.year_awarded) DESC     LIMIT 1
SELECT employee.name FROM     employee JOIN     evaluation ON employee.employee_id = evaluation.employee_id WHERE     evaluation.bonus = (         SELECT             MAX(bonus)         FROM             evaluation     )
SELECT employee.name FROM     employee JOIN     evaluation ON employee.employee_id = evaluation.employee_id ORDER BY     evaluation.bonus DESC LIMIT 1;
SELECT employee.name FROM employee LEFT JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.employee_id IS NULL
SELECT name FROM   employee WHERE   employee_id NOT IN (SELECT employee_id FROM evaluation)
SELECT shop.name FROM     shop JOIN     hiring ON shop.shop_id = hiring.shop_id GROUP BY     shop.name ORDER BY     COUNT(hiring.employee_id) DESC LIMIT 1
SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name ORDER BY COUNT(hiring.employee_id) DESC LIMIT 1
SELECT shop.name FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.shop_id IS NULL;
SELECT shop.name FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.employee_id IS NULL
SELECT shop.name, COUNT(hiring.employee_id) AS number_of_employees FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name
SELECT shop.name, COUNT(hiring.employee_id) AS num_employees FROM shop INNER JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name
SELECT SUM(bonus) FROM evaluation
SELECT SUM(bonus) FROM evaluation
SELECT * FROM   hiring
SELECT hiring.shop_id, hiring.employee_id, hiring.start_from, hiring.is_full_time FROM hiring
SELECT district FROM     shop WHERE     number_products < 3000     AND district IN (         SELECT district         FROM shop         WHERE number_products > 10000     )
SELECT DISTINCT location FROM shop WHERE number_products < 3000 AND location IN (     SELECT location     FROM shop     WHERE number_products > 10000 )
SELECT COUNT(DISTINCT location) FROM shop
SELECT COUNT(DISTINCT location) FROM shop
SELECT COUNT(*) FROM documents;
SELECT COUNT(document_id) FROM documents
SELECT document_id, document_name, document_description FROM documents
SELECT document_id, document_name, document_description FROM documents
SELECT documents.document_name, documents.template_id FROM documents WHERE documents.document_description LIKE '%w%'
SELECT documents.document_name, documents.template_id FROM documents WHERE documents.document_description LIKE '%w%'
SELECT documents.document_id, documents.template_id, documents.document_description FROM documents WHERE documents.document_name = "Robbin CV"
SELECT documents.document_id, documents.template_id, documents.document_description FROM documents WHERE documents.document_name = 'Robbin CV';
SELECT COUNT(DISTINCT templates.template_id) FROM documents JOIN templates ON documents.template_id = templates.template_id
SELECT COUNT(DISTINCT templates.template_id) FROM templates INNER JOIN documents ON documents.template_id = templates.template_id
SELECT COUNT(*) FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'PPT'
SELECT COUNT(*) FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'PPT'
SELECT templates.template_id, COUNT(documents.document_id) as num_documents FROM templates LEFT JOIN documents ON documents.template_id = templates.template_id GROUP BY templates.template_id
SELECT template_id, COUNT(*) AS usage_count FROM documents GROUP BY template_id
SELECT templates.template_id, templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id GROUP BY templates.template_id ORDER BY COUNT(documents.template_id) DESC LIMIT 1;
SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1;
SELECT templates.template_id FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id HAVING COUNT(documents.document_id) > 1
SELECT templates.template_id FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id HAVING COUNT(documents.document_id) > 1;
SELECT templates.template_id FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id WHERE documents.template_id IS NULL
SELECT templates.template_id FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id WHERE documents.template_id IS NULL
SELECT COUNT(*) FROM templates
SELECT COUNT(template_id) FROM templates
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates
SELECT DISTINCT template_type_code FROM templates
SELECT DISTINCT template_type_code FROM ref_template_types
SELECT templates.template_id FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_code = 'PP' OR ref_template_types.template_type_code = 'PPT'
SELECT templates.template_id FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_code IN ('PP', 'PPT')
SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV'
SELECT COUNT(*) FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_code = 'CV'
SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.version_number > 5;
SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.version_number > 5
SELECT template_type_code,      COUNT(template_id) AS number_of_templates FROM      templates GROUP BY      template_type_code
SELECT ref_template_types.template_type_code,      COUNT(templates.template_id) AS num_templates     FROM ref_template_types     LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code     GROUP BY ref_template_types.template_type_code
SELECT template_type_code,      COUNT(template_id) AS num_templates     FROM templates     GROUP BY template_type_code     ORDER BY num_templates DESC     LIMIT 1
SELECT template_type_code     FROM     templates     GROUP BY     template_type_code     ORDER BY     COUNT(*) DESC     LIMIT 1
SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(*) < 3
SELECT template_type_code FROM     ref_template_types WHERE     template_type_code IN (         SELECT             template_type_code         FROM             templates         GROUP BY             template_type_code         HAVING             COUNT(*) < 3     )
SELECT MIN(version_number), template_type_code FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code
SELECT templates.template_type_code, MIN(templates.version_number) FROM templates GROUP BY templates.template_type_code;
SELECT templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = "Data base"
SELECT templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Data base'
SELECT documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK'
SELECT documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_code = 'BK'
SELECT ref_template_types.template_type_code,     COUNT(documents.document_id) AS num_documents FROM     ref_template_types LEFT JOIN     templates ON ref_template_types.template_type_code = templates.template_type_code LEFT JOIN     documents ON templates.template_id = documents.template_id GROUP BY     ref_template_types.template_type_code;
SELECT ref_template_types.template_type_code, COUNT(documents.template_id) AS num_documents FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code
SELECT templates.template_type_code FROM     templates JOIN     documents ON templates.template_id = documents.template_id GROUP BY     templates.template_type_code ORDER BY     COUNT(documents.document_id) DESC LIMIT 1
SELECT templates.template_type_code FROM     templates JOIN documents ON templates.template_id = documents.template_id GROUP BY     templates.template_type_code ORDER BY     COUNT(*) DESC LIMIT 1
SELECT ref_template_types.template_type_code     FROM     ref_template_types     LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code     LEFT JOIN documents ON templates.template_id = documents.template_id     WHERE     documents.document_id IS NULL;
SELECT ref_template_types.template_type_code FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code LEFT JOIN documents ON templates.template_id = documents.template_id WHERE documents.document_id IS NULL
SELECT template_type_code, template_type_description FROM ref_template_types
SELECT ref_template_types.template_type_code, ref_template_types.template_type_description FROM ref_template_types
SELECT ref_template_types.template_type_description FROM ref_template_types WHERE ref_template_types.template_type_code = "AD"
SELECT ref_template_types.template_type_description FROM ref_template_types WHERE ref_template_types.template_type_code = 'AD'
SELECT ref_template_types.template_type_code FROM ref_template_types WHERE ref_template_types.template_type_description = "Book"
SELECT ref_template_types.template_type_code FROM     ref_template_types WHERE     ref_template_types.template_type_description = "Book"
SELECT DISTINCT ref_template_types.template_type_description FROM   ref_template_types INNER JOIN templates ON ref_template_types.template_type_code = templates.template_type_code INNER JOIN documents ON templates.template_id = documents.template_id
SELECT DISTINCT templates.template_details FROM templates JOIN documents ON templates.template_id = documents.template_id
SELECT templates.template_id FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_description = "Presentation"
SELECT templates.template_id FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_description = 'Presentation'
SELECT COUNT(*) FROM paragraphs
SELECT COUNT(*) FROM paragraphs
SELECT COUNT(paragraph_id) FROM paragraphs WHERE document_id = (     SELECT document_id     FROM documents     WHERE document_name = 'Summer Show' )
SELECT COUNT(*)  FROM paragraphs  WHERE document_id = (     SELECT document_id      FROM documents      WHERE document_name = 'Summer Show' )
SELECT paragraph_text, paragraph_id, document_id, other_details FROM paragraphs WHERE paragraph_text = 'Korea';
SELECT paragraphs.paragraph_text, documents.other_details, templates.template_details FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id WHERE paragraphs.paragraph_text LIKE '%Korea%';
SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id = ( SELECT document_id FROM documents WHERE document_name = 'Welcome to NY' )
SELECT paragraphs.paragraph_id, paragraphs.paragraph_text FROM paragraphs INNER JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Welcome to NY'
SELECT paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = "Customer reviews"
SELECT paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Customer reviews'
SELECT documents.document_id, COUNT(paragraphs.paragraph_id) FROM documents LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id
SELECT documents.document_id,      COUNT(paragraphs.paragraph_id) AS paragraph_count     FROM documents     LEFT JOIN paragraphs ON paragraphs.document_id = documents.document_id     GROUP BY documents.document_id     ORDER BY documents.document_id;
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS paragraph_count FROM documents LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id;
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_text) AS paragraph_count FROM documents JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id, documents.document_name
SELECT documents.document_id     FROM documents     INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id     GROUP BY documents.document_id     HAVING COUNT(paragraphs.paragraph_id) >= 2
SELECT documents.document_id     FROM documents     JOIN paragraphs ON documents.document_id = paragraphs.document_id     GROUP BY documents.document_id     HAVING COUNT(paragraphs.paragraph_id) >= 2
SELECT documents.document_id, documents.document_name FROM documents JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id, documents.document_name HAVING COUNT(paragraphs.paragraph_id) = ( SELECT MAX(paragraph_count) FROM ( SELECT documents.document_id, COUNT(paragraphs.paragraph_id) as paragraph_count FROM documents JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id ) t )
SELECT documents.document_id, documents.document_name FROM documents JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1
SELECT documents.document_id FROM documents LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY COUNT(paragraphs.document_id) ASC LIMIT 1
SELECT documents.document_id FROM     documents JOIN     paragraphs ON paragraphs.document_id = documents.document_id GROUP BY     documents.document_id ORDER BY     COUNT(paragraphs.paragraph_id) LIMIT 1;
SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_text) BETWEEN 1 AND 2;
SELECT documents.document_id FROM documents INNER JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) BETWEEN 1 AND 2;
SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE paragraphs.paragraph_text = 'Brazil' OR paragraphs.paragraph_text = 'Ireland'
SELECT documents.document_id FROM documents JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text = 'Brazil' AND paragraphs.paragraph_text = 'Ireland'
SELECT COUNT(*)  FROM teacher
SELECT COUNT(teacher_id) FROM teacher
SELECT name FROM teacher ORDER BY age ASC
SELECT name FROM    teacher ORDER BY    age ASC
SELECT age, hometown FROM teacher
SELECT teacher.age, teacher.hometown FROM teacher
SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'
SELECT name     FROM     teacher     WHERE     hometown <> 'Little Lever Urban District'
SELECT name     FROM teacher     WHERE age = 32 OR age = 33;
SELECT name FROM teacher WHERE age = 32 OR age = 33
SELECT hometown FROM     teacher WHERE     age = (SELECT MIN(age) FROM teacher)
SELECT hometown FROM teacher WHERE age = (SELECT MIN(age) FROM teacher)
SELECT teacher.hometown, COUNT(teacher.teacher_id) as num_teachers FROM teacher GROUP BY teacher.hometown
SELECT hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY hometown
SELECT teacher.hometown FROM   teacher GROUP BY   teacher.hometown ORDER BY   COUNT(*) DESC LIMIT 1;
SELECT hometown,      COUNT(*) AS count     FROM teacher     GROUP BY hometown     ORDER BY count DESC     LIMIT 1
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) > 1
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) >= 2
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id
SELECT teacher.name, course.course FROM     teacher JOIN     course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN     course ON course_arrange.course_id = course.course_id
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC;
SELECT teacher.name, course.course     FROM      teacher     JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id     JOIN course ON course_arrange.course_id = course.course_id     ORDER BY teacher.name ASC;
SELECT teacher.name FROM     teacher JOIN     course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN     course ON course_arrange.course_id = course.course_id WHERE     course.course = 'math'
SELECT teacher.name FROM     teacher JOIN     course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN     course ON course_arrange.course_id = course.course_id WHERE     course.name = 'math';
SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name;
SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name
SELECT teacher.name FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.teacher_id HAVING COUNT(course_arrange.course_id) >= 2
SELECT teacher.name FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.teacher_id HAVING COUNT(course_arrange.course_id) >= 2
SELECT teacher.name FROM teacher LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.teacher_id IS NULL;
SELECT teacher.name FROM teacher LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.teacher_id IS NULL;
SELECT COUNT(*) FROM visitor WHERE age < 30;
SELECT visitor.name FROM visitor WHERE visitor.level_of_membership > 4 ORDER BY visitor.level_of_membership DESC
SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4
SELECT visitor.name, visitor.level_of_membership FROM visitor WHERE visitor.level_of_membership > 4 ORDER BY visitor.age DESC
SELECT museum_id, name     FROM     museum     WHERE     num_of_staff = (SELECT MAX(num_of_staff) FROM museum)
SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009
SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum'
SELECT museum.name FROM    museum WHERE    museum.num_of_staff > (       SELECT          MIN(m.num_of_staff)       FROM          museum m       WHERE          m.open_year > 2010    )
SELECT visitor.id, visitor.name, visitor.age     FROM     visitor     INNER JOIN visit ON visitor.id = visit.visitor_id     GROUP BY     visitor.id, visitor.name, visitor.age     HAVING     COUNT(visit.museum_id) > 1;
SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor INNER JOIN ( SELECT visitor_id, SUM(total_spent) AS total_spent FROM visit GROUP BY visitor_id ) AS visitor_spending ON visitor.id = visitor_spending.visitor_id WHERE visitor_spending.total_spent = (SELECT MAX(total_spent) FROM visitor_spending)
SELECT museum_id, name     FROM      museum     WHERE      museum_id = (       SELECT        museum_id       FROM        visit       GROUP BY        museum_id       ORDER BY        COUNT(*) DESC       LIMIT 1      )
SELECT museum.name FROM museum WHERE museum.museum_id NOT IN (     SELECT visit.museum_id     FROM visit )
SELECT visitor.name, visitor.age FROM     visitor JOIN     visit ON visit.visitor_id = visitor.id GROUP BY     visit.visitor_id HAVING     MAX(visit.num_of_ticket) = (         SELECT             MAX(num_of_ticket)         FROM             visit     )
SELECT AVG(num_of_ticket) as average_tickets,      MAX(num_of_ticket) as maximum_tickets FROM visit
SELECT SUM(total_spent) FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership = 1
SELECT visitor.name FROM     visitor INNER JOIN visit ON visit.visitor_id = visitor.id INNER JOIN museum ON museum.museum_id = visit.museum_id WHERE     museum.open_year < 2009     AND     museum.open_year > 2011
SELECT COUNT(DISTINCT visitor_id) FROM visit WHERE museum_id IN (     SELECT museum_id     FROM museum     WHERE open_year <= 2010 )
SELECT COUNT(*) FROM museum WHERE open_year > 2013 OR open_year < 2008
SELECT COUNT(*) AS total_players FROM players;
SELECT COUNT(*)  FROM players
SELECT COUNT(*)  FROM matches
SELECT COUNT(*)  FROM matches
SELECT players.first_name, players.birth_date FROM players WHERE players.player_id IN (     SELECT     players.player_id     FROM     players     WHERE     players.player_ioc = 'USA' )
SELECT players.first_name, players.birth_date FROM players WHERE players.country = 'USA'
SELECT AVG(loser_age) as average_loser_age, AVG(winner_age) as average_winner_age FROM matches
SELECT AVG(loser_age) as average_loser_age,     AVG(winner_age) as average_winner_age FROM     matches
SELECT AVG(rankings.ranking)  FROM      matches      INNER JOIN players ON matches.winner_id = players.player_id      INNER JOIN rankings ON players.player_id = rankings.player_id
SELECT AVG(rankings.ranking) FROM     matches     INNER JOIN rankings ON matches.winner_id = rankings.player_id
SELECT MAX(loser_rank) FROM matches
SELECT MAX(loser_rank) FROM matches
SELECT COUNT(DISTINCT country_code)  FROM players
SELECT COUNT(DISTINCT country_code) FROM players
SELECT COUNT(DISTINCT loser_name) FROM matches
SELECT COUNT(DISTINCT loser_name) FROM matches
SELECT tourney_name     FROM matches     GROUP BY tourney_name     HAVING COUNT(*) > 10;
SELECT tourney_name     FROM      matches     GROUP BY      tourney_name     HAVING      COUNT(*) > 10
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.year = 2013 OR matches.year = 2016 GROUP BY players.first_name, players.last_name HAVING COUNT(DISTINCT matches.year) = 2
SELECT players.first_name, players.last_name FROM players INNER JOIN matches ON matches.winner_id = players.player_id WHERE matches.year = 2013 AND players.player_id IN ( SELECT players.player_id FROM players INNER JOIN matches ON matches.winner_id = players.player_id WHERE matches.year = 2016 )
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016)
SELECT COUNT(*)  FROM matches  WHERE year = 2013 OR year = 2016
SELECT players.country_code, players.first_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND EXISTS ( SELECT 1 FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open' )
SELECT players.first_name, players.country_code FROM matches INNER JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND matches.tourney_name = 'Australian Open'
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.ranking_date ASC LIMIT 1
SELECT players.first_name, players.country_code FROM players INNER JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.ranking_date ASC LIMIT 1;
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name || ' ' || last_name FROM players ORDER BY birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name || ' ' || players.last_name FROM players WHERE players.hand = 'left' ORDER BY players.birth_date;
SELECT players.first_name, players.country_code FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id GROUP BY players.player_id ORDER BY COUNT(DISTINCT matches.tourney_id) DESC LIMIT 1;
SELECT players.first_name, players.country_code FROM    players INNER JOIN    rankings ON players.player_id = rankings.player_id ORDER BY    rankings.tours DESC LIMIT 1
SELECT year FROM     matches GROUP BY     year ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT year,      COUNT(*) as num_matches     FROM      matches     GROUP BY      year     ORDER BY      num_matches DESC     LIMIT 1
SELECT matches.winner_name,      matches.winner_rank_points     FROM      matches     GROUP BY      matches.winner_id     ORDER BY      COUNT(matches.winner_id) DESC     LIMIT 1
SELECT matches.winner_name,      matches.winner_rank_points FROM      matches GROUP BY      matches.winner_name ORDER BY      COUNT(matches.winner_name) DESC LIMIT 1
SELECT matches.winner_name FROM     matches JOIN     rankings ON matches.winner_id = rankings.player_id WHERE     matches.tourney_name = 'Australian Open' ORDER BY     rankings.ranking_points DESC LIMIT 1;
SELECT matches.winner_name FROM   matches WHERE   tourney_name = "Australian Open" ORDER BY   winner_rank_points DESC LIMIT 1;
SELECT matches.winner_name, matches.loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT players.first_name AS winner_name, players2.first_name AS loser_name FROM matches JOIN players ON matches.winner_id = players.player_id JOIN players AS players2 ON matches.loser_id = players2.player_id WHERE matches.minutes = ( SELECT MAX(minutes) FROM matches )
SELECT players.first_name, AVG(rankings.ranking) as average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name
SELECT players.first_name, AVG(rankings.ranking) FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name
SELECT players.first_name, sum(rankings.ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
SELECT players.country_code, COUNT(players.player_id) FROM players GROUP BY players.country_code
SELECT players.country_code, COUNT(players.player_id) FROM players GROUP BY players.country_code
SELECT players.country_code FROM players GROUP BY players.country_code HAVING COUNT(players.country_code) = (     SELECT MAX(player_count)     FROM (         SELECT COUNT(players.country_code) as player_count         FROM players         GROUP BY players.country_code     ) )
SELECT country_code     FROM     players     GROUP BY country_code     HAVING count(*) = (         SELECT max(count(*))         FROM players         GROUP BY country_code     )     LIMIT 1;
SELECT players.country_code FROM players GROUP BY players.country_code HAVING COUNT(players.player_id) > 50
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50
SELECT ranking_date,      SUM(tours) as total_tours     FROM rankings     GROUP BY ranking_date
SELECT ranking_date, COUNT(tours) AS total_tours FROM rankings GROUP BY ranking_date
SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year;
SELECT strftime('%Y', tourney_date) as year,  count(*) as match_count FROM matches GROUP BY year;
SELECT matches.winner_name, matches.winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY matches.winner_age ASC LIMIT 3
SELECT winner_name, winner_rank     FROM      matches     JOIN      players ON matches.winner_id = players.player_id     ORDER BY      birth_date ASC     LIMIT 3
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'
SELECT COUNT(DISTINCT matches.winner_id)  FROM     matches JOIN     players ON matches.winner_id = players.player_id WHERE     matches.winner_hand = 'L'     AND matches.tourney_name = 'WTA Championships'
SELECT players.first_name, players.country_code, players.birth_date FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking_points = ( SELECT MAX(rankings.ranking_points) FROM rankings )
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.winner_rank_points DESC LIMIT 1;
SELECT hand,      COUNT(player_id) as num_players     FROM players     GROUP BY hand
SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'
SELECT name, tonnage FROM     ship ORDER BY     name DESC
SELECT battle.name, battle.date, battle.result FROM battle
SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll FROM death;
SELECT AVG(injured)  FROM death
SELECT death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'
SELECT battle.id, battle.name FROM battle INNER JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.ship_type = 'Brig'
SELECT battle.id, battle.name FROM battle INNER JOIN ship ON ship.lost_in_battle = battle.id INNER JOIN death ON death.caused_by_ship_id = ship.id GROUP BY battle.id, battle.name HAVING COUNT(death.id) > 10
SELECT ship.id, ship.name FROM ship INNER JOIN death ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1
SELECT DISTINCT battle.name FROM     battle JOIN     ship ON ship.lost_in_battle = battle.id JOIN     commander ON commander.id = ship.commander_id WHERE     commander.name = 'Kaloyan'     AND battle.id IN (         SELECT             lost_in_battle         FROM             ship         JOIN             commander ON commander.id = ship.commander_id         WHERE             commander.name = 'Baldwin I'     )
SELECT COUNT(DISTINCT result) FROM battle
SELECT COUNT(*) FROM battle WHERE id NOT IN (   SELECT lost_in_battle FROM ship WHERE tonnage = '225' )
SELECT battle.name, battle.date     FROM     battle     JOIN     ship ON ship.lost_in_battle = battle.id     WHERE     ship.name = 'Lettice' OR ship.name = 'HMS Atalanta'
SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.location = 'English Channel'
SELECT death.note FROM death WHERE death.note LIKE '%East%'
SELECT addresses.line_1, addresses.line_2 FROM addresses
SELECT addresses.line_1,     addresses.line_2 FROM     addresses
SELECT COUNT(*) FROM courses
SELECT COUNT(*) FROM courses;
SELECT courses.course_description FROM     courses WHERE     courses.course_name = 'math'
SELECT course_description FROM   courses WHERE   course_name = 'math';
SELECT zip_postcode     FROM      addresses     WHERE      city = 'Port Chelsea'
SELECT zip_postcode     FROM     addresses     WHERE     city = 'Port Chelsea';
SELECT departments.department_id, departments.department_name FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_id, departments.department_name HAVING COUNT(degree_programs.degree_program_id) = (   SELECT     MAX(degree_count)   FROM     (SELECT       department_id,       COUNT(degree_program_id) as degree_count     FROM       degree_programs     GROUP BY       department_id) subquery )
SELECT departments.department_id, departments.department_name FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_id ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT departments.department_id) FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id;
SELECT COUNT(DISTINCT department_id) FROM degree_programs
SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs;
SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs
SELECT COUNT(degree_program_id) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = "engineering")
SELECT COUNT(degree_program_id) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering')
SELECT sections.section_name, sections.section_description FROM sections
SELECT section_name, section_description FROM sections
SELECT courses.course_id,      courses.course_name      FROM courses      WHERE courses.course_id IN (      SELECT      sections.course_id      FROM sections      GROUP BY sections.course_id      HAVING COUNT(sections.section_id) <= 2      )
SELECT course_id,      course_name     FROM      courses     WHERE      course_id IN (       SELECT        course_id       FROM        sections       GROUP BY        course_id       HAVING        COUNT(section_id) < 2      )
SELECT section_name FROM sections ORDER BY section_name DESC;
SELECT section_name FROM   sections ORDER BY   section_name DESC
SELECT semesters.semester_id,      semesters.semester_name     FROM      semesters     INNER JOIN       student_enrolment ON semesters.semester_id = student_enrolment.semester_id     GROUP BY      semesters.semester_id,      semesters.semester_name     ORDER BY      COUNT(student_enrolment.student_id) DESC     LIMIT 1;
SELECT semesters.semester_id, semesters.semester_name     FROM semesters     JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id     GROUP BY semesters.semester_id     ORDER BY COUNT(student_enrolment.student_id) DESC     LIMIT 1;
SELECT departments.department_description     FROM     departments     WHERE     departments.department_name LIKE '%the computer%'
SELECT departments.department_description FROM departments WHERE departments.department_name LIKE '%computer%'
SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.first_name, students.middle_name, students.last_name, students.student_id HAVING COUNT(student_enrolment.degree_program_id) = 2
SELECT students.student_id, students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2 AND COUNT(DISTINCT student_enrolment.semester_id) = 1
SELECT students.first_name, students.middle_name, students.last_name FROM student_enrolment JOIN students ON student_enrolment.student_id = students.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Bachelor'
SELECT first_name, middle_name, last_name FROM students WHERE student_id IN ( SELECT student_id FROM degree_programs WHERE degree_summary_name = "Bachelors" )
SELECT degree_programs.degree_summary_name     FROM      degree_programs     INNER JOIN student_enrolment ON student_enrolment.degree_program_id = degree_programs.degree_program_id     GROUP BY      degree_programs.degree_summary_name     ORDER BY      COUNT(*) DESC     LIMIT 1;
SELECT degree_summary_name FROM     degree_programs JOIN     student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY     degree_summary_name ORDER BY     COUNT(student_enrolment.student_id) DESC LIMIT 1;
SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id IN (     SELECT degree_program_id     FROM student_enrollment     GROUP BY degree_program_id     ORDER BY COUNT(*) DESC     LIMIT 1 )
SELECT degree_program_id, degree_summary_name     FROM      degree_programs     WHERE      degree_program_id = (        SELECT          degree_program_id        FROM          student_enrolment        GROUP BY          degree_program_id        ORDER BY          COUNT(*) DESC        LIMIT 1      )
SELECT student_enrolment.student_id, students.first_name, students.middle_name, students.last_name, COUNT(student_enrolment.degree_program_id) AS number_of_enrollments FROM student_enrolment JOIN students ON student_enrolment.student_id = students.student_id GROUP BY student_enrolment.student_id ORDER BY number_of_enrollments DESC LIMIT 1;
SELECT students.first_name, students.middle_name, students.last_name, students.student_id, COUNT(student_enrolment.student_enrolment_id) AS enrollment_count FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY enrollment_count DESC LIMIT 1
SELECT semester_name FROM     semesters WHERE     semester_id NOT IN (         SELECT             semester_id         FROM             student_enrolment     )
SELECT semesters.semester_name FROM     semesters LEFT JOIN     student_enrolment ON semesters.semester_id = student_enrolment.semester_id WHERE     student_enrolment.student_id IS NULL;
SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_enrolment)
SELECT course_name FROM courses INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id
SELECT courses.course_name FROM     courses JOIN     student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY     courses.course_name ORDER BY     COUNT(*) DESC LIMIT 1
SELECT courses.course_name FROM     courses INNER JOIN     student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY     courses.course_name ORDER BY     COUNT(student_enrolment_courses.student_enrolment_id) DESC LIMIT 1
SELECT students.last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE addresses.state_province_county = 'North Carolina' AND students.student_id NOT IN (     SELECT student_id     FROM student_enrolment )
SELECT students.last_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id LEFT JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE addresses.state_province_county = 'North Carolina' AND student_enrolment.student_id IS NULL
SELECT transcripts.transcript_date, transcripts.transcript_id     FROM     transcripts     INNER JOIN transcript_contents ON transcript_contents.transcript_id = transcripts.transcript_id     GROUP BY transcripts.transcript_id     HAVING COUNT(transcript_contents.student_course_id) >= 2
SELECT transcripts.transcript_date,      transcripts.transcript_id     FROM      transcripts     JOIN transcript_contents      ON transcripts.transcript_id = transcript_contents.transcript_id     JOIN student_enrolment_courses      ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id     GROUP BY      transcripts.transcript_id     HAVING      COUNT(DISTINCT student_enrolment_courses.course_id) >= 2;
SELECT students.cell_mobile_number FROM students WHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward'
SELECT students.cell_mobile_number FROM students WHERE students.first_name = "Timmothy" AND students.last_name = "Ward";
SELECT students.first_name, students.middle_name, students.last_name FROM students ORDER BY students.date_first_registered LIMIT 1
SELECT students.first_name, students.middle_name, students.last_name FROM students ORDER BY students.date_first_registered ASC LIMIT 1;
SELECT first_name, middle_name, last_name FROM     students WHERE     date_first_registered = (SELECT MIN(date_first_registered) FROM students)
SELECT first_name, middle_name, last_name FROM students ORDER BY graduation_date ASC LIMIT 1;
SELECT students.first_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE students.permanent_address_id <> students.current_address_id
SELECT students.first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE students.permanent_address_id != students.current_address_id;
SELECT addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3 FROM students INNER JOIN addresses ON students.current_address_id = addresses.address_id GROUP BY addresses.address_id ORDER BY COUNT(students.student_id) DESC LIMIT 1
SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses JOIN students ON students.permanent_address_id = addresses.address_id GROUP BY addresses.address_id ORDER BY COUNT(students.student_id) DESC LIMIT 1;
SELECT AVG(transcript_date) AS average_transcript_date     FROM transcripts
SELECT AVG(transcript_date) FROM transcripts
SELECT transcript_date, other_details     FROM     transcripts     ORDER BY     transcript_date ASC     LIMIT 1;
SELECT MIN(transcript_date) AS earliest_date, other_details FROM transcripts GROUP BY transcript_date ORDER BY transcript_date ASC LIMIT 1;
SELECT COUNT(DISTINCT transcript_id) FROM transcripts
SELECT COUNT(DISTINCT transcript_id) FROM transcripts
SELECT MAX(transcript_date) FROM transcripts
SELECT transcripts.transcript_date FROM     transcripts ORDER BY     transcripts.transcript_date DESC LIMIT 1;
SELECT student_course_id, COUNT(*) AS enrollment_count FROM transcript_contents GROUP BY student_course_id ORDER BY enrollment_count DESC LIMIT 1;
SELECT student_enrolment_courses.course_id,      COUNT(transcripts.transcript_id) AS course_count FROM      student_enrolment_courses INNER JOIN transcript_contents ON student_enrolment_courses.student_course_id = transcript_contents.student_course_id INNER JOIN transcripts ON transcript_contents.transcript_id = transcripts.transcript_id GROUP BY      student_enrolment_courses.course_id HAVING      course_count = (SELECT MAX(course_count) FROM (SELECT COUNT(transcripts.transcript_id) AS course_count FROM student_enrolment_courses INNER JOIN transcript_contents ON student_enrolment_courses.student_course_id = transcript_contents.student_course_id INNER JOIN transcripts ON transcript_contents.transcript_id = transcripts.transcript_id GROUP BY student_enrolment_courses.course_id))
SELECT transcript_date, transcript_id     FROM      transcripts     WHERE      transcript_id IN (          SELECT transcript_id          FROM transcript_contents          GROUP BY transcript_id          ORDER BY COUNT(*) ASC          LIMIT 1      )
SELECT transcript_date, transcript_id     FROM      transcripts     WHERE      transcript_id = (         SELECT          transcript_id         FROM          transcripts         GROUP BY          transcript_id         ORDER BY          COUNT(*) ASC         LIMIT 1      )
SELECT semesters.semester_name     FROM     semesters     INNER JOIN students ON semesters.semester_id = students.date_first_registered     INNER JOIN degree_programs ON students.degree_program_id = degree_programs.degree_program_id     WHERE     degree_programs.degree_summary_name = 'Master' OR degree_programs.degree_summary_name = 'Bachelor'
SELECT semesters.semester_id     FROM     semesters     INNER JOIN student_enrolment ON student_enrolment.semester_id = semesters.semester_id     INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id     WHERE     degree_programs.department_id IN (SELECT department_id FROM degree_programs WHERE degree_program_id = 'Masters')     AND degree_programs.department_id IN (SELECT department_id FROM degree_programs WHERE degree_program_id = 'Bachelors');
SELECT COUNT(DISTINCT students.current_address_id) FROM students
SELECT addresses.line_1, addresses.line_2, addresses.line_3, addresses.city, addresses.zip_postcode, addresses.state_province_county, addresses.country FROM addresses JOIN students ON addresses.address_id = students.current_address_id OR addresses.address_id = students.permanent_address_id
SELECT students.last_name,     students.first_name,     students.middle_name,     students.email_address,     students.cell_mobile_number,     students.other_student_details,     students.student_id FROM     students ORDER BY     students.last_name DESC;
SELECT last_name, first_name, middle_name, student_id, current_address_id, permanent_address_id, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM     students ORDER BY     last_name DESC;
SELECT * FROM sections WHERE section_name = 'h'
SELECT sections.section_description FROM     sections WHERE     sections.section_name = 'h';
SELECT students.first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = 'Haiti' OR students.cell_mobile_number = '09700166582'
SELECT students.first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = 'Haiti' OR students.cell_mobile_number = '09700166582'
SELECT title     FROM      cartoon     ORDER BY      title ASC;
SELECT title FROM cartoon ORDER BY title ASC
SELECT cartoon.title FROM   cartoon WHERE   cartoon.directed_by = "Ben Jones";
SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by = 'Ben Jones'
SELECT COUNT(*) FROM     cartoon WHERE     written_by = "Joseph Kuhr"
SELECT COUNT(*) FROM     cartoon WHERE     written_by = 'Joseph Kuhr'
SELECT cartoon.title, cartoon.directed_by FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id ORDER BY cartoon.original_air_date;
SELECT cartoon.title, cartoon.directed_by     FROM     cartoon     ORDER BY     cartoon.original_air_date;
SELECT cartoon.title FROM   cartoon WHERE   cartoon.directed_by = "Ben Jones" OR cartoon.directed_by = "Brandon Vietti"
SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Brandon Vietti'
SELECT country,      COUNT(id) AS num_channels FROM      tv_channel GROUP BY      country ORDER BY      num_channels DESC LIMIT 1;
SELECT tv_channel.country,      COUNT(tv_channel.id) AS num_channels      FROM tv_channel      GROUP BY tv_channel.country      ORDER BY num_channels DESC      LIMIT 1;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel
SELECT content FROM tv_channel WHERE series_name = "Sky Radio"
SELECT tv_channel.content FROM tv_channel JOIN tv_series ON tv_series.channel = tv_channel.id WHERE tv_series.series_name = 'Sky Radio'
SELECT tv_channel.package_option FROM tv_channel JOIN tv_series ON tv_series.channel = tv_channel.id WHERE tv_series.series_name = "Sky Radio"
SELECT tv_channel.package_option FROM tv_channel INNER JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_series.series_name = 'Sky Radio';
SELECT COUNT(*) FROM tv_channel WHERE language = 'English'
SELECT COUNT(DISTINCT id) FROM tv_channel WHERE language = 'English'
SELECT tv_channel.language, count(tv_channel.language) as num_channels FROM tv_channel GROUP BY tv_channel.language ORDER BY num_channels LIMIT 1;
SELECT language, COUNT(DISTINCT tv_channel.id) AS num_channels FROM tv_channel GROUP BY language ORDER BY num_channels LIMIT 1;
SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language
SELECT language,      COUNT(*) as number_of_channels FROM     tv_channel GROUP BY     language;
SELECT tv_channel.series_name FROM     tv_channel JOIN     cartoon ON cartoon.channel = tv_channel.id WHERE     cartoon.title = "The Rise of the Blue Beetle!";
SELECT tv_channel.series_name FROM     tv_channel JOIN     cartoon ON cartoon.channel = tv_channel.id WHERE     cartoon.title = "The Rise of the Blue Beetle"
SELECT cartoon.title FROM   cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id JOIN tv_series ON tv_channel.id = tv_series.channel WHERE   tv_channel.series_name = "Sky Radio"
SELECT cartoon.title FROM   cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE   tv_channel.series_name = "Sky Radio"
SELECT tv_series.episode FROM tv_series ORDER BY tv_series.rating ASC
SELECT episode FROM tv_series ORDER BY rating DESC
SELECT tv_series.episode, tv_series.rating     FROM     tv_series     ORDER BY     tv_series.rating DESC     LIMIT 3;
SELECT tv_series.episode, tv_series.rating FROM     tv_series ORDER BY     rating DESC LIMIT 3
SELECT MIN(share) AS minimum_share, MAX(share) AS maximum_share FROM tv_series
SELECT MAX(share), MIN(share) FROM tv_series
SELECT tv_series.air_date     FROM     tv_series     WHERE     tv_series.episode = "A Love of a Lifetime"
SELECT tv_series.air_date FROM tv_series WHERE tv_series.episode = "A Love of a Lifetime"
SELECT tv_series.weekly_rank     FROM      tv_series     WHERE      tv_series.episode = "A Love of a Lifetime"
SELECT weekly_rank FROM tv_series WHERE episode = "A Love of a Lifetime"
SELECT tv_channel.series_name FROM     tv_channel JOIN     tv_series ON tv_channel.id = tv_series.channel WHERE     tv_series.episode = "A Love of a Lifetime"
SELECT tv_series.series_name FROM tv_series WHERE tv_series.episode = "A Love of a Lifetime"
SELECT tv_series.episode FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = "Sky Radio"
SELECT episode FROM tv_series WHERE channel = (SELECT id FROM tv_channel WHERE series_name = "Sky Radio")
SELECT cartoon.directed_by,      COUNT(*) AS num_cartoons     FROM      cartoon     GROUP BY      cartoon.directed_by
SELECT directed_by,      COUNT(*) AS number_of_cartoons     FROM cartoon     GROUP BY directed_by
SELECT production_code, channel     FROM      cartoon     ORDER BY      original_air_date DESC     LIMIT 1
SELECT cartoon.production_code, cartoon.channel FROM     cartoon INNER JOIN     tv_channel ON     cartoon.channel = tv_channel.id ORDER BY     cartoon.original_air_date DESC LIMIT 1
SELECT tv_channel.package_option, tv_series.title FROM tv_channel JOIN tv_series ON tv_series.channel = tv_channel.id WHERE tv_channel.hight_definition_tv = 1
SELECT tv_channel.package_option, tv_channel.series_name FROM tv_channel WHERE tv_channel.hight_definition_tv = 1
SELECT tv_channel.country FROM     tv_channel JOIN     cartoon ON cartoon.channel = tv_channel.id WHERE     cartoon.written_by = 'Todd Casey'
SELECT tv_channel.country FROM tv_channel JOIN tv_series ON tv_series.channel = tv_channel.id JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey'
SELECT tv_channel.country FROM tv_channel WHERE tv_channel.country NOT IN ( SELECT tv_channel.country FROM tv_channel INNER JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey' )
SELECT tv_channel.country FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT tv_channel.id FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey' )
SELECT tv_channel.series_name, tv_channel.country FROM cartoon INNER JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = 'Ben Jones' AND cartoon.directed_by = 'Michael Chang'
SELECT tv_channel.series_name, tv_channel.country FROM   cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE   cartoon.directed_by = 'Ben Jones'   OR cartoon.directed_by = 'Michael Chang'
SELECT tv_channel.pixel_aspect_ratio_par, tv_channel.nation FROM tv_channel WHERE tv_channel.language != 'English'
SELECT tv_channel.pixel_aspect_ratio_par, tv_channel.country FROM tv_channel WHERE tv_channel.language <> 'English'
SELECT tv_channel.id FROM tv_channel WHERE country IN ( SELECT country FROM tv_channel GROUP BY country HAVING COUNT(country) > 2 )
SELECT tv_channel.id     FROM     tv_channel     GROUP BY tv_channel.id     HAVING COUNT(*) > 2
SELECT tv_channel.id FROM tv_channel LEFT JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by <> 'Ben Jones' OR cartoon.directed_by IS NULL
SELECT tv_channel.id FROM tv_channel LEFT JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by <> 'Ben Jones' OR cartoon.directed_by IS NULL
SELECT tv_channel.package_option FROM     tv_channel WHERE     tv_channel.id NOT IN (SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by = 'Ben Jones')
SELECT tv_channel.package_option FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by = "Ben Jones" )
SELECT COUNT(*)  FROM     poker_player
SELECT COUNT(poker_player_id) FROM poker_player
SELECT earnings FROM     poker_player ORDER BY     earnings DESC
SELECT earnings     FROM      poker_player     ORDER BY      earnings DESC
SELECT final_table_made, best_finish FROM poker_player
SELECT final_table_made, best_finish FROM poker_player
SELECT AVG(earnings) FROM poker_player
SELECT AVG(earnings) FROM poker_player
SELECT money_rank FROM     poker_player WHERE     earnings = (SELECT MAX(earnings) FROM poker_player)
SELECT money_rank     FROM      poker_player     WHERE      earnings = (         SELECT          MAX(earnings)         FROM          poker_player      )
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000;
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made ASC
SELECT people.name FROM poker_player INNER JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made ASC
SELECT people.birth_date FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings = ( SELECT MIN(earnings) FROM poker_player )
SELECT people.birth_date FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings ASC LIMIT 1;
SELECT poker_player.money_rank FROM     poker_player JOIN     people ON poker_player.people_id = people.people_id ORDER BY     people.height DESC LIMIT 1
SELECT poker_player.money_rank     FROM     poker_player     INNER JOIN people ON poker_player.people_id = people.people_id     ORDER BY     people.height DESC     LIMIT 1
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE people.height > 200;
SELECT AVG(earnings) FROM     poker_player JOIN     people ON poker_player.people_id = people.people_id WHERE     people.height > 200;
SELECT people.name FROM     poker_player     INNER JOIN people ON poker_player.people_id = people.people_id ORDER BY     poker_player.earnings DESC
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC
SELECT nationality,      COUNT(*) AS number_of_people     FROM people     GROUP BY nationality
SELECT nationality,      COUNT(*) AS count FROM     people GROUP BY     nationality
SELECT nationality,      COUNT(*) AS count     FROM      people     GROUP BY      nationality     ORDER BY      count DESC     LIMIT 1;
SELECT nationality     FROM     people     GROUP BY     nationality     ORDER BY     COUNT(*) DESC     LIMIT 1
SELECT nationality FROM     people GROUP BY     nationality HAVING     COUNT(*) >= 2
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2
SELECT people.name, people.birth_date FROM people ORDER BY people.name ASC
SELECT name, birth_date FROM people ORDER BY name ASC
SELECT name FROM people WHERE nationality != 'Russia'
SELECT name     FROM     people     WHERE     nationality != 'Russia'
SELECT people.name FROM people LEFT JOIN poker_player ON poker_player.people_id = people.people_id WHERE poker_player.people_id IS NULL
SELECT people.name FROM people LEFT JOIN poker_player ON people.people_id = poker_player.people_id WHERE poker_player.people_id IS NULL
SELECT COUNT(DISTINCT nationality) FROM people
SELECT COUNT(DISTINCT nationality) FROM people
SELECT COUNT(DISTINCT state) FROM area_code_state
SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC
SELECT vote_id, phone_number, state FROM votes
SELECT MAX(area_code), MIN(area_code) FROM area_code_state;
SELECT MAX(created) FROM votes INNER JOIN area_code_state ON votes.state = area_code_state.state WHERE area_code_state.state = 'CA'
SELECT contestant_name FROM contestants WHERE contestant_name <> 'Jessie Alloway'
SELECT DISTINCT state, created FROM votes
SELECT contestants.contestant_number, contestants.contestant_name FROM contestants INNER JOIN votes ON votes.contestant_number = contestants.contestant_number GROUP BY contestants.contestant_number, contestants.contestant_name HAVING COUNT(votes.contestant_number) >= 2
SELECT contestants.contestant_number, contestants.contestant_name FROM contestants JOIN votes ON votes.contestant_number = contestants.contestant_number GROUP BY contestants.contestant_number, contestants.contestant_name ORDER BY COUNT(votes.vote_id) ASC LIMIT 1
SELECT COUNT(*) FROM     votes WHERE     state = 'NY' OR state = 'CA'
SELECT COUNT(*)  FROM contestants  WHERE contestant_number NOT IN (SELECT contestant_number FROM votes)
SELECT area_code_state.area_code FROM     area_code_state JOIN     votes ON votes.state = area_code_state.state GROUP BY     area_code_state.area_code ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT votes.created, votes.state, votes.phone_number FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number WHERE contestants.contestant_name = 'Tabatha Gehling'
SELECT area_code_state.area_code FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number JOIN area_code_state ON votes.state = area_code_state.state WHERE contestants.contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling') AND votes.state IN (SELECT state FROM votes WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Kelly Clauss')) GROUP BY area_code_state.area_code HAVING COUNT(DISTINCT votes.state) > 1;
SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'
SELECT country.name FROM country WHERE country.indepyear > 1950
SELECT name     FROM     country     WHERE     indepyear > 1950
SELECT COUNT(*) FROM country WHERE governmentform = 'Republic';
SELECT COUNT(*)  FROM     country  WHERE     governmentform = 'Republic'
SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean'
SELECT SUM(surfacearea) FROM country WHERE continent = 'Carribean'
SELECT continent     FROM     country     WHERE     name = 'Anguilla';
SELECT country.continent FROM country WHERE country.name = 'Anguilla'
SELECT country.region FROM city JOIN country ON city.countrycode = country.code WHERE city.name = 'Kabul'
SELECT district     FROM     city     WHERE     name = "Kabul";
SELECT language FROM countrylanguage WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1;
SELECT language FROM     countrylanguage WHERE     countrycode = 'ABW'     AND isofficial = 'T'
SELECT country.population, country.lifeexpectancy  FROM    country  WHERE    country.name = 'Brazil'
SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'
SELECT region, population FROM country WHERE name = 'Angola'
SELECT region, population FROM country WHERE name = 'Angola';
SELECT AVG(lifeexpectancy) FROM     country WHERE     region = 'Central Africa'
SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Central Africa'
SELECT country.name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy LIMIT 1
SELECT country.name FROM     country WHERE     continent = 'Asia' ORDER BY     lifeexpectancy ASC LIMIT 1;
SELECT SUM(population) AS total_population, MAX(GNP) AS maximum_GNP FROM country WHERE continent = 'Asia'
SELECT SUM(city.population), MAX(country.gnp)  FROM country  JOIN city ON city.countrycode = country.code  WHERE country.continent = 'Asia'
SELECT AVG(lifeexpectancy) FROM     country WHERE     continent = 'Africa'     AND governmentform = 'Republic'
SELECT AVG(lifeexpectancy) FROM     country WHERE     continent = 'Africa'     AND governmentform = 'Republic'
SELECT SUM(country.surfacearea) FROM country WHERE country.continent = 'Asia' OR country.continent = 'Europe'
SELECT SUM(surfacearea) FROM     country WHERE     continent = 'Asia' OR continent = 'Europe'
SELECT SUM(population)     FROM     city     WHERE     district = 'Gelderland'
SELECT SUM(city.population) FROM city WHERE city.district = 'Gelderland'
SELECT AVG(gnp), SUM(population) FROM country WHERE governmentform = 'US territory'
SELECT AVG(gnp) as mean_gnp, SUM(population) as total_population FROM country WHERE governmentform = 'US territory'
SELECT COUNT(DISTINCT language)     FROM countrylanguage
SELECT COUNT(DISTINCT language) FROM countrylanguage
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW'
SELECT COUNT(language) FROM countrylanguage WHERE countrycode = 'ABW'
SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T';
SELECT COUNT(language) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T'
SELECT country.name FROM country JOIN ( SELECT countrycode, COUNT(*) as language_count FROM countrylanguage GROUP BY countrycode ) AS c ON country.code = c.countrycode ORDER BY c.language_count DESC LIMIT 1
SELECT country.name FROM country JOIN countrylanguage ON countrylanguage.countrycode = country.code GROUP BY country.name ORDER BY COUNT(DISTINCT countrylanguage.language) DESC LIMIT 1
SELECT continent FROM     country GROUP BY     continent HAVING     COUNT(DISTINCT language) = (         SELECT             MAX(count)         FROM             (SELECT                 COUNT(DISTINCT language) as count             FROM                 country             GROUP BY                 continent)     )
SELECT continent,      COUNT(DISTINCT language) AS num_languages FROM     countrylanguage JOIN     country ON countrylanguage.countrycode = country.code GROUP BY     continent ORDER BY     num_languages DESC LIMIT 1;
SELECT COUNT(DISTINCT country.code) FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'English' AND countrylanguage.language = 'Dutch'
SELECT COUNT(DISTINCT country.code) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'Dutch')
SELECT country.name FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE (countrylanguage.language = 'English' AND countrylanguage.isofficial = 'T') AND (countrylanguage.language = 'French' AND countrylanguage.isofficial = 'T')
SELECT country.name FROM     country WHERE     EXISTS (         SELECT *         FROM countrylanguage         WHERE country.code = countrylanguage.countrycode         AND countrylanguage.language = 'English'         )     AND EXISTS (         SELECT *         FROM countrylanguage         WHERE country.code = countrylanguage.countrycode         AND countrylanguage.language = 'French'         )
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' AND countrylanguage.isofficial = 'T' AND country.code IN ( SELECT countrycode FROM countrylanguage WHERE language = 'French' AND isofficial = 'T' )
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' AND countrylanguage.isofficial = 'T' AND countrylanguage.language = 'French' AND countrylanguage.isofficial = 'T'
SELECT COUNT(DISTINCT country.continent) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'Chinese'
SELECT COUNT(DISTINCT continent) FROM country WHERE country.code IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'Chinese' )
SELECT country.region FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'Dutch')
SELECT country.region FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Dutch' OR countrylanguage.language = 'English'
SELECT country.name FROM     country JOIN     countrylanguage ON country.code = countrylanguage.countrycode WHERE     (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch')     AND countrylanguage.isofficial = 'T'
SELECT country.name FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch') AND countrylanguage.isofficial = 'T'
SELECT language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.continent = 'Asia' ORDER BY countrylanguage.percentage DESC LIMIT 1;
SELECT language     FROM countrylanguage     WHERE countrycode IN (         SELECT code         FROM country         WHERE continent = 'Asia'     )     GROUP BY language     ORDER BY COUNT(*) DESC     LIMIT 1;
SELECT language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.governmentform = 'Republic' GROUP BY countrylanguage.language HAVING COUNT(DISTINCT countrylanguage.countrycode) = 1
SELECT language FROM     countrylanguage WHERE     countrycode IN (         SELECT             code         FROM             country         WHERE             governmentform = 'Republic'     ) GROUP BY     language HAVING     COUNT(DISTINCT countrycode) = 1
SELECT city.name FROM     city JOIN     countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE     countrylanguage.language = 'English' ORDER BY     city.population DESC LIMIT 1;
SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1
SELECT country.name, country.population, country.lifeexpectancy FROM country WHERE country.continent = 'Asia' ORDER BY country.surfacearea DESC LIMIT 1
SELECT country.name, country.population, country.lifeexpectancy FROM country WHERE country.continent = 'Asia' ORDER BY country.surfacearea DESC LIMIT 1
SELECT AVG(lifeexpectancy) FROM country WHERE code IN (   SELECT countrycode   FROM countrylanguage   WHERE language != 'English'   AND isofficial = 0 )
SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English'     AND isofficial = 'T' )
SELECT SUM(country.population)  FROM     country WHERE     country.code NOT IN (         SELECT             countrylanguage.countrycode         FROM             countrylanguage         WHERE             countrylanguage.percentage = 100              AND countrylanguage.language = 'English'     )
SELECT SUM(population) FROM     country WHERE     code NOT IN (         SELECT             countrycode         FROM             countrylanguage         WHERE             language = 'English'     )
SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.headofstate = 'Beatrix' AND countrylanguage.isofficial = 1
SELECT countrylanguage.language FROM   countrylanguage JOIN   country ON countrylanguage.countrycode = country.code WHERE   country.headofstate = 'Beatrix'   AND countrylanguage.isofficial = 1
SELECT COUNT(DISTINCT language) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE indepyear < 1930 AND isofficial = 'T'
SELECT COUNT(DISTINCT language) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE indepyear < 1930 AND isofficial = 'T'
SELECT name FROM     country WHERE     surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')
SELECT name FROM     country WHERE     surfacearea > (         SELECT             MAX(surfacearea)         FROM             country         WHERE             continent = 'Europe'     )
SELECT country.name FROM    country WHERE    continent = 'Africa'    AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')
SELECT country.name FROM country WHERE country.continent = 'Africa' AND country.population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')
SELECT country.name FROM     country WHERE     country.continent = 'Asia'     AND country.population > (         SELECT MAX(population)         FROM country         WHERE continent = 'Africa'     )
SELECT country.name FROM country WHERE country.continent = 'Asia' AND country.population > ( SELECT MAX(population) FROM country WHERE continent = 'Africa' )
SELECT country.code     FROM      country     WHERE      country.code NOT IN (       SELECT        countrycode       FROM        countrylanguage       WHERE        language = 'English'      )
SELECT country.code     FROM     country     WHERE     country.code NOT IN (     SELECT     countrycode     FROM     countrylanguage     WHERE     language = 'English'     )
SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language != 'English';
SELECT country.code FROM country WHERE country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
SELECT country.code FROM     country LEFT JOIN     countrylanguage ON country.code = countrylanguage.countrycode WHERE     countrylanguage.language != 'English'     AND country.governmentform != 'Republic'
SELECT country.code FROM     country WHERE     country.code NOT IN (         SELECT             countrycode         FROM             countrylanguage         WHERE             language = 'English'         )     AND     country.governmentform != 'Republic'
SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe' AND countrylanguage.language != 'English' AND countrylanguage.isofficial = 'F'
SELECT city.name FROM     city JOIN     countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE     city.district = 'Europe' AND countrylanguage.language != 'English' AND countrylanguage.isofficial = 'F'
SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'
SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'
SELECT country.name, country.indepyear, country.surfacearea FROM country WHERE country.population = (SELECT MIN(population) FROM country)
SELECT country.name, country.indepyear, country.surfacearea FROM      country WHERE      country.population = (SELECT MIN(population) FROM country)
SELECT country.population, country.name, country.headofstate FROM country WHERE country.surfacearea = (SELECT MAX(surfacearea) FROM country)
SELECT name, population, headofstate FROM country WHERE surfacearea = (SELECT MAX(surfacearea) FROM country)
SELECT country.name, COUNT(countrylanguage.language) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(countrylanguage.language) >= 3
SELECT country.name, COUNT(countrylanguage.language) AS language_count FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING language_count > 2
SELECT district, COUNT(*)     FROM city     WHERE population > (SELECT AVG(population) FROM city)     GROUP BY district;
SELECT district, COUNT(*) AS city_count FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district
SELECT country.governmentform, SUM(country.population) FROM country WHERE country.lifeexpectancy > 72 GROUP BY country.governmentform
SELECT governmentform, SUM(population) as total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform
SELECT continent,      AVG(lifeexpectancy) as avg_life_expectancy,      SUM(population) as total_population FROM      country GROUP BY      continent HAVING      AVG(lifeexpectancy) < 72
SELECT continent, SUM(population) as total_population, AVG(lifeexpectancy) as average_life_expectancy FROM country WHERE continent IN ( SELECT continent FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72 ) GROUP BY continent
SELECT name, surfacearea FROM   country ORDER BY   surfacearea DESC LIMIT 5;
SELECT country.name, country.surfacearea FROM     country ORDER BY     country.surfacearea DESC LIMIT 5
SELECT country.name FROM country ORDER BY country.population DESC LIMIT 3
SELECT country.name FROM country ORDER BY country.population DESC LIMIT 3
SELECT name FROM country ORDER BY population ASC LIMIT 3
SELECT name FROM country ORDER BY population ASC LIMIT 3
SELECT COUNT(*) FROM country WHERE continent = 'Asia'
SELECT COUNT(*) FROM     country WHERE     continent = 'Asia'
SELECT country.name FROM country WHERE country.continent = 'Europe' AND country.population = 80000
SELECT country.name FROM country WHERE country.continent = 'Europe' AND country.population = 80000
SELECT SUM(country.population) AS total_population, AVG(country.surfacearea) AS average_area FROM country WHERE country.continent = 'North America' AND country.surfacearea > 3000
SELECT SUM(country.population) AS total_population, AVG(country.surfacearea) AS average_surface_area FROM country WHERE country.continent = 'North America'  AND country.surfacearea > 3000
SELECT city.name FROM city WHERE city.population BETWEEN 160000 AND 900000
SELECT city.name FROM city WHERE city.population BETWEEN 160000 AND 900000
SELECT language FROM countrylanguage GROUP BY language HAVING COUNT(DISTINCT countrycode) = ( SELECT MAX(country_count) FROM ( SELECT COUNT(DISTINCT countrycode) AS country_count FROM countrylanguage GROUP BY language ) AS subquery )
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1;
SELECT country.name,      countrylanguage.language     FROM      country     INNER JOIN      (        SELECT         countrycode,         language,         MAX(percentage) AS max_percentage        FROM         countrylanguage        GROUP BY         countrycode      ) AS cl ON country.code = cl.countrycode AND countrylanguage.percentage = cl.max_percentage
SELECT country.code, countrylanguage.language     FROM     country     INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode     WHERE     countrylanguage.percentage = (         SELECT             MAX(percentage)         FROM             countrylanguage         WHERE             countrylanguage.countrycode = country.code     )
SELECT COUNT(DISTINCT country.code) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'Spanish' AND countrylanguage.percentage = (     SELECT MAX(percentage)     FROM countrylanguage     WHERE language = 'Spanish' )
SELECT COUNT(*)  FROM countrylanguage  WHERE language = 'Spanish' AND isofficial = 'T' AND percentage > 50;
SELECT countrycode     FROM     countrylanguage     WHERE     language = 'Spanish'     ORDER BY     percentage DESC     LIMIT 1
SELECT country.code FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'Spanish' AND countrylanguage.percentage > 50;
SELECT COUNT(*) FROM     conductor
SELECT COUNT(*) FROM     conductor
SELECT name FROM conductor ORDER BY age ASC
SELECT conductor.name FROM   conductor ORDER BY   conductor.age
SELECT name FROM conductor WHERE nationality <> "USA"
SELECT conductor.name FROM conductor WHERE conductor.nationality != "USA";
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC
SELECT record_company     FROM orchestra     ORDER BY year_of_founded DESC
SELECT AVG(attendance) FROM show
SELECT AVG(attendance) FROM show
SELECT MAX(share), MIN(share) FROM performance WHERE type != "Live final";
SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final'
SELECT COUNT(DISTINCT nationality) FROM conductor
SELECT COUNT(DISTINCT nationality) FROM conductor
SELECT name FROM conductor ORDER BY year_of_work DESC
SELECT conductor.name FROM conductor ORDER BY conductor.year_of_work DESC
SELECT conductor.name     FROM conductor     ORDER BY conductor.year_of_work DESC     LIMIT 1
SELECT conductor.name     FROM      conductor     GROUP BY      conductor.name     HAVING      COUNT(conductor.year_of_work) = (         SELECT          MAX(year_of_work_count)         FROM          (           SELECT            COUNT(conductor.year_of_work) AS year_of_work_count           FROM            conductor           GROUP BY            conductor.name          )      )
SELECT conductor.name, orchestra.orchestra     FROM      conductor     INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id
SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY COUNT(orchestra.orchestra) DESC LIMIT 1
SELECT conductor.name     FROM     conductor     INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id     GROUP BY     conductor.conductor_id     ORDER BY     COUNT(orchestra.orchestra_id) DESC     LIMIT 1
SELECT conductor.name FROM     conductor JOIN     orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE     orchestra.year_of_founded > 2008
SELECT conductor.name FROM     conductor JOIN     orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE     orchestra.year_of_founded > 2008
SELECT record_company, COUNT(orchestra) AS number_of_orchestras FROM orchestra GROUP BY record_company
SELECT record_company, COUNT(orchestra) AS num_orchestras FROM orchestra GROUP BY record_company
SELECT major_record_format FROM     orchestra GROUP BY     major_record_format ORDER BY     COUNT(*) ASC;
SELECT orchestra.major_record_format     FROM orchestra     JOIN performance ON performance.orchestra_id = orchestra.orchestra_id     ORDER BY COUNT(*) DESC;
SELECT record_company     FROM     orchestra     GROUP BY     record_company     HAVING     COUNT(*) = (         SELECT         MAX(count)         FROM         (             SELECT             COUNT(*) AS count             FROM             orchestra             GROUP BY             record_company         )     )
SELECT record_company     FROM     orchestra     GROUP BY     record_company     ORDER BY     COUNT(orchestra) DESC     LIMIT 1
SELECT orchestra FROM     orchestra LEFT JOIN     performance ON     orchestra.orchestra_id = performance.orchestra_id WHERE     performance.performance_id IS NULL;
SELECT orchestra_id, orchestra FROM orchestra WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance)
SELECT record_company     FROM     orchestra     WHERE     year_of_founded < 2003     AND      year_of_founded > 2003;
SELECT record_company     FROM       orchestra     WHERE       year_of_founded < 2003       AND record_company IN (         SELECT           record_company         FROM           orchestra         WHERE           year_of_founded > 2003       );
SELECT COUNT(*) FROM orchestra WHERE major_record_format = "CD" OR major_record_format = "DVD"
SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format = 'CD' OR major_record_format = 'DVD'
SELECT year_of_founded FROM     orchestra WHERE     orchestra_id IN (         SELECT             orchestra_id         FROM             performance         GROUP BY             orchestra_id         HAVING             COUNT(*) > 1     );
SELECT orchestra.year_of_founded FROM performance JOIN orchestra ON performance.orchestra_id = orchestra.orchestra_id GROUP BY orchestra.orchestra_id HAVING COUNT(performance.performance_id) > 1
SELECT COUNT(*) FROM highschooler
SELECT COUNT(*) FROM highschooler
SELECT name, grade FROM highschooler
SELECT name, grade     FROM      highschooler
SELECT grade FROM highschooler
SELECT grade FROM highschooler
SELECT grade FROM highschooler WHERE name = 'Kyle'
SELECT grade FROM highschooler WHERE name = 'Kyle'
SELECT name     FROM highschooler     WHERE grade = 10;
SELECT name     FROM     highschooler     WHERE     grade = 10;
SELECT highschooler.id FROM highschooler WHERE highschooler.name = "Kyle"
SELECT id FROM highschooler WHERE name = 'Kyle'
SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10)
SELECT COUNT(*) FROM highschooler WHERE grade = 9 OR grade = 10;
SELECT grade, COUNT(*) AS count FROM highschooler GROUP BY grade;
SELECT grade, COUNT(*)      FROM highschooler      GROUP BY grade
SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1
SELECT grade FROM     highschooler GROUP BY     grade ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT grade FROM     highschooler GROUP BY     grade HAVING     COUNT(*) >= 4;
SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4
SELECT highschooler.id, count(friend.friend_id)     FROM     highschooler     LEFT JOIN friend ON friend.student_id = highschooler.id     GROUP BY     highschooler.id
SELECT highschooler.id,     COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON friend.student_id = highschooler.id GROUP BY highschooler.id
SELECT highschooler.name,      COUNT(friend.friend_id) as num_friends     FROM     highschooler     LEFT JOIN friend ON highschooler.id = friend.student_id     GROUP BY     highschooler.name;
SELECT highschooler.name,      COUNT(friend.friend_id) AS num_friends     FROM highschooler     LEFT JOIN friend ON highschooler.id = friend.student_id     GROUP BY highschooler.name
SELECT highschooler.name FROM highschooler JOIN friend ON friend.student_id = highschooler.id GROUP BY highschooler.id ORDER BY COUNT(friend.friend_id) DESC LIMIT 1;
SELECT highschooler.name     FROM     highschooler     JOIN friend ON friend.student_id = highschooler.id     GROUP BY     highschooler.id     ORDER BY     COUNT(friend.friend_id) DESC     LIMIT 1
SELECT highschooler.name FROM    highschooler JOIN    friend ON friend.student_id = highschooler.id GROUP BY    highschooler.name HAVING    COUNT(friend.friend_id) >= 3
SELECT highschooler.name FROM highschooler JOIN friend ON friend.student_id = highschooler.id GROUP BY highschooler.name HAVING COUNT(friend.friend_id) >= 3;
SELECT highschooler.name FROM     highschooler JOIN     friend ON friend.friend_id = highschooler.id WHERE     highschooler.name = "Kyle"
SELECT highschooler.name FROM highschooler JOIN friend ON friend.friend_id = highschooler.id WHERE highschooler.name = "Kyle"
SELECT COUNT(*) FROM friend INNER JOIN highschooler ON friend.friend_id = highschooler.id WHERE highschooler.name = 'Kyle'
SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')
SELECT highschooler.id FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id WHERE friend.student_id IS NULL;
SELECT highschooler.id     FROM highschooler     WHERE highschooler.id NOT IN (SELECT friend.student_id FROM friend)
SELECT highschooler.name FROM highschooler WHERE highschooler.id NOT IN (SELECT friend.student_id FROM friend)
SELECT highschooler.name FROM highschooler WHERE highschooler.id NOT IN ( SELECT friend.student_id FROM friend )
SELECT highschooler.id     FROM highschooler     WHERE highschooler.id IN (         SELECT friend.student_id         FROM friend         INNER JOIN likes ON friend.student_id = likes.student_id         WHERE friend.friend_id = likes.liked_id     )
SELECT friend.student_id FROM friend INNER JOIN likes ON friend.student_id = likes.student_id
SELECT highschooler.name FROM     highschooler JOIN     friend ON friend.student_id = highschooler.id JOIN     likes ON likes.student_id = highschooler.id WHERE     highschooler.id IN (SELECT friend_id FROM friend) AND     highschooler.id IN (SELECT liked_id FROM likes)
SELECT highschooler.name FROM highschooler INNER JOIN friend ON friend.friend_id = highschooler.id INNER JOIN likes ON likes.student_id = highschooler.id GROUP BY highschooler.name HAVING COUNT(DISTINCT friend.student_id) > 0 AND COUNT(DISTINCT likes.liked_id) > 0
SELECT student_id,      COUNT(*) AS num_likes     FROM likes     GROUP BY student_id
SELECT student_id,     COUNT(*) AS num_likes FROM     likes GROUP BY     student_id
SELECT highschooler.name, COUNT(likes.liked_id) FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name;
SELECT highschooler.name, COUNT(likes.liked_id)     FROM highschooler     JOIN likes ON likes.student_id = highschooler.id     GROUP BY highschooler.name;
SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name ORDER BY COUNT(likes.liked_id) DESC LIMIT 1;
SELECT highschooler.name FROM highschooler JOIN likes ON likes.student_id = highschooler.id GROUP BY highschooler.name ORDER BY COUNT(likes.liked_id) DESC LIMIT 1
SELECT highschooler.name FROM highschooler JOIN likes ON likes.student_id = highschooler.id GROUP BY highschooler.name HAVING COUNT(likes.student_id) >= 2
SELECT highschooler.name FROM    highschooler JOIN    likes ON likes.student_id = highschooler.id GROUP BY    highschooler.name HAVING    COUNT(likes.liked_id) >= 2
SELECT highschooler.name FROM highschooler WHERE highschooler.grade > 5 AND (     SELECT COUNT(*)     FROM friend     WHERE friend.student_id = highschooler.id ) >= 2
SELECT highschooler.name FROM   highschooler JOIN friend ON friend.student_id = highschooler.id WHERE   highschooler.grade > 5 GROUP BY   highschooler.name HAVING   COUNT(friend.friend_id) >= 2
SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')
SELECT COUNT(*) FROM     likes JOIN     highschooler ON likes.liked_id = highschooler.id WHERE     highschooler.name = 'Kyle'
SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend)
SELECT AVG(highschooler.grade) FROM highschooler WHERE highschooler.id IN (     SELECT friend.student_id     FROM friend )
SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)
SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)
SELECT owners.state FROM owners WHERE owners.state IN (     SELECT professionals.state     FROM professionals )
SELECT DISTINCT owners.state FROM owners INNER JOIN professionals ON owners.state = professionals.state
SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)
SELECT AVG(age) FROM dogs WHERE dog_id IN (     SELECT dog_id     FROM treatments )
SELECT professionals.professional_id,     professionals.last_name,     professionals.cell_number FROM     professionals WHERE     professionals.state = 'Indiana' OR     professionals.professional_id IN (         SELECT             professional_id         FROM             treatments         GROUP BY             professional_id         HAVING             COUNT(*) > 2     )
SELECT professionals.professional_id, professionals.last_name, professionals.cell_number FROM professionals WHERE professionals.state = 'Indiana' OR (SELECT COUNT(*) FROM treatments WHERE treatments.professional_id = professionals.professional_id) > 2;
SELECT dogs.name FROM dogs LEFT JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.name HAVING SUM(treatments.cost_of_treatment) <= 1000;
SELECT dogs.name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY dogs.name HAVING SUM(treatments.cost_of_treatment) <= 1000;
SELECT DISTINCT first_name FROM professionals WHERE first_name NOT IN (   SELECT first_name FROM owners   UNION   SELECT first_name FROM dogs )
SELECT professionals.first_name FROM professionals WHERE professionals.first_name NOT IN (     SELECT owners.first_name FROM owners     UNION     SELECT dogs.name FROM dogs )
SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals LEFT JOIN treatments ON treatments.professional_id = professionals.professional_id WHERE treatments.professional_id IS NULL;
SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals LEFT JOIN treatments ON treatments.professional_id = professionals.professional_id WHERE treatments.treatment_id IS NULL;
SELECT owners.owner_id, owners.first_name, owners.last_name     FROM owners     INNER JOIN dogs ON owners.owner_id = dogs.owner_id     GROUP BY owners.owner_id     ORDER BY COUNT(dogs.dog_id) DESC     LIMIT 1
SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(dogs.owner_id) DESC LIMIT 1;
SELECT professionals.professional_id, professionals.role_code, professionals.first_name FROM professionals INNER JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY professionals.professional_id HAVING COUNT(treatments.professional_id) >= 2
SELECT professionals.professional_id, professionals.role_code, professionals.first_name FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY professionals.professional_id, professionals.role_code, professionals.first_name HAVING COUNT(treatments.professional_id) >= 2
SELECT breeds.breed_name FROM     breeds JOIN     dogs ON breeds.breed_code = dogs.breed_code GROUP BY     breeds.breed_name ORDER BY     COUNT(*) DESC LIMIT 1
SELECT breeds.breed_code FROM     dogs JOIN breeds ON dogs.breed_code = breeds.breed_code GROUP BY     breeds.breed_code ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id ORDER BY COUNT(treatments.cost_of_treatment) DESC LIMIT 1
SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;
SELECT treatment_types.treatment_type_description FROM     treatment_types JOIN     treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY     treatment_types.treatment_type_description ORDER BY     SUM(treatments.cost_of_treatment) ASC LIMIT 1;
SELECT treatment_types.description FROM     treatment_types JOIN     treatments ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY     treatment_types.description ORDER BY     SUM(treatments.cost_of_treatment) ASC LIMIT 1
SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id GROUP BY owners.owner_id ORDER BY SUM(dogs.price) DESC LIMIT 1;
SELECT owners.owner_id, owners.zip_code FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id INNER JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;
SELECT professionals.professional_id, professionals.cell_number FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id, professionals.cell_number HAVING COUNT(DISTINCT treatments.treatment_type_code) >= 2
SELECT professionals.professional_id, professionals.cell_number     FROM professionals     JOIN treatments ON treatments.professional_id = professionals.professional_id     JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code     GROUP BY professionals.professional_id, professionals.cell_number     HAVING COUNT(DISTINCT treatments.treatment_type_code) >= 2
SELECT professionals.first_name,     professionals.last_name FROM     professionals JOIN     treatments ON treatments.professional_id = professionals.professional_id WHERE     treatments.cost_of_treatment < (         SELECT             AVG(cost_of_treatment)         FROM             treatments     )
SELECT professionals.first_name, professionals.last_name FROM     professionals JOIN     treatments ON treatments.professional_id = professionals.professional_id WHERE     treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)
SELECT treatments.date_of_treatment, professionals.first_name FROM   treatments JOIN professionals ON treatments.professional_id = professionals.professional_id
SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id
SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN sizes ON dogs.size_code = sizes.size_code
SELECT owners.first_name, owners.last_name, sizes.size_code FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id INNER JOIN sizes ON dogs.size_code = sizes.size_code
SELECT owners.first_name, dogs.name FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id
SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON treatments.dog_id = dogs.dog_id WHERE breeds.breed_name = (     SELECT     breed_name     FROM     breeds     GROUP BY breed_name     ORDER BY COUNT(*) ASC     LIMIT 1 ) ORDER BY dogs.name ASC;
SELECT dogs.name, treatments.date_of_treatment FROM dogs INNER JOIN breeds ON dogs.breed_code = breeds.breed_code INNER JOIN treatments ON dogs.dog_id = treatments.dog_id INNER JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code WHERE breeds.breed_name = 'rarest' ORDER BY dogs.name ASC;
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id WHERE owners.owner_id IN (SELECT owner_id FROM owners WHERE state = 'Virginia')
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'Virginia'
SELECT dogs.date_arrived, dogs.date_departed FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id
SELECT dogs.date_arrived, dogs.date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id
SELECT owners.last_name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id WHERE dogs.age = (SELECT MIN(age) FROM dogs)
SELECT owners.last_name FROM dogs INNER JOIN owners ON dogs.owner_id = owners.owner_id WHERE dogs.age = (SELECT MIN(age) FROM dogs)
SELECT email_address     FROM professionals     WHERE state = 'Hawaii' OR state = 'Wisconsin'
SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
SELECT dogs.date_arrived, dogs.date_departed FROM dogs
SELECT dogs.date_arrived, dogs.date_departed FROM dogs
SELECT COUNT(DISTINCT dogs.dog_id) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id
SELECT COUNT(DISTINCT dogs.dog_id) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id
SELECT COUNT(DISTINCT professional_id) FROM treatments
SELECT COUNT(DISTINCT professional_id) FROM treatments;
SELECT professionals.role_code, professionals.street, professionals.city, professionals.state FROM professionals WHERE professionals.city LIKE '%West%'
SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%'
SELECT owners.first_name, owners.last_name, owners.email_address FROM owners WHERE owners.state LIKE '%North%'
SELECT owners.first_name, owners.last_name, owners.email_address FROM owners WHERE owners.state LIKE '%North%'
SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)
SELECT COUNT(*)  FROM dogs  WHERE age < (SELECT AVG(age) FROM dogs)
SELECT MAX(cost_of_treatment) AS max_cost FROM treatments
SELECT cost_of_treatment FROM  treatments ORDER BY  date_of_treatment DESC LIMIT 1;
SELECT COUNT(*) AS num_dogs FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)
SELECT COUNT(*)  FROM dogs WHERE owner_id NOT IN (SELECT dog_id FROM treatments)
SELECT COUNT(*)  FROM owners  WHERE owner_id NOT IN (SELECT owner_id FROM dogs WHERE date_departed IS NULL)
SELECT COUNT(*)  FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs);
SELECT COUNT(*)  FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments)
SELECT COUNT(*)  FROM professionals  WHERE professional_id NOT IN (SELECT professional_id FROM treatments)
SELECT name, age, weight     FROM dogs     WHERE abandoned_yn = 1;
SELECT dogs.name, dogs.age, dogs.weight FROM dogs WHERE dogs.abandoned_yn = 1
SELECT AVG(age) FROM dogs
SELECT AVG(age) FROM dogs
SELECT MAX(age) FROM dogs
SELECT MAX(age) FROM dogs
SELECT charge_type,     SUM(charge_amount) AS total_amount FROM charges GROUP BY charge_type;
SELECT charge_type, charge_amount     FROM charges
SELECT MAX(charge_amount) FROM charges
SELECT MAX(charge_amount) FROM charges
SELECT email_address, cell_number, home_phone FROM professionals
SELECT professionals.email_address, professionals.cell_number, professionals.home_phone FROM professionals
SELECT breeds.breed_name,      sizes.size_description     FROM      breeds,      sizes
SELECT DISTINCT breeds.breed_name, sizes.size_description FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN sizes ON dogs.size_code = sizes.size_code
SELECT professionals.first_name,      treatment_types.treatment_type_description     FROM      professionals     JOIN      treatments ON treatments.professional_id = professionals.professional_id     JOIN      treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT professionals.first_name, treatments.description FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id
SELECT COUNT(*) FROM singer
SELECT COUNT(*)  FROM  singer;
SELECT singer.name FROM singer ORDER BY singer.net_worth_millions ASC
SELECT name     FROM singer     ORDER BY net_worth_millions ASC
SELECT birth_year, citizenship FROM singer
SELECT birth_year, citizenship FROM singer
SELECT name FROM singer WHERE citizenship != "France"
SELECT name FROM singer WHERE citizenship <> 'French'
SELECT singer_id  FROM singer  WHERE birth_year = 1948 OR birth_year = 1949
SELECT name     FROM singer     WHERE birth_year = 1948 OR birth_year = 1949;
SELECT singer_id FROM singer WHERE net_worth_millions = (SELECT MAX(net_worth_millions) FROM singer)
SELECT singer.name     FROM      singer     ORDER BY      singer.net_worth_millions DESC     LIMIT 1;
SELECT citizenship,      COUNT(*) AS num_singers     FROM singer     GROUP BY citizenship
SELECT citizenship,     COUNT(*) AS total_singers FROM     singer GROUP BY     citizenship
SELECT citizenship,      COUNT(*) AS count     FROM singer     GROUP BY citizenship     ORDER BY count DESC     LIMIT 1
SELECT citizenship,      COUNT(*) as count FROM      singer GROUP BY      citizenship ORDER BY      count DESC LIMIT 1;
SELECT citizenship,      MAX(net_worth_millions) AS max_net_worth FROM      singer GROUP BY      citizenship
SELECT citizenship,      MAX(net_worth_millions)     FROM singer     GROUP BY citizenship
SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id
SELECT song.title, singer.name FROM song INNER JOIN singer ON song.singer_id = singer.singer_id
SELECT DISTINCT name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE sales > 300000;
SELECT name FROM singer WHERE singer_id IN (     SELECT singer_id     FROM song     WHERE sales > 300000 )
SELECT singer.name     FROM singer     INNER JOIN song ON singer.singer_id = song.singer_id     GROUP BY singer.name     HAVING COUNT(song.song_id) > 1
SELECT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.song_id) > 1
SELECT singer.name,     SUM(song.sales) as total_sales FROM     singer JOIN     song ON song.singer_id = singer.singer_id GROUP BY     singer.name;
SELECT singer.name,      SUM(song.sales) AS total_sales FROM singer INNER JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name
SELECT singer.name FROM singer LEFT JOIN song ON singer.singer_id = song.singer_id WHERE song.singer_id IS NULL
SELECT singer.name FROM singer LEFT JOIN song ON singer.singer_id = song.singer_id WHERE song.singer_id IS NULL
SELECT citizenship     FROM     singer     WHERE     birth_year < 1945     AND birth_year > 1955
SELECT citizenship     FROM     singer     WHERE     birth_year < 1945 AND birth_year > 1955
SELECT COUNT(*)  FROM other_available_features
SELECT ref_feature_types.feature_type_name FROM other_available_features JOIN ref_feature_types ON other_available_features.feature_type_code = ref_feature_types.feature_type_code WHERE other_available_features.feature_name = 'AirCon';
SELECT ref_property_types.property_type_description FROM properties INNER JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code
SELECT properties.property_name FROM properties JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code WHERE (ref_property_types.property_type_code = 'house' OR ref_property_types.property_type_code = 'apartment') AND properties.room_count > 1
