SELECT COUNT(singer_id) FROM singer
SELECT COUNT(*) FROM singer
SELECT name, country, age  FROM singer  ORDER BY age DESC
SELECT name, country, age FROM singer ORDER BY age DESC
SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France'
SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France'
SELECT singer.name, singer.song_release_year FROM singer WHERE singer.age = ( SELECT MIN(age) FROM singer)
SELECT singer.name, singer.song_name, singer.song_release_year FROM singer WHERE singer.age = (SELECT MIN(age) FROM singer)
SELECT DISTINCT country  FROM singer  WHERE age > 20
SELECT DISTINCT country FROM singer WHERE age > 20
SELECT singer.country, COUNT(singer.singer_id) FROM singer GROUP BY singer.country
SELECT singer.country, COUNT(singer.singer_id) FROM singer GROUP BY singer.country
SELECT song_name  FROM singer  WHERE age > (SELECT AVG(age) FROM singer)
SELECT song_name  FROM singer  WHERE age > (SELECT AVG(age) FROM singer)
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT location, name  FROM stadium  WHERE capacity BETWEEN 5000 and 10000
SELECT MAX(capacity), AVG(capacity) FROM stadium
SELECT AVG(capacity), MAX(capacity) FROM stadium
SELECT stadium.name, stadium.capacity FROM stadium WHERE stadium.stadium_id IN (     SELECT concert.stadium_id     FROM concert     GROUP BY concert.stadium_id     HAVING AVG(concert.average) = (         SELECT MAX(avg_attendance)         FROM (             SELECT concert.stadium_id, AVG(concert.average) as avg_attendance             FROM concert             GROUP BY concert.stadium_id         ) as subquery     ) )
SELECT stadium.name, stadium.capacity  FROM stadium  WHERE stadium.average = (SELECT MAX(average) FROM stadium)
SELECT COUNT(*) FROM concert WHERE year = 2014 OR year = 2015
SELECT COUNT(*) FROM concert WHERE year = 2014 OR year = 2015
SELECT stadium.name, COUNT(concert.concert_id)  FROM stadium INNER JOIN concert ON concert.stadium_id = stadium.stadium_id GROUP BY stadium.name
SELECT stadium.name, COUNT(concert.concert_id)  FROM stadium JOIN concert ON concert.stadium_id = stadium.stadium_id GROUP BY stadium.name
SELECT stadium.name, stadium.capacity FROM stadium JOIN concert ON concert.stadium_id = stadium.stadium_id WHERE concert.year >= 2014 GROUP BY stadium.stadium_id HAVING COUNT(concert.concert_id) =      (SELECT MAX(concert_count)     FROM (SELECT stadium.stadium_id, COUNT(concert.concert_id) AS concert_count           FROM stadium           JOIN concert ON concert.stadium_id = stadium.stadium_id           WHERE concert.year >= 2014           GROUP BY stadium.stadium_id) AS counts)
SELECT stadium.name, stadium.capacity FROM stadium INNER JOIN concert ON concert.stadium_id = stadium.stadium_id WHERE concert.year > 2013 GROUP BY stadium.stadium_id, stadium.name, stadium.capacity ORDER BY COUNT(*) DESC LIMIT 1
SELECT year  FROM concert  GROUP BY year  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1
SELECT stadium.name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.concert_id IS NULL
SELECT stadium.name FROM stadium LEFT JOIN concert ON concert.stadium_id = stadium.stadium_id WHERE concert.concert_id IS NULL
SELECT DISTINCT s1.country  FROM singer s1, singer s2  WHERE s1.age > 40 AND s2.age < 30
SELECT name FROM stadium WHERE stadium_id NOT IN (     SELECT stadium_id     FROM concert     WHERE theme = 'concert'     AND year = 2014 )
SELECT name FROM stadium WHERE stadium_id NOT IN (     SELECT stadium_id     FROM concert     WHERE year = 2014 )
SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id)  FROM concert  JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id  GROUP BY concert.concert_name, concert.theme
SELECT concert_name, theme, COUNT(singer_id) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert_name, theme
SELECT singer.name, COUNT(singer_in_concert.concert_id)  FROM singer  JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  GROUP BY singer.name
SELECT singer.name, COUNT(concert.concert_id)  FROM singer  JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  JOIN concert ON singer_in_concert.concert_id = concert.concert_id  GROUP BY singer.name
SELECT singer.name  FROM concert  JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id  JOIN singer ON singer_in_concert.singer_id = singer.singer_id WHERE concert.year = 2014
SELECT singer.name  FROM singer  JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  JOIN concert  ON singer_in_concert.concert_id = concert.concert_id  WHERE concert.year = 2014
SELECT singer.name, singer.country FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE singer.song_name LIKE '%Hey%'
SELECT singer.name, singer.country FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE singer.song_name LIKE '%Hey%'
SELECT stadium.name, stadium.location FROM stadium JOIN concert ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2014 AND concert.year = 2015;
SELECT stadium.name, stadium.location FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014 AND stadium.stadium_id IN (     SELECT concert.stadium_id     FROM concert     WHERE concert.year = 2015 )
SELECT COUNT(*) FROM concert WHERE stadium_id IN (SELECT stadium_id                       FROM stadium                       WHERE capacity = (SELECT MAX(capacity)                                         FROM stadium))
SELECT COUNT(concert_id) FROM concert WHERE stadium_id = (   SELECT stadium_id   FROM stadium   WHERE capacity = (     SELECT MAX(capacity)     FROM stadium   ) )
SELECT COUNT(*) FROM pets WHERE weight > 10
SELECT COUNT(*) FROM pets JOIN has_pet ON pets.petid = has_pet.petid WHERE pets.weight > 10
SELECT weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)
SELECT weight FROM pets ORDER BY pet_age DESC LIMIT 1
SELECT MAX(weight), pettype FROM pets GROUP BY pettype
SELECT pettype, MAX(weight)  FROM pets  GROUP BY pettype;
SELECT COUNT(*)  FROM has_pet  JOIN student ON has_pet.stuid = student.stuid  WHERE student.age > 20
SELECT COUNT(pets.petid)  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE student.age > 20
SELECT COUNT(*)  FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' AND student.sex = 'F'
SELECT COUNT(*)  FROM has_pet  JOIN student ON has_pet.stuid = student.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE student.sex = 'female'  AND pets.pettype = 'dog'
SELECT COUNT(DISTINCT pettype) FROM pets
SELECT COUNT(DISTINCT pettype)  FROM pets
SELECT fname  FROM student  WHERE stuid IN (SELECT stuid                  FROM has_pet                  JOIN pets ON has_pet.petid = pets.petid                  WHERE pettype IN ('cat', 'dog'))
SELECT fname  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'cat' OR pets.pettype = 'dog'
SELECT fname FROM student WHERE stuid IN (   SELECT stuid   FROM has_pet   WHERE petid IN (     SELECT petid     FROM pets     WHERE pettype = 'cat'   )   AND stuid IN (     SELECT stuid     FROM has_pet      WHERE petid IN (       SELECT petid       FROM pets       WHERE pettype = 'dog'     )   ) )
SELECT fname FROM student  WHERE stuid IN (SELECT stuid FROM has_pet                  INNER JOIN pets ON has_pet.petid = pets.petid                  WHERE pettype = 'cat') AND stuid IN (SELECT stuid FROM has_pet                INNER JOIN pets ON has_pet.petid = pets.petid                WHERE pettype = 'dog')
SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)
SELECT student.major, student.age  FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid WHERE has_pet.stuid IS NULL
SELECT student.stuid  FROM student  LEFT JOIN has_pet ON student.stuid = has_pet.stuid  WHERE has_pet.stuid IS NULL OR has_pet.petid NOT IN (SELECT petid FROM pets WHERE pettype = 'cat')
SELECT stuid FROM student  WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))
SELECT fname, age  FROM student  WHERE stuid IN (     SELECT stuid      FROM has_pet      WHERE petid IN (         SELECT petid          FROM pets          WHERE pettype = 'dog'          AND petid NOT IN (             SELECT petid              FROM pets              WHERE pettype = 'cat'         )     ) )
SELECT fname FROM student WHERE stuid IN (SELECT stuid                 FROM has_pet                 INNER JOIN pets ON has_pet.petid = pets.petid                 WHERE pettype = 'dog') AND stuid NOT IN (SELECT stuid                   FROM has_pet                   INNER JOIN pets ON has_pet.petid = pets.petid                   WHERE pettype = 'cat')
SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets) LIMIT 1
SELECT pettype, weight FROM pets ORDER BY pet_age ASC LIMIT 1
SELECT pets.petid, pets.weight  FROM pets  JOIN has_pet ON pets.petid = has_pet.petid  JOIN student ON has_pet.stuid = student.stuid  WHERE pets.pet_age > 1;
SELECT pets.petid, pets.weight FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pet_age > 1
SELECT pets.pettype, AVG(pets.pet_age), MAX(pets.pet_age) FROM has_pet JOIN pets ON has_pet.petid = pets.petid GROUP BY pets.pettype
SELECT pets.pettype, AVG(pets.pet_age), MAX(pets.pet_age) FROM pets JOIN has_pet ON has_pet.petid = pets.petid JOIN student ON student.stuid = has_pet.stuid GROUP BY pets.pettype
SELECT pettype, AVG(weight) FROM pets GROUP BY pettype
SELECT pettype, AVG(weight) FROM pets GROUP BY pettype
SELECT fname, age  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid
SELECT student.fname, student.age  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid
SELECT has_pet.petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.lname = 'Smith'
SELECT pets.petid  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE student.lname = 'Smith'
SELECT student.stuid, COUNT(pets.petid) AS num_pets FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid GROUP BY student.stuid
SELECT student.stuid, COUNT(has_pet.petid)  FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid
SELECT student.fname, student.sex  FROM student  WHERE student.stuid IN (     SELECT has_pet.stuid     FROM has_pet     GROUP BY has_pet.stuid     HAVING COUNT(has_pet.petid) > 1 )
SELECT fname, sex FROM student WHERE student.stuid IN (     SELECT stuid     FROM has_pet     GROUP BY stuid     HAVING COUNT(petid) > 1 )
SELECT lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' AND pet_age = 3 ORDER BY lname DESC LIMIT 1
SELECT lname  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pettype = 'cat' AND pet_age = 3;
SELECT AVG(age) FROM student WHERE student.stuid NOT IN (SELECT stuid FROM has_pet)
SELECT AVG(age)  FROM student  WHERE student.stuid NOT IN (SELECT stuid FROM has_pet)
SELECT COUNT(DISTINCT continent) FROM continents
SELECT COUNT(*) FROM continents
SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS number_of_countries FROM continents JOIN countries ON countries.continent = continents.contid GROUP BY continents.contid, continents.continent
SELECT continents.contid, continents.continent, COUNT(countries.countryid)  FROM continents  JOIN countries ON countries.continent = continents.contid  GROUP BY continents.contid, continents.continent
SELECT COUNT(DISTINCT countryid) FROM countries
SELECT COUNT(DISTINCT countryname) FROM countries
SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid)  FROM car_makers  JOIN model_list ON model_list.maker = car_makers.id  GROUP BY car_makers.fullname, car_makers.id
SELECT car_makers.fullname, car_makers.id, COUNT(model_list.model)  FROM car_makers  INNER JOIN countries ON car_makers.country = countries.countryid  INNER JOIN model_list ON model_list.maker = car_makers.id  GROUP BY car_makers.fullname, car_makers.id
SELECT model_list.model FROM model_list  JOIN cars_data ON cars_data.id = model_list.modelid  ORDER BY cars_data.horsepower ASC LIMIT 1
SELECT model  FROM car_names  JOIN model_list ON car_names.model = model_list.modelid  JOIN cars_data ON car_names.makeid = cars_data.id  ORDER BY horsepower ASC LIMIT 1
SELECT model FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data)
SELECT model_list.model FROM model_list JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data)
SELECT car_makers.fullname FROM car_makers JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.year = 1970
SELECT DISTINCT car_makers.maker  FROM car_makers  INNER JOIN cars_data ON car_makers.id = cars_data.id  WHERE cars_data.year = 1970
SELECT car_makers.maker, cars_data.year  FROM car_makers  JOIN countries ON car_makers.country = countries.countryid  JOIN continents ON countries.continent = continents.contid  JOIN model_list ON model_list.maker = car_makers.id  JOIN car_names ON car_names.model = model_list.model  JOIN cars_data ON cars_data.id = car_names.makeid  WHERE cars_data.year = (SELECT MIN(year) FROM cars_data)
SELECT car_makers.maker, MIN(cars_data.year)  FROM car_makers JOIN countries ON car_makers.country = countries.countryid JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid GROUP BY car_makers.maker ORDER BY MIN(cars_data.year) LIMIT 1;
SELECT DISTINCT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.year > 1980
SELECT DISTINCT model FROM model_list WHERE modelid IN (     SELECT makeid     FROM car_names     WHERE car_names.makeid = cars_data.id         AND year > 1980 )
SELECT continents.continent, COUNT(DISTINCT car_makers.maker)  FROM continents  JOIN countries ON continents.contid = countries.continent  JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY continents.continent
SELECT continents.continent, COUNT(DISTINCT car_makers.id) FROM continents INNER JOIN countries ON countries.continent = continents.contid INNER JOIN car_makers ON car_makers.country = countries.countryid GROUP BY continents.continent
SELECT countries.countryname FROM countries JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.countryname ORDER BY COUNT(car_makers.id) DESC LIMIT 1;
SELECT countryname FROM countries JOIN (     SELECT country, COUNT(*) AS count     FROM car_makers     GROUP BY country     ORDER BY count DESC     LIMIT 1 ) AS temp ON countries.countryid = temp.country
SELECT COUNT(model_list.model) AS model_count, car_makers.fullname AS maker_fullname FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.fullname
SELECT COUNT(model_list.model) AS NumberOfModels, car_makers.id, car_makers.fullname FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.id, car_makers.fullname;
SELECT accelerate  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.maker = 'amc hornet sportabout (sw)'
SELECT cars_data.accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid JOIN continents ON countries.continent = continents.contid WHERE car_names.make = 'amc hornet sportabout (sw)'
SELECT COUNT(DISTINCT car_makers.id) FROM car_makers JOIN countries ON car_makers.country = countries.countryid JOIN continents ON countries.continent = continents.contid WHERE continents.continent = 'france'
SELECT COUNT(car_makers.maker)  FROM car_makers  JOIN countries ON car_makers.country = countries.countryid  JOIN continents ON countries.continent = continents.contid  WHERE countries.countryname = 'France'
SELECT COUNT(DISTINCT modelid)  FROM model_list  JOIN car_makers ON model_list.maker = car_makers.id  JOIN countries ON car_makers.country = countries.countryid  JOIN continents ON countries.continent = continents.contid  WHERE continents.continent = 'usa'
SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.country = countries.countryid JOIN continents ON countries.continent = continents.contid WHERE continents.continent = 'United States'
SELECT AVG(mpg)  FROM cars_data  WHERE cylinders = 4
SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4
SELECT MIN(cars_data.weight)  FROM cars_data WHERE cars_data.cylinders = 8 AND cars_data.year = 1974
SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974
SELECT car_makers.maker, model_list.model  FROM car_makers  JOIN model_list ON model_list.maker = car_makers.id
SELECT car_makers.maker, model_list.model FROM car_makers JOIN model_list ON model_list.maker = car_makers.id
SELECT countries.countryname, countries.countryid FROM countries INNER JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.countryname, countries.countryid
SELECT countries.countryname, countries.countryid FROM countries INNER JOIN car_makers ON car_makers.country = countries.countryid
SELECT COUNT(*) FROM cars_data  WHERE horsepower > 150
SELECT COUNT(*) FROM cars_data WHERE horsepower > 150
SELECT AVG(weight)  FROM cars_data GROUP BY year
SELECT AVG(weight), year FROM cars_data GROUP BY year;
SELECT countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countryname HAVING COUNT(car_makers.id) >= 3 AND countries.continent = (SELECT contid FROM continents WHERE continent = 'Europe')
SELECT countries.countryname FROM countries JOIN continents ON countries.continent = continents.contid JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.countryid, countries.countryname HAVING COUNT(DISTINCT car_makers.id) >= 3 AND continents.continent = 'Europe'
SELECT MAX(cars_data.horsepower), car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3
SELECT MAX(cars_data.horsepower) AS largest_horsepower, car_makers.maker AS make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3
SELECT model_list.modelid, model_list.model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY cars_data.mpg DESC LIMIT 1
SELECT model FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY mpg DESC LIMIT 1
SELECT AVG(horsepower) FROM cars_data WHERE year < 1980
SELECT AVG(horsepower)  FROM cars_data  WHERE year < 1980
SELECT AVG(cars_data.edispl)  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  JOIN countries ON car_makers.country = countries.countryid  JOIN continents ON countries.continent = continents.contid  WHERE model_list.model = 'volvo'
SELECT AVG(edispl) FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  JOIN countries ON car_makers.country = countries.countryid  JOIN continents ON countries.continent = continents.contid  WHERE car_makers.maker = 'volvo'
SELECT MAX(accelerate) FROM cars_data GROUP BY cylinders
SELECT MAX(accelerate) FROM cars_data
SELECT car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model GROUP BY car_makers.maker ORDER BY COUNT(car_names.make) DESC LIMIT 1;
SELECT model  FROM model_list  GROUP BY model  ORDER BY COUNT(DISTINCT modelid) DESC  LIMIT 1
SELECT COUNT(*) FROM cars_data WHERE cylinders > 4
SELECT COUNT(*) FROM cars_data WHERE cylinders > 4
SELECT COUNT(*) FROM cars_data WHERE year = 1980
SELECT SUM(cars_data.id) FROM cars_data WHERE cars_data.year = 1980
SELECT COUNT(model_list.modelid)  FROM model_list  JOIN car_makers ON model_list.maker = car_makers.id  JOIN countries ON car_makers.country = countries.countryid  WHERE car_makers.fullname = 'American Motor Company'
SELECT COUNT(model_list.modelid)  FROM car_makers  JOIN model_list ON model_list.maker = car_makers.id WHERE car_makers.maker = 'American Motor Company'
SELECT car_makers.fullname, car_makers.id FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.fullname, car_makers.id HAVING COUNT(DISTINCT model_list.model) > 3
SELECT car_makers.fullname, car_makers.id FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.fullname, car_makers.id HAVING COUNT(model_list.modelid) > 3
SELECT DISTINCT model_list.model  FROM car_makers  JOIN model_list ON model_list.maker = car_makers.id  JOIN cars_data ON cars_data.id = car_names.makeid  WHERE (car_makers.fullname = 'General Motors' OR cars_data.weight > 3500)
SELECT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON cars_data.id = car_names.makeid WHERE car_makers.maker = 'General Motors' OR cars_data.weight > 3500;
SELECT DISTINCT year  FROM cars_data  WHERE weight >= 3000 AND weight <= 4000
SELECT DISTINCT year  FROM cars_data  WHERE weight < 4000 AND weight > 3000
SELECT horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data)
SELECT horsepower  FROM cars_data  ORDER BY accelerate DESC  LIMIT 1
SELECT MIN(cars_data.accelerate) FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  JOIN countries ON car_makers.country = countries.countryid  JOIN continents ON countries.continent = continents.contid  WHERE model_list.maker = 'volvo'
SELECT cylinders FROM cars_data WHERE accelerate = (SELECT MIN(accelerate) FROM cars_data)
SELECT COUNT(*) FROM cars_data WHERE accelerate > ( SELECT MAX(horsepower) FROM cars_data)
SELECT count(*)  FROM cars_data  WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data)
SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.id) > 2
SELECT COUNT(DISTINCT countries.countryid)  FROM countries  JOIN car_makers ON car_makers.country = countries.countryid  GROUP BY countries.countryid  HAVING COUNT(DISTINCT car_makers.id) > 2
SELECT COUNT(*) FROM cars_data WHERE cylinders > 6
SELECT COUNT(*) FROM cars_data WHERE cylinders > 6
SELECT car_names.model FROM cars_data JOIN model_list ON cars_data.model = model_list.modelid WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1;
SELECT model FROM car_makers  JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1
SELECT car_makers.id, car_makers.maker FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.horsepower > (     SELECT MIN(horsepower)     FROM cars_data ) AND cars_data.cylinders <= 3
SELECT car_makers.id, car_makers.make  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  WHERE cars_data.cylinders < 4 AND cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data)
SELECT MAX(mpg)  FROM cars_data  WHERE cylinders = 8 AND year < 1980
SELECT MAX(mpg)  FROM cars_data  WHERE cylinders = 8 OR year < 1980
SELECT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid JOIN countries ON car_makers.country = countries.countryid JOIN continents ON countries.continent = continents.contid WHERE cars_data.weight < 3500 AND car_makers.fullname <> 'Ford Motor Company'
SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid JOIN continents ON countries.continent = continents.contid WHERE cars_data.weight < 3500 AND car_makers.fullname <> 'Ford Motor Company'
SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT country                          FROM car_makers)
SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country                         FROM car_makers)
SELECT car_makers.id, car_makers.maker  FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.model) >= 2 AND COUNT(DISTINCT car_makers.id) > 3
SELECT car_makers.id, car_makers.maker  FROM car_makers  JOIN model_list ON model_list.maker = car_makers.id  JOIN car_names ON car_names.model = model_list.model  JOIN cars_data ON cars_data.id = car_names.makeid  JOIN countries ON car_makers.country = countries.countryid  JOIN continents ON countries.continent = continents.contid  GROUP BY car_makers.id, car_makers.maker  HAVING COUNT(DISTINCT model_list.model) >= 2 AND COUNT(*) > 3
SELECT countries.countryid, countries.countryname FROM countries JOIN car_makers ON car_makers.country = countries.countryid JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model WHERE car_makers.maker IN (     SELECT car_makers.maker     FROM car_makers     GROUP BY car_makers.maker     HAVING COUNT(DISTINCT car_makers.id) > 3 ) OR car_names.make = 'fiat'
SELECT countries.countryid, countries.countryname  FROM countries  INNER JOIN continents ON countries.continent = continents.contid  WHERE (SELECT COUNT(DISTINCT car_makers.id)         FROM car_makers         WHERE car_makers.country = countries.countryid) > 3  OR (SELECT COUNT(DISTINCT car_names.model)      FROM car_names      INNER JOIN model_list ON car_names.model = model_list.model      INNER JOIN car_makers ON model_list.maker = car_makers.id      WHERE car_makers.country = countries.countryid      AND car_names.make = 'fiat')
SELECT country FROM airlines WHERE airline = "JetBlue Airways"
SELECT country  FROM airlines  WHERE abbreviation = 'Jetblue Airways'
SELECT abbreviation FROM airlines WHERE airline = "JetBlue Airways"
SELECT abbreviation  FROM airlines  WHERE airline = 'Jetblue Airways'
SELECT airline, abbreviation FROM airlines WHERE country = "USA"
SELECT airline, abbreviation FROM airlines WHERE country = 'USA'
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony'
SELECT airports.airportcode, airports.airportname  FROM airports WHERE airports.city = 'Anthony'
SELECT COUNT(*) FROM airlines
SELECT COUNT(*) FROM airlines
SELECT COUNT(*) FROM airports
SELECT COUNT(*) FROM airports
SELECT COUNT(*) FROM flights
SELECT COUNT(*) FROM flights
SELECT airline FROM airlines WHERE abbreviation = 'UAL'
SELECT airline FROM airlines WHERE abbreviation = 'UAL'
SELECT COUNT(*) FROM airlines WHERE country = 'USA'
SELECT COUNT(*) FROM airlines WHERE country = 'USA'
SELECT airports.city, airports.country  FROM airports WHERE airports.airportcode = 'Alton';
SELECT airports.city, airports.country  FROM airports  JOIN flights ON flights.destairport = airports.airportcode  JOIN airlines ON airlines.uid = flights.airline  WHERE airports.airportname = 'Alton airport'
SELECT airportname FROM airports WHERE airportcode = 'AKO'
SELECT airportname  FROM airports  WHERE airportcode = 'AKO'
SELECT airportname FROM airports WHERE city = 'Aberdeen'
SELECT airportname FROM airports WHERE city = 'Aberdeen'
SELECT COUNT(*) FROM flights  WHERE sourceairport IN (SELECT airportcode FROM airports WHERE airportname = 'APG')
SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG'
SELECT COUNT(*) FROM flights  JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname = 'ATO'
SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'ATO'
SELECT COUNT(*) FROM flights, airports WHERE flights.sourceairport = airports.airportcode AND airports.city = 'Aberdeen'
SELECT COUNT(*)  FROM flights  WHERE sourceairport IN (     SELECT airportcode      FROM airports      WHERE airportname = 'Aberdeen' )
SELECT COUNT(*) FROM flights  INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'
SELECT COUNT(*) FROM flights  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.city = 'Aberdeen'
SELECT count(*)  FROM flights  JOIN airports ON flights.sourceairport = airports.airportcode  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.city = 'Aberdeen' AND airports.city = 'Ashley'
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  WHERE sourceairport = 'Aberdeen'  AND destairport = 'Ashley'
SELECT COUNT(*)  FROM flights  WHERE airline = 'JetBlue Airways'
SELECT COUNT(*) FROM flights WHERE airline = 'Jetblue Airways'
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.uid JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.airline = 'United Airlines' AND airports.airportcode = 'ASY'
SELECT COUNT(*) FROM flights   JOIN airlines ON flights.airline = airlines.uid   JOIN airports ON flights.destairport = airports.airportcode   WHERE airlines.airline = 'United Airlines' AND airports.airportcode = 'ASY' AND flights.sourceairport != flights.destairport
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.uid JOIN airports ON flights.sourceairport = airports.airportcode WHERE airlines.airline = 'United Airlines' AND airports.airportcode = 'AHD'
SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.airline = airlines.uid  JOIN airports ON flights.sourceairport = airports.airportcode  WHERE airlines.airline = 'United Airlines'  AND airports.airportcode = 'AHD'
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.city = 'Aberdeen' AND flights.airline = 'United Airlines'
SELECT COUNT(*) FROM flights  JOIN airlines ON flights.airline = airlines.uid  JOIN airports ON flights.destairport = airports.airportcode  WHERE airlines.airline = 'United Airlines' AND airports.city = 'Aberdeen'
SELECT airports.city  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  GROUP BY airports.city  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT city  FROM airports  GROUP BY city  ORDER BY COUNT(destairport) DESC  LIMIT 1;
SELECT city  FROM airports  JOIN flights  ON flights.sourceairport = airports.airportcode  GROUP BY city  ORDER BY count(*) DESC  LIMIT 1
SELECT sourceairport, COUNT(*) AS frequency FROM flights GROUP BY sourceairport ORDER BY frequency DESC LIMIT 1
SELECT destairport, COUNT(*) AS num_flights  FROM flights INNER JOIN airports ON flights.destairport = airports.airportcode  GROUP BY destairport  ORDER BY num_flights DESC  LIMIT 1
SELECT airportcode FROM airports  WHERE airportcode IN (     SELECT destairport FROM flights      GROUP BY destairport      ORDER BY COUNT(*) DESC      LIMIT 1 ) OR airportcode IN (     SELECT sourceairport FROM flights      GROUP BY sourceairport      ORDER BY COUNT(*) DESC      LIMIT 1 )
SELECT sourceairport, COUNT(*) as num_flights  FROM flights  GROUP BY sourceairport  ORDER BY num_flights  LIMIT 1
SELECT airports.airportcode  FROM airports  JOIN flights ON flights.destairport = airports.airportcode  GROUP BY airports.airportcode  ORDER BY COUNT(flights.destairport) ASC  LIMIT 1
SELECT airline  FROM flights  GROUP BY airline  HAVING COUNT(*) = (     SELECT MAX(cnt)     FROM (         SELECT airline, COUNT(*) as cnt         FROM flights         GROUP BY airline     ) AS counts )
SELECT airlines.airline, COUNT(flights.airline) AS total_flights  FROM airlines  JOIN flights ON airlines.uid = flights.airline  GROUP BY airlines.airline  ORDER BY total_flights DESC  LIMIT 1
SELECT abbreviation, country FROM airlines WHERE uid = (     SELECT airline     FROM flights     GROUP BY airline     HAVING COUNT(*) = (         SELECT MIN(num_flights)         FROM (             SELECT airline, COUNT(*) as num_flights             FROM flights             GROUP BY airline         ) AS subquery     ) )
SELECT abbreviation, country FROM airlines WHERE uid = (     SELECT airline     FROM flights     GROUP BY airline     HAVING COUNT(*) = (         SELECT MIN(flight_count)         FROM (             SELECT airline, COUNT(*) AS flight_count             FROM flights             GROUP BY airline         ) AS counts     ) )
SELECT DISTINCT airlines.airline  FROM airlines  JOIN flights ON airlines.uid = flights.airline  WHERE flights.sourceairport = 'AHD' OR flights.destairport = 'AHD'
SELECT airlines.airline FROM airlines INNER JOIN flights ON airlines.uid = flights.airline INNER JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'AHD'
SELECT DISTINCT airlines.airline  FROM airlines  JOIN flights ON airlines.uid = flights.airline  JOIN airports ON flights.arrivalairport = airports.airportcode  WHERE airports.airportcode = 'AHD'
SELECT airlines.airline FROM flights JOIN airports ON flights.destairport = airports.airportcode JOIN airlines ON flights.airline = airlines.uid WHERE airports.airportcode = 'AHD'
SELECT airline FROM airlines  WHERE EXISTS (SELECT 1 FROM flights                WHERE airline = airlines.abbreviation                AND sourceairport = 'APG')  AND EXISTS (SELECT 1 FROM flights              WHERE airline = airlines.abbreviation              AND sourceairport = 'CVO')
SELECT airline  FROM airlines  INNER JOIN flights ON flights.airline = airlines.uid  INNER JOIN airports ON flights.sourceairport = airports.airportcode  WHERE (airports.airportcode = 'APG' OR airports.airportcode = 'CVO') GROUP BY airline  HAVING COUNT(DISTINCT airports.airportcode) = 2
SELECT airline FROM airlines JOIN flights ON flights.airline = airlines.uid JOIN airports ON flights.destairport = airports.airportcode WHERE flights.sourceairport = 'CVO' AND flights.sourceairport != 'APG'
SELECT airline  FROM airlines  JOIN flights ON airlines.uid = flights.airline  JOIN airports ON flights.sourceairport = airports.airportcode  WHERE airports.city = 'CVO'  AND airlines.uid NOT IN  (SELECT airline  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.city = 'APG')
SELECT airline FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airline HAVING COUNT(*) >= 10
SELECT airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  GROUP BY airline  HAVING COUNT(flights.flightno) >= 10
SELECT airline FROM airlines INNER JOIN flights ON airlines.uid = flights.airline GROUP BY airline HAVING COUNT(*) < 200
SELECT airline FROM airlines WHERE airline IN (     SELECT airline     FROM flights     GROUP BY airline     HAVING COUNT(*) < 200 )
SELECT flightno FROM flights WHERE airline = 'United Airlines'
SELECT flightno FROM flights WHERE airline = 'United Airlines'
SELECT flightno FROM flights WHERE sourceairport = "APG"
What are the flight numbers of flights leaving from APG?
SELECT flights.flightno  FROM flights  JOIN airports  ON flights.destairport = airports.airportcode  WHERE airports.airportname = 'APG'
Which flights are landing at APG airport?
SELECT flightno  FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'
SELECT flightno FROM flights  WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
SELECT flights.flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'
SELECT flights.flightno  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.city = 'Aberdeen'
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.city = 'Aberdeen' OR airports.city = 'Abilene'
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.city = 'Aberdeen' OR airports.city = 'Abilene'
SELECT airportname  FROM airports  WHERE airportcode NOT IN      (SELECT sourceairport       FROM flights       UNION       SELECT destairport       FROM flights)
SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights) AND airportcode NOT IN (SELECT destairport FROM flights)
SELECT COUNT(*) FROM employee
SELECT COUNT(*) FROM employee
SELECT name, age  FROM employee  ORDER BY age ASC
SELECT name FROM employee ORDER BY age ASC
SELECT city, COUNT(*) FROM employee GROUP BY city
SELECT city, COUNT(employee_id) AS num_employees FROM employee GROUP BY city
SELECT city FROM employee GROUP BY city HAVING COUNT(DISTINCT employee_id) > 1 AND MAX(age) < 30
SELECT city FROM employee GROUP BY city HAVING COUNT(*) > 1 AND MAX(age) < 30
SELECT location, COUNT(DISTINCT shop_id) AS num_shops FROM shop GROUP BY location
SELECT location, COUNT(shop_id)  FROM shop  GROUP BY location
SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)
SELECT shop.manager_name, shop.district  FROM shop  WHERE shop.number_products = (SELECT MAX(number_products) FROM shop)
SELECT MIN(number_products), MAX(number_products) FROM shop
SELECT MIN(number_products), MAX(number_products) FROM shop
SELECT name, location, district  FROM shop  ORDER BY number_products DESC
SELECT name, location, district FROM shop ORDER BY number_products DESC
SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)
SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)
SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY COUNT(evaluation.year_awarded) DESC LIMIT 1
SELECT employee.name FROM employee INNER JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY COUNT(evaluation.employee_id) DESC LIMIT 1
SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.bonus =     (SELECT MAX(bonus)     FROM evaluation)
SELECT employee.name  FROM employee  JOIN evaluation ON employee.employee_id = evaluation.employee_id  ORDER BY evaluation.bonus DESC  LIMIT 1
SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)
SELECT employee.name  FROM employee WHERE employee.employee_id NOT IN (SELECT evaluation.employee_id FROM evaluation)
SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name HAVING COUNT(hiring.employee_id) = (SELECT MAX(count) FROM (SELECT COUNT(hiring.employee_id) as count FROM hiring GROUP BY hiring.shop_id) as counts)
SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name HAVING COUNT(*) = (SELECT COUNT(*) FROM hiring                    GROUP BY shop_id                    ORDER BY COUNT(*) DESC                    LIMIT 1)
SELECT shop.name FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.employee_id IS NULL
SELECT shop.name  FROM shop  LEFT JOIN hiring ON shop.shop_id = hiring.shop_id  WHERE hiring.employee_id IS NULL
SELECT shop.name, COUNT(employee.employee_id) FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name
SELECT shop.name, COUNT(employee.employee_id) AS num_employees FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name
SELECT SUM(bonus) FROM evaluation
SELECT SUM(bonus) FROM evaluation
What is the average age of employees in the shop located in district A?
SELECT * FROM hiring JOIN employee ON hiring.employee_id = employee.employee_id JOIN shop ON hiring.shop_id = shop.shop_id
SELECT district FROM shop WHERE number_products < 3000 AND district IN (     SELECT district     FROM shop     WHERE number_products > 10000 )
SELECT district FROM shop WHERE number_products < 3000 AND district IN (     SELECT district     FROM shop     WHERE number_products > 10000 )
SELECT COUNT(DISTINCT location) FROM shop
SELECT COUNT(DISTINCT location) FROM shop
SELECT COUNT(*) FROM documents
SELECT COUNT(*) FROM documents
SELECT documents.document_id, documents.document_name, documents.document_description  FROM documents
SELECT documents.document_id, documents.document_name, documents.document_description  FROM documents
SELECT document_name, template_id  FROM documents  WHERE document_description LIKE '%w%'
SELECT documents.document_name, documents.template_id  FROM documents  JOIN templates ON documents.template_id = templates.template_id  WHERE documents.document_description LIKE '%w%'
SELECT documents.document_id, templates.template_id, documents.document_description FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = "Robbin CV"
SELECT documents.document_id, documents.template_id, documents.document_description  FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Robbin CV'
SELECT COUNT(DISTINCT template_type_code)  FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code
SELECT COUNT(DISTINCT template_type_code) FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code
SELECT COUNT(documents.document_id)  FROM documents  JOIN templates ON documents.template_id = templates.template_id  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_code = 'PPT'
SELECT COUNT(*) FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'PPT'
SELECT templates.template_id, COUNT(documents.template_id) AS num_documents FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code LEFT JOIN documents ON documents.template_id = templates.template_id GROUP BY templates.template_id
SELECT templates.template_id, COUNT(*)  FROM templates  JOIN documents ON templates.template_id = documents.template_id  GROUP BY templates.template_id
SELECT templates.template_id, templates.template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code GROUP BY templates.template_id, templates.template_type_code HAVING COUNT(documents.document_id) = (     SELECT MAX(document_count)     FROM (         SELECT templates.template_id, COUNT(documents.document_id) AS document_count         FROM templates         INNER JOIN documents ON templates.template_id = documents.template_id         GROUP BY templates.template_id     ) AS document_counts )
SELECT templates.template_id, templates.template_type_code  FROM templates  JOIN documents ON templates.template_id = documents.template_id  GROUP BY templates.template_id  ORDER BY COUNT(documents.document_id) DESC  LIMIT 1
SELECT template_id FROM templates GROUP BY template_id HAVING COUNT(template_id) > 1;
SELECT templates.template_id FROM templates INNER JOIN documents ON documents.template_id = templates.template_id GROUP BY templates.template_id HAVING COUNT(DISTINCT documents.document_id) > 1
SELECT t.template_id  FROM templates t LEFT JOIN documents d ON t.template_id = d.template_id WHERE d.template_id IS NULL
SELECT templates.template_id FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id WHERE documents.template_id IS NULL
SELECT COUNT(*)  FROM templates
SELECT COUNT(*) FROM templates
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code
SELECT DISTINCT template_type_code  FROM templates
SELECT DISTINCT template_type_code FROM ref_template_types
SELECT templates.template_id  FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_code = 'PP' OR ref_template_types.template_type_code = 'PPT'
SELECT templates.template_id  FROM templates  WHERE templates.template_type_code IN ('PP', 'PPT')
SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV'
SELECT COUNT(*)  FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_description = 'CV'
SELECT templates.version_number, ref_template_types.template_type_code FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE templates.version_number > 5
SELECT version_number, template_type_code FROM templates WHERE version_number > 5
SELECT template_type_code, COUNT(*)  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY template_type_code
SELECT template_type_code, COUNT(*) AS num_templates FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code GROUP BY template_type_code
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT template_type_code  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  GROUP BY template_type_code  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (     SELECT template_type_code     FROM templates     GROUP BY template_type_code     HAVING COUNT(*) >= 3 )
SELECT template_type_code FROM ref_template_types WHERE template_type_code IN (   SELECT template_type_code   FROM templates   GROUP BY template_type_code   HAVING COUNT(*) < 3 )
SELECT MIN(version_number), template_type_code FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code
SELECT MIN(version_number), template_type_code FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code
SELECT templates.template_type_code FROM templates JOIN documents ON documents.template_id = templates.template_id WHERE documents.document_name = "Data base"
SELECT templates.template_type_code FROM templates JOIN documents ON documents.template_id = templates.template_id WHERE documents.document_name = 'Data base'
SELECT document_name FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  JOIN documents ON templates.template_id = documents.template_id  WHERE ref_template_types.template_type_code = 'BK'
SELECT documents.document_name  FROM documents  JOIN templates ON documents.template_id = templates.template_id  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE templates.template_type_code = 'BK'
SELECT ref_template_types.template_type_code, COUNT(documents.document_id) FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code
SELECT ref_template_types.template_type_code, COUNT(documents.document_id) FROM ref_template_types JOIN templates ON templates.template_type_code = ref_template_types.template_type_code JOIN documents ON documents.template_id = templates.template_id GROUP BY ref_template_types.template_type_code
SELECT template_type_code, COUNT(*) AS num_documents FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code GROUP BY template_type_code ORDER BY num_documents DESC LIMIT 1
SELECT template_type_code FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code GROUP BY template_type_code ORDER BY COUNT(template_type_code) DESC LIMIT 1;
SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (     SELECT template_type_code      FROM templates )
SELECT ref_template_types.template_type_code FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code WHERE templates.template_type_code IS NULL;
SELECT template_type_code, template_type_description  FROM ref_template_types
SELECT template_type_code, template_type_description  FROM ref_template_types
SELECT template_type_description FROM ref_template_types WHERE template_type_code = "AD"
SELECT template_type_description  FROM ref_template_types  WHERE template_type_code = 'AD'
SELECT template_type_code FROM ref_template_types WHERE template_type_description = "Book"
SELECT ref_template_types.template_type_code  FROM ref_template_types WHERE ref_template_types.template_type_description = "Book"
SELECT DISTINCT ref_template_types.template_type_description  FROM ref_template_types  INNER JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  INNER JOIN documents ON templates.template_id = documents.template_id  INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id
SELECT DISTINCT ref_template_types.template_type_description  FROM templates  JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  JOIN documents  ON documents.template_id = templates.template_id  JOIN paragraphs  ON paragraphs.document_id = documents.document_id
SELECT template_id  FROM templates  WHERE template_type_code = (SELECT template_type_code FROM ref_template_types WHERE template_type_description = "Presentation")
SELECT templates.template_id  FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_description = 'Presentation'
SELECT COUNT(*) FROM paragraphs
SELECT COUNT(paragraph_id) FROM paragraphs
SELECT COUNT(paragraph_id) FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id WHERE document_name = 'Summer Show'
SELECT COUNT(paragraph_id) FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Summer Show'
SELECT paragraph_text, other_details FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE paragraph_text = 'Korea';
SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%'
SELECT paragraphs.paragraph_id, paragraphs.paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Welcome to NY'
SELECT paragraphs.paragraph_id, paragraphs.paragraph_text  FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id  JOIN templates ON documents.template_id = templates.template_id  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE documents.document_name = 'Welcome to NY'
SELECT paragraph_text  FROM paragraphs  INNER JOIN documents ON paragraphs.document_id = documents.document_id  INNER JOIN templates ON documents.template_id = templates.template_id  INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE document_name = "Customer reviews"
SELECT paragraphs.paragraph_text  FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE documents.document_name = 'Customer reviews'
SELECT documents.document_id, COUNT(paragraphs.paragraph_id)  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  ORDER BY documents.document_id
SELECT documents.document_id, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id ASC
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) FROM documents JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id, documents.document_name
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS num_paragraphs  FROM documents  JOIN templates ON documents.template_id = templates.template_id  JOIN paragraphs ON paragraphs.document_id = documents.document_id  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  GROUP BY documents.document_id, documents.document_name
SELECT document_id FROM documents WHERE      (SELECT COUNT(*) FROM paragraphs WHERE paragraphs.document_id = documents.document_id) >= 2
SELECT documents.document_id  FROM documents  JOIN templates ON documents.template_id = templates.template_id  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  HAVING COUNT(paragraphs.paragraph_id) >= 2
SELECT document_id, document_name FROM documents WHERE document_id = (SELECT document_id                      FROM paragraphs                      GROUP BY document_id                      ORDER BY COUNT(paragraph_id) DESC                      LIMIT 1)
SELECT documents.document_id, documents.document_name  FROM documents  JOIN templates ON documents.template_id = templates.template_id  JOIN paragraphs ON paragraphs.document_id = documents.document_id  GROUP BY documents.document_id, documents.document_name  ORDER BY COUNT(paragraphs.paragraph_id) DESC  LIMIT 1
SELECT document_id FROM documents LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY document_id ORDER BY COUNT(paragraphs.paragraph_id) LIMIT 1
SELECT documents.document_id  FROM documents  LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  ORDER BY COUNT(paragraphs.paragraph_id)  LIMIT 1
SELECT document_id FROM documents WHERE document_id IN (   SELECT document_id   FROM paragraphs   GROUP BY document_id   HAVING COUNT(paragraph_id) BETWEEN 1 AND 2 )
SELECT document_id FROM documents WHERE document_id IN (     SELECT document_id     FROM paragraphs     GROUP BY document_id     HAVING COUNT(paragraph_id) BETWEEN 1 AND 2 )
SELECT document_id  FROM paragraphs  WHERE paragraph_text = 'Brazil' AND paragraph_text = 'Ireland'
SELECT document_id  FROM paragraphs  WHERE paragraph_text = 'Brazil' AND paragraph_text = 'Ireland'
SELECT COUNT(*) FROM teacher;
SELECT COUNT(*) FROM teacher
SELECT name FROM teacher ORDER BY age ASC
SELECT name  FROM teacher  ORDER BY age ASC
SELECT age, hometown FROM teacher
SELECT age, hometown FROM teacher
SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'
SELECT name  FROM teacher  WHERE hometown <> 'Little Lever Urban District'
SELECT name FROM teacher WHERE age IN (32, 33)
SELECT name FROM teacher WHERE age = 32 OR age = 33
SELECT hometown FROM teacher WHERE age = (SELECT MIN(age) FROM teacher)
SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1
SELECT teacher.hometown, COUNT(teacher.teacher_id)  FROM teacher  JOIN course_arrange ON course_arrange.teacher_id = teacher.teacher_id  GROUP BY teacher.hometown
SELECT teacher.hometown, COUNT(*) AS teacher_count  FROM teacher  JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id  GROUP BY teacher.hometown
SELECT hometown, COUNT(*) AS count FROM teacher GROUP BY hometown ORDER BY count DESC LIMIT 1
SELECT teacher.hometown, COUNT(*) AS count FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.hometown ORDER BY count DESC LIMIT 1
SELECT t1.hometown  FROM teacher t1  JOIN teacher t2 ON t1.hometown = t2.hometown AND t1.teacher_id <> t2.teacher_id
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(teacher_id) >= 2
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC;
SELECT teacher.name  FROM teacher  JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id  JOIN course ON course_arrange.course_id = course.course_id  WHERE course.course = 'math'
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.course = 'math'
SELECT teacher.name, COUNT(course_arrange.course_id)  FROM teacher  INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id  GROUP BY teacher.name
SELECT teacher.name, COUNT(course_arrange.course_id)  FROM teacher JOIN course_arrange ON course_arrange.teacher_id = teacher.teacher_id GROUP BY teacher.name
SELECT name  FROM teacher  WHERE teacher_id IN (     SELECT teacher_id      FROM course_arrange      GROUP BY teacher_id      HAVING COUNT(DISTINCT course_id) >= 2 )
SELECT teacher.name  FROM teacher  JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id  GROUP BY teacher.name  HAVING COUNT(course_arrange.course_id) >= 2
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)
SELECT COUNT(*) FROM visitor WHERE age < 30
SELECT name  FROM visitor  WHERE level_of_membership > 4  ORDER BY level_of_membership DESC
SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4
SELECT visitor.name, visitor.level_of_membership FROM visitor WHERE visitor.level_of_membership > 4 ORDER BY visitor.age DESC
SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1
SELECT AVG(num_of_staff)  FROM museum  WHERE open_year < 2009
SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum'
SELECT name FROM museum WHERE num_of_staff > (     SELECT MIN(num_of_staff)     FROM museum     WHERE open_year > 2010 )
SELECT visitor.id, visitor.name, visitor.age FROM visitor INNER JOIN visit ON visit.visitor_id = visitor.id GROUP BY visitor.id, visitor.name, visitor.age HAVING COUNT(DISTINCT visit.museum_id) > 1
SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor JOIN visit ON visit.visitor_id = visitor.id GROUP BY visitor.id, visitor.name, visitor.level_of_membership ORDER BY SUM(visit.total_spent) DESC LIMIT 1
SELECT museum_id, name FROM museum ORDER BY (SELECT COUNT(*) FROM visit WHERE visit.museum_id = museum.museum_id) DESC LIMIT 1
SELECT museum.name FROM museum LEFT JOIN visit ON museum.museum_id = visit.museum_id WHERE visit.museum_id IS NULL
SELECT visitor.name, visitor.age  FROM visitor  JOIN visit ON visitor.id = visit.visitor_id  GROUP BY visit.visitor_id  ORDER BY SUM(visit.num_of_ticket) DESC  LIMIT 1
SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit
SELECT SUM(total_spent) FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership = 1
SELECT v.name FROM visitor v INNER JOIN visit vis1 ON v.id = vis1.visitor_id INNER JOIN visit vis2 ON vis1.visitor_id = vis2.visitor_id INNER JOIN museum m1 ON vis1.museum_id = m1.museum_id INNER JOIN museum m2 ON vis2.museum_id = m2.museum_id WHERE m1.open_year < 2009 AND m2.open_year > 2011
SELECT COUNT(DISTINCT visitor_id) FROM visitor WHERE visitor_id NOT IN      (SELECT visitor_id      FROM visit      JOIN museum ON visit.museum_id = museum.museum_id      WHERE museum.open_year > 2010)
SELECT COUNT(*) FROM museum WHERE open_year > 2013 OR open_year < 2008
SELECT COUNT(*) FROM players
SELECT COUNT(*) FROM players
SELECT COUNT(*) FROM matches
SELECT COUNT(*) FROM matches
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT first_name, birth_date  FROM players  WHERE country_code = 'USA'
SELECT AVG(loser_age) FROM matches
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches
SELECT AVG(winner_rank) FROM matches
SELECT AVG(winner_rank)  FROM matches  JOIN rankings  ON matches.winner_id = rankings.player_id
SELECT MAX(loser_rank) FROM matches
SELECT MAX(loser_rank) FROM matches
SELECT COUNT(DISTINCT country_code) FROM players
SELECT COUNT(DISTINCT country_code) FROM players
SELECT COUNT(DISTINCT loser_name) FROM matches INNER JOIN players ON matches.loser_id = players.player_id
SELECT COUNT(DISTINCT loser_name) FROM players
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10
SELECT DISTINCT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT DISTINCT winner_name  FROM players  JOIN matches ON matches.winner_id = players.player_id  JOIN matches AS m ON m.winner_id = players.player_id  WHERE matches.year = 2013 AND m.year = 2016
SELECT DISTINCT players.first_name, players.last_name  FROM players  INNER JOIN matches ON matches.winner_id = players.player_id  INNER JOIN rankings ON rankings.player_id = players.player_id  WHERE matches.year = 2013  AND players.player_id IN (     SELECT players.player_id      FROM players      INNER JOIN matches ON matches.winner_id = players.player_id      WHERE matches.year = 2016 )
SELECT COUNT(*)  FROM matches  WHERE year = 2013 OR year = 2016
SELECT COUNT(*)  FROM matches  WHERE year = 2013 OR year = 2016
SELECT players.country_code, players.first_name FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND matches.tourney_name = 'Australian Open'
SELECT players.first_name, players.country_code FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id WHERE (matches.tourney_name = 'WTA Championships' AND matches.tourney_id = 'AO')
SELECT players.first_name, players.country_code FROM players WHERE players.birth_date = (SELECT MIN(birth_date) FROM players)
SELECT players.first_name, players.country_code FROM players WHERE players.birth_date =      (SELECT MIN(players.birth_date)     FROM players)
SELECT first_name, last_name  FROM players  ORDER BY birth_date
SELECT CONCAT(first_name, ' ', last_name) AS full_name  FROM players  ORDER BY birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date ASC
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'left' ORDER BY players.birth_date ASC
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.tours DESC LIMIT 1
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.tours DESC LIMIT 1;
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT year, COUNT(*) AS num_matches  FROM matches  GROUP BY year  ORDER BY num_matches DESC  LIMIT 1;
SELECT players.first_name, players.last_name, players.winner_rank_points FROM players JOIN matches ON matches.winner_id = players.player_id GROUP BY players.player_id HAVING COUNT(*) = (     SELECT MAX(count)     FROM (         SELECT COUNT(*) AS count         FROM players         JOIN matches ON matches.winner_id = players.player_id         GROUP BY players.player_id     ) AS counts )
SELECT players.first_name, players.last_name, players.winner_rank_points FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id GROUP BY players.player_id ORDER BY COUNT(matches.match_num) DESC LIMIT 1;
SELECT winner_name  FROM matches  JOIN players ON matches.winner_id = players.player_id  JOIN rankings ON rankings.player_id = players.player_id  WHERE tourney_name = 'Australian Open'  ORDER BY ranking_points DESC  LIMIT 1
SELECT winner_name FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;
SELECT matches.loser_name, matches.winner_name FROM matches WHERE matches.minutes = (SELECT MAX(minutes) FROM matches)
SELECT winner_name, loser_name FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id WHERE match_num = (SELECT match_num FROM matches ORDER BY minutes DESC LIMIT 1)
SELECT AVG(rankings.ranking) AS average_ranking, players.first_name FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY players.first_name
SELECT players.first_name, AVG(rankings.ranking) FROM players JOIN rankings ON rankings.player_id = players.player_id GROUP BY players.first_name
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON rankings.player_id = players.player_id GROUP BY players.player_id, players.first_name
SELECT first_name, SUM(ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name
SELECT players.country_code, COUNT(players.player_id) AS num_of_players FROM players GROUP BY players.country_code
SELECT country_code, COUNT(*)  FROM players  GROUP BY country_code
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1
SELECT country_code  FROM players  GROUP BY country_code  ORDER BY COUNT(player_id) DESC  LIMIT 1
SELECT DISTINCT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50
SELECT players.country_code FROM players GROUP BY players.country_code HAVING COUNT(players.player_id) > 50;
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date
SELECT ranking_date, count(tours) AS total_tours FROM rankings GROUP BY ranking_date
SELECT year, COUNT(*) FROM matches GROUP BY year
SELECT year, COUNT(*) as match_count FROM matches GROUP BY year
SELECT first_name, last_name, winner_rank FROM players, matches, rankings WHERE matches.winner_id = players.player_id AND rankings.player_id = players.player_id ORDER BY winner_age LIMIT 3
SELECT first_name, last_name, winner_rank  FROM players JOIN matches ON matches.winner_id = players.player_id ORDER BY winner_age ASC LIMIT 3
SELECT COUNT(DISTINCT winner_id)  FROM players  JOIN matches ON matches.winner_id = players.player_id  WHERE hand = 'Left' AND        EXISTS(SELECT 1               FROM matches               WHERE matches.winner_id = players.player_id AND                     EXISTS(SELECT 1                            FROM matches                            WHERE loser_id = players.player_id AND                                  tourney_name = 'WTA Championships'))
SELECT COUNT(*)  FROM matches  INNER JOIN players ON matches.winner_id = players.player_id  WHERE players.hand = 'left'  AND matches.tourney_name = 'WTA Championships'
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.winner_id = players.player_id WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings)
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id WHERE rankings.ranking_points = (SELECT MAX(rankings.ranking_points) FROM rankings)
SELECT players.hand, COUNT(*) as number_of_players FROM players GROUP BY players.hand
SELECT hand, COUNT(*) FROM players GROUP BY hand
SELECT COUNT(ship.id) FROM ship JOIN battle ON ship.lost_in_battle = battle.id WHERE battle.result = 'Captured'
SELECT name, tonnage FROM ship ORDER BY name DESC
SELECT name, date, result FROM battle
SELECT MAX(killed), MIN(killed) FROM death
SELECT AVG(injured) FROM death
SELECT death.note, death.killed, death.injured FROM death INNER JOIN ship ON death.caused_by_ship_id = ship.id INNER JOIN battle ON ship.lost_in_battle = battle.id WHERE ship.tonnage = 't'
SELECT battle.name, battle.result FROM battle JOIN ship ON ship.lost_in_battle = battle.id JOIN death ON death.caused_by_ship_id = ship.id WHERE battle.bulgarian_commander <> 'Boril'
SELECT battle.id, battle.name FROM battle WHERE EXISTS (   SELECT 1    FROM ship   WHERE ship.lost_in_battle = battle.id   AND ship.ship_type = 'Brig' )
SELECT battle.id, battle.name FROM battle JOIN ship ON ship.lost_in_battle = battle.id JOIN death ON death.caused_by_ship_id = ship.id GROUP BY battle.id, battle.name HAVING SUM(death.killed) > 10
SELECT ship.id, ship.name  FROM ship  JOIN battle ON ship.lost_in_battle = battle.id  JOIN death ON death.caused_by_ship_id = ship.id  GROUP BY ship.id, ship.name  ORDER BY SUM(death.injured) DESC  LIMIT 1;
SELECT DISTINCT battle.name FROM battle WHERE battle.bulgarian_commander = 'Kaloyan' AND battle.latin_commander = 'Baldwin I'
SELECT COUNT(DISTINCT result) FROM battle
SELECT COUNT(*) FROM battle  LEFT JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.tonnage = '225' AND ship.id IS NULL
SELECT battle.name, battle.date  FROM battle  JOIN ship ON ship.lost_in_battle = battle.id  WHERE ship.name = 'Lettice'  AND ship.name = 'HMS Atalanta'
SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON ship.lost_in_battle = battle.id WHERE battle.location = 'English Channel'   AND ship.lost_in_battle IS NULL;
SELECT note FROM death WHERE note LIKE '%East%'
SELECT line_1, line_2 FROM addresses
SELECT line_1, line_2 FROM addresses;
SELECT COUNT(*) FROM courses;
SELECT COUNT(*) FROM courses
SELECT course_description FROM courses WHERE course_name = 'Math'
SELECT course_description FROM courses WHERE course_name LIKE '%math%'
SELECT zip_postcode  FROM addresses  WHERE city = 'Port Chelsea'
SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'
SELECT departments.department_name, departments.department_id FROM departments JOIN degree_programs ON degree_programs.department_id = departments.department_id GROUP BY departments.department_id ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1
SELECT departments.department_name, departments.department_id FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_name, departments.department_id ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT department_id) FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id
SELECT COUNT(DISTINCT department_id) FROM departments
SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs
SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs
SELECT COUNT(*)  FROM degree_programs WHERE department_id IN (SELECT department_id FROM departments WHERE department_name = 'engineering')
SELECT COUNT(*) FROM degree_programs WHERE department_id IN (SELECT department_id FROM departments WHERE department_name = 'engineering')
SELECT section_name, section_description FROM sections
SELECT section_name, section_description FROM sections
SELECT DISTINCT courses.course_name, courses.course_id FROM courses INNER JOIN sections ON sections.course_id = courses.course_id GROUP BY sections.course_id HAVING COUNT(sections.section_id) <= 2
SELECT course_name, course_id  FROM courses  WHERE course_id IN(     SELECT course_id      FROM sections      GROUP BY course_id      HAVING COUNT(*) < 2 )
SELECT section_name FROM sections ORDER BY section_name DESC
SELECT section_name FROM sections ORDER BY section_name DESC
SELECT semesters.semester_name, semesters.semester_id, COUNT(student_enrolment.student_id) AS num_students FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_name, semesters.semester_id ORDER BY num_students DESC LIMIT 1;
SELECT semesters.semester_name, semesters.semester_id, COUNT(student_enrolment.student_id) AS total_students  FROM student_enrolment  JOIN semesters ON student_enrolment.semester_id = semesters.semester_id  GROUP BY semesters.semester_name, semesters.semester_id  ORDER BY total_students DESC  LIMIT 1;
SELECT department_description FROM departments WHERE department_name LIKE '%the computer%'
SELECT department_description FROM departments WHERE department_name LIKE '%computer%'
SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE (SELECT COUNT(degree_program_id) FROM student_enrolment WHERE student_id = students.student_id) = 2;
SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2;
SELECT first_name, middle_name, last_name  FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_summary_name = 'Bachelor'
SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name = 'Bachelors'
SELECT degree_programs.degree_summary_name, COUNT(student_enrolment.student_id) AS enrolment_count FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_summary_name ORDER BY enrolment_count DESC LIMIT 1;
SELECT degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1
SELECT degree_programs.department_id, departments.department_name, degree_programs.degree_summary_name  FROM degree_programs  JOIN departments ON degree_programs.department_id = departments.department_id  JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id  GROUP BY degree_programs.department_id, departments.department_name, degree_programs.degree_summary_name  ORDER BY COUNT(student_enrolment.student_id) DESC  LIMIT 1;
SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id IN (SELECT degree_program_id FROM student_enrolment                             GROUP BY degree_program_id                             HAVING COUNT(student_id) = (SELECT MAX(count_students)                                                       FROM (SELECT degree_program_id, COUNT(student_id) AS count_students                                                             FROM student_enrolment                                                             GROUP BY degree_program_id)))
SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(student_enrolment.student_id) AS number_of_enrollments FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY number_of_enrollments DESC LIMIT 1;
SELECT students.first_name, students.middle_name, students.last_name, students.student_id, COUNT(student_enrolment.student_enrolment_id) AS enrollments FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY enrollments DESC LIMIT 1
SELECT semester_name FROM semesters WHERE semester_id NOT IN (     SELECT DISTINCT semester_id     FROM student_enrolment )
SELECT semester_name  FROM semesters  WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)
SELECT DISTINCT course_name  FROM courses  WHERE course_id IN (   SELECT course_id    FROM student_enrolment_courses )
SELECT DISTINCT course_name FROM courses INNER JOIN student_enrollment_courses ON courses.course_id = student_enrollment_courses.course_id
SELECT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY course_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT course_name FROM courses JOIN student_enrolment_courses ON student_enrolment_courses.course_id = courses.course_id GROUP BY course_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT students.last_name  FROM students  JOIN addresses ON students.current_address_id = addresses.address_id  LEFT JOIN student_enrolment ON student_enrolment.student_id = students.student_id  WHERE addresses.state_province_county = 'North Carolina'  AND student_enrolment.student_id IS NULL
SELECT last_name  FROM students  JOIN addresses ON students.permanent_address_id = addresses.address_id  LEFT JOIN student_enrolment ON student_enrolment.student_id = students.student_id  WHERE address.state_province_county = 'North Carolina'  AND student_enrolment.student_enrolment_id IS NULL
SELECT transcript_date, transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id JOIN student_enrolment_courses ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id GROUP BY transcript_id HAVING COUNT(DISTINCT course_id) >= 2
SELECT transcript_date, transcript_id  FROM transcripts  INNER JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id  INNER JOIN student_enrolment_courses ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id  GROUP BY transcript_id HAVING COUNT(DISTINCT course_id) >= 2
SELECT students.cell_mobile_number FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id JOIN addresses AS a ON students.current_address_id = a.address_id WHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward'
SELECT cell_mobile_number  FROM students  WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered ASC LIMIT 1;
SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1
SELECT students.first_name, students.middle_name, students.last_name  FROM students ORDER BY students.date_first_registered  LIMIT 1
SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1
SELECT first_name  FROM students INNER JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.address_id <> students.current_address_id
SELECT first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.address_id <> students.current_address_id
SELECT addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3 FROM addresses JOIN students ON students.current_address_id = addresses.address_id GROUP BY addresses.address_id ORDER BY COUNT(students.student_id) DESC LIMIT 1
SELECT address_id, line_1, line_2  FROM addresses  WHERE address_id IN (     SELECT current_address_id      FROM students      GROUP BY current_address_id      ORDER BY COUNT(student_id) DESC      LIMIT 1 )
SELECT AVG(transcript_date) FROM transcripts
SELECT AVG(transcript_date) FROM transcripts
SELECT transcript_date, transcript_contents.other_details FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id JOIN student_enrolment_courses ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id WHERE student_enrolment.degree_program_id = degree_programs.degree_program_id ORDER BY transcript_date LIMIT 1
SELECT MIN(transcript_date) FROM transcripts
SELECT COUNT(*) FROM transcripts
SELECT COUNT(*) FROM transcripts
SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1
SELECT MAX(transcript_date) FROM transcripts
SELECT COUNT(DISTINCT transcript_id) AS max_enrollment_count, student_course_id FROM transcript_contents GROUP BY student_course_id ORDER BY max_enrollment_count DESC LIMIT 1
SELECT COUNT(*) as course_count, student_enrolment.student_enrolment_id FROM student_enrolment_courses GROUP BY course_id ORDER BY course_count DESC LIMIT 1
SELECT transcript_date, transcript_id FROM transcripts ORDER BY COUNT(transcript_id) LIMIT 1
SELECT transcript_date, transcript_id  FROM transcripts  ORDER BY COUNT(*) ASC  LIMIT 1;
SELECT DISTINCT se.semester_id FROM student_enrolment se JOIN student_enrolment_courses sec ON sec.student_enrolment_id = se.student_enrolment_id JOIN courses c ON c.course_id = sec.course_id JOIN sections s ON s.course_id = c.course_id JOIN semesters sem ON sem.semester_id = se.semester_id JOIN degree_programs dp ON dp.degree_program_id = se.degree_program_id WHERE dp.degree_summary_name = 'Master' OR dp.degree_summary_name = 'Bachelor'
SELECT semester_id  FROM student_enrolment INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id INNER JOIN semesters ON student_enrolment.semester_id = semesters.semester_id WHERE degree_summary_name = 'Masters' AND degree_summary_name = 'Bachelors'
SELECT COUNT(DISTINCT students.current_address_id)  FROM students  INNER JOIN addresses ON students.current_address_id = addresses.address_id
SELECT DISTINCT addresses.line_1, addresses.line_2, addresses.line_3, addresses.city, addresses.zip_postcode, addresses.state_province_county, addresses.country, addresses.other_address_details FROM students JOIN addresses ON students.current_address_id = addresses.address_id OR students.permanent_address_id = addresses.address_id
SELECT * FROM students ORDER BY last_name DESC, first_name DESC;
SELECT * FROM students ORDER BY last_name DESC
SELECT line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM addresses WHERE address_id = 'h'
SELECT section_description FROM sections WHERE section_name = 'h'
SELECT first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = 'Haiti' OR students.cell_mobile_number = '09700166582'
SELECT students.first_name  FROM students  JOIN addresses ON students.permanent_address_id = addresses.address_id  WHERE addresses.country = 'Haiti' OR students.cell_mobile_number = '09700166582'
SELECT title FROM cartoon ORDER BY title ASC
SELECT title FROM cartoon ORDER BY title ASC
SELECT cartoon.title  FROM cartoon  WHERE cartoon.directed_by = "Ben Jones"
SELECT cartoon.title  FROM cartoon  JOIN tv_channel ON cartoon.channel = tv_channel.id  WHERE cartoon.directed_by = 'Ben Jones'
SELECT COUNT(*) FROM cartoon WHERE written_by = "Joseph Kuhr"
SELECT COUNT(*)  FROM cartoon WHERE written_by = 'Joseph Kuhr'
SELECT cartoon.title, cartoon.directed_by  FROM cartoon JOIN tv_series ON cartoon.id = tv_series.id JOIN tv_channel ON cartoon.channel = tv_channel.id ORDER BY tv_series.air_date
SELECT cartoon.title, cartoon.directed_by FROM cartoon  INNER JOIN tv_series ON cartoon.channel = tv_series.channel  INNER JOIN tv_channel ON tv_channel.id = tv_series.channel  ORDER BY tv_series.air_date
SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'
SELECT title FROM cartoon WHERE directed_by IN ('Ben Jones', 'Brandon Vietti')
SELECT country, COUNT(*) AS num_channels  FROM tv_channel  GROUP BY country  ORDER BY num_channels DESC  LIMIT 1;
SELECT country, COUNT(*) as num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel
SELECT content FROM tv_channel WHERE series_name = "Sky Radio"
SELECT content FROM series WHERE series_name = 'Sky Radio'
SELECT package_option  FROM tv_channel  WHERE series_name = "Sky Radio"
SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio';
SELECT COUNT(*)  FROM tv_channel  WHERE language = 'English'
SELECT COUNT(tv_channel.id)  FROM tv_channel  WHERE tv_channel.language = 'English'
SELECT language, COUNT(tv_channel.id) AS channel_count  FROM tv_channel  GROUP BY language  ORDER BY channel_count ASC  LIMIT 1;
SELECT language, COUNT(*) as num_channels FROM tv_channel GROUP BY language HAVING COUNT(*) = (     SELECT MIN(channel_count)     FROM (         SELECT COUNT(*) as channel_count         FROM tv_channel         GROUP BY language       ) AS subquery )
SELECT language, COUNT(tv_channel.id)  FROM tv_channel GROUP BY language
SELECT language, COUNT(tv_channel.id) AS num_channels FROM tv_channel  JOIN tv_series ON tv_series.channel = tv_channel.id  JOIN cartoon ON cartoon.channel = tv_channel.id  GROUP BY language
SELECT tv_channel.series_name FROM tv_channel JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.title = "The Rise of the Blue Beetle!"
SELECT tv_channel.series_name  FROM tv_channel  JOIN cartoon ON cartoon.channel = tv_channel.id  WHERE cartoon.title = "The Rise of the Blue Beetle"
SELECT cartoon.title FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id JOIN tv_series ON tv_series.channel = tv_channel.id WHERE tv_series.series_name = "Sky Radio"
SELECT cartoon.title FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id JOIN tv_series ON cartoon.channel = tv_series.channel WHERE tv_series.series_name = "Sky Radio"
SELECT episode  FROM tv_series  ORDER BY rating DESC
SELECT episode FROM tv_series ORDER BY rating DESC
SELECT tv_series.series_name, tv_series.episode, tv_series.rating FROM tv_series ORDER BY tv_series.rating DESC LIMIT 3
SELECT episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3
SELECT MIN(share), MAX(share) FROM tv_series
SELECT MAX(share), MIN(share) FROM tv_series
SELECT air_date FROM tv_series WHERE episode = 'A Love of a Lifetime'
SELECT air_date FROM tv_series WHERE episode = "A Love of a Lifetime"
SELECT weekly_rank  FROM tv_series  WHERE episode = "A Love of a Lifetime"
SELECT weekly_rank FROM tv_series WHERE episode = "A Love of a Lifetime"
SELECT tv_channel.series_name  FROM tv_channel  INNER JOIN tv_series ON tv_channel.id = tv_series.channel  WHERE tv_series.episode = "A Love of a Lifetime"
SELECT tv_series.series_name  FROM tv_series  WHERE tv_series.episode = "A Love of a Lifetime"
SELECT episode  FROM tv_series  WHERE channel = (SELECT id FROM tv_channel WHERE series_name = "Sky Radio")
SELECT episode FROM tv_series WHERE series_name = 'Sky Radio'
SELECT directed_by, COUNT(*) FROM cartoon GROUP BY directed_by
SELECT cartoon.directed_by, COUNT(cartoon.id) AS num_cartoons FROM cartoon GROUP BY cartoon.directed_by
SELECT production_code, cartoon.channel FROM cartoon INNER JOIN tv_series ON cartoon.id = tv_series.id INNER JOIN tv_channel ON cartoon.channel = tv_channel.id ORDER BY air_date DESC LIMIT 1
SELECT production_code, channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1
SELECT package_option, series_name  FROM tv_channel  WHERE high_definition_tv = 'yes'
SELECT package_option, series_name  FROM tv_channel  WHERE hight_definition_tv = 'yes'
SELECT DISTINCT(tv_channel.country) FROM tv_channel JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey'
SELECT country  FROM tv_channel  INNER JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey'
SELECT DISTINCT tv_channel.country  FROM tv_channel  LEFT JOIN cartoon ON cartoon.channel = tv_channel.id  WHERE cartoon.written_by <> 'Todd Casey' OR cartoon.written_by IS NULL
SELECT DISTINCT country  FROM tv_channel  LEFT JOIN cartoon ON cartoon.channel = tv_channel.id  WHERE cartoon.written_by <> 'Todd Casey' OR cartoon.written_by IS NULL;
SELECT tv_channel.series_name, tv_channel.country FROM tv_channel JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = 'Ben Jones' AND cartoon.directed_by = 'Michael Chang'
SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  JOIN cartoon ON cartoon.channel = tv_channel.id  WHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Michael Chang'
SELECT pixel_aspect_ratio_par, country  FROM tv_channel  WHERE language != 'English'
SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language <> 'English' AND content = 'TV Channel'
SELECT tv_channel.id  FROM tv_channel  WHERE country IN (     SELECT country      FROM tv_channel      GROUP BY country      HAVING COUNT(*) > 2 )
SELECT id FROM tv_channel WHERE id IN (SELECT channel FROM tv_series GROUP BY channel HAVING COUNT(channel) > 2)
SELECT tv_channel.id FROM tv_channel LEFT JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.id IS NULL OR cartoon.directed_by != 'Ben Jones'
SELECT tv_channel.id  FROM tv_channel  LEFT JOIN cartoon ON cartoon.channel = tv_channel.id  WHERE cartoon.directed_by != 'Ben Jones' OR cartoon.directed_by IS NULL
SELECT package_option  FROM tv_channel  WHERE id NOT IN (     SELECT channel      FROM cartoon      WHERE directed_by = 'Ben Jones' )
SELECT package_option  FROM tv_channel  WHERE id IN (     SELECT DISTINCT channel      FROM tv_series      WHERE channel NOT IN (         SELECT channel          FROM cartoon          WHERE directed_by = 'Ben Jones' and content = 'cartoon'     ) )
SELECT COUNT(poker_player_id) FROM poker_player
SELECT COUNT(*) FROM poker_player
SELECT earnings  FROM poker_player  ORDER BY earnings DESC
SELECT earnings  FROM poker_player  ORDER BY earnings DESC
SELECT final_table_made, best_finish FROM poker_player
SELECT final_table_made, best_finish FROM poker_player
SELECT AVG(earnings) FROM poker_player
SELECT AVG(earnings) FROM poker_player
SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1
SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1
SELECT MAX(final_table_made)  FROM poker_player  WHERE earnings < 200000
SELECT MAX(final_table_made)  FROM poker_player  WHERE earnings < 200000
SELECT name FROM poker_player INNER JOIN people ON poker_player.people_id = people.people_id
SELECT name FROM poker_player INNER JOIN people ON poker_player.people_id = people.people_id
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000;
SELECT poker_player.poker_player_id, people.name  FROM poker_player  JOIN people ON poker_player.people_id = people.people_id  WHERE poker_player.earnings > 300000
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made ASC
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made ASC
SELECT birth_date FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY earnings ASC LIMIT 1
SELECT birth_date  FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE earnings = (SELECT MIN(earnings) FROM poker_player)
SELECT money_rank FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY height DESC LIMIT 1
SELECT money_rank FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY height DESC LIMIT 1
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200
SELECT people.name FROM poker_player  JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC
SELECT nationality, COUNT(*)  FROM people  GROUP BY nationality
SELECT nationality, COUNT(*)  FROM people  GROUP BY nationality
SELECT nationality, COUNT(*) AS count FROM people GROUP BY nationality ORDER BY count DESC LIMIT 1;
SELECT nationality  FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2
SELECT nationality  FROM people  GROUP BY nationality  HAVING COUNT(*) >= 2;
SELECT name, birth_date FROM people ORDER BY name ASC
SELECT name, birth_date FROM people ORDER BY name ASC
SELECT name FROM people WHERE nationality != "Russia"
SELECT name FROM people WHERE nationality <> 'Russia'
SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player)
SELECT people.name  FROM people  LEFT JOIN poker_player ON people.people_id = poker_player.people_id  WHERE poker_player.poker_player_id IS NULL
SELECT COUNT(DISTINCT nationality) FROM people
SELECT COUNT(DISTINCT nationality) FROM people
SELECT COUNT(*) FROM area_code_state
SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC
SELECT votes.vote_id, votes.phone_number, votes.state FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number JOIN area_code_state ON votes.state = area_code_state.state
SELECT MAX(area_code), MIN(area_code) FROM area_code_state
SELECT MAX(created) FROM votes WHERE state = 'CA'
SELECT contestant_name FROM contestants WHERE contestant_name <> 'Jessie Alloway';
SELECT DISTINCT state, created FROM votes
SELECT contestants.contestant_number, contestants.contestant_name  FROM contestants  INNER JOIN votes ON contestants.contestant_number = votes.contestant_number GROUP BY contestants.contestant_number, contestants.contestant_name  HAVING COUNT(votes.vote_id) >= 2
SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number = (     SELECT contestant_number     FROM votes     GROUP BY contestant_number     ORDER BY COUNT(*) ASC     LIMIT 1 )
SELECT COUNT(*) FROM votes WHERE votes.state = 'NY' OR votes.state = 'CA'
SELECT COUNT(*)  FROM contestants WHERE contestants.contestant_number NOT IN (   SELECT votes.contestant_number   FROM votes )
SELECT area_code_state.area_code FROM area_code_state JOIN votes ON votes.state = area_code_state.state GROUP BY area_code_state.area_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT created, state, phone_number  FROM votes  JOIN contestants      ON votes.contestant_number = contestants.contestant_number  JOIN area_code_state      ON votes.state = area_code_state.state  WHERE contestants.contestant_name = 'Tabatha Gehling'
SELECT DISTINCT area_code_state.area_code  FROM area_code_state  INNER JOIN votes ON votes.state = area_code_state.state  INNER JOIN contestants ON votes.contestant_number = contestants.contestant_number  WHERE contestants.contestant_name = 'Tabatha Gehling' AND contestants.contestant_name = 'Kelly Clauss'
SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'
SELECT name FROM country WHERE indepyear > 1950
SELECT name  FROM country  WHERE indepyear > 1950
SELECT COUNT(*) FROM country WHERE governmentform = 'Republic'
SELECT COUNT(*) FROM country WHERE governmentform = 'Republic'
SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean'
SELECT SUM(surfacearea) FROM country WHERE continent = 'Carribean'
SELECT continent FROM country WHERE code = 'AIA'
SELECT continent FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Anguilla')
SELECT region FROM country JOIN city ON city.countrycode = country.code WHERE city.name = 'Kabul'
SELECT country.region FROM city JOIN country ON city.countrycode = country.code WHERE city.name = 'Kabul'
SELECT language  FROM countrylanguage  WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba')  ORDER BY percentage DESC  LIMIT 1
SELECT countrylanguage.language  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code  WHERE country.name = 'Aruba'
SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'
SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'
SELECT region, population FROM country WHERE name = 'Angola'
SELECT region, population FROM country WHERE name = 'Angola'
SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa'
SELECT AVG(lifeexpectancy)  FROM country  WHERE continent = 'Central Africa'
SELECT country.name  FROM country WHERE country.continent = 'Asia' ORDER BY country.lifeexpectancy ASC LIMIT 1
SELECT name  FROM country  WHERE continent = 'Asia'  ORDER BY lifeexpectancy  LIMIT 1
SELECT SUM(population), MAX(gnp) FROM country WHERE continent = 'Asia'
SELECT COUNT(*) FROM city WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia')   SELECT MAX(gnp) FROM country WHERE continent = 'Asia'
SELECT AVG(country.lifeexpectancy)  FROM country  WHERE country.continent = 'Africa'  AND country.governmentform = 'Republic'
SELECT AVG(lifeexpectancy)  FROM country  WHERE continent = 'Africa' AND governmentform = 'Republic'
SELECT SUM(surfacearea)  FROM country WHERE continent IN ('Asia', 'Europe')
SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'
SELECT COUNT(*)  FROM city  WHERE district = 'Gelderland'
SELECT SUM(population) FROM city WHERE district = 'Gelderland'
SELECT AVG(country.gnp), SUM(country.population) FROM country  WHERE country.governmentform = 'US territory'
SELECT AVG(country.gnp), SUM(country.population)  FROM country  WHERE country.continent = "US Territory"
SELECT COUNT(DISTINCT language)  FROM countrylanguage
SELECT COUNT(DISTINCT language) FROM countrylanguage
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW'
SELECT COUNT(DISTINCT(language)) FROM countrylanguage WHERE countrycode = 'ABW'
SELECT COUNT(language) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T'
SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE countrycode = 'AFG'  AND isofficial = 1
SELECT country.name  FROM country  ORDER BY (SELECT COUNT(DISTINCT(countrylanguage.language))            FROM countrylanguage            WHERE countrylanguage.countrycode = country.code) DESC LIMIT 1
SELECT country.name  FROM country  ORDER BY (SELECT COUNT(DISTINCT countrylanguage.language)            FROM countrylanguage            WHERE countrylanguage.countrycode = country.code) DESC  LIMIT 1
SELECT continent FROM country GROUP BY continent HAVING COUNT(DISTINCT language) = (     SELECT MAX(language_count)     FROM (         SELECT continent, COUNT(DISTINCT language) AS language_count         FROM country         JOIN countrylanguage ON country.code = countrylanguage.countrycode         GROUP BY continent     ) )
SELECT continent, COUNT(language) AS language_count FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY continent ORDER BY language_count DESC LIMIT 1
SELECT COUNT(*)  FROM countrylanguage WHERE language = 'English'  AND countrycode IN (SELECT countrycode                      FROM countrylanguage                      WHERE language = 'Dutch')
SELECT COUNT(DISTINCT country.code)  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language IN ('English', 'Dutch')
SELECT DISTINCT country.name  FROM countrylanguage  JOIN country ON country.code = countrylanguage.countrycode  WHERE (countrylanguage.language = 'English' AND countrylanguage.isofficial = 'T')  AND EXISTS  (SELECT * FROM countrylanguage  WHERE language = 'French' AND isofficial = 'T'  AND country.code = countrylanguage.countrycode)
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' AND countrylanguage.language = 'French'
SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE language = 'English' AND isofficial = 'T'    AND country.code IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'French' AND isofficial = 'T' )
SELECT name FROM country WHERE language = 'English' AND language = 'French'
SELECT COUNT(DISTINCT continent) FROM country WHERE code IN (     SELECT countrycode FROM countrylanguage WHERE language = 'Chinese' );
SELECT COUNT(DISTINCT continent) FROM country WHERE countrylanguage.language = 'Chinese'
SELECT DISTINCT region FROM country WHERE EXISTS (     SELECT 1 FROM countrylanguage     WHERE country.code = countrylanguage.countrycode     AND (language = 'English' OR language = 'Dutch') )
SELECT DISTINCT country.region  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language IN ('Dutch', 'English')
SELECT country.name  FROM country  WHERE countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch'  AND countrylanguage.isofficial = 1
SELECT country.name FROM country WHERE countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch'
SELECT language  FROM countrylanguage  WHERE percentage = (     SELECT MAX(percentage)      FROM countrylanguage      INNER JOIN country ON countrylanguage.countrycode = country.code      WHERE country.continent = 'Asia' )
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1;
SELECT language  FROM countrylanguage  WHERE countrylanguage.countrycode IN (     SELECT country.code      FROM country      WHERE country.governmentform LIKE '%republic%'     GROUP BY country.code     HAVING COUNT(DISTINCT country.code) = 1 )
SELECT language FROM countrylanguage WHERE language IN (     SELECT DISTINCT language     FROM countrylanguage     INNER JOIN country ON countrylanguage.countrycode = country.code     WHERE governmentform = 'Republic' ) GROUP BY language HAVING COUNT(DISTINCT countrycode) = 1
SELECT city.name  FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1
SELECT name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON countrylanguage.countrycode = country.code WHERE language = 'English' ORDER BY population DESC LIMIT 1
SELECT country.name, country.population, country.lifeexpectancy FROM country WHERE country.continent = 'Asia' ORDER BY country.surfacearea DESC LIMIT 1
SELECT country.name, country.population, country.lifeexpectancy  FROM country WHERE country.continent = 'Asia' ORDER BY country.surfacearea DESC LIMIT 1;
SELECT AVG(lifeexpectancy) FROM country WHERE language != 'English'
SELECT AVG(lifeexpectancy) FROM country WHERE country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = true)
SELECT SUM(city.population)  FROM city JOIN country ON city.countrycode = country.code WHERE country.code <> 'ENG'
SELECT COUNT(*)  FROM country  WHERE code IN (     SELECT countrycode      FROM countrylanguage      WHERE language <> 'English' )
SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.headofstate = 'Beatrix'
SELECT countrylanguage.language  FROM country  JOIN city ON city.countrycode = country.code  JOIN countrylanguage ON countrylanguage.countrycode = country.code  WHERE country.headofstate = 'Beatrix'
SELECT COUNT(DISTINCT language)  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code  WHERE country.indepyear < 1930;
SELECT COUNT(DISTINCT language) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.indepyear < 1930
SELECT name FROM country WHERE surfacearea > (   SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe' )
SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')
SELECT name FROM country WHERE continent = 'Africa' AND population < (     SELECT MIN(population)     FROM country     WHERE continent = 'Asia' )
SELECT country.name  FROM country WHERE country.population < (     SELECT MIN(country.population)     FROM country     WHERE country.continent = 'Asia' ) AND country.continent = 'Africa'
SELECT country.name FROM country WHERE country.continent = 'Asia' AND country.population > ALL (SELECT population FROM country WHERE continent = 'Africa')
SELECT name  FROM country  WHERE continent = 'Asia' AND population > (SELECT MAX(population)                                            FROM country                                            WHERE continent = 'Africa')
SELECT code FROM country WHERE code NOT IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' )
SELECT country.code FROM country WHERE country.code NOT IN (   SELECT country.code FROM country   JOIN countrylanguage ON country.code = countrylanguage.countrycode   WHERE countrylanguage.language = 'English' )
SELECT country.code FROM country  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language <> 'English'
SELECT DISTINCT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language != 'English'
SELECT country.code  FROM country  WHERE country.governmentform <> 'Republic' AND country.code NOT IN (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'English')
SELECT code  FROM country  WHERE code NOT IN (     SELECT countrycode      FROM countrylanguage      WHERE language = 'English' )  AND governmentform != 'Republic'
SELECT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Europe'  AND countrylanguage.language != 'English'  AND countrylanguage.isofficial = 1
SELECT city.name FROM city  JOIN country ON city.countrycode = country.code JOIN countrylanguage ON countrylanguage.countrycode = country.code WHERE country.continent = 'Europe' AND countrylanguage.isofficial = 'F' AND countrylanguage.language = 'English'
SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'
SELECT DISTINCT city.name  FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia'  AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'
SELECT country.name, country.indepyear, country.surfacearea  FROM country  ORDER BY country.population ASC  LIMIT 1;
SELECT country.name, country.indepyear, country.surfacearea  FROM country  ORDER BY country.population ASC  LIMIT 1
SELECT population, name, leader  FROM country  WHERE surfacearea = (SELECT MAX(surfacearea) FROM country)
SELECT name, population, headofstate FROM country WHERE surfacearea = (SELECT MAX(surfacearea) FROM country)
SELECT country.name, COUNT(countrylanguage.language) AS language_count FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING language_count >= 3;
SELECT country.name, COUNT(countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING num_languages > 2
SELECT district, COUNT(name)  FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district
SELECT district, COUNT(city.name)  FROM city  WHERE city.population > (SELECT AVG(city.population) FROM city)  GROUP BY district
SELECT governmentform, population  FROM country  WHERE lifeexpectancy > 72
SELECT governmentform, SUM(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform
SELECT continent, AVG(lifeexpectancy) AS average_life_expectancy, SUM(population) AS total_population FROM country WHERE AVG(lifeexpectancy) < 72 GROUP BY continent
SELECT continent, SUM(population), AVG(lifeexpectancy) FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72;
SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
SELECT name  FROM country  ORDER BY population DESC  LIMIT 3
SELECT name FROM country ORDER BY population DESC LIMIT 3
SELECT name FROM country ORDER BY population LIMIT 3;
SELECT name  FROM country  ORDER BY population ASC  LIMIT 3;
SELECT COUNT(*) FROM country WHERE continent = 'Asia'
SELECT COUNT(*) FROM country WHERE continent = 'Asia'
SELECT name  FROM country  WHERE continent = 'Europe' AND population = 80000
SELECT country.name  FROM country  WHERE continent = 'Europe' AND population = 80000
SELECT SUM(country.population) AS total_population, AVG(country.surfacearea) AS average_area FROM country WHERE country.continent = 'North America' AND country.surfacearea > 3000
SELECT SUM(country.population), AVG(country.surfacearea)  FROM country  WHERE country.continent = 'North America' AND country.surfacearea > 3000
SELECT name  FROM city  WHERE population BETWEEN 160000 AND 900000
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000
SELECT language  FROM countrylanguage  GROUP BY language  ORDER BY COUNT(DISTINCT countrycode) DESC  LIMIT 1
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1
SELECT country.name, countrylanguage.language FROM country JOIN (     SELECT countrycode, language, MAX(percentage) AS max_percentage     FROM countrylanguage     GROUP BY countrycode ) AS t ON country.code = t.countrycode AND countrylanguage.language = t.language AND countrylanguage.percentage = t.max_percentage;
SELECT country.code, countrylanguage.language  FROM country  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.percentage = (SELECT MAX(percentage)                                      FROM countrylanguage                                      WHERE countrylanguage.countrycode = country.code)
SELECT COUNT(DISTINCT country.code)  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE language = 'Spanish'  GROUP BY country.code  HAVING MAX(percentage) = (SELECT MAX(percentage)                            FROM countrylanguage                            WHERE language = 'Spanish')
SELECT COUNT(*) FROM countrylanguage WHERE language = 'Spanish' AND percentage > 50;
SELECT country.code FROM country JOIN countrylanguage ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'Spanish' ORDER BY countrylanguage.percentage DESC LIMIT 1
SELECT country.code  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish' AND countrylanguage.percentage > 50;
SELECT COUNT(*) FROM conductor
SELECT COUNT(conductor_id) FROM conductor
SELECT name  FROM conductor  ORDER BY age ASC
SELECT name  FROM conductor  ORDER BY age ASC
SELECT name  FROM conductor  WHERE nationality <> 'USA'
SELECT name FROM conductor WHERE nationality != "USA"
SELECT record_company  FROM orchestra ORDER BY year_of_founded DESC
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC
SELECT AVG(attendance) FROM show
SELECT AVG(attendance) FROM show
SELECT MAX(share), MIN(share) FROM performance WHERE type <> "Live final"
SELECT MAX(share), MIN(share)  FROM performance  WHERE type <> "Live final";
SELECT COUNT(DISTINCT nationality) FROM conductor
SELECT COUNT(DISTINCT nationality) FROM conductor
SELECT name FROM conductor ORDER BY year_of_work DESC
SELECT name FROM conductor ORDER BY year_of_work DESC
SELECT conductor.name FROM conductor ORDER BY conductor.year_of_work DESC LIMIT 1
SELECT conductor.name  FROM conductor  ORDER BY conductor.year_of_work DESC  LIMIT 1
SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id
SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id
SELECT conductor.name FROM conductor INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id HAVING COUNT(orchestra.orchestra_id) > 1
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1
SELECT conductor.name  FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name  ORDER BY COUNT(orchestra.orchestra_id) DESC  LIMIT 1;
SELECT conductor.name  FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  ORDER BY COUNT(orchestra.orchestra_id) DESC  LIMIT 1
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008
SELECT conductor.name  FROM conductor JOIN orchestra ON orchestra.conductor_id = conductor.conductor_id WHERE orchestra.year_of_founded > 2008
SELECT record_company, COUNT(orchestra_id) FROM orchestra GROUP BY record_company;
SELECT record_company , COUNT(DISTINCT orchestra_id) AS num_of_orchestras FROM orchestra GROUP BY record_company
SELECT orchestra.orchestra, COUNT(*) AS count FROM orchestra GROUP BY orchestra.orchestra ORDER BY count ASC
SELECT major_record_format, COUNT(major_record_format) AS frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(*) DESC LIMIT 1
SELECT record_company FROM orchestra GROUP BY record_company HAVING COUNT(orchestra_id) = (SELECT MAX(orchestras) FROM (SELECT record_company, COUNT(orchestra_id) as orchestras FROM orchestra GROUP BY record_company) as count_table)
SELECT orchestra.name FROM orchestra WHERE orchestra.orchestra_id NOT IN (SELECT performance.orchestra_id FROM performance)
SELECT orchestra.orchestra FROM orchestra LEFT JOIN performance ON orchestra.orchestra_id = performance.orchestra_id WHERE performance.performance_id IS NULL
SELECT DISTINCT record_company FROM orchestra JOIN performance ON performance.orchestra_id = orchestra.orchestra_id JOIN show ON show.performance_id = performance.performance_id JOIN conductor ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded < 2003 AND orchestra.year_of_founded > 2003
SELECT record_company  FROM orchestra  WHERE year_of_founded < 2003  AND record_company IN      (SELECT record_company      FROM orchestra      WHERE year_of_founded > 2003)
SELECT COUNT(*)  FROM orchestra  WHERE major_record_format = 'CD' OR major_record_format = 'DVD'
SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format = 'CD' OR major_record_format = 'DVD'
SELECT YEAR_OF_FOUNDED FROM ORCHESTRA GROUP BY YEAR_OF_FOUNDED HAVING COUNT(DISTINCT ORCHESTRA_ID) > 1;
SELECT year_of_founded  FROM orchestra  JOIN performance ON orchestra.orchestra_id = performance.orchestra_id GROUP BY orchestra.orchestra_id HAVING COUNT(DISTINCT performance.performance_id) > 1
SELECT COUNT(*) FROM highschooler
SELECT COUNT(*) FROM highschooler
SELECT name, grade FROM highschooler
SELECT name, grade FROM highschooler
SELECT grade FROM highschooler
SELECT grade FROM highschooler
SELECT grade  FROM highschooler  WHERE name = 'Kyle'
SELECT grade  FROM highschooler  WHERE name = 'Kyle'
SELECT name FROM highschooler WHERE grade = 10
SELECT name FROM highschooler WHERE grade = 10
SELECT id FROM highschooler WHERE name = 'Kyle'
SELECT id FROM highschooler WHERE name = 'Kyle'
SELECT COUNT(*)  FROM highschooler  WHERE grade IN ('9', '10')
SELECT COUNT(*)  FROM highschooler  WHERE grade IN (9, 10)
SELECT grade, COUNT(*) FROM highschooler GROUP BY grade
SELECT grade, COUNT(*)  FROM highschooler  GROUP BY grade
SELECT grade, COUNT(*) as num_highschoolers  FROM highschooler  GROUP BY grade  ORDER BY num_highschoolers DESC  LIMIT 1
SELECT grade  FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4
SELECT grade FROM highschooler  WHERE id IN (     SELECT student_id FROM friend     UNION     SELECT friend_id FROM friend     UNION     SELECT student_id FROM likes     UNION      SELECT liked_id FROM likes ) GROUP BY grade HAVING COUNT(id) >= 4
SELECT highschooler.id, highschooler.name, friend.friend_id FROM highschooler JOIN friend ON friend.friend_id = highschooler.id JOIN likes ON likes.student_id = highschooler.id JOIN likes ON likes.liked_id = highschooler.id
SELECT highschooler.name, COUNT(friend.friend_id)  FROM highschooler  JOIN friend ON friend.friend_id = highschooler.id  GROUP BY highschooler.id, highschooler.name
SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends  FROM highschooler  INNER JOIN friend ON friend.friend_id = highschooler.id  GROUP BY highschooler.id, highschooler.name
SELECT highschooler.name, COUNT(friend.friend_id)  FROM highschooler  INNER JOIN friend ON friend.friend_id = highschooler.id  GROUP BY highschooler.name
SELECT highschooler.name  FROM highschooler  JOIN friend ON friend.student_id = highschooler.id  GROUP BY highschooler.name  ORDER BY COUNT(friend.friend_id) DESC  LIMIT 1
SELECT highschooler.name  FROM highschooler  JOIN friend ON friend.friend_id = highschooler.id  GROUP BY highschooler.id  ORDER BY COUNT(friend.student_id) DESC  LIMIT 1
SELECT name FROM highschooler WHERE id IN (     SELECT student_id     FROM friend     GROUP BY student_id     HAVING COUNT(friend_id) >= 3 )
SELECT highschooler.name FROM highschooler JOIN friend ON friend.student_id = highschooler.id GROUP BY highschooler.id HAVING COUNT(friend.friend_id) >= 3
SELECT friend.name  FROM friend  JOIN highschooler ON friend.friend_id = highschooler.id  WHERE friend.student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')
SELECT h.name  FROM highschooler h  JOIN friend f ON f.friend_id = h.id  JOIN highschooler k ON k.id = f.student_id AND k.name = 'Kyle'
SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')
SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')
SELECT id FROM highschooler WHERE id NOT IN (   SELECT student_id   FROM friend )
SELECT id FROM highschooler WHERE id NOT IN     (SELECT student_id FROM friend)
SELECT h.name  FROM highschooler h  WHERE h.id NOT IN (SELECT f.student_id                     FROM friend f)
SELECT name FROM highschooler WHERE id NOT IN (     SELECT student_id     FROM friend )
SELECT hs.id FROM highschooler hs INNER JOIN friend f ON f.friend_id = hs.id INNER JOIN likes l ON l.student_id = hs.id WHERE hs.id IN (   SELECT f.student_id   FROM friend f   INNER JOIN likes l ON l.liked_id = f.student_id )
SELECT DISTINCT s.id FROM highschooler s JOIN friend f ON f.student_id = s.id JOIN likes l ON l.student_id = s.id WHERE f.friend_id IS NOT NULL AND l.liked_id IS NOT NULL
SELECT DISTINCT h.name FROM highschooler h, friend f, likes l WHERE (f.student_id = h.id OR f.friend_id = h.id)  AND (l.student_id = h.id OR l.liked_id = h.id)
SELECT highschooler.name FROM highschooler JOIN friend ON friend.friend_id = highschooler.id JOIN likes ON likes.student_id = highschooler.id WHERE highschooler.id IN (SELECT friend_id FROM friend) AND highschooler.id IN (SELECT liked_id FROM likes)
SELECT student_id, COUNT(*)  FROM likes  GROUP BY student_id
SELECT student_id, COUNT(likes)  FROM likes  GROUP BY student_id
SELECT highschooler.name, COUNT(likes.liked_id) AS number_of_likes FROM highschooler JOIN likes ON likes.student_id = highschooler.id GROUP BY highschooler.id, highschooler.name
SELECT highschooler.name, COUNT(likes.liked_id)  FROM highschooler  JOIN likes ON highschooler.id = likes.student_id  GROUP BY highschooler.name
SELECT highschooler.name  FROM highschooler  JOIN likes ON likes.student_id = highschooler.id  GROUP BY highschooler.name  ORDER BY COUNT(likes.liked_id) DESC  LIMIT 1
SELECT name  FROM highschooler  WHERE id = (    SELECT student_id     FROM likes     GROUP BY student_id     ORDER BY COUNT(liked_id) DESC     LIMIT 1 )
SELECT name  FROM highschooler  WHERE id IN (     SELECT student_id      FROM likes      GROUP BY student_id      HAVING COUNT(liked_id) >= 2 )
SELECT highschooler.name  FROM highschooler  JOIN likes ON highschooler.id = likes.student_id  GROUP BY highschooler.id, highschooler.name  HAVING COUNT(likes.liked_id) >= 2
SELECT name FROM highschooler, friend WHERE highschooler.id = friend.student_id AND highschooler.grade > 5 GROUP BY name HAVING COUNT(friend.friend_id) >= 2
SELECT highschooler.name FROM highschooler JOIN friend ON friend.student_id = highschooler.id JOIN likes ON likes.student_id = highschooler.id WHERE highschooler.grade > 5 GROUP BY highschooler.id, highschooler.name HAVING COUNT(friend.friend_id) >= 2
SELECT COUNT(*)  FROM likes  WHERE liked_id = (SELECT id FROM highschooler WHERE name = 'Kyle')
SELECT COUNT(*)  FROM likes  WHERE student_id = (SELECT id                      FROM highschooler                      WHERE name = 'Kyle')
SELECT AVG(grade) FROM highschooler WHERE id IN (     SELECT student_id     FROM friend )
SELECT AVG(grade) FROM highschooler  WHERE id IN (SELECT student_id FROM friend)
SELECT MIN(grade) FROM highschooler WHERE id NOT IN (     SELECT student_id     FROM friend )
SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)
SELECT DISTINCT owners.state FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN professionals ON dogs.owner_id = professionals.owner_id WHERE owners.state IS NOT NULL AND professionals.state IS NOT NULL
SELECT DISTINCT owners.state FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN professionals ON dogs.owner_id = professionals.owner_id
SELECT AVG(age)  FROM dogs  JOIN treatments ON dogs.dog_id = treatments.dog_id  WHERE treatments.treatment_type_code IS NOT NULL
SELECT AVG(age)  FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_type_code = 'treatment_type_code'
SELECT professionals.professional_id, professionals.last_name, professionals.cell_number FROM professionals INNER JOIN treatments ON treatments.professional_id = professionals.professional_id WHERE professionals.state = 'Indiana' OR treatments.dog_id IN (    SELECT dog_id    FROM treatments    GROUP BY dog_id    HAVING COUNT(*) > 2 )
SELECT      professionals.professional_id,      professionals.last_name,      professionals.cell_number FROM      professionals WHERE      professionals.state = 'Indiana'     OR professionals.professional_id IN (         SELECT              professional_id         FROM              treatments         GROUP BY              professional_id         HAVING              COUNT(*) > 2     )
SELECT dogs.name FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.cost_of_treatment <= 1000
SELECT dogs.name  FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id WHERE treatments.cost_of_treatment <= 1000
SELECT first_name FROM owners  WHERE first_name NOT IN (SELECT name FROM dogs)  AND first_name IN (SELECT first_name FROM professionals)
SELECT DISTINCT owners.first_name FROM owners LEFT JOIN dogs ON dogs.owner_id = owners.owner_id LEFT JOIN professionals ON professionals.first_name = owners.first_name WHERE professionals.professional_id IS NULL AND dogs.name IS NULL
SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals WHERE professionals.professional_id NOT IN (     SELECT DISTINCT treatments.professional_id     FROM treatments     INNER JOIN dogs ON treatments.dog_id = dogs.dog_id     INNER JOIN owners ON dogs.owner_id = owners.owner_id )
SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals LEFT JOIN treatments ON treatments.professional_id = professionals.professional_id LEFT JOIN dogs ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_id IS NULL AND dogs.gender != 'dog'
SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id GROUP BY owners.owner_id, owners.first_name, owners.last_name ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1
SELECT owners.owner_id, owners.first_name, owners.last_name  FROM owners  JOIN dogs ON dogs.owner_id = owners.owner_id  GROUP BY owners.owner_id  ORDER BY COUNT(dogs.dog_id) DESC  LIMIT 1
SELECT professionals.professional_id, professionals.role_code, professionals.first_name  FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY professionals.professional_id HAVING COUNT(treatments.treatment_id) >= 2;
SELECT professionals.professional_id, professionals.role_code, professionals.first_name FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY professionals.professional_id, professionals.role_code, professionals.first_name HAVING COUNT(treatments.treatment_id) >= 2
SELECT breed_name  FROM breeds  INNER JOIN dogs ON breeds.breed_code = dogs.breed_code  GROUP BY breed_name  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT breed_name FROM breeds INNER JOIN dogs ON breeds.breed_code = dogs.breed_code GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY COUNT(treatments.treatment_id) DESC LIMIT 1;
SELECT owners.owner_id, owners.last_name  FROM owners  JOIN dogs ON dogs.owner_id = owners.owner_id  JOIN treatments ON treatments.dog_id = dogs.dog_id  GROUP BY owners.owner_id, owners.last_name  ORDER BY SUM(treatments.cost_of_treatment) DESC  LIMIT 1
SELECT treatment_types.treatment_type_description  FROM treatment_types  JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code  GROUP BY treatment_types.treatment_type_description  ORDER BY SUM(treatments.cost_of_treatment)  LIMIT 1
SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code = (   SELECT treatment_type_code   FROM treatments   GROUP BY treatment_type_code   ORDER BY SUM(cost_of_treatment)   LIMIT 1 )
SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;
SELECT owners.owner_id, owners.zip_code  FROM owners INNER JOIN dogs ON dogs.owner_id = owners.owner_id INNER JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1
SELECT professionals.professional_id, professionals.cell_number FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY professionals.professional_id HAVING COUNT(DISTINCT treatments.treatment_type_code) >= 2;
SELECT professionals.professional_id, professionals.cell_number FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id HAVING COUNT(DISTINCT treatments.treatment_type_code) >= 2
SELECT professionals.first_name, professionals.last_name FROM professionals INNER JOIN treatments ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)
SELECT professionals.first_name, professionals.last_name  FROM professionals  INNER JOIN treatments ON professionals.professional_id = treatments.professional_id  WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)
SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id JOIN professionals ON treatments.professional_id = professionals.professional_id
SELECT treatments.date_of_treatment, professionals.first_name FROM treatments, professionals WHERE treatments.professional_id = professionals.professional_id
SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT      owners.first_name,      owners.last_name,      sizes.size_description  FROM      owners  JOIN      dogs ON dogs.owner_id = owners.owner_id  JOIN      sizes ON dogs.size_code = sizes.size_code
SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners  JOIN dogs ON dogs.owner_id = owners.owner_id  JOIN sizes ON dogs.size_code = sizes.size_code
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id
SELECT dogs.name, treatments.date_of_treatment  FROM dogs  JOIN breeds ON dogs.breed_code = breeds.breed_code  JOIN treatments ON dogs.dog_id = treatments.dog_id  ORDER BY breeds.breed_code DESC  LIMIT 1;
SELECT dogs.name, treatments.date_of_treatment FROM dogs INNER JOIN breeds ON dogs.breed_code = breeds.breed_code INNER JOIN treatments ON treatments.dog_id = dogs.dog_id WHERE breeds.breed_name = 'rarest' ORDER BY treatments.date_of_treatment ASC;
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id WHERE owners.state = 'Virginia'
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id WHERE owners.state = 'Virginia'
SELECT dogs.date_arrived, dogs.date_departed  FROM dogs  JOIN treatments ON dogs.dog_id = treatments.dog_id  WHERE treatments.treatment_type_code IS NOT NULL
SELECT dogs.date_arrived, dogs.date_departed FROM dogs JOIN treatments ON treatments.dog_id = dogs.dog_id WHERE treatments.treatment_type_code IS NOT NULL
SELECT owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id WHERE dogs.age = (SELECT MIN(age) FROM dogs)
SELECT owners.last_name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id ORDER BY dogs.age ASC LIMIT 1
SELECT professionals.email_address  FROM professionals JOIN owners ON professionals.owner_id = owners.owner_id WHERE owners.state = 'Hawaii' OR owners.state = 'Wisconsin'
SELECT professionals.email_address  FROM professionals  JOIN owners ON professionals.owner_id = owners.owner_id  WHERE owners.state = 'Hawaii' OR owners.state = 'Wisconsin'
SELECT dogs.date_arrived, dogs.date_departed FROM dogs
SELECT dogs.date_arrived, dogs.date_departed FROM dogs
SELECT COUNT(dog_id) FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id
SELECT COUNT(*)  FROM dogs  INNER JOIN treatments ON dogs.dog_id = treatments.dog_id  WHERE treatments.treatment_type_code = 'dog_treatment_type_code'
SELECT COUNT(DISTINCT professionals.professional_id)  FROM dogs  JOIN treatments ON treatments.dog_id = dogs.dog_id  JOIN professionals ON treatments.professional_id = professionals.professional_id  WHERE treatments.treatment_type_code IS NOT NULL AND treatments.treatment_type_code <> '';
SELECT COUNT(DISTINCT professionals.professional_id)  FROM professionals  JOIN treatments ON treatments.professional_id = professionals.professional_id  JOIN dogs ON dogs.dog_id = treatments.dog_id  JOIN breeds ON breeds.breed_code = dogs.breed_code  WHERE breeds.breed_name = 'dogs'
SELECT professionals.role_code, professionals.street, professionals.city, professionals.state FROM professionals WHERE professionals.city LIKE '%West%'
SELECT professionals.role_code, professionals.street, professionals.city, professionals.state  FROM professionals  JOIN treatments ON treatments.professional_id = professionals.professional_id  JOIN dogs ON dogs.dog_id = treatments.dog_id  JOIN owners ON dogs.owner_id = owners.owner_id  WHERE owners.city LIKE '%West%'
SELECT owners.first_name, owners.last_name, owners.email_address FROM owners WHERE owners.state LIKE '%North%'
SELECT first_name, last_name, email_address  FROM owners  WHERE state LIKE '%North%'
SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)
SELECT COUNT(dog_id) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)
SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1
SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT COUNT(*)  FROM dogs  WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM treatments)
SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)
SELECT COUNT(*) FROM owners LEFT JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.dog_id IS NULL;
SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM dogs)
SELECT COUNT(professionals.professional_id) FROM professionals  LEFT JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.treatment_id IS NULL AND professionals.role_code = 'SomeRoleCode'
SELECT COUNT(DISTINCT professional_id) FROM professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM treatments WHERE treatment_type_code = 'dog_treatment_type_code')
SELECT dogs.name, dogs.age, dogs.weight  FROM dogs  WHERE dogs.abandoned_yn = 1
SELECT dogs.name, dogs.age, dogs.weight  FROM dogs  WHERE dogs.abandoned_yn = 1
SELECT AVG(age) FROM dogs
SELECT AVG(age) FROM dogs
SELECT MAX(age) FROM dogs
SELECT MAX(age) FROM dogs
SELECT charge_type, charge_amount FROM charges
SELECT charge_type, charge_amount FROM charges
SELECT MAX(charge_amount) FROM charges
SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1;
SELECT professionals.email_address, professionals.cell_number, professionals.home_phone  FROM professionals
SELECT professionals.email_address, professionals.cell_number, professionals.home_phone FROM professionals
SELECT breeds.breed_name, sizes.size_description  FROM breeds, sizes, dogs  WHERE dogs.size_code = sizes.size_code  AND dogs.breed_code = breeds.breed_code
SELECT DISTINCT dogs.breed_code, dogs.size_code FROM dogs INNER JOIN breeds ON dogs.breed_code = breeds.breed_code INNER JOIN sizes ON dogs.size_code = sizes.size_code
SELECT professionals.first_name, treatments.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id
SELECT professionals.first_name, treatments.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id
SELECT COUNT(*) FROM singer
SELECT COUNT(*) FROM singer
SELECT name FROM singer ORDER BY net_worth_millions ASC
SELECT name FROM singer ORDER BY net_worth_millions ASC
SELECT birth_year, citizenship FROM singer
SELECT birth_year, citizenship FROM singer
SELECT name FROM singer WHERE citizenship <> "France"
SELECT name  FROM singer  WHERE citizenship <> 'French'
SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949
SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1
SELECT citizenship, COUNT(singer_id)  FROM singer  GROUP BY citizenship
SELECT citizenship, COUNT(singer_id)  FROM singer  GROUP BY citizenship
SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1
SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;
SELECT citizenship, MAX(net_worth_millions)  FROM singer  GROUP BY citizenship
SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship
SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id
SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id
SELECT DISTINCT singer.name FROM singer  JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000;
SELECT name FROM singer WHERE sales > 300000
SELECT singer.name FROM singer JOIN song ON song.singer_id = singer.singer_id GROUP BY singer.name HAVING COUNT(song.singer_id) > 1
SELECT singer.name FROM singer JOIN song ON song.singer_id = singer.singer_id GROUP BY singer.name HAVING COUNT(song.song_id) > 1;
SELECT singer.name, SUM(song.sales) FROM singer JOIN song ON song.singer_id = singer.singer_id GROUP BY singer.name
SELECT singer.name, SUM(song.sales)  FROM singer  INNER JOIN song ON singer.singer_id = song.singer_id  GROUP BY singer.name
SELECT name FROM singer LEFT JOIN song ON singer.singer_id = song.singer_id WHERE song.singer_id IS NULL
SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)
SELECT citizenship  FROM singer  WHERE birth_year < 1945 OR birth_year > 1955
SELECT DISTINCT citizenship  FROM singer  WHERE birth_year < 1945 AND birth_year > 1955
SELECT COUNT(*)  FROM other_available_features
SELECT feature_type_name  FROM ref_feature_types  JOIN other_available_features ON other_available_features.feature_type_code = ref_feature_types.feature_type_code WHERE feature_name = 'AirCon'
SELECT property_type_description  FROM ref_property_types  JOIN properties ON properties.property_type_code = ref_property_types.property_type_code  JOIN other_property_features ON other_property_features.property_id = properties.property_id  JOIN other_available_features ON other_available_features.feature_id = other_property_features.feature_id  JOIN ref_feature_types ON other_available_features.feature_type_code = ref_feature_types.feature_type_code  WHERE properties.property_type_code = [code];
SELECT property_name  FROM properties INNER JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code WHERE (ref_property_types.property_type_description = 'houses' OR ref_property_types.property_type_description = 'apartments') AND properties.room_count > 1
