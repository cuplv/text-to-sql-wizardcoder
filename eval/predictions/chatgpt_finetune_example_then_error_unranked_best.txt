SELECT count ( * ) from singer;
SELECT count ( * ) from singer;
SELECT name , country , age from singer order by age desc;
SELECT name , country , age from singer order by age desc;
SELECT avg ( age ) , min ( age ) , max ( age ) from singer where country = 'France';
SELECT avg ( age ) , min ( age ) , max ( age ) from singer where country = 'France';
SELECT song_name , song_release_year from singer order by age asc limit 1;
SELECT song_name , song_release_year from singer order by age asc limit 1;
SELECT distinct country from singer where age > 20;
SELECT distinct country from singer where age > 20;
SELECT country , count ( * ) from singer group by country;
SELECT country , count ( * ) from singer group by country;
SELECT song_name from singer where age > ( select avg ( age ) from singer );
SELECT song_name from singer where age > ( select avg ( age ) from singer );
SELECT location , name from stadium where capacity between 5000 and 10000;
SELECT location , name from stadium where capacity between 5000 and 10000;
SELECT MAX(capacity) AS maximum_capacity, AVG(capacity) AS average_capacity FROM stadium;
SELECT avg ( capacity ) , max ( capacity ) from stadium;
SELECT name , capacity from stadium order by average desc limit 1;
SELECT name , capacity from stadium order by average desc limit 1;
SELECT count ( * ) from concert where year = 2014 or year = 2015;
SELECT count ( * ) from concert where year = 2014 or year = 2015;
SELECT stadium.name , count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id group by concert.stadium_id;
SELECT stadium.name , count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id group by concert.stadium_id;
SELECT stadium.name , stadium.capacity from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year >= 2014 group by concert.stadium_id order by count ( * ) desc limit 1;
SELECT stadium.name , stadium.capacity from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year > 2013 group by concert.stadium_id order by count ( * ) desc limit 1;
SELECT year from concert group by year order by count ( * ) desc limit 1;
SELECT year from concert group by year order by count ( * ) desc limit 1;
SELECT name from stadium where stadium_id not in ( select stadium_id from concert );
SELECT name from stadium where stadium_id not in ( select stadium_id from concert );
SELECT country from singer where age > 40 intersect select country from singer where age < 30;
SELECT name from stadium except select stadium.name from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014;
SELECT s.name FROM stadium s WHERE NOT EXISTS ( SELECT 1 FROM concert c WHERE c.stadium_id = s.stadium_id AND c.year = 2014 ) AND EXISTS ( SELECT 1 FROM concert c WHERE c.stadium_id = s.stadium_id );
SELECT concert.concert_name , concert.theme , count ( * ) from concert join singer_in_concert on concert.concert_id = singer_in_concert.concert_id group by singer_in_concert.concert_id;
SELECT concert.concert_name , concert.theme , count ( * ) from concert join singer_in_concert on concert.concert_id = singer_in_concert.concert_id group by concert.concert_id;
SELECT singer.name , count ( * ) from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id group by singer.singer_id;
SELECT singer.name , count ( * ) from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id group by singer_in_concert.singer_id;
SELECT singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014;
SELECT singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014;
SELECT name , country from singer where song_name like '%Hey%';
SELECT name , country from singer where song_name like '%Hey%';
SELECT stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2015;
SELECT stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2015;
SELECT count ( * ) from concert where stadium_id = ( select stadium_id from stadium order by capacity desc limit 1 );
SELECT count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id where stadium.capacity = ( select max ( capacity ) from stadium );
SELECT count ( * ) from pets where weight > 10;
SELECT count ( * ) from pets where weight > 10;
SELECT weight FROM pets WHERE pettype = 'dog' ORDER BY pet_age ASC LIMIT 1;
SELECT weight from pets where pettype = 'dog' order by pet_age asc limit 1;
SELECT max ( weight ) , pettype from pets group by pettype;
SELECT max ( weight ) , pettype from pets group by pettype;
SELECT count ( * ) from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where student.age > 20;
SELECT count ( * ) from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where student.age > 20;
SELECT count ( * ) from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where student.sex = 'F' and pets.pettype = 'dog';
SELECT COUNT(*) FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON student.stuid = has_pet.stuid WHERE student.sex = 'Female' AND pets.pettype = 'dog';
SELECT count ( distinct pettype ) from pets;
SELECT count ( distinct pettype ) from pets;
SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype IN ('Cat', 'Dog');
SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE (pets.pettype = 'Cat' OR pets.pettype = 'Dog');
SELECT student.fname from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where pets.pettype = 'cat' intersect select student.fname from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where pets.pettype = 'dog';
SELECT student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' intersect select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'dog';
SELECT major , age from student where stuid not in ( select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' );
SELECT s.major, s.age FROM student s WHERE s.stuid NOT IN ( SELECT hp.stuid FROM has_pet hp JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'Cat' );
SELECT DISTINCT stuid FROM has_pet EXCEPT SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat';
SELECT DISTINCT student.stuid FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid LEFT JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype != 'cat' OR pets.pettype IS NULL;
SELECT fname, age FROM student WHERE EXISTS ( SELECT 1 FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'Dog' AND has_pet.stuid = student.stuid ) AND NOT EXISTS ( SELECT 1 FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'Cat' AND has_pet.stuid = student.stuid );
SELECT fname FROM student WHERE stuid IN ( SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'Dog' ) AND stuid NOT IN ( SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'Cat' );
SELECT pettype , weight from pets order by pet_age asc limit 1;
SELECT pettype , weight from pets order by pet_age asc , weight desc limit 1;
SELECT petid , weight from pets where pet_age > 1;
SELECT petid , weight from pets where pet_age > 1;
SELECT avg ( pet_age ) , max ( pet_age ) , pettype from pets group by pettype;
SELECT avg ( pet_age ) , max ( pet_age ) , pettype from pets group by pettype;
SELECT avg ( weight ) , pettype from pets group by pettype;
SELECT avg ( weight ) , pettype from pets group by pettype;
SELECT distinct student.fname , student.age from has_pet join student on has_pet.stuid = student.stuid;
SELECT distinct student.fname , student.age from has_pet join student on has_pet.stuid = student.stuid;
SELECT pets.petid from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where student.lname = 'Smith';
SELECT pets.petid from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where student.lname = 'Smith';
SELECT count ( * ) , stuid from has_pet group by stuid;
SELECT count ( * ) , stuid from has_pet group by stuid;
SELECT student.fname , student.sex from has_pet join student on has_pet.stuid = student.stuid group by has_pet.stuid having count ( * ) > 1;
SELECT student.fname , student.sex from has_pet join student on has_pet.stuid = student.stuid group by has_pet.stuid having count ( * ) > 1;
SELECT student.lname from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where pets.pettype = 'cat' and pets.pet_age = 3;
SELECT lname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' and pets.pet_age = 3;
SELECT avg ( age ) from student where stuid not in ( select stuid from has_pet );
SELECT avg ( age ) from student where stuid not in ( select stuid from has_pet );
SELECT count ( * ) from continents;
SELECT count ( * ) from continents;
SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS number_of_countries FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent;
SELECT continents.contid , continents.continent , count ( * ) from countries join continents on countries.continent = continents.contid group by countries.continent;
SELECT count ( * ) from countries;
SELECT count ( * ) from countries;
SELECT car_makers.fullname, car_makers.id, COUNT(*) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.fullname;
SELECT car_makers.id, car_makers.fullname, COUNT(model_list.model) AS model_count FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.fullname;
SELECT car_names.model FROM car_names JOIN model_list ON car_names.model = model_list.modelid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.horsepower IS NOT NULL ORDER BY cars_data.horsepower ASC LIMIT 1;
SELECT car_names.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.modelid ORDER BY cars_data.horsepower ASC LIMIT 1;
SELECT ml.model FROM cars_data cd JOIN car_names cn ON cd.id = cn.makeid JOIN model_list ml ON cn.model = ml.model WHERE cd.weight < (SELECT AVG(weight) FROM cars_data);
SELECT DISTINCT model_list.model FROM model_list JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data);
SELECT DISTINCT car_makers.fullname FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = '1970';
SELECT distinct car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where cars_data.year = 1970;
SELECT DISTINCT car_names.make, cars_data.year FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = ( SELECT MIN(year) FROM cars_data );
SELECT cm.maker, cd.year FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker JOIN car_names cn ON ml.model = cn.model JOIN cars_data cd ON cn.makeid = cd.id WHERE cd.year = (SELECT MIN(year) FROM cars_data);
SELECT DISTINCT car_names.model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year > 1980;
SELECT DISTINCT model_list.model FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year > 1980;
SELECT continents.continent , count ( * ) from countries join continents on countries.continent = continents.contid join car_makers on countries.countryid = car_makers.country group by continents.continent;
SELECT continents.continent , count ( * ) from car_makers join countries on car_makers.country = countries.countryid join continents on countries.continent = continents.contid group by continents.continent;
SELECT countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by car_makers.country order by count ( * ) desc limit 1;
SELECT countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by car_makers.country order by count ( * ) desc limit 1;
SELECT COUNT(DISTINCT model_list.model) AS model_count, car_makers.fullname FROM model_list JOIN car_makers ON model_list.maker = car_makers.id GROUP BY car_makers.fullname;
SELECT count ( * ) , car_makers.fullname , car_makers.id from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id;
SELECT cars_data.accelerate FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.maker = 'amc' AND car_names.model LIKE '%hornet sportabout (sw)%';
SELECT cars_data.accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.maker = 'amc' AND car_names.model = 'Hornet Sportabout (sw)';
SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'France';
SELECT COUNT(DISTINCT car_makers.id) AS NumberOfMakers FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'France';
SELECT COUNT(DISTINCT model_list.model) FROM car_makers JOIN countries ON car_makers.country = countries.countryid JOIN model_list ON car_makers.id = model_list.maker WHERE countries.countryname = 'USA';
SELECT COUNT(*) FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'United States';
SELECT avg ( mpg ) from cars_data where cylinders = 4;
SELECT avg ( mpg ) from cars_data where cylinders = 4;
SELECT min ( weight ) from cars_data where cylinders = 8 and year = 1974;
SELECT min ( weight ) from cars_data where cylinders = 8 and year = 1974;
SELECT maker , model from model_list;
SELECT maker , model from model_list;
SELECT DISTINCT countries.countryname, countries.countryid FROM countries JOIN car_makers ON car_makers.country = countries.countryid;
SELECT countries.countryname , countries.countryid from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) >= 1;
SELECT count ( * ) from cars_data where horsepower > 150;
SELECT count ( * ) from cars_data where horsepower > 150;
SELECT avg ( weight ) , year from cars_data group by year;
SELECT avg ( weight ) , year from cars_data group by year;
SELECT c.countryname FROM countries c JOIN continents ct ON c.continent = ct.contid WHERE ct.continent = 'Europe' AND c.countryid IN ( SELECT cm.country FROM car_makers cm GROUP BY cm.country HAVING COUNT(*) >= 3 );
SELECT countries.countryname FROM countries JOIN car_makers ON car_makers.country = countries.countryid JOIN continents ON countries.continent = continents.contid WHERE continents.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.id) >= 3;
SELECT MAX(cars_data.horsepower) AS max_horsepower, car_names.make FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.cylinders = 3 GROUP BY car_names.make;
SELECT MAX(cars_data.horsepower) AS max_horsepower, car_makers.maker AS make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3 GROUP BY car_makers.maker ORDER BY max_horsepower DESC LIMIT 1;
SELECT model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id order by cars_data.mpg desc limit 1;
SELECT cn.model FROM cars_data cd JOIN car_names cn ON cd.id = cn.makeid ORDER BY cd.mpg DESC LIMIT 1;
SELECT avg ( horsepower ) from cars_data where year < 1980;
SELECT avg ( horsepower ) from cars_data where year < 1980;
SELECT avg ( cars_data.edispl ) from cars_data join car_names on cars_data.id = car_names.makeid where car_names.model = 'volvo';
SELECT avg ( cars_data.edispl ) from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where model_list.maker = ( select id from car_makers where maker = 'volvo' );
SELECT max ( accelerate ) , cylinders from cars_data group by cylinders;
SELECT max ( accelerate ) , cylinders from cars_data group by cylinders;
SELECT model from car_names group by model order by count ( * ) desc limit 1;
SELECT ml.model FROM model_list ml JOIN car_names cn ON ml.model = cn.model GROUP BY ml.model ORDER BY COUNT(DISTINCT cn.makeid) DESC LIMIT 1;
SELECT count ( * ) from cars_data where cylinders > 4;
SELECT count ( * ) from cars_data where cylinders > 4;
SELECT count ( * ) from cars_data where year = 1980;
SELECT count ( * ) from cars_data where year = 1980;
SELECT count ( * ) from model_list join car_makers on model_list.maker = car_makers.id where car_makers.fullname = 'American Motor Company';
SELECT count ( * ) from model_list join car_makers on model_list.maker = car_makers.id where car_makers.fullname = 'American Motor Company';
SELECT car_makers.fullname , model_list.maker from model_list join car_makers on model_list.maker = car_makers.id group by model_list.maker having count ( * ) > 3;
SELECT car_makers.id, car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.fullname HAVING COUNT(model_list.model) > 3;
SELECT DISTINCT car_names.model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight > 3500 OR car_makers.fullname = 'General Motors';
SELECT DISTINCT ml.model FROM model_list AS ml JOIN car_makers AS cm ON ml.maker = cm.id WHERE cm.fullname = 'General Motors' UNION SELECT DISTINCT ml.model FROM cars_data AS cd JOIN car_names AS cn ON cd.id = cn.makeid JOIN model_list AS ml ON cn.model = ml.model WHERE cd.weight > 3500;
SELECT distinct year from cars_data where weight >= 3000 and weight <= 4000;
SELECT distinct year from cars_data where weight < 4000 intersect select distinct year from cars_data where weight > 3000;
SELECT horsepower from cars_data order by accelerate desc limit 1;
SELECT horsepower from cars_data order by accelerate desc limit 1;
SELECT cars_data.cylinders from cars_data join car_names on cars_data.id = car_names.makeid where car_names.model = 'volvo' order by cars_data.accelerate asc limit 1;
SELECT cars_data.cylinders from cars_data join car_names on cars_data.id = car_names.makeid where car_names.model = 'volvo' order by cars_data.accelerate asc limit 1;
SELECT COUNT(*) FROM cars_data WHERE accelerate > ( SELECT accelerate FROM cars_data WHERE horsepower = ( SELECT MAX(horsepower) FROM cars_data ) );
SELECT COUNT(*) FROM cars_data WHERE accelerate > ( SELECT accelerate FROM cars_data WHERE horsepower = ( SELECT MAX(horsepower) FROM cars_data ) );
SELECT COUNT(*) FROM ( SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.id) > 2 ) AS subquery;
SELECT COUNT(*) FROM ( SELECT countries.countryname FROM car_makers JOIN countries ON car_makers.country = countries.countryid GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.id) > 2 ) AS subquery;
SELECT count ( * ) from cars_data where cylinders > 6;
SELECT count ( * ) from cars_data where cylinders > 6;
SELECT car_names.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.cylinders = 4 AND cars_data.horsepower IS NOT NULL ORDER BY cars_data.horsepower DESC LIMIT 1;
SELECT model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where cars_data.cylinders = 4 order by cars_data.horsepower desc limit 1;
SELECT makeid , make from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.horsepower > ( select min ( horsepower ) from cars_data ) except select makeid , make from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.cylinders > 3;
SELECT car_names.makeid , car_names.make from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.cylinders < 4 and cars_data.horsepower > ( select min ( horsepower ) from cars_data );
SELECT max ( mpg ) from cars_data where cylinders = 8 or year < 1980;
SELECT max ( mpg ) from cars_data where cylinders = 8 or year < 1980;
SELECT DISTINCT ml.model FROM cars_data cd JOIN car_names cn ON cd.id = cn.makeid JOIN model_list ml ON cn.model = ml.model JOIN car_makers cm ON ml.maker = cm.id WHERE cd.weight < 3500 AND cm.fullname != 'Ford Motor Company';
SELECT DISTINCT ml.model FROM cars_data cd JOIN car_names cn ON cd.id = cn.makeid JOIN model_list ml ON cn.model = ml.model JOIN car_makers cm ON ml.maker = cm.id WHERE cd.weight < 3500 AND cm.fullname != 'Ford Motor Company';
SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers);
SELECT countryname from countries except select countries.countryname from countries join car_makers on countries.countryid = car_makers.country;
SELECT id, maker FROM car_makers WHERE id IN ( SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT model) >= 2 ) AND ( SELECT COUNT(DISTINCT maker) FROM model_list GROUP BY maker HAVING COUNT(DISTINCT model) >= 2 ) > 3;
SELECT car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 2 intersect select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model group by car_makers.id having count ( * ) > 3;
SELECT DISTINCT countries.countryid, countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country LEFT JOIN model_list ON car_makers.id = model_list.maker WHERE model_list.model = 'fiat' OR countries.countryid IN ( SELECT country FROM car_makers GROUP BY country HAVING COUNT(*) > 3 );
SELECT DISTINCT countries.countryid, countries.countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country LEFT JOIN model_list ON car_makers.id = model_list.maker WHERE car_makers.fullname = 'Fiat' OR countries.countryid IN ( SELECT country FROM car_makers GROUP BY country HAVING COUNT(*) > 3 );
SELECT country from airlines where airline = 'JetBlue Airways';
SELECT country from airlines where airline = 'JetBlue Airways';
SELECT abbreviation from airlines where airline = 'JetBlue Airways';
SELECT abbreviation from airlines where airline = 'JetBlue Airways';
SELECT airline , abbreviation from airlines where country = 'USA';
SELECT airline, abbreviation FROM airlines WHERE country = 'USA';
SELECT airportcode , airportname from airports where city = 'Anthony';
SELECT airportcode , airportname from airports where city = 'Anthony';
SELECT count ( * ) from airlines;
SELECT count ( * ) from airlines;
SELECT count ( * ) from airports;
SELECT count ( * ) from airports;
SELECT count ( * ) from flights;
SELECT count ( * ) from flights;
SELECT airline from airlines where abbreviation = 'UAL';
SELECT airline from airlines where abbreviation = 'UAL';
SELECT count ( * ) from airlines where country = 'USA';
SELECT COUNT(*) FROM airlines WHERE country = 'United States';
SELECT city , country from airports where airportname = 'Alton';
SELECT city , country from airports where airportname = 'Alton';
SELECT airportname from airports where airportcode = 'AKO';
SELECT airportname from airports where airportcode = 'AKO';
SELECT airportname from airports where city = 'Aberdeen';
SELECT airportname from airports where city = 'Aberdeen';
SELECT count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.airportname = 'Phillips Aaf';
SELECT count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'APG';
SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Atlanta';
SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Athens';
SELECT count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen';
SELECT count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen';
SELECT count ( * ) from airports join flights on airports.airportcode = flights.destairport where airports.city = 'Aberdeen';
SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports AS source_airports ON flights.sourceairport = source_airports.airportcode JOIN airports AS dest_airports ON flights.destairport = dest_airports.airportcode WHERE source_airports.city = 'Aberdeen' AND dest_airports.city = 'Ashley';
SELECT COUNT(*) FROM flights JOIN airports AS source_airports ON flights.sourceairport = source_airports.airportcode JOIN airports AS dest_airports ON flights.destairport = dest_airports.airportcode WHERE source_airports.city = 'Aberdeen' AND dest_airports.city = 'Ashley';
SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid WHERE a.airline = 'JetBlue Airways';
SELECT count ( * ) from flights join airports on airports.airportcode = flights.destairport join airlines on airlines.abbreviation = flights.airline where airlines.airline = 'United Airlines' and airports.airportcode = 'ASY';
SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.airportname = 'Asymmetric Solutions' and flights.airline = 'United Airlines';
SELECT count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.airportname = 'Chicago O''Hare International' and flights.airline = 'United Airlines';
SELECT count ( * ) from airports join flights on airports.airportcode = flights.destairport join airlines on airlines.abbreviation = flights.airline where airlines.airline = 'United Airlines' and airports.airportname = 'Ardmore Municipal Airport';
SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen' and flights.airline = 'United Airlines';
SELECT count ( * ) from airports join flights on airports.airportcode = flights.destairport where flights.airline = 'United Airlines' and airports.city = 'Aberdeen';
SELECT airports.city from airports join flights on flights.destairport = airports.airportcode group by airports.city order by count ( * ) desc limit 1;
SELECT airports.city from airports join flights on flights.destairport = airports.airportcode group by airports.city order by count ( * ) desc limit 1;
SELECT airports.city from flights join airports on flights.sourceairport = airports.airportcode group by airports.city order by count ( * ) desc limit 1;
SELECT airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1;
SELECT airport, SUM(flight_count) as total_flights FROM ( SELECT sourceairport as airport, COUNT(*) as flight_count FROM flights GROUP BY sourceairport UNION ALL SELECT destairport as airport, COUNT(*) as flight_count FROM flights GROUP BY destairport ) AS airport_counts GROUP BY airport ORDER BY total_flights DESC LIMIT 1;
SELECT a.airportcode FROM airports a JOIN flights f ON a.airportcode = f.destairport GROUP BY a.airportcode ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airport FROM ( SELECT sourceairport AS airport FROM flights UNION ALL SELECT destairport AS airport FROM flights ) AS combined GROUP BY airport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT airportcode FROM ( SELECT sourceairport AS airportcode FROM flights UNION ALL SELECT destairport AS airportcode FROM flights ) AS all_flights GROUP BY airportcode ORDER BY COUNT(*) ASC LIMIT 1;
SELECT airline, COUNT(*) AS flight_count FROM flights GROUP BY airline ORDER BY flight_count DESC LIMIT 1;
SELECT airlines.airline, COUNT(*) AS total_flights FROM flights JOIN airlines ON flights.airline = airlines.uid GROUP BY flights.airline ORDER BY total_flights DESC LIMIT 1;
SELECT a.abbreviation, a.country FROM airlines AS a JOIN flights AS f ON a.uid = f.airline GROUP BY a.abbreviation, a.country ORDER BY COUNT(*) ASC LIMIT 1;
SELECT a.abbreviation, a.country FROM airlines AS a JOIN flights AS f ON a.abbreviation = f.airline GROUP BY a.abbreviation, a.country ORDER BY COUNT(*) ASC LIMIT 1;
SELECT distinct airlines.airline from airlines join flights on airlines.abbreviation = flights.airline join airports on airports.airportcode = flights.sourceairport where airports.airportname = 'AHD';
SELECT airlines.airline from airlines join flights on airlines.uid = flights.airline join airports on airports.airportcode = flights.sourceairport where airports.airportname = 'Ammaroo';
SELECT distinct airlines.airline from airlines join flights on airlines.uid = flights.airline join airports on airports.airportcode = flights.destairport where airports.airportname = 'Downtown Heliport';
SELECT airlines.airline from airlines join flights on airlines.abbreviation = flights.airline join airports on flights.destairport = airports.airportcode where airports.airportname = 'Amarillo International';
SELECT airlines.airline from flights join airlines on flights.airline = airlines.uid where flights.destairport = 'APG' intersect select airlines.airline from flights join airlines on flights.airline = airlines.uid where flights.destairport = 'CVO';
SELECT airlines.airline from airports join flights on airports.airportcode = flights.sourceairport join airlines on flights.airline = airlines.abbreviation where airports.airportname = 'Phillips Army Air Field' intersect select airlines.airline from airports join flights on airports.airportcode = flights.sourceairport join airlines on flights.airline = airlines.abbreviation where airports.airportname = 'Corvallis Municipal Airport';
SELECT airlines.airline from flights join airports on flights.destairport = airports.airportcode join airlines on flights.airline = airlines.uid where airports.city = 'Cordova' except select airlines.airline from flights join airports on flights.destairport = airports.airportcode join airlines on flights.airline = airlines.uid where airports.city = 'Marion';
SELECT airlines.airline from airports join flights on airports.airportcode = flights.sourceairport join airlines on flights.airline = airlines.uid where airports.city = 'Cordova' except select airlines.airline from airports join flights on airports.airportcode = flights.sourceairport join airlines on flights.airline = airlines.uid where airports.city = 'Marion';
SELECT f.airline FROM flights AS f GROUP BY f.airline HAVING COUNT(f.flightno) >= 10;
SELECT a.airline FROM flights f JOIN airlines a ON f.airline = a.abbreviation GROUP BY a.airline HAVING COUNT(*) >= 10;
SELECT a.airline FROM airlines a LEFT JOIN flights f ON a.uid = f.airline GROUP BY a.airline HAVING COUNT(f.flightno) < 200;
SELECT airlines.airline FROM airlines JOIN flights ON airlines.abbreviation = flights.airline GROUP BY airlines.airline HAVING COUNT(flights.flightno) < 200;
SELECT f.flightno FROM flights f JOIN airlines a ON f.airline = a.abbreviation WHERE a.airline = 'United Airlines';
SELECT f.flightno FROM flights f WHERE f.airline = 'United Airlines';
SELECT flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.airportname = 'Phillips Army Air Field';
SELECT flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.airportname = 'Phillips Aaf';
SELECT flights.flightno from airports join flights on airports.airportcode = flights.destairport where airports.airportname = 'Phillips Army Air Field';
SELECT flightno from flights where destairport = 'APG';
SELECT flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen';
SELECT distinct flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen';
SELECT flights.flightno from airports join flights on airports.airportcode = flights.destairport where airports.city = 'Aberdeen';
SELECT distinct flights.flightno from airports join flights on airports.airportcode = flights.destairport where airports.city = 'Aberdeen';
SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen' or airports.city = 'Abilene';
SELECT count ( * ) from flights where destairport = 'Aberdeen' or destairport = 'Abilene';
SELECT airportname from airports where airportcode not in ( select destairport from flights ) and airportcode not in ( select sourceairport from flights );
SELECT a.airportname FROM airports a LEFT JOIN flights f1 ON a.airportcode = f1.sourceairport LEFT JOIN flights f2 ON a.airportcode = f2.destairport WHERE f1.sourceairport IS NULL AND f2.destairport IS NULL;
SELECT count ( * ) from employee;
SELECT count ( * ) from employee;
SELECT name from employee order by age asc;
SELECT name from employee order by age asc;
SELECT count ( * ) , city from employee group by city;
SELECT count ( * ) , city from employee group by city ;
SELECT city from employee where age < 30 group by city having count ( * ) > 1;
SELECT city from employee where age < 30 group by city having count ( * ) > 1;
SELECT count ( * ) , location from shop group by location;
SELECT count ( * ) , location from shop group by location;
SELECT manager_name , district from shop order by number_products desc limit 1;
SELECT manager_name , district from shop order by number_products desc limit 1;
SELECT min ( number_products ) , max ( number_products ) from shop;
SELECT min ( number_products ) , max ( number_products ) from shop;
SELECT name , location , district from shop order by number_products desc;
SELECT name , location , district from shop order by number_products desc;
SELECT name from shop where number_products > ( select avg ( number_products ) from shop );
SELECT name from shop where number_products > ( select avg ( number_products ) from shop );
SELECT employee.name from evaluation join employee on evaluation.employee_id = employee.employee_id group by evaluation.employee_id order by count ( * ) desc limit 1;
SELECT employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by employee.employee_id order by count ( * ) desc limit 1;
SELECT employee.name from evaluation join employee on evaluation.employee_id = employee.employee_id order by evaluation.bonus desc limit 1;
SELECT employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1;
SELECT e.name FROM employee e WHERE NOT EXISTS ( SELECT 1 FROM evaluation ev WHERE e.employee_id = ev.employee_id AND ev.bonus > 0 );
SELECT name from employee where employee_id not in ( select employee_id from evaluation );
SELECT shop.name from shop join hiring on shop.shop_id = hiring.shop_id group by shop.shop_id order by count ( * ) desc limit 1;
SELECT shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by shop.shop_id order by count ( * ) desc limit 1;
SELECT name from shop where shop_id not in ( select shop_id from hiring );
SELECT name from shop where shop_id not in ( select shop_id from hiring );
SELECT count ( * ) , shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by shop.name;
SELECT shop.name, COUNT(hiring.employee_id) AS number_of_employees FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.shop_id, shop.name;
SELECT sum ( bonus ) from evaluation;
SELECT sum ( bonus ) from evaluation;
SELECT * from hiring;
SELECT * from hiring;
SELECT district from shop where number_products < 3000 intersect select district from shop where number_products > 10000;
SELECT district from shop where number_products < 3000 intersect select district from shop where number_products > 10000;
SELECT count ( distinct location ) from shop;
SELECT count ( distinct location ) from shop;
SELECT count ( * ) from documents;
SELECT count ( * ) from documents;
SELECT document_id , document_name , document_description from documents;
SELECT document_id , document_name , document_description from documents;
SELECT document_name , template_id from documents where document_description like '%w%';
SELECT document_name , template_id from documents where document_description like '%w%';
SELECT document_id , template_id , document_description from documents where document_name = 'Robbin CV';
SELECT document_id , template_id , document_description from documents where document_name = 'Robbin CV';
SELECT count ( distinct templates.template_id ) from documents join templates on documents.template_id = templates.template_id;
SELECT count ( distinct template_id ) from documents;
SELECT count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT';
SELECT count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT';
SELECT template_id , count ( * ) from documents group by template_id;
SELECT template_id , count ( * ) from documents group by template_id;
SELECT templates.template_id , templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_id order by count ( * ) desc limit 1;
SELECT templates.template_id , templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by documents.template_id order by count ( * ) desc limit 1;
SELECT template_id from documents group by template_id having count ( * ) > 1;
SELECT documents.template_id from documents group by template_id having count ( * ) > 1;
SELECT template_id from templates except select template_id from documents;
SELECT template_id from templates except select template_id from documents;
SELECT count ( * ) from templates;
SELECT count ( * ) from templates;
SELECT template_id , version_number , template_type_code from templates;
SELECT template_id , version_number , template_type_code from templates;
SELECT distinct template_type_code from templates;
SELECT distinct template_type_code from templates;
SELECT template_id from templates where template_type_code = 'PP' or template_type_code = 'PPT';
SELECT template_id from templates where template_type_code = 'PP' or template_type_code = 'PPT';
SELECT count ( * ) from templates where template_type_code = 'CV';
SELECT count ( * ) from templates where template_type_code = 'CV';
SELECT version_number , template_type_code from templates where version_number > 5;
SELECT version_number , template_type_code from templates where version_number > 5;
SELECT template_type_code , count ( * ) from templates group by template_type_code;
SELECT template_type_code , count ( * ) from templates group by template_type_code;
SELECT template_type_code from templates group by template_type_code order by count ( * ) desc limit 1;
SELECT template_type_code from templates group by template_type_code order by count ( * ) desc limit 1;
SELECT template_type_code from templates group by template_type_code having count ( * ) < 3;
SELECT template_type_code from templates group by template_type_code having count ( * ) < 3;
SELECT template_type_code, MIN(version_number) AS min_version_number FROM templates ORDER BY min_version_number ASC LIMIT 1;
SELECT template_type_code, version_number FROM templates WHERE version_number = (SELECT MIN(version_number) FROM templates);
SELECT templates.template_type_code from documents join templates on documents.template_id = templates.template_id where documents.document_name = 'Data base';
SELECT templates.template_type_code from documents join templates on documents.template_id = templates.template_id where documents.document_name = 'Data base';
SELECT documents.document_name from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'BK';
SELECT documents.document_name from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'BK';
SELECT template_type_code , count ( * ) from documents join templates on documents.template_id = templates.template_id group by templates.template_type_code;
SELECT template_type_code , count ( * ) from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code;
SELECT templates.template_type_code from documents join templates on documents.template_id = templates.template_id group by templates.template_type_code order by count ( * ) desc limit 1;
SELECT templates.template_type_code from documents join templates on documents.template_id = templates.template_id group by templates.template_type_code order by count ( * ) desc limit 1;
SELECT template_type_code from templates except select templates.template_type_code from documents join templates on documents.template_id = templates.template_id;
SELECT DISTINCT t.template_type_code FROM ref_template_types AS t LEFT JOIN templates AS tp ON t.template_type_code = tp.template_type_code LEFT JOIN documents AS d ON tp.template_id = d.template_id WHERE d.document_id IS NULL;
SELECT template_type_code , template_type_description from ref_template_types;
SELECT template_type_code , template_type_description from ref_template_types;
SELECT template_type_description from ref_template_types where template_type_code = 'AD';
SELECT template_type_description from ref_template_types where template_type_code = 'AD';
SELECT template_type_code from ref_template_types where template_type_description = 'Book';
SELECT template_type_code from ref_template_types where template_type_description = 'Book';
SELECT distinct ref_template_types.template_type_description from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code join documents on templates.template_id = documents.template_id;
SELECT DISTINCT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id;
SELECT templates.template_id from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'Presentation';
SELECT templates.template_id FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_description = 'Presentation';
SELECT count ( * ) from paragraphs;
SELECT count ( * ) from paragraphs;
SELECT count ( * ) from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Summer Show';
SELECT count ( * ) from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Summer Show';
SELECT other_details from paragraphs where paragraph_text = 'Korea';
SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%';
SELECT paragraph_id , paragraphs.paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Welcome to NY';
SELECT paragraphs.paragraph_id , paragraphs.paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Welcome to NY';
SELECT paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Customer reviews';
SELECT paragraphs.paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Customer reviews';
SELECT document_id , count ( * ) from paragraphs group by document_id order by document_id asc;
SELECT document_id , count ( * ) from paragraphs group by document_id order by document_id asc;
SELECT documents.document_id , documents.document_name , count ( * ) from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id;
SELECT documents.document_id , documents.document_name , count ( * ) from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id;
SELECT document_id from paragraphs group by document_id having count ( * ) >= 2;
SELECT documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id having count ( * ) >= 2;
SELECT documents.document_id , documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count ( * ) desc limit 1;
SELECT documents.document_id , documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count ( * ) desc limit 1;
SELECT document_id from paragraphs group by document_id order by count ( * ) asc limit 1;
SELECT documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count ( * ) asc limit 1;
SELECT documents.document_id from paragraphs join documents on paragraphs.document_id = documents.document_id group by documents.document_id having count ( * ) between 1 and 2;
SELECT document_id from paragraphs group by document_id having count ( * ) between 1 and 2;
SELECT document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland';
SELECT documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id where paragraphs.paragraph_text like '%Brazil%' intersect select document_id from paragraphs where paragraph_text like '%Ireland%';
SELECT count ( * ) from teacher;
SELECT count ( * ) from teacher;
SELECT name from teacher order by age asc;
SELECT name from teacher order by age asc;
SELECT age , hometown from teacher;
SELECT age , hometown from teacher;
SELECT DISTINCT name FROM teacher WHERE hometown != 'Little Lever Urban District';
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District';
SELECT name from teacher where age = 32 or age = 33;
SELECT name from teacher where age = 32 or age = 33;
SELECT hometown from teacher order by age asc limit 1;
SELECT hometown from teacher order by age asc limit 1;
SELECT hometown , count ( * ) from teacher group by hometown;
SELECT hometown, COUNT(*) AS number_of_teachers FROM teacher GROUP BY hometown;
SELECT hometown from teacher group by hometown order by count ( * ) desc limit 1;
SELECT hometown from teacher group by hometown order by count ( * ) desc limit 1;
SELECT hometown from teacher group by hometown having count ( * ) >= 2;
SELECT hometown from teacher group by hometown having count ( * ) >= 2;
SELECT teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id;
SELECT teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id;
SELECT teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc;
SELECT teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc;
SELECT teacher.name FROM course_arrange JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.course = 'Math';
SELECT DISTINCT teacher.name FROM course_arrange JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.course = 'Math';
SELECT teacher.name, COUNT(*) AS num_courses FROM course_arrange JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id GROUP BY teacher.name;
SELECT teacher.name , count ( * ) from course join course_arrange on course.course_id = course_arrange.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id group by teacher.name;
SELECT teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count ( * ) >= 2 ;
SELECT teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count ( * ) >= 2;
SELECT name from teacher where teacher_id not in ( select teacher_id from course_arrange );
SELECT name from teacher where teacher_id not in ( select teacher_id from course_arrange );
SELECT count ( * ) from visitor where age < 30;
SELECT name from visitor where level_of_membership > 4 order by level_of_membership desc;
SELECT avg ( age ) from visitor where level_of_membership <= 4;
SELECT name , level_of_membership from visitor where level_of_membership > 4 order by age desc;
SELECT museum_id , name from museum order by num_of_staff desc limit 1;
SELECT avg ( num_of_staff ) from museum where open_year < 2009;
SELECT open_year, num_of_staff FROM museum WHERE TRIM(name) COLLATE NOCASE = 'Plaza Museum';
SELECT name from museum where num_of_staff > ( select min ( num_of_staff ) from museum where open_year > 2010 );
SELECT visitor.id , visitor.name , visitor.age from visitor join visit on visitor.id = visit.visitor_id group by visit.visitor_id having count ( * ) > 1 ;
SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.level_of_membership ORDER BY SUM(visit.total_spent) DESC LIMIT 1;
SELECT museum.museum_id, museum.name FROM visit JOIN museum ON visit.museum_id = museum.museum_id GROUP BY museum.museum_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT name from museum where museum_id not in ( select museum_id from visit );
SELECT visitor.name , visitor.age from visitor join visit on visitor.id = visit.visitor_id order by visit.num_of_ticket desc limit 1;
SELECT avg ( num_of_ticket ) , max ( num_of_ticket ) from visit;
SELECT sum ( total_spent ) from visitor join visit on visitor.id = visit.visitor_id where level_of_membership = 1;
SELECT visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on visit.museum_id = museum.museum_id where museum.open_year < 2009 intersect select visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on visit.museum_id = museum.museum_id where museum.open_year > 2011;
SELECT count ( * ) from visitor where id not in ( select visit.visitor_id from visit join museum on visit.museum_id = museum.museum_id where museum.open_year > 2010 );
SELECT count ( * ) from museum where open_year > 2013 or open_year < 2008;
SELECT count ( * ) from players;
SELECT count ( * ) from players;
SELECT count ( * ) from matches;
SELECT count ( * ) from matches;
SELECT first_name , birth_date from players where country_code = 'USA';
SELECT first_name , birth_date from players where country_code = 'USA';
SELECT avg ( loser_age ) , avg ( winner_age ) from matches;
SELECT avg ( loser_age ) , avg ( winner_age ) from matches;
SELECT avg ( winner_rank ) from matches where winner_rank != 'N/A';
SELECT avg ( winner_rank ) from matches where winner_rank != 'N/A';
SELECT min ( loser_rank ) from matches;
SELECT min ( loser_rank ) from matches;
SELECT count ( distinct country_code ) from players;
SELECT count ( distinct country_code ) from players;
SELECT count ( distinct loser_name ) from matches;
SELECT count ( distinct loser_name ) from matches;
SELECT tourney_name from matches group by tourney_name having count ( * ) > 10;
SELECT tourney_name from matches group by tourney_name having count ( * ) > 10;
SELECT winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016;
SELECT winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016;
SELECT count ( * ) from matches where year = 2013 or year = 2016;
SELECT count ( * ) from matches where year = 2013 or year = 2016;
SELECT players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' intersect select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'Australian Open';
SELECT DISTINCT p.first_name, p.country_code FROM players p JOIN matches m1 ON p.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches m2 ON p.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open';
SELECT first_name , country_code from players order by birth_date asc limit 1;
SELECT first_name , country_code from players order by birth_date asc limit 1;
SELECT first_name, last_name FROM players ORDER BY birth_date ASC;
SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date ASC;
SELECT first_name , last_name from players where hand = 'L' order by birth_date asc;
SELECT first_name , last_name from players where hand = 'L' order by birth_date asc;
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name, players.country_code ORDER BY SUM(rankings.tours) DESC LIMIT 1;
SELECT players.country_code , players.first_name from players join rankings on players.player_id = rankings.player_id order by rankings.tours desc limit 1;
SELECT year from matches group by year order by count ( * ) desc limit 1;
SELECT year from matches group by year order by count ( * ) desc limit 1;
SELECT winner_name , winner_rank_points from matches group by winner_id order by count ( * ) desc limit 1 ;
SELECT matches.winner_name, (SELECT ranking_points FROM rankings WHERE player_id = top_winner.winner_id ORDER BY ranking_date DESC LIMIT 1) AS ranking_points FROM (SELECT winner_id, winner_name, COUNT(*) AS wins FROM matches GROUP BY winner_id ORDER BY wins DESC LIMIT 1) AS top_winner;
SELECT winner_name from matches where tourney_name = 'Australian Open' order by winner_rank_points desc limit 1;
SELECT matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where matches.tourney_name = 'Australian Open' order by rankings.ranking_points desc limit 1;
SELECT winner_name , loser_name from matches order by minutes desc limit 1;
SELECT winner_name , loser_name from matches order by minutes desc limit 1;
SELECT avg ( rankings.ranking ) , players.first_name from rankings join players on rankings.player_id = players.player_id group by players.first_name;
SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name;
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;
SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code;
SELECT count ( * ) , country_code from players group by country_code ;
SELECT country_code from players group by country_code order by count ( * ) desc limit 1;
SELECT country_code from players group by country_code order by count ( * ) desc limit 1;
SELECT country_code from players group by country_code having count ( * ) > 50;
SELECT country_code from players group by country_code having count ( * ) > 50 ;
SELECT ranking_date, SUM(DISTINCT tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT sum ( tours ) , ranking_date from rankings group by ranking_date;
SELECT count ( * ) , year from matches group by year;
SELECT count ( * ) , year from matches group by year;
SELECT winner_name , winner_rank from matches order by winner_age asc limit 3;
SELECT winner_name , winner_rank from matches order by winner_age asc limit 3;
SELECT count ( distinct winner_name ) from matches where tourney_name = 'WTA Championships' and winner_hand = 'L';
SELECT count ( distinct winner_name ) from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' and players.hand = 'L';
SELECT players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id join rankings on players.player_id = rankings.player_id order by rankings.ranking_points desc limit 1;
SELECT players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id group by players.player_id order by sum ( matches.winner_rank_points ) desc limit 1;
SELECT count ( * ) , hand from players group by hand;
SELECT count ( * ) , hand from players group by hand;
SELECT count ( * ) from ship where disposition_of_ship = 'Captured';
SELECT name , tonnage from ship order by name desc;
SELECT name, date, result FROM battle;
SELECT max ( killed ) , min ( killed ) from death;
SELECT avg ( injured ) from death;
SELECT killed , injured from death join ship on death.caused_by_ship_id = ship.id where ship.tonnage = 't';
SELECT name , result from battle where bulgarian_commander != 'Boril';
SELECT b.id, b.name FROM battle b WHERE b.id IN (SELECT s.lost_in_battle FROM ship s WHERE s.ship_type = 'Brig');
SELECT b.id, b.name FROM battle b WHERE b.id IN ( SELECT s.lost_in_battle FROM ship s JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.lost_in_battle HAVING SUM(d.killed) > 10 );
SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1;
SELECT distinct name from battle where bulgarian_commander = 'Kaloyan' and latin_commander = 'Baldwin I';
SELECT count ( distinct result ) from battle;
SELECT count ( * ) from battle where id not in ( select lost_in_battle from ship where tonnage = 225 );
SELECT battle.name , battle.date from battle join ship on battle.id = ship.lost_in_battle where ship.name = 'Lettice' intersect select battle.name , battle.date from battle join ship on battle.id = ship.lost_in_battle where ship.name = 'HMS Atalanta';
SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE location = 'English Channel' AND disposition_of_ship = 'lost' );
SELECT note from death where note like '%East%';
SELECT line_1 , line_2 from addresses;
SELECT line_1 , line_2 from addresses;
SELECT count ( * ) from courses;
SELECT count ( * ) from courses;
SELECT course_description FROM courses WHERE course_name LIKE '%Math%';
SELECT course_description FROM courses WHERE course_name LIKE '%MATH%';
SELECT zip_postcode from addresses where city = 'Port Chelsea';
SELECT zip_postcode from addresses where city = 'Port Chelsea';
SELECT departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1;
SELECT departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1;
SELECT count ( distinct department_id ) from degree_programs;
SELECT count ( distinct department_id ) from degree_programs;
SELECT count ( distinct degree_summary_name ) from degree_programs;
SELECT count ( distinct degree_summary_name ) from degree_programs;
SELECT count ( * ) from departments join degree_programs on departments.department_id = degree_programs.department_id where departments.department_name = 'Engineering';
SELECT count ( * ) from degree_programs join departments on degree_programs.department_id = departments.department_id where departments.department_name = 'Engineering';
SELECT section_name , section_description from sections;
SELECT section_name , section_description from sections;
SELECT courses.course_name , courses.course_id from courses join sections on courses.course_id = sections.course_id group by courses.course_id having count ( * ) <= 2;
SELECT c.course_name, c.course_id FROM courses c LEFT JOIN sections s ON c.course_id = s.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(s.section_id) < 2;
SELECT section_name from sections order by section_name desc;
SELECT section_name from sections order by section_name desc;
SELECT semesters.semester_name , student_enrolment.semester_id from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id group by student_enrolment.semester_id order by count ( * ) desc limit 1;
SELECT semesters.semester_name , student_enrolment.semester_id from student_enrolment join semesters on student_enrolment.semester_id = semesters.semester_id group by student_enrolment.semester_id order by count ( * ) desc limit 1;
SELECT department_description from departments where department_name like '%computer%';
SELECT department_description from departments where department_name like '%computer%';
SELECT students.first_name , students.middle_name , students.last_name , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id having count ( * ) = 2;
SELECT students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id having count ( * ) = 2;
WHERE LOWER(degree_programs.degree_summary_name) = 'bachelor';
SELECT DISTINCT s.first_name, s.middle_name, s.last_name FROM students AS s JOIN student_enrolment AS se ON s.student_id = se.student_id JOIN degree_programs AS dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelors';
SELECT degree_programs.degree_summary_name from students join student_enrolment on students.student_id = student_enrolment.student_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id group by student_enrolment.degree_program_id order by count ( * ) desc limit 1;
SELECT degree_programs.degree_summary_name from student_enrolment join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id group by student_enrolment.degree_program_id order by count ( * ) desc limit 1;
SELECT dp.degree_program_id, dp.degree_summary_name FROM degree_programs dp JOIN student_enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;
SELECT dp.degree_program_id, dp.degree_summary_name FROM degree_programs dp JOIN student_enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;
SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(student_enrolment.student_id) AS number_of_enrollments FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id, students.first_name, students.middle_name, students.last_name ORDER BY number_of_enrollments DESC LIMIT 1;
SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(*) AS total_enrollments FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY total_enrollments DESC LIMIT 1;
SELECT semester_name from semesters except select semesters.semester_name from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id;
SELECT semester_name from semesters except select semesters.semester_name from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id;
SELECT distinct courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id;
SELECT distinct courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id;
SELECT courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id join student_enrolment on student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id group by courses.course_name order by count ( * ) desc limit 1;
SELECT courses.course_name FROM student_enrolment_courses JOIN courses ON student_enrolment_courses.course_id = courses.course_id GROUP BY student_enrolment_courses.course_id ORDER BY COUNT(student_enrolment_courses.student_course_id) DESC LIMIT 1;
SELECT DISTINCT s.last_name FROM students AS s JOIN addresses AS a ON s.current_address_id = a.address_id LEFT JOIN student_enrolment AS se ON s.student_id = se.student_id WHERE a.state_province_county = 'North Carolina' AND se.student_id IS NULL;
SELECT DISTINCT s.last_name FROM students s JOIN addresses a ON s.permanent_address_id = a.address_id LEFT JOIN student_enrolment se ON s.student_id = se.student_id WHERE a.state_province_county = 'North Carolina' AND se.student_id IS NULL;
SELECT transcripts.transcript_date , transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcripts.transcript_id having count ( * ) >= 2;
SELECT transcripts.transcript_date , transcript_contents.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcript_contents.transcript_id having count ( * ) >= 2;
SELECT cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Ward';
SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT first_name , middle_name , last_name from students order by date_first_registered asc limit 1;
SELECT first_name , middle_name , last_name from students order by date_first_registered asc limit 1;
SELECT s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN transcript_contents tc ON sec.student_course_id = tc.student_course_id JOIN transcripts t ON tc.transcript_id = t.transcript_id ORDER BY t.transcript_date ASC LIMIT 1;
SELECT students.first_name, students.middle_name, students.last_name FROM students ORDER BY students.date_left ASC LIMIT 1;
SELECT first_name from students where permanent_address_id != current_address_id;
SELECT first_name from students where permanent_address_id != current_address_id;
SELECT addresses.address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count ( * ) desc limit 1;
SELECT addresses.address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.permanent_address_id group by addresses.address_id order by count ( * ) desc limit 1;
SELECT avg ( transcript_date ) from transcripts;
SELECT avg ( transcript_date ) from transcripts;
SELECT transcripts.transcript_date , transcripts.other_details from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id order by transcripts.transcript_date asc limit 1;
SELECT transcripts.transcript_date , transcripts.other_details from transcripts order by transcript_date asc limit 1;
SELECT count ( * ) from transcripts;
SELECT count ( * ) from transcripts;
SELECT transcript_date from transcripts order by transcript_date desc limit 1;
SELECT transcript_date from transcripts order by transcript_date desc limit 1;
SELECT student_course_id, COUNT(*) AS times_in_transcripts FROM transcript_contents GROUP BY student_course_id ORDER BY times_in_transcripts DESC LIMIT 1;
SELECT count ( * ) , student_course_id from transcript_contents group by student_course_id order by count ( * ) desc limit 1;
SELECT transcripts.transcript_date , transcript_contents.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1;
SELECT transcripts.transcript_date , transcripts.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1;
SELECT DISTINCT a.semester_id FROM student_enrolment a JOIN student_enrolment b ON a.semester_id = b.semester_id WHERE a.degree_program_id = 1 AND b.degree_program_id = 2;
SELECT DISTINCT se1.semester_id FROM student_enrolment se1 JOIN degree_programs dp1 ON se1.degree_program_id = dp1.degree_program_id WHERE EXISTS ( SELECT 1 FROM student_enrolment se2 JOIN degree_programs dp2 ON se2.degree_program_id = dp2.degree_program_id WHERE se2.semester_id = se1.semester_id AND dp2.degree_summary_name LIKE '%Masters%' ) AND EXISTS ( SELECT 1 FROM student_enrolment se3 JOIN degree_programs dp3 ON se3.degree_program_id = dp3.degree_program_id WHERE se3.semester_id = se1.semester_id AND dp3.degree_summary_name LIKE '%Bachelors%' );
SELECT count ( distinct current_address_id ) from students;
SELECT count ( distinct current_address_id ) from students;
SELECT other_student_details from students order by other_student_details desc;
SELECT other_student_details FROM students ORDER BY (last_name || ' ' || first_name) DESC;
SELECT section_description FROM sections WHERE TRIM(section_name) = 'H';
SELECT section_description from sections where section_name = 'h';
SELECT first_name FROM students WHERE permanent_address_id IN ( SELECT address_id FROM addresses WHERE country = 'Haiti' ) OR cell_mobile_number = '09700166582';
SELECT DISTINCT s.first_name FROM students AS s LEFT JOIN addresses AS a ON s.permanent_address_id = a.address_id WHERE a.country = 'Haiti' OR s.cell_mobile_number = '09700166582';
SELECT title from cartoon order by title asc;
SELECT title from cartoon order by title asc;
SELECT title from cartoon where directed_by = 'Ben Jones';
SELECT title from cartoon where directed_by = 'Ben Jones';
SELECT count ( * ) from cartoon where written_by = 'Joseph Kuhr';
SELECT count ( * ) from cartoon where written_by = 'Joseph Kuhr';
SELECT title , directed_by from cartoon order by original_air_date asc;
SELECT title , directed_by from cartoon order by original_air_date asc;
SELECT title from cartoon where directed_by = 'Ben Jones' or directed_by = 'Brandon Vietti';
SELECT title from cartoon where directed_by = 'Ben Jones' or directed_by = 'Brandon Vietti';
SELECT country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1;
SELECT country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1;
SELECT count ( distinct series_name ) , count ( distinct content ) from tv_channel;
SELECT count ( distinct series_name ) , count ( distinct content ) from tv_channel;
SELECT content from tv_channel where series_name = 'Sky Radio';
SELECT content from tv_channel where series_name = 'Sky Radio';
SELECT package_option from tv_channel where series_name = 'Sky Radio';
SELECT package_option from tv_channel where series_name = 'Sky Radio';
SELECT count ( * ) from tv_channel where language = 'English';
SELECT count ( * ) from tv_channel where language = 'English';
SELECT language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1;
SELECT language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1;
SELECT language , count ( * ) from tv_channel group by language;
SELECT language , count ( * ) from tv_channel group by language ;
SELECT tv_channel.series_name from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.title = 'The Rise of the Blue Beetle!';
SELECT tv_series.series_name FROM tv_series JOIN cartoon ON tv_series.channel = cartoon.channel WHERE cartoon.title = 'The Rise of the Blue Beetle';
SELECT cartoon.title from cartoon join tv_channel on cartoon.channel = tv_channel.id where tv_channel.series_name = 'Sky Radio';
SELECT cartoon.title from cartoon join tv_channel on cartoon.channel = tv_channel.id where tv_channel.series_name = 'Sky Radio';
SELECT episode from tv_series order by rating asc;
SELECT episode from tv_series order by rating asc;
SELECT episode , rating from tv_series order by rating desc limit 3;
SELECT episode , rating from tv_series order by rating desc limit 3;
SELECT max ( share ) , min ( share ) from tv_series;
SELECT max ( share ) , min ( share ) from tv_series;
SELECT tv_series.air_date FROM tv_series WHERE tv_series.episode = 'A Love of a Lifetime';
SELECT cartoon.original_air_date FROM cartoon WHERE cartoon.title = 'A Love of a Lifetime';
SELECT weekly_rank from tv_series where episode = 'A Love of a Lifetime';
SELECT tv_series.weekly_rank FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_series.episode = 'A Love of a Lifetime';
SELECT series_name FROM tv_channel WHERE id = ( SELECT channel FROM tv_series WHERE episode = 'A Love of a Lifetime' );
SELECT series_name from tv_channel where id in ( select channel from tv_series where episode = 'A Love of a Lifetime' );
SELECT tv_series.episode from tv_channel join tv_series on tv_channel.id = tv_series.channel where tv_channel.series_name = 'Sky Radio';
SELECT episode from tv_series where channel = ( select id from tv_channel where series_name = 'Sky Radio' );
SELECT directed_by, COUNT(*) AS total_cartoons FROM cartoon GROUP BY directed_by ORDER BY total_cartoons DESC;
SELECT count ( * ) , directed_by from cartoon group by directed_by;
SELECT production_code , channel from cartoon order by original_air_date desc limit 1;
SELECT production_code , channel from cartoon order by original_air_date desc limit 1;
SELECT package_option, series_name FROM tv_channel WHERE high_definition_tv = 'Yes';
SELECT package_option, series_name FROM tv_channel WHERE high_definition_tv = 'Yes';
SELECT distinct tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey';
SELECT distinct tv_channel.country from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.written_by = 'Todd Casey';
SELECT country from tv_channel except select tv_channel.country from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.written_by = 'Todd Casey';
SELECT DISTINCT tc.country FROM tv_channel tc WHERE tc.id NOT IN ( SELECT c.channel FROM cartoon c WHERE c.written_by = 'Todd Casey' );
SELECT tv_channel.series_name , tv_channel.country from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.directed_by = 'Ben Jones' intersect select tv_channel.series_name , tv_channel.country from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.directed_by = 'Michael Chang';
SELECT tv_channel.series_name , tv_channel.country from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.directed_by = 'Ben Jones' intersect select tv_channel.series_name , tv_channel.country from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.directed_by = 'Michael Chang';
SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE LOWER(language) != 'english';
SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE LOWER(language) != 'english';
SELECT id FROM tv_channel WHERE country IN ( SELECT country FROM tv_channel GROUP BY country HAVING COUNT(id) > 2 );
SELECT tc.id FROM tv_channel tc LEFT JOIN tv_series ts ON tc.id = ts.channel LEFT JOIN cartoon c ON tc.id = c.channel GROUP BY tc.id HAVING COUNT(DISTINCT ts.id) + COUNT(DISTINCT c.id) > 2;
SELECT id from tv_channel except select channel from cartoon where directed_by = 'Ben Jones';
SELECT id from tv_channel except select channel from cartoon where directed_by = 'Ben Jones';
SELECT DISTINCT tv_channel.package_option FROM tv_channel WHERE NOT EXISTS ( SELECT 1 FROM cartoon WHERE cartoon.directed_by = 'Ben Jones' AND cartoon.channel = tv_channel.id );
SELECT package_option from tv_channel where id not in ( select channel from cartoon where directed_by = 'Ben Jones' );
SELECT count ( * ) from poker_player;
SELECT count ( * ) from poker_player;
SELECT earnings from poker_player order by earnings desc;
SELECT earnings from poker_player order by earnings desc;
SELECT final_table_made , best_finish from poker_player;
SELECT final_table_made , best_finish from poker_player;
SELECT avg ( earnings ) from poker_player;
SELECT avg ( earnings ) from poker_player;
SELECT money_rank from poker_player order by earnings desc limit 1;
SELECT money_rank from poker_player order by earnings desc limit 1;
SELECT max ( final_table_made ) from poker_player where earnings < 200000;
SELECT max ( final_table_made ) from poker_player where earnings < 200000;
SELECT people.name from people join poker_player on people.people_id = poker_player.people_id;
SELECT people.name from people join poker_player on people.people_id = poker_player.people_id;
SELECT people.name from people join poker_player on people.people_id = poker_player.people_id where poker_player.earnings > 300000;
SELECT people.name from people join poker_player on people.people_id = poker_player.people_id where poker_player.earnings > 300000;
SELECT people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.final_table_made asc;
SELECT people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.final_table_made asc;
SELECT people.birth_date from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings asc limit 1;
SELECT people.birth_date from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings asc limit 1;
SELECT poker_player.money_rank from people join poker_player on people.people_id = poker_player.people_id order by people.height desc limit 1;
SELECT poker_player.money_rank from poker_player join people on poker_player.people_id = people.people_id order by people.height desc limit 1;
SELECT avg ( poker_player.earnings ) from people join poker_player on people.people_id = poker_player.people_id where people.height > 200;
SELECT avg ( poker_player.earnings ) from people join poker_player on people.people_id = poker_player.people_id where people.height > 200;
SELECT people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings desc;
SELECT people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings desc;
SELECT distinct nationality , count ( * ) from people group by nationality;
SELECT nationality , count ( * ) from people group by nationality ;
SELECT nationality from people group by nationality order by count ( * ) desc limit 1 ;
SELECT nationality from people group by nationality order by count ( * ) desc limit 1;
SELECT nationality from people group by nationality having count ( * ) >= 2;
SELECT nationality from people group by nationality having count ( * ) >= 2;
SELECT name , birth_date from people order by name asc;
SELECT name , birth_date from people order by name asc;
SELECT name from people where nationality != 'Russia';
SELECT name from people where nationality != 'Russia';
SELECT name from people where people_id not in ( select people_id from poker_player );
SELECT name from people where people_id not in ( select people_id from poker_player );
SELECT count ( distinct nationality ) from people;
SELECT count ( distinct nationality ) from people;
SELECT count ( * ) from area_code_state;
SELECT contestants.contestant_number , contestants.contestant_name from contestants order by contestant_name desc;
SELECT vote_id , phone_number , state from votes;
SELECT max ( area_code ) , min ( area_code ) from area_code_state;
SELECT max ( created ) from votes where state = 'CA';
SELECT contestant_name from contestants where contestant_name != 'Jessie Alloway';
SELECT distinct state , created from votes;
SELECT contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by contestants.contestant_number having count ( * ) >= 2;
SELECT contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by contestants.contestant_number order by count ( * ) asc limit 1;
SELECT count ( * ) from votes where state = 'NY' or state = 'CA';
SELECT count ( * ) from contestants where contestant_number not in ( select contestant_number from votes );
SELECT area_code_state.area_code from area_code_state join votes on area_code_state.state = votes.state group by area_code_state.area_code order by count ( * ) desc limit 1;
SELECT votes.created , votes.state , votes.phone_number from contestants join votes on contestants.contestant_number = votes.contestant_number where contestants.contestant_name = 'Tabatha Gehling';
SELECT area_code_state.area_code from area_code_state join votes on area_code_state.state = votes.state join contestants on votes.contestant_number = contestants.contestant_number where contestants.contestant_name = 'Tabatha Gehling' intersect select area_code_state.area_code from area_code_state join votes on area_code_state.state = votes.state join contestants on votes.contestant_number = contestants.contestant_number where contestants.contestant_name = 'Kelly Clauss';
SELECT contestant_name from contestants where contestant_name like '%Al%';
SELECT name from country where indepyear > 1950;
SELECT name from country where indepyear > 1950;
SELECT count(*) FROM country WHERE governmentform LIKE '%Republic%';
SELECT COUNT(*) FROM country WHERE TRIM(LOWER(governmentform)) LIKE '%republic%';
SELECT sum ( surfacearea ) from country where region = 'Caribbean';
SELECT sum ( surfacearea ) from country where region = 'Caribbean';
SELECT continent from country where name = 'Anguilla';
SELECT continent from country where name = 'Anguilla';
SELECT country.region from city join country on city.countrycode = country.code where city.name = 'Kabul';
SELECT region from city join country on city.countrycode = country.code where city.name = 'Kabul';
SELECT language FROM countrylanguage WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1;
SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba') AND isofficial = 'T' ORDER BY percentage DESC LIMIT 1;
SELECT population , lifeexpectancy from country where name = 'Brazil';
SELECT population , lifeexpectancy from country where name = 'Brazil';
SELECT c.region, cty.population FROM country AS c JOIN city AS cty ON c.capital = cty.id WHERE c.name = 'Angola';
SELECT region, population FROM country WHERE name = 'Angola';
SELECT avg ( lifeexpectancy ) from country where region = 'Central Africa';
SELECT avg ( lifeexpectancy ) from country where region = 'Central Africa';
SELECT name from country where continent = 'Asia' order by lifeexpectancy asc limit 1;
SELECT name from country where continent = 'Asia' order by lifeexpectancy asc limit 1;
SELECT sum ( population ) , max ( gnp ) from country where continent = 'Asia';
SELECT sum ( population ) , max ( gnp ) from country where continent = 'Asia';
SELECT avg ( lifeexpectancy ) from country where continent = 'Africa' and governmentform = 'Republic';
SELECT avg ( lifeexpectancy ) from country where continent = 'Africa' and governmentform = 'Republic';
SELECT sum ( surfacearea ) from country where continent = 'Asia' or continent = 'Europe';
SELECT sum ( surfacearea ) from country where continent = 'Asia' or continent = 'Europe';
SELECT sum ( population ) from city where district = 'Gelderland';
SELECT sum ( population ) from city where district = 'Gelderland';
SELECT AVG(gnp) AS average_gnp, SUM(population) AS total_population FROM country WHERE governmentform LIKE '%US territory%';
SELECT AVG(gnp) AS mean_gnp, SUM(population) AS total_population FROM country WHERE name LIKE '%U.S.%';
SELECT count ( distinct language ) from countrylanguage;
SELECT count ( distinct language ) from countrylanguage;
SELECT count ( distinct governmentform ) from country where continent = 'Africa';
SELECT count ( distinct governmentform ) from country where continent = 'Africa';
SELECT count ( * ) from countrylanguage where countrycode = 'ABW';
SELECT count ( * ) from countrylanguage where countrycode = 'ABW';
SELECT count ( * ) from countrylanguage where countrycode = 'AFG' and isofficial = 'T';
SELECT count ( * ) from countrylanguage where countrycode = 'AFG' and isofficial = 'T';
SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code GROUP BY countrylanguage.countrycode ORDER BY COUNT(DISTINCT countrylanguage.language) DESC LIMIT 1;
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code ORDER BY COUNT(DISTINCT countrylanguage.language) DESC LIMIT 1;
SELECT continent from countrylanguage join country on countrylanguage.countrycode = country.code group by country.continent order by count ( distinct countrylanguage.language ) desc limit 1;
SELECT continent from country group by continent order by count ( * ) desc limit 1;
SELECT COUNT(DISTINCT english_speaking_countries.countrycode) FROM countrylanguage AS english_speaking_countries JOIN countrylanguage AS dutch_speaking_countries ON english_speaking_countries.countrycode = dutch_speaking_countries.countrycode WHERE english_speaking_countries.language = 'English' AND dutch_speaking_countries.language = 'Dutch';
SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language IN ('English', 'Dutch') GROUP BY countrycode HAVING COUNT(DISTINCT language) = 2;
SELECT country.name FROM country JOIN countrylanguage AS cl1 ON country.code = cl1.countrycode WHERE cl1.language = 'English' AND cl1.isofficial = 'T' INTERSECT SELECT country.name FROM country JOIN countrylanguage AS cl2 ON country.code = cl2.countrycode WHERE cl2.language = 'French' AND cl2.isofficial = 'T';
SELECT country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French';
SELECT c.name FROM country c JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T' JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl2.language = 'French' AND cl2.isofficial = 'T';
SELECT country.name FROM country JOIN countrylanguage AS cl1 ON country.code = cl1.countrycode JOIN countrylanguage AS cl2 ON country.code = cl2.countrycode WHERE cl1.language = 'English' AND cl1.isofficial = 'T' AND cl2.language = 'French' AND cl2.isofficial = 'T';
SELECT COUNT(DISTINCT continent) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 1;
SELECT COUNT(DISTINCT c.continent) FROM country AS c JOIN countrylanguage AS cl ON c.code = cl.countrycode WHERE cl.language = 'Chinese' AND cl.isofficial = 1;
SELECT distinct region from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'Dutch' or countrylanguage.language = 'English';
SELECT DISTINCT region FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE (language = 'Dutch' OR language = 'English') AND isofficial = 'T' );
SELECT name FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE (language = 'English' OR language = 'Dutch') AND isofficial = 1 );
SELECT DISTINCT c.name FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE (cl.language = 'English' OR cl.language = 'Dutch') AND cl.isofficial = 'T';
SELECT language from countrylanguage join country on countrylanguage.countrycode = country.code where continent = 'Asia' group by language order by sum ( percentage ) desc limit 1;
SELECT language from countrylanguage join country on countrylanguage.countrycode = country.code where country.continent = 'Asia' group by countrylanguage.language order by count ( * ) desc limit 1;
SELECT language from countrylanguage join country on countrylanguage.countrycode = country.code where governmentform = 'Republic' group by language having count ( * ) = 1;
SELECT language from countrylanguage join country on countrylanguage.countrycode = country.code where governmentform = 'Republic' group by language having count ( * ) = 1;
SELECT city.name, city.population FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' AND countrylanguage.isofficial = 'T' ORDER BY city.population DESC LIMIT 1;
SELECT c.name, c.population FROM city c JOIN countrylanguage cl ON c.countrycode = cl.countrycode WHERE cl.language = 'English' ORDER BY c.population DESC LIMIT 1;
SELECT name , population , lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1;
SELECT name , population , lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1;
SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN ( SELECT countrycode FROM countrylanguage WHERE isofficial = 'T' AND LOWER(language) = 'english' );
SELECT AVG(lifeexpectancy) FROM country WHERE NOT EXISTS ( SELECT 1 FROM countrylanguage WHERE countrylanguage.countrycode = country.code AND language = 'English' AND isofficial = 'T' );
SELECT SUM(c.population) AS TotalPopulation FROM country c WHERE NOT EXISTS ( SELECT 1 FROM countrylanguage cl WHERE cl.countrycode = c.code AND cl.language = 'English' AND cl.isofficial = 'T' );
SELECT SUM(c.population) FROM country AS c WHERE NOT EXISTS ( SELECT 1 FROM countrylanguage AS cl WHERE cl.countrycode = c.code AND cl.language = 'English' );
SELECT countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.headofstate = 'Beatrix' and countrylanguage.isofficial = 'T';
SELECT countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.headofstate = 'Beatrix' and countrylanguage.isofficial = 'T';
SELECT count ( distinct language ) from countrylanguage join country on countrylanguage.countrycode = country.code where indepyear < 1930 and isofficial = 'T';
SELECT count ( distinct language ) from countrylanguage cl join country c on cl.countrycode = c.code where c.indepyear < 1930 and cl.isofficial = 'T';
SELECT c.name FROM country AS c WHERE c.surfacearea > ( SELECT MAX(c2.surfacearea) FROM country AS c2 WHERE c2.continent = 'Europe' ) AND c.continent <> 'Europe';
SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe');
SELECT name FROM country WHERE population < ( SELECT MIN(population) FROM country WHERE continent = 'Asia' ) AND continent = 'Africa';
SELECT name from country where continent = 'Africa' and population < ( select min ( population ) from country where continent = 'Asia' );
SELECT name from country where continent = 'Asia' and population > ( select max ( population ) from country where continent = 'Africa' );
SELECT a.name FROM country AS a WHERE a.continent = 'Asia' AND a.population > ALL (SELECT b.population FROM country AS b WHERE b.continent = 'Africa');
SELECT code FROM country WHERE NOT EXISTS ( SELECT 1 FROM countrylanguage WHERE country.code = countrylanguage.countrycode AND language = 'English' );
SELECT countrycode FROM countrylanguage EXCEPT SELECT countrycode FROM countrylanguage WHERE language = 'English';
SELECT DISTINCT cl.countrycode FROM countrylanguage cl WHERE NOT EXISTS ( SELECT 1 FROM countrylanguage WHERE countrycode = cl.countrycode AND LOWER(language) = 'english' AND isofficial = 'T';
SELECT distinct countrycode from countrylanguage where language != 'English';
SELECT code from country except select countrycode from countrylanguage where language = 'English' except select code from country where governmentform = 'Republic';
SELECT code from country except select countrycode from countrylanguage where language = 'English' intersect select code from country where governmentform != 'Republic';
SELECT city.name FROM city JOIN country ON city.countrycode = country.code LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode AND countrylanguage.language = 'English' WHERE country.continent = 'Europe' AND countrylanguage.language IS NULL;
SELECT city.name FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = 'Europe' AND NOT EXISTS ( SELECT 1 FROM countrylanguage WHERE countrylanguage.countrycode = city.countrycode AND language = 'English' AND isofficial = 'T' );
SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON countrylanguage.countrycode = country.code WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T';
SELECT distinct city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode join country on city.countrycode = country.code where country.continent = 'Asia' and countrylanguage.language = 'Chinese' and countrylanguage.isofficial = 'T';
SELECT name , surfacearea , indepyear from country order by population asc limit 1;
SELECT name , surfacearea , indepyear from country order by population asc limit 1;
SELECT population, name, headofstate FROM country ORDER BY surfacearea DESC LIMIT 1;
SELECT name , population , headofstate from country order by surfacearea desc limit 1;
SELECT country.name, COUNT(countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code HAVING COUNT(countrylanguage.language) >= 3;
SELECT country.name, COUNT(DISTINCT countrylanguage.language) AS language_count FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code, country.name HAVING COUNT(DISTINCT countrylanguage.language) > 2;
SELECT count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district;
SELECT count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district;
SELECT governmentform, SUM(population) AS total_population FROM country GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72;
SELECT c.governmentform, SUM(c.population) AS total_population FROM country c JOIN ( SELECT governmentform FROM country GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72 ) AS subquery ON c.governmentform = subquery.governmentform GROUP BY c.governmentform;
SELECT sum ( population ) , avg ( lifeexpectancy ) , continent from country group by continent having avg ( lifeexpectancy ) < 72;
SELECT continent, SUM(population) AS total_population, AVG(lifeexpectancy) AS average_life_expectancy FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72;
SELECT name , surfacearea from country order by surfacearea desc limit 5;
SELECT name , surfacearea from country order by surfacearea desc limit 5;
SELECT name from country order by population desc limit 3;
SELECT name from country order by population desc limit 3;
SELECT name from country order by population asc limit 3;
SELECT name from country order by population asc limit 3;
SELECT count ( * ) from country where continent = 'Asia';
SELECT count ( * ) from country where continent = 'Asia';
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;
SELECT name from country where continent = 'Europe' and population = 80000;
SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_area FROM country WHERE continent = 'North America' AND surfacearea > 3000;
SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_surface_area FROM country WHERE surfacearea > 3000 AND continent = 'North America';
SELECT name from city where population between 160000 and 900000;
SELECT name from city where population between 160000 and 900000;
SELECT language from countrylanguage where isofficial = 'T' group by language order by count ( * ) desc limit 1;
SELECT language from countrylanguage group by language order by count ( * ) desc limit 1;
SELECT cl.countrycode, cl.language, cl.percentage FROM countrylanguage cl JOIN ( SELECT countrycode, MAX(percentage) AS max_percentage FROM countrylanguage WHERE isofficial = 'T' GROUP BY countrycode ) AS subq ON cl.countrycode = subq.countrycode AND cl.percentage = subq.max_percentage WHERE cl.isofficial = 'T' ORDER BY cl.countrycode;
SELECT cl.countrycode, cl.language, cl.percentage FROM countrylanguage cl INNER JOIN ( SELECT countrycode, MAX(percentage) AS max_percentage FROM countrylanguage GROUP BY countrycode ) AS max_cl ON cl.countrycode = max_cl.countrycode AND cl.percentage = max_cl.max_percentage;
SELECT COUNT(*) FROM ( SELECT cl.countrycode FROM countrylanguage cl INNER JOIN ( SELECT countrycode, MAX(percentage) AS max_percentage FROM countrylanguage GROUP BY countrycode ) AS max_lang ON cl.countrycode = max_lang.countrycode WHERE cl.language = 'Spanish' AND cl.percentage = max_lang.max_percentage ) AS spanish_speaking_countries;
SELECT COUNT(*) FROM country AS c WHERE EXISTS ( SELECT 1 FROM countrylanguage AS cl WHERE cl.countrycode = c.code AND cl.language = 'Spanish' AND cl.isofficial = 'T' AND cl.percentage >= ALL ( SELECT cl2.percentage FROM countrylanguage AS cl2 WHERE cl2.countrycode = c.code AND cl2.language = 'Spanish' ) );
WITH SpanishSpeaking AS ( SELECT countrycode, MAX(percentage) AS max_percentage FROM countrylanguage WHERE language = 'Spanish' GROUP BY countrycode ), MaxPercentage AS ( SELECT MAX(max_percentage) AS max_percentage FROM SpanishSpeaking ) SELECT s.countrycode FROM SpanishSpeaking s JOIN MaxPercentage mp ON s.max_percentage = mp.max_percentage;
SELECT cl.countrycode FROM countrylanguage cl JOIN ( SELECT countrycode, MAX(percentage) as max_percentage FROM countrylanguage WHERE language = 'Spanish' GROUP BY countrycode ) as subq ON cl.countrycode = subq.countrycode AND cl.percentage = subq.max_percentage WHERE cl.language = 'Spanish';
SELECT count ( * ) from conductor;
SELECT count ( * ) from conductor;
SELECT name from conductor order by age asc;
SELECT name from conductor order by age asc;
SELECT name from conductor where nationality != 'USA';
SELECT name from conductor where nationality != 'USA';
SELECT record_company from orchestra order by year_of_founded desc;
SELECT record_company from orchestra order by year_of_founded desc;
SELECT avg ( attendance ) from show;
SELECT avg ( attendance ) from show;
SELECT max ( share ) , min ( share ) from performance where type != 'Live final';
SELECT max ( share ) , min ( share ) from performance where type != 'Live final';
SELECT count ( distinct nationality ) from conductor;
SELECT count ( distinct nationality ) from conductor;
SELECT name from conductor order by year_of_work desc;
SELECT name from conductor order by year_of_work desc;
SELECT name from conductor order by year_of_work desc limit 1;
SELECT name from conductor order by year_of_work desc limit 1;
SELECT conductor.name , orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id;
SELECT conductor.name , orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id;
SELECT conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.name having count ( * ) > 1 ;
SELECT conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.conductor_id having count ( * ) > 1 ;
SELECT conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.conductor_id order by count ( * ) desc limit 1;
SELECT conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.conductor_id order by count ( * ) desc limit 1;
SELECT conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id where orchestra.year_of_founded > 2008;
SELECT conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id where orchestra.year_of_founded > 2008;
SELECT record_company , count ( * ) from orchestra group by record_company;
SELECT record_company , count ( * ) from orchestra group by record_company;
SELECT major_record_format from orchestra group by major_record_format order by count ( * ) asc;
SELECT major_record_format from orchestra group by major_record_format order by count ( * ) asc;
SELECT record_company from orchestra group by record_company order by count ( * ) desc limit 1;
SELECT record_company from orchestra group by record_company order by count ( * ) desc limit 1;
SELECT orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance );
SELECT orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance );
SELECT record_company from orchestra where year_of_founded > 2003 intersect select record_company from orchestra where year_of_founded < 2003;
SELECT record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003;
SELECT count ( * ) from orchestra where major_record_format = 'CD' or major_record_format = 'DVD';
SELECT count ( * ) from orchestra where major_record_format = 'CD' or major_record_format = 'DVD';
SELECT orchestra.year_of_founded from orchestra join performance on orchestra.orchestra_id = performance.orchestra_id group by performance.orchestra_id having count ( * ) > 1;
SELECT orchestra.year_of_founded from orchestra join performance on orchestra.orchestra_id = performance.orchestra_id group by performance.orchestra_id having count ( * ) > 1;
SELECT count ( * ) from highschooler;
SELECT count ( * ) from highschooler;
SELECT name , grade from highschooler;
SELECT name , grade from highschooler;
SELECT grade from highschooler;
SELECT grade from highschooler;
SELECT grade from highschooler where name = 'Kyle';
SELECT grade from highschooler where name = 'Kyle';
SELECT name from highschooler where grade = 10;
SELECT name from highschooler where grade = 10;
SELECT id FROM highschooler WHERE name = 'Kyle';
SELECT id FROM highschooler WHERE name = 'Kyle';
SELECT count ( * ) from highschooler where grade = 9 or grade = 10;
SELECT count ( * ) from highschooler where grade = 9 or grade = 10;
SELECT grade , count ( * ) from highschooler group by grade;
SELECT grade , count ( * ) from highschooler group by grade;
SELECT grade from highschooler group by grade order by count ( * ) desc limit 1;
SELECT grade from highschooler group by grade order by count ( * ) desc limit 1;
SELECT grade from highschooler group by grade having count ( * ) >= 4;
SELECT grade from highschooler group by grade having count ( * ) >= 4;
SELECT student_id , count ( * ) from friend group by student_id;
SELECT student_id , count ( * ) from friend group by student_id ;
SELECT highschooler.name , count ( * ) from friend join highschooler on friend.student_id = highschooler.id group by highschooler.id;
SELECT highschooler.name , count ( * ) from highschooler join friend on highschooler.id = friend.student_id group by friend.student_id;
SELECT highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id order by count ( * ) desc limit 1;
SELECT highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id order by count ( * ) desc limit 1;
SELECT highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id having count ( * ) >= 3;
SELECT highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id having count ( * ) >= 3;
SELECT h2.name FROM friend JOIN highschooler h1 ON friend.student_id = h1.id JOIN highschooler h2 ON friend.friend_id = h2.id WHERE h1.name = 'Kyle';
SELECT friend_hs.name FROM friend JOIN highschooler AS student_hs ON friend.student_id = student_hs.id JOIN highschooler AS friend_hs ON friend.friend_id = friend_hs.id WHERE student_hs.name = 'Kyle';
SELECT COUNT(*) FROM friend JOIN highschooler ON friend.student_id = highschooler.id WHERE highschooler.name = 'Kyle';
SELECT COUNT(*) AS NumberOfFriends FROM friend WHERE friend.student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT id from highschooler where id not in ( select student_id from friend );
SELECT id from highschooler except select student_id from friend;
SELECT name from highschooler where id not in ( select student_id from friend );
SELECT name from highschooler where id not in ( select student_id from friend );
SELECT DISTINCT h1.id FROM highschooler h1 JOIN friend f ON h1.id = f.student_id JOIN likes l ON h1.id = l.liked_id WHERE EXISTS (SELECT 1 FROM friend WHERE student_id = h1.id) AND EXISTS (SELECT 1 FROM likes WHERE liked_id = h1.id);
SELECT DISTINCT student_id FROM highschooler WHERE student_id IN (SELECT student_id FROM friend) AND student_id IN (SELECT student_id FROM likes);
SELECT DISTINCT h.name FROM highschooler h WHERE EXISTS ( SELECT 1 FROM friend f WHERE f.student_id = h.id ) AND EXISTS ( SELECT 1 FROM likes l WHERE l.liked_id = h.id );
SELECT DISTINCT h.name FROM highschooler h WHERE h.id IN ( SELECT f.student_id FROM friend f WHERE f.student_id = h.id ) AND h.id IN ( SELECT l.liked_id FROM likes l WHERE l.liked_id = h.id );
SELECT student_id , count ( * ) from likes group by student_id;
SELECT student_id , count ( * ) from likes group by student_id ;
SELECT highschooler.name , count ( * ) from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id;
SELECT highschooler.name , count ( * ) from likes join highschooler on highschooler.id = likes.student_id group by likes.student_id;
SELECT highschooler.name from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id order by count ( * ) desc limit 1;
SELECT name from highschooler where id in ( select student_id from likes group by student_id order by count ( * ) desc limit 1 );
SELECT name from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id having count ( * ) >= 2 ;
SELECT highschooler.name from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id having count ( * ) >= 2 ;
SELECT H.name FROM highschooler AS H JOIN friend AS F ON H.id = F.student_id WHERE H.grade > 5 GROUP BY H.id, H.name HAVING COUNT(DISTINCT F.friend_id) >= 2;
SELECT name from highschooler where grade > 5 and id in ( select friend.student_id from friend join highschooler on friend.friend_id = highschooler.id group by friend.student_id having count ( * ) >= 2 );
SELECT count ( * ) from likes join highschooler on likes.student_id = highschooler.id where highschooler.name = 'Kyle';
SELECT count ( * ) from likes join highschooler on likes.student_id = highschooler.id where highschooler.name = 'Kyle';
SELECT avg ( grade ) from highschooler where id in ( select student_id from friend );
SELECT avg ( grade ) from highschooler where id in ( select student_id from friend );
SELECT min ( grade ) from highschooler where id not in ( select student_id from friend );
SELECT min ( grade ) from highschooler where id not in ( select student_id from friend );
SELECT state from owners intersect select state from professionals;
SELECT state from owners intersect select state from professionals;
SELECT avg ( age ) from dogs where dog_id in ( select dog_id from treatments );
SELECT avg ( age ) from dogs where dog_id in ( select dog_id from treatments );
SELECT professional_id , last_name , cell_number from professionals where state = 'Indiana' or professional_id in ( select professional_id from treatments group by professional_id having count ( * ) > 2 );
SELECT professional_id , last_name , cell_number from professionals where state = 'Indiana' or professional_id in ( select professional_id from treatments group by professional_id having count ( * ) > 2 );
SELECT d.name FROM dogs d WHERE d.dog_id NOT IN ( SELECT t.dog_id FROM treatments t GROUP BY t.dog_id HAVING SUM(t.cost_of_treatment) > 1000 );
SELECT name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum ( cost_of_treatment ) > 1000 );
SELECT first_name from owners union select first_name from professionals except select name from dogs;
SELECT DISTINCT first_name FROM ( SELECT first_name FROM owners UNION SELECT first_name FROM professionals ) EXCEPT SELECT name FROM dogs;
SELECT professional_id , role_code , email_address from professionals where professional_id not in ( select professional_id from treatments );
SELECT professional_id , role_code , email_address from professionals where professional_id not in ( select professional_id from treatments );
SELECT owners.owner_id , owners.first_name , owners.last_name from dogs join owners on dogs.owner_id = owners.owner_id group by owners.owner_id order by count ( * ) desc limit 1;
SELECT owners.owner_id , owners.first_name , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id group by owners.owner_id order by count ( * ) desc limit 1;
SELECT professionals.professional_id , professionals.role_code , professionals.first_name from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2;
SELECT professionals.professional_id , professionals.role_code , professionals.first_name from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2;
SELECT breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_name order by count ( * ) desc limit 1;
SELECT breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_name order by count ( * ) desc limit 1;
SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;
SELECT owners.owner_id, owners.last_name, SUM(treatments.cost_of_treatment) AS total_cost FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY total_cost DESC LIMIT 1;
SELECT treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatments.treatment_type_code order by sum ( cost_of_treatment ) asc limit 1;
SELECT treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatments.treatment_type_code order by sum ( treatments.cost_of_treatment ) asc limit 1;
SELECT owners.owner_id , owners.zip_code from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1;
SELECT dogs.owner_id , owners.zip_code from dogs join owners on dogs.owner_id = owners.owner_id group by dogs.owner_id order by sum ( dogs.weight ) desc limit 1;
SELECT p.professional_id, p.cell_number FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;
SELECT p.professional_id, p.cell_number FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;
SELECT DISTINCT p.first_name, p.last_name FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM treatments );
SELECT DISTINCT professionals.first_name, professionals.last_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.cost_of_treatment < ( SELECT AVG(treatments.cost_of_treatment) FROM treatments );
SELECT treatments.date_of_treatment , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id;
SELECT date_of_treatment , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id;
SELECT cost_of_treatment , treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT treatments.cost_of_treatment , treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT distinct owners.first_name , owners.last_name , sizes.size_code from dogs join owners on dogs.owner_id = owners.owner_id join sizes on dogs.size_code = sizes.size_code;
SELECT distinct owners.first_name , owners.last_name , sizes.size_code from dogs join owners on dogs.owner_id = owners.owner_id join sizes on dogs.size_code = sizes.size_code;
SELECT owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id;
SELECT owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id;
SELECT dogs.name , treatments.date_of_treatment from treatments join dogs on treatments.dog_id = dogs.dog_id join breeds on dogs.breed_code = breeds.breed_code where breeds.breed_name = ( select breeds.breed_name from dogs join breeds on dogs.breed_code = breeds.breed_code group by breeds.breed_name order by count ( * ) asc limit 1 );
SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id JOIN breeds ON dogs.breed_code = breeds.breed_code WHERE breeds.breed_code IN ( SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1 );
SELECT owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = 'Virginia';
SELECT owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = 'Virginia';
SELECT distinct dogs.date_arrived , dogs.date_departed from dogs join treatments on dogs.dog_id = treatments.dog_id;
SELECT distinct dogs.date_arrived , dogs.date_departed from dogs join treatments on dogs.dog_id = treatments.dog_id;
SELECT o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.date_of_birth = (SELECT MAX(date_of_birth) FROM dogs);
SELECT o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id ORDER BY d.age ASC;
SELECT email_address from professionals where state = 'Hawaii' or state = 'Wisconsin';
SELECT email_address from professionals where state = 'Hawaii' or state = 'Wisconsin';
SELECT date_arrived , date_departed from dogs;
SELECT date_arrived , date_departed from dogs;
SELECT count ( distinct dog_id ) from treatments;
SELECT count ( distinct dog_id ) from treatments;
SELECT count ( distinct professional_id ) from treatments;
SELECT count ( distinct professional_id ) from treatments;
SELECT role_code , street , city , state from professionals where city like '%West%';
SELECT role_code , street , city , state from professionals where city like '%West%';
SELECT first_name , last_name , email_address from owners where state like '%North%';
SELECT first_name , last_name , email_address from owners where state like '%North%';
SELECT count ( * ) from dogs where age < ( select avg ( age ) from dogs );
SELECT count ( * ) from dogs where age < ( select avg ( age ) from dogs );
SELECT cost_of_treatment from treatments order by date_of_treatment desc limit 1;
SELECT cost_of_treatment from treatments order by date_of_treatment desc limit 1;
SELECT count ( * ) from dogs where dog_id not in ( select dog_id from treatments );
SELECT count ( * ) from dogs where dog_id not in ( select dog_id from treatments );
SELECT count ( * ) from owners where owner_id not in ( select owner_id from dogs );
SELECT COUNT(*) FROM owners WHERE owner_id NOT IN ( SELECT DISTINCT owner_id FROM dogs WHERE date_departed IS NULL );
SELECT count ( * ) from professionals where professional_id not in ( select professional_id from treatments );
SELECT count ( * ) from professionals where professional_id not in ( select professional_id from treatments );
SELECT name , age , weight from dogs where abandoned_yn = 1;
SELECT name , age , weight from dogs where abandoned_yn = 1;
SELECT avg ( age ) from dogs;
SELECT avg ( age ) from dogs;
SELECT age from dogs order by age desc limit 1;
SELECT age from dogs order by age desc limit 1;
SELECT charge_type , charge_amount from charges;
SELECT charge_type , charge_amount from charges;
SELECT charge_amount from charges order by charge_amount desc limit 1;
SELECT charge_amount from charges order by charge_amount desc limit 1;
SELECT email_address , cell_number , home_phone from professionals;
SELECT email_address , cell_number , home_phone from professionals;
SELECT breeds.breed_code, breeds.breed_name, sizes.size_code, sizes.size_description FROM breeds CROSS JOIN sizes;
SELECT distinct breed_code , size_code from dogs;
SELECT distinct professionals.first_name , treatment_types.treatment_type_description from professionals join treatments on professionals.professional_id = treatments.professional_id join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT distinct professionals.first_name , treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code join professionals on professionals.professional_id = treatments.professional_id;
SELECT count ( * ) from singer;
SELECT count ( * ) from singer;
SELECT name from singer order by net_worth_millions asc ;
SELECT name from singer order by net_worth_millions asc;
SELECT birth_year , citizenship from singer;
SELECT birth_year , citizenship from singer;
SELECT name from singer where citizenship != 'France';
SELECT name FROM singer WHERE citizenship <> 'French';
SELECT name from singer where birth_year = 1948 or birth_year = 1949;
SELECT name from singer where birth_year = 1948 or birth_year = 1949;
SELECT name from singer order by net_worth_millions desc limit 1;
SELECT name from singer order by net_worth_millions desc limit 1;
SELECT citizenship , count ( * ) from singer group by citizenship;
SELECT citizenship , count ( * ) from singer group by citizenship;
SELECT citizenship from singer group by citizenship order by count ( * ) desc limit 1;
SELECT citizenship from singer group by citizenship order by count ( * ) desc limit 1 ;
SELECT citizenship , max ( net_worth_millions ) from singer group by citizenship;
SELECT citizenship , max ( net_worth_millions ) from singer group by citizenship;
SELECT song.title , singer.name from song join singer on song.singer_id = singer.singer_id;
SELECT song.title , singer.name from song join singer on song.singer_id = singer.singer_id;
SELECT distinct singer.name from song join singer on song.singer_id = singer.singer_id where song.sales > 300000;
SELECT distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000;
SELECT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.song_id) > 1;
SELECT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(*) > 1;
SELECT singer.name , sum ( song.sales ) from singer join song on singer.singer_id = song.singer_id group by singer.name;
SELECT singer.name , sum ( song.sales ) from singer join song on singer.singer_id = song.singer_id group by singer.name;
SELECT name from singer where singer_id not in ( select singer_id from song );
SELECT name from singer where singer_id not in ( select singer_id from song );
SELECT citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955;
SELECT citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955;
SELECT count ( * ) from other_available_features;
SELECT ref_feature_types.feature_type_name from other_available_features join ref_feature_types on other_available_features.feature_type_code = ref_feature_types.feature_type_code where other_available_features.feature_name = 'AirCon';
SELECT property_type_description FROM ref_property_types WHERE property_type_code IN ('fld', 'hse', 'apt', 'shp', 'oth');
SELECT property_name FROM properties WHERE (property_type_code = 'HSE' OR property_type_code = 'APT') AND room_count > 1;
