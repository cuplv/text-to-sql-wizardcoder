SELECT COUNT(DISTINCT singer_id) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT name, country, age FROM singer ORDER BY age DESC;
SELECT singer.name, singer.country, singer.age     FROM      singer     ORDER BY      singer.age DESC;
SELECT AVG(age) AS average_age,      MIN(age) AS minimum_age,      MAX(age) AS maximum_age FROM      singer WHERE      country = 'France';
SELECT AVG(age) AS average_age,     MIN(age) AS minimum_age,     MAX(age) AS maximum_age FROM     singer WHERE     country = 'France';
SELECT singer.name, singer.song_release_year FROM  singer WHERE  singer.age = (SELECT MIN(age) FROM singer);
SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer);
SELECT DISTINCT country     FROM singer     WHERE age > 20;
SELECT DISTINCT country FROM singer WHERE age > 20;
SELECT country, COUNT(*) as singer_count     FROM singer     GROUP BY country;
SELECT country, COUNT(*) AS count     FROM singer     GROUP BY country;
SELECT singer.name as singer_name FROM singer WHERE singer.age > (SELECT AVG(age) FROM singer);
SELECT song_name FROM  singer WHERE  age > (SELECT AVG(age) FROM singer);
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT MAX(capacity) AS "Maximum Capacity",  AVG(capacity) AS "Average Capacity" FROM stadium;
SELECT AVG(capacity) AS "avg (capacity)", MAX(capacity) AS "max (capacity)" FROM stadium;
SELECT stadium.name, stadium.capacity FROM stadium WHERE stadium.average = (     SELECT MAX(average)     FROM stadium )
SELECT stadium.name, stadium.capacity FROM stadium WHERE stadium.average = (     SELECT MAX(average)     FROM stadium )
SELECT COUNT(*)  FROM concert WHERE year IN (2014, 2015);
SELECT COUNT(*)  FROM concert  WHERE year IN (2014, 2015);
SELECT stadium.name, COUNT(concert.stadium_id) AS concert_count  FROM  stadium  LEFT JOIN  concert  ON  stadium.stadium_id = concert.stadium_id  GROUP BY  stadium.stadium_id, stadium.name;
SELECT stadium.name, COUNT(concert.concert_id) AS concert_count  FROM  stadium  JOIN  concert  ON  stadium.stadium_id = concert.stadium_id  GROUP BY  stadium.name;
SELECT stadium.name, stadium.capacity FROM     stadium INNER JOIN     concert ON stadium.stadium_id = concert.stadium_id WHERE     concert.year >= 2014 GROUP BY     stadium.name, stadium.capacity HAVING     COUNT(concert.concert_id) = (         SELECT             COUNT(concert_id)         FROM             concert         WHERE             year >= 2014         GROUP BY             stadium_id         ORDER BY             COUNT(concert_id) DESC         LIMIT 1     );
SELECT stadium.name, stadium.capacity FROM     stadium JOIN     concert ON stadium.stadium_id = concert.stadium_id WHERE     concert.year > 2013 GROUP BY     stadium.name, stadium.capacity ORDER BY     COUNT(concert.stadium_id) DESC LIMIT 1;
SELECT year FROM     concert GROUP BY     year ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT year FROM     concert GROUP BY     year ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT stadium.name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.concert_name IS NULL;
SELECT stadium.name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.stadium_id IS NULL;
SELECT country     FROM      singer     WHERE      age > 40     INTERSECT     SELECT      country     FROM      singer     WHERE      age < 30;
SELECT stadium.name   FROM  stadium   WHERE  stadium.name NOT IN (          SELECT      stadium.name           FROM      concert      JOIN      stadium ON concert.stadium_id = stadium.stadium_id          WHERE      concert.year = 2014 );
SELECT stadium.name  FROM  stadium  LEFT JOIN concert  ON stadium.stadium_id = concert.stadium_id  AND concert.year = 2014  WHERE concert.concert_id IS NULL;
SELECT concert_name, theme, COUNT(singer_in_concert.singer_id) AS num_singers FROM concert LEFT JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_id;
SELECT concert.concert_name,  concert.theme,  COUNT(DISTINCT singer_in_concert.singer_id) AS number_of_singers   FROM concert   INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id   GROUP BY concert.concert_name, concert.theme;
SELECT singer.name, COUNT(DISTINCT singer_in_concert.concert_id) as number_of_concerts  FROM  singer  JOIN  singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  GROUP BY  singer.name;
SELECT singer.name, COUNT(singer_in_concert.concert_id) as num_concerts FROM  singer   JOIN  singer_in_concert  ON  singer.singer_id = singer_in_concert.singer_id   GROUP BY  singer.name;
SELECT singer.name FROM concert INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id INNER JOIN singer ON singer_in_concert.singer_id = singer.singer_id WHERE concert.year = 2014;
SELECT singer.name FROM     singer JOIN     singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN     concert ON singer_in_concert.concert_id = concert.concert_id WHERE     concert.year = 2014;
SELECT singer.name, singer.country     FROM singer     WHERE song_name LIKE '%Hey%';
SELECT name, country     FROM      singer     WHERE      song_name LIKE '%Hey%';
SELECT stadium.name, stadium.location FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014 INTERSECT SELECT stadium.name, stadium.location FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2015;
SELECT stadium.name, stadium.location FROM      stadium INNER JOIN      concert ON stadium.stadium_id = concert.stadium_id WHERE      concert.year = 2014 INTERSECT SELECT      stadium.name, stadium.location FROM      stadium INNER JOIN      concert ON stadium.stadium_id = concert.stadium_id WHERE      concert.year = 2015;
SELECT COUNT(concert.concert_id) FROM concert INNER JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE stadium.capacity = (     SELECT     MAX(capacity)     FROM     stadium );
SELECT COUNT(*) FROM concert WHERE stadium_id = (   SELECT stadium_id   FROM stadium   ORDER BY capacity DESC   LIMIT 1 );
SELECT COUNT(*) FROM pets WHERE weight > 10;
SELECT COUNT(*) FROM pets WHERE weight > 10;
SELECT pets.pet_weight FROM pets WHERE pets.petid IN (     SELECT pets.petid     FROM pets     JOIN has_pet ON pets.petid = has_pet.petid     WHERE pets.pet_type = 'dog'     ORDER BY pets.pet_age ASC     LIMIT 1 );
SELECT MIN(weight) FROM pets JOIN has_pet ON pets.petid = has_pet.petid WHERE pet_age IN (     SELECT MIN(pet_age) FROM pets );
SELECT MAX(weight), pettype FROM pets GROUP BY pettype;
SELECT MAX(pets.weight) AS max_weight, pets.pettype AS pet_type FROM pets GROUP BY pets.pettype;
SELECT COUNT(*)  FROM has_pet  JOIN student ON has_pet.stuid = student.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE student.age > 20;
SELECT COUNT(*) FROM   has_pet JOIN   student ON has_pet.stuid = student.stuid WHERE   student.age > 20;
SELECT COUNT(*) FROM     student JOIN     has_pet ON student.stuid = has_pet.stuid JOIN     pets ON has_pet.petid = pets.petid WHERE     student.sex = 'F'     AND pets.pettype = 'dog';
SELECT COUNT(DISTINCT pets.petid)   FROM  student   JOIN  has_pet  ON  student.stuid = has_pet.stuid   JOIN  pets  ON  has_pet.petid = pets.petid   WHERE  student.sex = 'Female' AND pets.pettype = 'Dog';
SELECT COUNT(DISTINCT pettype) FROM pets;
SELECT COUNT(DISTINCT pettype) AS pet_types FROM pets;
SELECT DISTINCT student.fname  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype IN ('cat', 'dog');
SELECT DISTINCT student.fname  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype IN ('cat', 'dog');
SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' INTERSECT SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog';
SELECT student.fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' INTERSECT SELECT student.fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog';
SELECT student.major, student.age  FROM student  WHERE student.stuid NOT IN (     SELECT has_pet.stuid      FROM has_pet      JOIN pets ON has_pet.petid = pets.petid      WHERE pets.pettype = 'cat' );
SELECT student.major, student.age FROM student WHERE student.stuid NOT IN (     SELECT student.stuid     FROM student     JOIN has_pet ON student.stuid = has_pet.stuid     JOIN pets ON has_pet.petid = pets.petid     WHERE pets.pettype = 'cat' )
SELECT student.stuid  FROM  student  LEFT JOIN has_pet  ON student.stuid = has_pet.stuid  LEFT JOIN pets  ON has_pet.petid = pets.petid  WHERE student.stuid NOT IN (     SELECT      student.stuid      FROM      student      JOIN has_pet      ON student.stuid = has_pet.stuid      JOIN pets      ON has_pet.petid = pets.petid      WHERE pets.pettype = 'cat' );
SELECT student.stuid  FROM student  WHERE student.stuid NOT IN (     SELECT has_pet.stuid      FROM has_pet      JOIN pets ON has_pet.petid = pets.petid      WHERE pets.pettype = 'cat' );
SELECT student.fname, student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' AND student.stuid NOT IN ( SELECT student.stuid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' );
SELECT DISTINCT student.fname  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'dog' AND student.stuid NOT IN (     SELECT has_pet.stuid      FROM has_pet      INNER JOIN pets ON has_pet.petid = pets.petid      WHERE pets.pettype = 'cat' );
SELECT pets.pettype, pets.weight FROM     pets WHERE     pet_age = (SELECT MIN(pet_age) FROM pets)
SELECT pets.pettype, pets.weight FROM     pets WHERE     pet_age = (         SELECT             MIN(pet_age)         FROM             pets     );
SELECT pets.petid, pets.weight FROM pets WHERE pets.pet_age > 1;
SELECT pets.petid, pets.weight FROM pets WHERE pets.pet_age > 1;
SELECT AVG(pet_age) as "avg ( pet_age )", MAX(pet_age) as "max ( pet_age )", pettype FROM pets GROUP BY pettype;
SELECT AVG(p.pet_age) AS "avg ( pet_age )", MAX(p.pet_age) AS "max ( pet_age )", p.pettype FROM pets p GROUP BY p.pettype;
SELECT AVG(weight) AS average_weight, pettype FROM pets GROUP BY pettype;
SELECT AVG(pets.weight) AS "avg (weight)", pets.pettype FROM pets GROUP BY pets.pettype;
SELECT student.fname, student.age  FROM student  WHERE student.stuid IN (SELECT stuid FROM has_pet);
SELECT DISTINCT student.fname, student.age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid;
SELECT pets.petid FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE student.lname = 'Smith';
SELECT pets.petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.lname = 'Smith';
SELECT COUNT(*) AS num_pets, student.stuid FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid;
SELECT COUNT(*) as count, student.stuid FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid;
SELECT student.fname, student.sex FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.fname, student.sex HAVING COUNT(has_pet.stuid) > 1;
SELECT student.fname, student.sex FROM      student WHERE      student.stuid IN (           SELECT                has_pet.stuid           FROM                has_pet           GROUP BY                has_pet.stuid           HAVING                COUNT(has_pet.petid) > 1      );
SELECT student.lname   FROM  student   JOIN  pets  ON  student.stuid = pets.petid   WHERE  pets.pettype = 'cat'   AND  pets.pet_age = 3;
SELECT student.lname FROM     student JOIN     has_pet ON student.stuid = has_pet.stuid JOIN     pets ON has_pet.petid = pets.petid WHERE     pets.pettype = 'cat' AND pets.pet_age = 3 LIMIT     1;
SELECT AVG(age) FROM student WHERE stuid NOT IN (     SELECT stuid     FROM has_pet )
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)
SELECT COUNT(DISTINCT continent) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT continents.contid,     continents.continent,     COUNT(countries.countryid) AS country_count FROM     continents JOIN     countries ON countries.continent = continents.contid GROUP BY     continents.contid, continents.continent;
SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS country_count FROM     continents JOIN     countries ON continents.contid = countries.continent GROUP BY     continents.contid, continents.continent;
SELECT COUNT(*) FROM countries;
SELECT COUNT(DISTINCT countryname) FROM countries;
SELECT car_makers.fullname,  car_makers.id,  COUNT(model_list.modelid) AS number_of_models FROM car_makers   JOIN model_list ON car_makers.id = model_list.maker   GROUP BY car_makers.fullname, car_makers.id;
SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid)  FROM  car_makers  JOIN  model_list  ON  model_list.maker = car_makers.id  GROUP BY  car_makers.fullname, car_makers.id;
SELECT model_list.model  FROM  car_names   JOIN model_list ON car_names.model = model_list.model   JOIN cars_data ON car_names.makeid = cars_data.id   WHERE cars_data.horsepower = (SELECT MIN(horsepower) FROM cars_data);
SELECT model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY cars_data.horsepower ASC LIMIT 1;
SELECT car_names.model FROM     car_names JOIN     cars_data ON car_names.makeid = cars_data.id WHERE     cars_data.weight < (SELECT AVG(weight) FROM cars_data);
SELECT model_list.model  FROM  model_list  JOIN  car_names ON car_names.model = model_list.modelid  JOIN  cars_data ON cars_data.id = car_names.makeid  WHERE  cars_data.weight < (SELECT AVG(weight) FROM cars_data);
SELECT DISTINCT car_makers.fullname   FROM  car_makers   JOIN model_list ON car_makers.id = model_list.maker   JOIN car_names ON model_list.model = car_names.model   JOIN cars_data ON car_names.makeid = cars_data.id   WHERE cars_data.year = 1970;
SELECT DISTINCT car_makers.maker  FROM  car_makers  JOIN model_list ON car_makers.id = model_list.maker  JOIN car_names ON model_list.model = car_names.model  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cars_data.year = 1970;
SELECT car_names.make, cars_data.year FROM car_names JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.year = (     SELECT MIN(year)     FROM cars_data )
SELECT car_makers.maker, MIN(cars_data.year)  FROM  car_makers   JOIN model_list ON car_makers.id = model_list.maker   JOIN car_names ON model_list.model = car_names.model   JOIN cars_data ON car_names.makeid = cars_data.id   GROUP BY car_makers.maker   HAVING MIN(cars_data.year) = (SELECT MIN(year) FROM cars_data)  LIMIT 1;
SELECT DISTINCT model_list.model FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year > 1980;
SELECT DISTINCT car_names.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.year > 1980;
SELECT continents.contid, COUNT(DISTINCT car_makers.id) AS maker_count  FROM  continents  INNER JOIN countries ON continents.contid = countries.continent  INNER JOIN car_makers ON countries.countryname = car_makers.country  GROUP BY continents.contid;
SELECT continents.continent, COUNT(DISTINCT car_makers.maker) as car_makers_count  FROM  continents  LEFT JOIN  countries ON continents.continent = countries.continent  LEFT JOIN  car_makers ON countries.countryname = car_makers.country  GROUP BY  continents.continent;
SELECT countries.countryname FROM     countries JOIN     car_makers ON countries.countryid = car_makers.country GROUP BY     countries.countryname ORDER BY     COUNT(car_makers.maker) DESC LIMIT 1;
SELECT countries.countryname FROM     countries JOIN     car_makers ON car_makers.country = countries.countryid GROUP BY     countries.countryname ORDER BY     COUNT(car_makers.maker) DESC LIMIT 1;
SELECT car_makers.fullname, COUNT(model_list.model)  FROM  car_makers   JOIN  model_list  ON  model_list.maker = car_makers.id   GROUP BY  car_makers.fullname;
SELECT COUNT(model_list.modelid) AS "count (*)", car_makers.fullname, car_makers.id FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.id, car_makers.fullname;
SELECT cars_data.accelerate  FROM  car_makers  JOIN model_list ON car_makers.id = model_list.maker  JOIN car_names ON model_list.modelid = car_names.makeid  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE car_names.model = 'amc hornet sportabout (sw)';
SELECT cars_data.accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE model_list.model = 'hornet sportabout (sw)' AND car_names.make = 'amc';
SELECT COUNT(DISTINCT car_makers.maker) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'france';
SELECT COUNT(*)  FROM  car_makers  JOIN  countries  ON  car_makers.country = countries.countryid  WHERE  countries.countryname = 'France';
SELECT COUNT(DISTINCT model_list.model)  FROM  model_list  JOIN  car_makers  ON  model_list.maker = car_makers.id  WHERE  car_makers.country = 'USA';
SELECT COUNT(DISTINCT model_list.model)  FROM  model_list   JOIN car_makers ON model_list.maker = car_makers.maker   JOIN countries ON car_makers.country = countries.countryid   WHERE countries.countryname = 'United States';
SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;
SELECT AVG(mpg)     FROM cars_data     WHERE cylinders = 4;
SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;
SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;
SELECT car_makers.maker, model_list.model   FROM car_makers   JOIN model_list ON car_makers.id = model_list.maker;
SELECT car_makers.maker,  model_list.model  FROM car_makers  INNER JOIN model_list  ON car_makers.id = model_list.maker  ORDER BY car_makers.maker, model_list.model;
SELECT countries.countryname, countries.countryid  FROM countries  WHERE countries.countryid IN (SELECT DISTINCT car_makers.country FROM car_makers);
SELECT countries.countryname, countries.countryid  FROM  countries   INNER JOIN  car_makers  ON  countries.countryid = car_makers.country;
SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;
SELECT AVG(weight) AS average_weight, year FROM cars_data GROUP BY year;
SELECT AVG(weight) AS average_weight,      year FROM      cars_data GROUP BY      year;
SELECT countries.countryname  FROM  countries  JOIN  continents  ON  countries.continent = continents.continent  JOIN  car_makers  ON  car_makers.country = countries.countryname  WHERE  continents.continent = 'Europe'  GROUP BY  countries.countryname  HAVING  COUNT(DISTINCT car_makers.maker) >= 3;
SELECT countries.countryname   FROM countries   JOIN continents ON countries.continent = continents.contid   JOIN car_makers ON car_makers.country = countries.countryname   WHERE continents.contid = 'Europe'  GROUP BY countries.countryname   HAVING COUNT(DISTINCT car_makers.maker) >= 3;
SELECT MAX(cars_data.horsepower) AS horsepower,  car_makers.maker AS make  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.modelid  JOIN car_makers ON model_list.maker = car_makers.id  WHERE cars_data.cylinders = 3;
SELECT MAX(cars_data.horsepower) AS horsepower,  car_makers.fullname AS make  FROM cars_data  JOIN model_list ON cars_data.id = model_list.modelid  JOIN car_makers ON model_list.maker = car_makers.id  WHERE cars_data.cylinders = 3  ORDER BY horsepower DESC  LIMIT 1;
SELECT model_list.modelid FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.modelid ORDER BY cars_data.mpg DESC LIMIT 1;
SELECT model  FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  JOIN model_list ON car_names.model = model_list.model WHERE cars_data.mpg = (SELECT MAX(mpg) FROM cars_data);
SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;
SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;
SELECT AVG(cars_data.edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.maker = 'volvo';
SELECT AVG(cars_data.edispl) FROM   cars_data   INNER JOIN car_names ON cars_data.id = car_names.makeid   INNER JOIN model_list ON car_names.model = model_list.model   INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE   car_makers.maker = 'volvo';
SELECT MAX(accelerate), cylinders FROM cars_data GROUP BY cylinders;
SELECT MAX(accelerate), cylinders FROM cars_data GROUP BY cylinders;
SELECT model_list.model  FROM  model_list  JOIN  car_names  ON  model_list.modelid = car_names.model  GROUP BY  model_list.model  ORDER BY  COUNT(DISTINCT car_names.makeid) DESC  LIMIT 1;
SELECT model FROM model_list GROUP BY model ORDER BY COUNT(DISTINCT maker) DESC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;
SELECT COUNT(*)  FROM cars_data  WHERE cylinders > 4;
SELECT COUNT(*)  FROM      cars_data WHERE      year = 1980;
SELECT COUNT(*) FROM cars_data WHERE year = 1980;
SELECT COUNT(DISTINCT modelid) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = 'American Motor Company';
SELECT COUNT(DISTINCT model) FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker WHERE car_makers.fullname = 'American Motor Company';
SELECT car_makers.fullname, car_makers.id     FROM      car_makers     WHERE      car_makers.id IN (        SELECT          maker        FROM          model_list        GROUP BY          maker        HAVING          COUNT(modelid) > 3      );
SELECT car_makers.fullname, car_makers.id  FROM  car_makers  JOIN  model_list  ON  car_makers.id = model_list.maker  GROUP BY  car_makers.id, car_makers.fullname  HAVING  COUNT(DISTINCT model_list.model) > 3;
SELECT DISTINCT model_list.model FROM  car_makers  JOIN model_list ON car_makers.maker = model_list.maker  JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE  car_makers.fullname = 'General Motors' OR cars_data.weight > 3500;
SELECT DISTINCT model_list.model  FROM  model_list  INNER JOIN car_makers ON model_list.maker = car_makers.id  LEFT JOIN cars_data ON model_list.modelid = cars_data.id  WHERE  car_makers.maker = 'General Motors' OR cars_data.weight > 3500;
SELECT DISTINCT cars_data.year  FROM cars_data  WHERE cars_data.weight >= 3000 AND cars_data.weight <= 4000;
SELECT year     FROM cars_data     WHERE weight < 4000     INTERSECT     SELECT year     FROM cars_data     WHERE weight > 3000;
SELECT cars_data.horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data)
SELECT cars_data.horsepower FROM cars_data WHERE cars_data.accelerate = (SELECT MAX(accelerate) FROM cars_data);
SELECT cylinders  FROM  cars_data   JOIN  car_names  ON  cars_data.id = car_names.makeid   JOIN  model_list  ON  car_names.model = model_list.model   WHERE  model_list.model = 'volvo'   AND  cars_data.accelerate = (   SELECT    MIN(accelerate)    FROM    cars_data    JOIN    car_names    ON    cars_data.id = car_names.makeid     JOIN    model_list    ON    car_names.model = model_list.model     WHERE    model_list.model = 'volvo'   )   ORDER BY  cars_data.cylinders ASC   LIMIT 1;
SELECT cars_data.cylinders FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.modelid = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.maker = 'volvo' AND cars_data.accelerate = ( SELECT MIN(cars_data.accelerate) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.maker = 'volvo')
SELECT COUNT(*)   FROM  cars_data   WHERE  accelerate > (SELECT accelerate FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data));
SELECT COUNT(*)  FROM  cars_data  WHERE  accelerate > (     SELECT      accelerate      FROM      cars_data      WHERE      horsepower = (         SELECT          MAX(horsepower)          FROM          cars_data     ) );
SELECT COUNT(*)  FROM (     SELECT car_makers.country     FROM car_makers     GROUP BY car_makers.country     HAVING COUNT(*) > 2 ) AS subquery;
SELECT COUNT(*) AS "count"  FROM  ( SELECT  countries.countryid    FROM  car_makers    JOIN  countries  ON  car_makers.country = countries.countryid    GROUP BY  countries.countryid    HAVING  COUNT(car_makers.id) > 2  ) AS subquery;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;
SELECT model_list.model  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  WHERE cars_data.cylinders = 4  ORDER BY cars_data.horsepower DESC  LIMIT 1;
SELECT model_list.model  FROM  cars_data  JOIN model_list  ON cars_data.model = model_list.model  WHERE cars_data.cylinders = 4  GROUP BY model_list.model  HAVING MAX(cars_data.horsepower) = (SELECT MAX(horsepower) FROM cars_data WHERE cylinders = 4)  LIMIT 1;
SELECT car_names.makeid, car_names.make FROM   cars_data JOIN   car_names ON car_names.makeid = cars_data.id WHERE   cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data)   AND cars_data.cylinders <= 3;
SELECT car_names.makeid, car_names.make FROM      cars_data INNER JOIN      car_names ON cars_data.id = car_names.makeid WHERE      cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data)      AND cars_data.cylinders < 4;
SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980;
SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;
SELECT DISTINCT model_list.model FROM model_list JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.fullname <> 'Ford Motor Company';
SELECT DISTINCT model_list.model  FROM model_list  JOIN cars_data ON model_list.modelid = cars_data.id  JOIN car_makers ON model_list.maker = car_makers.id  WHERE cars_data.weight < 3500 AND car_makers.fullname != 'Ford Motor Company';
SELECT countries.countryname   FROM  countries   LEFT JOIN  car_makers  ON  countries.countryid = car_makers.country   WHERE  car_makers.id IS NULL;
SELECT countryname  FROM  countries  WHERE  countryid NOT IN (SELECT DISTINCT country FROM car_makers);
SELECT car_makers.id, car_makers.maker  FROM car_makers  INNER JOIN (     SELECT maker, COUNT(model) AS num_models     FROM model_list     GROUP BY maker     HAVING COUNT(model) >= 2 ) AS subquery  ON car_makers.id = subquery.maker  GROUP BY car_makers.id HAVING COUNT(car_makers.id) > 3;
SELECT car_makers.id, car_makers.maker  FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.model = car_names.model  GROUP BY car_makers.id, car_makers.maker  HAVING COUNT(DISTINCT model_list.model) >= 2 AND COUNT(car_names.makeid) > 3;
SELECT countries.countryid,  countries.countryname  FROM  countries  WHERE  countries.countryid IN (     SELECT      car_makers.country      FROM      car_makers      GROUP BY      car_makers.country      HAVING      COUNT(car_makers.id) > 3  )  OR  countries.countryid IN (     SELECT      car_makers.country      FROM      car_makers      JOIN      model_list ON car_makers.id = model_list.maker      JOIN      car_names ON model_list.modelid = car_names.model      WHERE      car_names.make = 'fiat' );
SELECT countries.countryid, countries.countryname   FROM countries   JOIN car_makers ON car_makers.country = countries.countryid   WHERE countries.countryid IN (           SELECT car_makers.country           FROM car_makers           GROUP BY car_makers.country           HAVING COUNT(DISTINCT car_makers.id) > 3   ) OR car_makers.id IN (          SELECT model_list.maker          FROM model_list           WHERE model_list.model = 'fiat' );
SELECT country FROM     airlines WHERE     airline = "JetBlue Airways";
SELECT country  FROM  airlines  WHERE  airline = 'Jetblue Airways';
SELECT abbreviation FROM     airlines WHERE     airline = 'JetBlue Airways';
SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';
SELECT airline, abbreviation FROM airlines WHERE country = 'USA';
SELECT airline, abbreviation FROM airlines WHERE country = 'USA';
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';
SELECT COUNT(DISTINCT airline) FROM airlines;
SELECT COUNT(DISTINCT airline) FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT airline FROM     airlines WHERE     abbreviation = 'UAL';
SELECT airline FROM airlines WHERE abbreviation = 'UAL';
SELECT COUNT(*) FROM     airlines WHERE     country = 'USA';
SELECT COUNT(DISTINCT airline) FROM airlines WHERE country = 'USA';
SELECT city, country     FROM airports     WHERE airportname = 'Alton';
SELECT city, country FROM airports WHERE airportname = 'Alton';
SELECT airportname FROM airports WHERE airportcode = 'AKO';
SELECT airportname FROM airports WHERE airportcode = 'AKO';
SELECT airportname FROM airports WHERE city = 'Aberdeen';
SELECT airportname FROM airports WHERE city = 'Aberdeen';
SELECT COUNT(*) FROM     flights WHERE     sourceairport = 'APG';
SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';
SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';
SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';
SELECT COUNT(*)  FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE destairport = 'Aberdeen';
SELECT COUNT(*)  FROM flights   JOIN airports AS source_airports ON flights.sourceairport = source_airports.airportcode   JOIN airports AS dest_airports ON flights.destairport = dest_airports.airportcode   WHERE source_airports.city = 'Aberdeen' AND dest_airports.city = 'Ashley';
SELECT COUNT(*)  FROM  flights  WHERE  sourceairport = (     SELECT      airportcode      FROM      airports      WHERE      city = 'Aberdeen' )  AND  destairport = (     SELECT      airportcode      FROM      airports      WHERE      city = 'Ashley' );
SELECT COUNT(*)   FROM flights   WHERE airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.uid WHERE airlines.airline = 'Jetblue Airways';
SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY';
SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY';
SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';
SELECT COUNT(*) FROM   flights WHERE   airline = 'United Airlines'   AND sourceairport = 'AHD Airport';
SELECT COUNT(*) FROM     flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.destairport = airports.airportcode WHERE     airlines.abbreviation = 'UA'     AND airports.city = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.airline = 'United Airlines' AND airports.city = 'Aberdeen';
SELECT airports.city FROM   airports JOIN   flights ON airports.airportcode = flights.destairport GROUP BY   airports.city ORDER BY   COUNT(*) DESC LIMIT 1;
SELECT airports.city FROM     airports JOIN     flights ON airports.airportcode = flights.destairport GROUP BY     airports.city ORDER BY     COUNT(flights.destairport) DESC LIMIT 1;
SELECT city FROM     airports WHERE     airportcode IN (         SELECT             sourceairport         FROM             flights     ) GROUP BY     city ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT airports.city FROM     flights     INNER JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY     airports.city ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT airportcode  FROM flights GROUP BY airportcode ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airportcode FROM     airports WHERE     airportcode IN (         SELECT             destairport         FROM             flights         GROUP BY             destairport         ORDER BY             COUNT(*) DESC         LIMIT 1     ) OR airportcode IN (         SELECT             sourceairport         FROM             flights         GROUP BY             sourceairport         ORDER BY             COUNT(*) DESC         LIMIT 1     );
SELECT airports.airportcode FROM   airports JOIN   flights ON airports.airportcode = flights.destairport GROUP BY   airports.airportcode ORDER BY   COUNT(flights.flightno) ASC LIMIT 1;
SELECT airportcode FROM     airports WHERE     airportcode IN (         SELECT             destairport         FROM             flights         UNION ALL         SELECT             sourceairport         FROM             flights     ) GROUP BY     airportcode ORDER BY     COUNT(*) ASC LIMIT 1;
SELECT airline  FROM  flights  GROUP BY  airline  ORDER BY  COUNT(*) DESC  LIMIT 1;
SELECT airline  FROM  flights  GROUP BY  airline  ORDER BY  COUNT(*) DESC  LIMIT 1;
SELECT abbreviation,  country  FROM airlines  WHERE abbreviation = (     SELECT airline     FROM (         SELECT airline, COUNT(*) AS flight_count         FROM flights         GROUP BY airline         ORDER BY flight_count ASC         LIMIT 1     ) );
SELECT a.abbreviation, a.country  FROM  airlines a  WHERE  a.abbreviation = (     SELECT      f.airline      FROM      flights f      GROUP BY      f.airline      ORDER BY      COUNT(*) ASC      LIMIT 1 );
SELECT airlines.airline FROM   airlines WHERE   airlines.airline IN (     SELECT       flights.airline     FROM       flights     WHERE       flights.sourceairport = 'AHD'   )
SELECT airlines.airline FROM airlines INNER JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport = 'AHD';
SELECT airlines.airline FROM     airlines JOIN     flights ON airlines.abbreviation = flights.airline JOIN     airports ON flights.destairport = airports.airportcode WHERE     airports.airportcode = 'AHD';
SELECT airline FROM   airlines WHERE   airline IN (     SELECT       airline     FROM       flights     WHERE       destairport = 'AHD'   );
SELECT airlines.airline FROM     airlines INNER JOIN     flights ON airlines.abbreviation = flights.airline INNER JOIN     airports ON flights.sourceairport = airports.airportcode WHERE     airports.airportcode IN ('APG', 'CVO') GROUP BY     airlines.airline HAVING     COUNT(DISTINCT airports.airportcode) = 2;
SELECT airlines.airline FROM   airlines INNER JOIN   flights ON airlines.airline = flights.airline INNER JOIN   airports ON flights.sourceairport = airports.airportcode WHERE   airports.airportcode IN ('APG', 'CVO') GROUP BY   airlines.airline HAVING   COUNT(DISTINCT airports.airportcode) = 2;
SELECT airlines.airline FROM   airlines JOIN   flights ON airlines.abbreviation = flights.airline JOIN   airports ON flights.sourceairport = airports.airportcode WHERE   airports.airportcode = 'CVO' AND   airlines.airline NOT IN (     SELECT       airlines.airline     FROM       airlines     JOIN       flights ON airlines.abbreviation = flights.airline     JOIN       airports ON flights.sourceairport = airports.airportcode     WHERE       airports.airportcode = 'APG'   );
SELECT airlines.airline     FROM      airlines     WHERE      airlines.uid IN (        SELECT          flights.airline        FROM          flights          INNER JOIN airports ON flights.sourceairport = airports.airportcode        WHERE          airports.airportname = 'CVO'      )      AND airlines.uid NOT IN (        SELECT          flights.airline        FROM          flights          INNER JOIN airports ON flights.sourceairport = airports.airportcode        WHERE          airports.airportname = 'APG'      );
SELECT airline  FROM  flights  GROUP BY  airline  HAVING  COUNT(flightno) >= 10;
SELECT airline FROM flights GROUP BY airline HAVING COUNT(flightno) >= 10;
SELECT airline  FROM airlines  WHERE uid IN (     SELECT airline      FROM flights      GROUP BY airline      HAVING COUNT(*) < 200)
SELECT airline  FROM      (SELECT          airline,          COUNT(*) as flight_count      FROM          flights      GROUP BY          airline)  WHERE      flight_count < 200;
SELECT flightno  FROM  flights  WHERE  airline IN (SELECT uid FROM airlines WHERE airline = 'United Airlines');
SELECT flightno   FROM flights   JOIN airlines ON flights.airline = airlines.airline   WHERE airlines.airline = 'United Airlines';
SELECT flightno FROM flights WHERE sourceairport = 'APG';
SELECT flightno FROM flights WHERE sourceairport = 'APG';
SELECT flightno FROM flights WHERE destairport = 'APG';
SELECT flightno  FROM  flights  WHERE  destination = 'APG';
SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen';
SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen';
SELECT flights.flightno FROM   flights JOIN   airports ON flights.destairport = airports.airportcode WHERE   airports.city = 'Aberdeen';
SELECT flightno FROM flights WHERE destairport = 'Aberdeen';
SELECT COUNT(*)  FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city IN ('Aberdeen', 'Abilene');
SELECT COUNT(*) FROM flights WHERE destairport IN ('Aberdeen', 'Abilene');
SELECT airportname FROM   airports WHERE   airportcode NOT IN (     SELECT       sourceairport     FROM       flights     UNION     SELECT       destairport     FROM       flights   );
SELECT airportname  FROM     airports  WHERE     airportcode NOT IN (         SELECT             sourceairport          FROM             flights          UNION         SELECT             destairport          FROM             flights     );
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT name FROM     employee ORDER BY     age ASC;
SELECT employee.name FROM     employee ORDER BY     employee.age ASC;
SELECT COUNT(*) as num_employees, city FROM employee GROUP BY city;
SELECT COUNT(*) AS "count", city FROM employee GROUP BY city;
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1;
SELECT employee.city FROM     employee WHERE     employee.age < 30 GROUP BY     employee.city HAVING     COUNT(employee.employee_id) > 1;
SELECT COUNT(*) AS shop_count, location FROM shop GROUP BY location;
SELECT COUNT(shop_id), location FROM shop GROUP BY location;
SELECT shop.manager_name, shop.district FROM shop WHERE shop.number_products = (   SELECT MAX(number_products)   FROM shop )
SELECT shop.manager_name, shop.district FROM shop WHERE shop.number_products = ( SELECT MAX(number_products) FROM shop )
SELECT MIN(number_products) AS min_number_products, MAX(number_products) AS max_number_products FROM shop;
SELECT MIN(number_products) AS min_products, MAX(number_products) AS max_products FROM shop;
SELECT shop.name, shop.location, shop.district FROM shop ORDER BY shop.number_products DESC;
SELECT shop.name, shop.location, shop.district     FROM      shop     ORDER BY      shop.number_products DESC;
SELECT shop.name FROM shop WHERE shop.number_products > (SELECT AVG(number_products) FROM shop);
SELECT shop.name FROM shop WHERE shop.number_products > (SELECT AVG(number_products) FROM shop);
SELECT employee.name FROM   employee JOIN   evaluation ON employee.employee_id = evaluation.employee_id GROUP BY   employee.name ORDER BY   COUNT(evaluation.year_awarded) DESC LIMIT 1;
SELECT employee.name FROM employee INNER JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.name ORDER BY COUNT(evaluation.year_awarded) DESC LIMIT 1;
SELECT employee.name FROM     employee INNER JOIN     evaluation ON employee.employee_id = evaluation.employee_id WHERE     evaluation.bonus = (         SELECT             MAX(bonus)         FROM             evaluation     );
SELECT employee.name FROM     employee JOIN     evaluation ON employee.employee_id = evaluation.employee_id ORDER BY     evaluation.bonus DESC LIMIT 1;
SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)
SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation);
SELECT shop.name FROM     shop JOIN     hiring ON shop.shop_id = hiring.shop_id GROUP BY     shop.name ORDER BY     COUNT(hiring.employee_id) DESC LIMIT 1;
SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name ORDER BY COUNT(hiring.employee_id) DESC LIMIT 1;
SELECT shop.name FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.employee_id IS NULL;
SELECT shop.name FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.employee_id IS NULL;
SELECT COUNT(*) as number_of_employees, shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name;
SELECT COUNT(*) AS num_employees, shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name;
SELECT SUM(bonus)  FROM evaluation;
SELECT SUM(bonus) FROM evaluation;
SELECT hiring.shop_id, hiring.employee_id, hiring.start_from, hiring.is_full_time FROM hiring;
SELECT shop_id, employee_id, start_from, is_full_time FROM hiring;
SELECT shop.district FROM shop WHERE shop.number_products < 3000 AND shop.district IN (     SELECT district     FROM shop     WHERE shop.number_products > 10000 )
SELECT location FROM     shop WHERE     number_products < 3000 INTERSECT SELECT     location FROM     shop WHERE     number_products > 10000;
SELECT COUNT(DISTINCT location) FROM shop;
SELECT COUNT(DISTINCT location) FROM shop;
SELECT COUNT(*) FROM documents;
SELECT COUNT(*)  FROM documents;
SELECT documents.document_id, documents.document_name, documents.document_description FROM documents;
SELECT document_id, document_name, document_description FROM documents;
SELECT documents.document_name, documents.template_id FROM documents WHERE documents.document_description LIKE '%w%'
SELECT documents.document_name, documents.template_id FROM documents WHERE documents.document_description LIKE '%w%';
SELECT documents.document_id, documents.template_id, documents.document_description FROM documents WHERE documents.document_name = "Robbin CV";
SELECT documents.document_id, documents.template_id, documents.document_description FROM documents WHERE documents.document_name = 'Robbin CV';
SELECT COUNT(DISTINCT templates.template_id) FROM documents JOIN templates ON documents.template_id = templates.template_id;
SELECT COUNT(DISTINCT templates.template_id) AS num_templates_used FROM documents JOIN templates ON documents.template_id = templates.template_id
SELECT COUNT(*) FROM documents WHERE template_id IN (   SELECT template_id   FROM templates   WHERE template_type_code = 'PPT' );
SELECT COUNT(*) FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'PPT';
SELECT templates.template_id, COUNT(documents.document_id)   FROM  templates   LEFT JOIN  documents  ON  templates.template_id = documents.template_id   GROUP BY  templates.template_id;
SELECT templates.template_id, COUNT(documents.template_id) AS usage_count FROM templates JOIN documents ON documents.template_id = templates.template_id GROUP BY templates.template_id;
SELECT templates.template_id, templates.template_type_code  FROM  templates  JOIN  documents  ON  documents.template_id = templates.template_id  GROUP BY  templates.template_id, templates.template_type_code  ORDER BY  COUNT(documents.template_id) DESC  LIMIT 1;
SELECT templates.template_id, templates.template_type_code   FROM  templates   INNER JOIN  documents ON templates.template_id = documents.template_id   GROUP BY  templates.template_id, templates.template_type_code   ORDER BY  COUNT(documents.template_id) DESC   LIMIT 1;
SELECT templates.template_id FROM templates INNER JOIN documents ON documents.template_id = templates.template_id GROUP BY templates.template_id HAVING COUNT(DISTINCT documents.document_id) > 1;
SELECT templates.template_id FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id HAVING COUNT(DISTINCT documents.document_id) > 1;
SELECT templates.template_id FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id WHERE documents.template_id IS NULL;
SELECT templates.template_id FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id WHERE documents.template_id IS NULL
SELECT COUNT(*) AS total_templates FROM templates;
SELECT COUNT(*) AS template_count FROM templates;
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates;
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates;
SELECT DISTINCT template_type_code FROM templates;
SELECT DISTINCT template_type_code  FROM ref_template_types;
SELECT templates.template_id FROM     templates WHERE     templates.template_type_code = 'PP' OR templates.template_type_code = 'PPT';
SELECT templates.template_id   FROM  templates   WHERE  templates.template_type_code IN ('PP', 'PPT');
SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';
SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';
SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.version_number > 5;
SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.version_number > 5;
SELECT ref_template_types.template_type_code, COUNT(templates.template_id) FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_code;
SELECT ref_template_types.template_type_code,     COUNT(templates.template_id) AS template_count FROM     ref_template_types JOIN     templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY     ref_template_types.template_type_code;
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT template_type_code FROM    templates GROUP BY    template_type_code ORDER BY    COUNT(template_id) DESC LIMIT 1;
SELECT ref_template_types.template_type_code FROM   ref_template_types WHERE   ref_template_types.template_type_code IN (     SELECT       template_type_code     FROM       templates     GROUP BY       template_type_code     HAVING       COUNT(*) < 3   );
SELECT ref_template_types.template_type_code FROM   ref_template_types LEFT JOIN   templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY   ref_template_types.template_type_code HAVING   COUNT(templates.template_id) < 3;
SELECT MIN(templates.version_number), templates.template_type_code FROM templates GROUP BY templates.template_type_code ORDER BY MIN(templates.version_number) LIMIT 1;
SELECT templates.version_number, templates.template_type_code FROM templates ORDER BY templates.version_number ASC LIMIT 1;
SELECT templates.template_type_code FROM     documents JOIN     templates ON documents.template_id = templates.template_id WHERE     documents.document_name = "Data base";
SELECT templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Data base';
SELECT document_name  FROM      documents  WHERE      template_id IN (         SELECT              template_id          FROM              templates          WHERE              template_type_code = 'BK'     );
SELECT documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_code = 'BK';
SELECT templates.template_type_code, COUNT(distinct documents.document_id) AS count  FROM  templates  LEFT JOIN  documents  ON  templates.template_id = documents.template_id  GROUP BY  templates.template_type_code;
SELECT ref_template_types.template_type_code,     COUNT(distinct documents.document_id) as document_count FROM     ref_template_types     JOIN templates ON ref_template_types.template_type_code = templates.template_type_code     JOIN documents ON templates.template_id = documents.template_id GROUP BY     ref_template_types.template_type_code;
SELECT templates.template_type_code  FROM templates  JOIN documents ON templates.template_id = documents.template_id  GROUP BY templates.template_type_code  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT ref_template_types.template_type_code FROM     templates JOIN     ref_template_types ON templates.template_type_code = ref_template_types.template_type_code JOIN     documents ON templates.template_id = documents.template_id GROUP BY     ref_template_types.template_type_code ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT ref_template_types.template_type_code  FROM  ref_template_types  LEFT JOIN templates  ON ref_template_types.template_type_code = templates.template_type_code  WHERE templates.template_id IS NULL;
SELECT ref_template_types.template_type_code  FROM  ref_template_types  LEFT JOIN templates  ON ref_template_types.template_type_code = templates.template_type_code  LEFT JOIN documents  ON templates.template_id = documents.template_id  WHERE  documents.document_id IS NULL;
SELECT ref_template_types.template_type_code, ref_template_types.template_type_description FROM ref_template_types;
SELECT template_type_code, template_type_description FROM ref_template_types;
SELECT ref_template_types.template_type_description FROM    ref_template_types WHERE    ref_template_types.template_type_code = "AD";
SELECT ref_template_types.template_type_description FROM ref_template_types WHERE ref_template_types.template_type_code = 'AD';
SELECT ref_template_types.template_type_code FROM   ref_template_types WHERE   ref_template_types.template_type_description = 'Book';
SELECT template_type_code FROM     ref_template_types WHERE     template_type_description = "Book";
SELECT DISTINCT ref_template_types.template_type_description FROM   templates   JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code   JOIN documents ON documents.template_id = templates.template_id;
SELECT DISTINCT ref_template_types.template_type_description  FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  JOIN documents ON templates.template_id = documents.template_id;
SELECT templates.template_id FROM   templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE   ref_template_types.template_type_description = "Presentation";
SELECT templates.template_id FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_description = 'Presentation';
SELECT COUNT(*) FROM paragraphs;
SELECT COUNT(paragraph_id) FROM paragraphs;
SELECT COUNT(*) FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Summer Show';
SELECT COUNT(*) FROM paragraphs WHERE document_id = (     SELECT document_id     FROM documents     WHERE document_name = 'Summer Show' )
SELECT other_details FROM paragraphs WHERE paragraph_text = 'Korea';
SELECT documents.other_details FROM paragraphs INNER JOIN documents ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text LIKE '%Korea%'
SELECT paragraph_id, paragraph_text FROM   paragraphs WHERE   document_id IN     (SELECT        document_id      FROM        documents      WHERE        document_name = 'Welcome to NY');
SELECT paragraphs.paragraph_id, paragraphs.paragraph_text FROM     paragraphs JOIN     documents ON paragraphs.document_id = documents.document_id WHERE     documents.document_name = 'Welcome to NY';
SELECT paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Customer reviews';
SELECT paragraph_text  FROM     paragraphs  JOIN     documents ON paragraphs.document_id = documents.document_id  WHERE     documents.document_name = 'Customer reviews';
SELECT documents.document_id, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM     documents INNER JOIN     paragraphs ON paragraphs.document_id = documents.document_id GROUP BY     documents.document_id ORDER BY     documents.document_id;
SELECT documents.document_id, COUNT(paragraphs.paragraph_id) FROM     documents JOIN     paragraphs ON paragraphs.document_id = documents.document_id GROUP BY     documents.document_id ORDER BY     documents.document_id;
SELECT documents.document_id,  documents.document_name,  COUNT(paragraphs.paragraph_id) as paragraph_count  FROM  documents  LEFT JOIN  paragraphs  ON  documents.document_id = paragraphs.document_id  GROUP BY  documents.document_id,  documents.document_name;
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.document_id) as num_paragraphs FROM documents JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id, documents.document_name;
SELECT documents.document_id FROM    documents JOIN    paragraphs ON documents.document_id = paragraphs.document_id GROUP BY    documents.document_id HAVING    COUNT(paragraphs.paragraph_id) >= 2;
SELECT documents.document_id FROM documents INNER JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) >= 2;
SELECT documents.document_id, documents.document_name FROM documents JOIN ( SELECT document_id, COUNT(*) AS paragraph_count FROM paragraphs GROUP BY document_id ) AS paragraph_counts ON documents.document_id = paragraph_counts.document_id ORDER BY paragraph_counts.paragraph_count DESC LIMIT 1;
SELECT documents.document_id, documents.document_name FROM     documents WHERE     documents.document_id = (         SELECT             document_id         FROM             paragraphs         GROUP BY             document_id         ORDER BY             COUNT(*) DESC         LIMIT 1     )
SELECT documents.document_id FROM     documents JOIN     paragraphs ON documents.document_id = paragraphs.document_id GROUP BY     documents.document_id ORDER BY     COUNT(paragraphs.paragraph_id) ASC LIMIT 1;
SELECT documents.document_id FROM     documents JOIN     paragraphs ON documents.document_id = paragraphs.document_id GROUP BY     documents.document_id ORDER BY     COUNT(paragraphs.paragraph_id) ASC LIMIT 1;
SELECT documents.document_id FROM     documents JOIN     paragraphs ON documents.document_id = paragraphs.document_id GROUP BY     documents.document_id HAVING     COUNT(paragraphs.document_id) BETWEEN 1 AND 2;
SELECT documents.document_id FROM     documents WHERE     documents.document_id IN (         SELECT document_id         FROM paragraphs         GROUP BY document_id         HAVING COUNT(*) BETWEEN 1 AND 2     );
SELECT documents.document_id  FROM  documents  JOIN  paragraphs  ON  documents.document_id = paragraphs.document_id  WHERE  paragraphs.paragraph_text LIKE '%Brazil%' OR paragraphs.paragraph_text LIKE '%Ireland%';
SELECT documents.document_id FROM documents JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text LIKE '%Brazil%' AND paragraphs.paragraph_text LIKE '%Ireland%';
SELECT COUNT(*)  FROM teacher;
SELECT COUNT(*)  FROM teacher;
SELECT name FROM     teacher ORDER BY     age ASC;
SELECT teacher.name FROM      teacher ORDER BY      teacher.age ASC;
SELECT teacher.age, teacher.hometown FROM teacher;
SELECT teacher.age, teacher.hometown FROM teacher;
SELECT name  FROM  teacher  WHERE  hometown != 'Little Lever Urban District';
SELECT name  FROM  teacher  WHERE  hometown != 'Little Lever Urban District';
SELECT name FROM     teacher WHERE     age IN (32, 33);
SELECT name FROM teacher WHERE age = 32 OR age = 33;
SELECT hometown     FROM      teacher     WHERE      age = (        SELECT          MIN(age)        FROM          teacher      )     LIMIT 1;
SELECT hometown FROM   teacher ORDER BY   age ASC LIMIT 1;
SELECT teacher.hometown, COUNT(teacher.teacher_id) AS num_teachers FROM teacher GROUP BY teacher.hometown;
SELECT teacher.hometown,      COUNT(*) as num_teachers FROM      teacher GROUP BY      teacher.hometown;
SELECT teacher.hometown FROM     teacher GROUP BY     teacher.hometown ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT hometown FROM   teacher GROUP BY   hometown ORDER BY   COUNT(*) DESC LIMIT 1;
SELECT teacher.hometown FROM     teacher GROUP BY     teacher.hometown HAVING     COUNT(DISTINCT teacher.teacher_id) > 1;
SELECT DISTINCT hometown FROM teacher GROUP BY hometown HAVING COUNT(DISTINCT teacher_id) >= 2;
SELECT teacher.name, course.course FROM course_arrange JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id JOIN course ON course_arrange.course_id = course.course_id;
SELECT teacher.name,      course.course FROM      teacher JOIN      course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN      course ON course.course_id = course_arrange.course_id;
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC;
SELECT teacher.name, course.course FROM      teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY      teacher.name ASC;
SELECT teacher.name   FROM teacher   JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id   JOIN course ON course.course_id = course_arrange.course_id   WHERE course.course = 'math';
SELECT teacher.name   FROM  teacher   JOIN  course_arrange ON teacher.teacher_id = course_arrange.teacher_id   JOIN  course ON course.course_id = course_arrange.course_id   WHERE  course.name = 'math';
SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name;
SELECT teacher.name, COUNT(course_arrange.course_id) FROM     teacher JOIN     course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY     teacher.name;
SELECT teacher.name FROM     teacher JOIN     course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY     teacher.name HAVING     COUNT(DISTINCT course_arrange.course_id) >= 2;
SELECT teacher.name FROM      teacher INNER JOIN      course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY      teacher.name HAVING      COUNT(DISTINCT course_arrange.course_id) >= 2;
SELECT name FROM  teacher WHERE  teacher_id NOT IN (SELECT DISTINCT teacher_id FROM course_arrange)
SELECT teacher.name FROM     teacher LEFT JOIN     course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE     course_arrange.teacher_id IS NULL;
SELECT COUNT(*) FROM     visitor WHERE     age < 30;
SELECT visitor.name FROM visitor WHERE visitor.level_of_membership > 4 ORDER BY visitor.level_of_membership DESC;
SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4;
SELECT visitor.name, visitor.level_of_membership FROM visitor WHERE visitor.level_of_membership > 4 ORDER BY visitor.age DESC;
SELECT museum_id, name FROM    museum ORDER BY    num_of_staff DESC LIMIT 1;
SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009;
SELECT num_of_staff, open_year FROM museum WHERE name = 'Plaza Museum';
SELECT museum.name FROM    museum WHERE    museum.num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010)
SELECT visitor.id, visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.age HAVING COUNT(visit.museum_id) > 1;
SELECT visitor.id, visitor.name, visitor.level_of_membership   FROM visitor   WHERE visitor.id IN (       SELECT visitor_id       FROM visit       GROUP BY visitor_id       HAVING SUM(total_spent) = (           SELECT MAX(total_spent_sum)           FROM (               SELECT visitor_id, SUM(total_spent) AS total_spent_sum               FROM visit               GROUP BY visitor_id         ) AS subquery       )   );
SELECT visit.museum_id, museum.name  FROM visit  INNER JOIN museum ON visit.museum_id = museum.museum_id  GROUP BY visit.museum_id, museum.name  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT museum.name FROM     museum LEFT JOIN     visit ON museum.museum_id = visit.museum_id WHERE     visit.museum_id IS NULL;
SELECT visitor.name, visitor.age FROM     visitor JOIN     visit ON visit.visitor_id = visitor.id WHERE     visit.num_of_ticket = (         SELECT MAX(num_of_ticket)         FROM visit     );
SELECT AVG(num_of_ticket) AS average_tickets,     MAX(num_of_ticket) AS maximum_tickets FROM visit;
SELECT SUM(total_spent) FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership = 1;
SELECT visitor.name  FROM      visitor  WHERE      visitor.id IN (         SELECT              visit.visitor_id          FROM              visit          INNER JOIN              museum ON visit.museum_id = museum.museum_id          WHERE              museum.open_year < 2009              AND visit.visitor_id IN (                 SELECT                      visit.visitor_id                  FROM                      visit                  INNER JOIN                      museum ON visit.museum_id = museum.museum_id                  WHERE                      museum.open_year > 2011             )     );
SELECT COUNT(DISTINCT visitor.id)  FROM  visitor  WHERE  visitor.id NOT IN (     SELECT DISTINCT visit.visitor_id      FROM      visit      JOIN      museum ON visit.museum_id = museum.museum_id      WHERE      museum.open_year > 2010)
SELECT COUNT(*) FROM museum WHERE open_year > 2013 OR open_year < 2008;
SELECT COUNT(*) AS total_players FROM players;
SELECT COUNT(DISTINCT player_id) AS total_players FROM players;
SELECT COUNT(*) AS total_matches FROM matches;
SELECT COUNT(*) FROM matches;
SELECT players.first_name, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.winner_ioc = 'USA'
SELECT first_name, birth_date FROM players WHERE country = 'USA'
SELECT AVG(loser_age) AS average_loser_age,     AVG(winner_age) AS average_winner_age FROM matches;
SELECT AVG(loser_age) AS avg_loser_age,     AVG(winner_age) AS avg_winner_age FROM     matches
SELECT AVG(rankings.ranking) AS avg_winner_rank  FROM matches  INNER JOIN rankings  ON matches.winner_id = rankings.player_id;
SELECT AVG(winner_rank) FROM     matches;
SELECT MIN(loser_rank) FROM matches;
SELECT MIN(loser_rank) FROM matches
SELECT COUNT(DISTINCT country_code)  FROM players;
SELECT COUNT(DISTINCT country_code) AS num_countries FROM players;
SELECT COUNT(DISTINCT loser_name) AS distinct_loser_names FROM matches;
SELECT COUNT(DISTINCT loser_name)  FROM matches;
SELECT tourney_name     FROM matches     GROUP BY tourney_name     HAVING COUNT(match_num) > 10;
SELECT tourney_name     FROM      matches     GROUP BY      tourney_name     HAVING      COUNT(*) > 10;
SELECT players.first_name || ' ' || players.last_name AS winner_name FROM players WHERE players.player_id IN (   SELECT matches.winner_id   FROM matches   WHERE matches.year = 2013 ) INTERSECT SELECT players.first_name || ' ' || players.last_name AS winner_name FROM players WHERE players.player_id IN (   SELECT matches.winner_id   FROM matches   WHERE matches.year = 2016 );
SELECT p.first_name, p.last_name   FROM players p  JOIN matches m1 ON m1.winner_id = p.player_id  JOIN matches m2 ON m2.winner_id = p.player_id  WHERE m1.year = 2013 AND m2.year = 2016;
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT COUNT(*)  FROM matches WHERE year = 2013 OR year = 2016;
SELECT players.country_code, players.first_name   FROM players   JOIN matches AS m1 ON m1.winner_id = players.player_id   JOIN matches AS m2 ON m2.winner_id = players.player_id   WHERE m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open'   GROUP BY players.player_id   HAVING COUNT(DISTINCT m1.tourney_name) > 1 AND COUNT(DISTINCT m2.tourney_name) > 1
SELECT players.first_name, players.country_code  FROM  players  JOIN matches m1 ON players.player_id = m1.winner_id  JOIN matches m2 ON players.player_id = m2.winner_id  WHERE m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open'  AND m1.winner_id = m2.winner_id;
SELECT players.first_name, players.country_code  FROM players  JOIN rankings ON players.player_id = rankings.player_id   GROUP BY players.player_id  ORDER BY rankings.ranking_date ASC  LIMIT 1;
SELECT players.first_name, players.country_code  FROM players   INNER JOIN rankings ON players.player_id = rankings.player_id   ORDER BY rankings.ranking_date ASC  LIMIT 1;
SELECT first_name, last_name  FROM  players  ORDER BY  birth_date;
SELECT players.first_name || ' ' || players.last_name AS full_name  FROM players  ORDER BY players.birth_date ASC;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name  FROM  players  WHERE  players.hand = 'left'  ORDER BY  players.birth_date;
SELECT players.first_name, players.country_code  FROM  players  INNER JOIN  rankings  ON  players.player_id = rankings.player_id  GROUP BY  players.player_id  ORDER BY  SUM(rankings.tours) DESC  LIMIT 1;
SELECT players.first_name, players.country_code  FROM players  INNER JOIN (     SELECT player_id, MAX(tours) AS max_tours          FROM rankings          GROUP BY player_id  ) AS max_tours  ON players.player_id = max_tours.player_id  WHERE max_tours.max_tours = (     SELECT MAX(tours)     FROM rankings );
SELECT year FROM     matches GROUP BY     year ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT year     FROM matches     GROUP BY year     ORDER BY COUNT(*) DESC     LIMIT 1;
SELECT matches.winner_name,  matches.winner_rank_points  FROM matches  INNER JOIN      (SELECT       winner_name,      MAX(winner_rank_points) as max_points     FROM matches     GROUP BY winner_name     ORDER BY COUNT(*) DESC LIMIT 1) AS most_wins ON matches.winner_name = most_wins.winner_name AND matches.winner_rank_points = most_wins.max_points;
SELECT players.first_name || ' ' || players.last_name AS winner_name,  rankings.ranking_points AS winner_rank_points  FROM matches  JOIN players ON matches.winner_id = players.player_id  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY matches.winner_id, players.first_name, players.last_name, rankings.ranking_points  ORDER BY COUNT(matches.winner_id) DESC  LIMIT 1;
SELECT matches.winner_name FROM     matches JOIN     rankings ON matches.winner_id = rankings.player_id WHERE     matches.tourney_name = 'Australian Open' ORDER BY     rankings.ranking_points DESC LIMIT 1;
SELECT matches.winner_name FROM     matches WHERE     tourney_name = 'Australian Open' ORDER BY     winner_rank_points DESC LIMIT 1;
SELECT matches.winner_name, matches.loser_name FROM     matches WHERE     matches.minutes = (         SELECT MAX(minutes) FROM matches     );
SELECT players_winner.first_name || ' ' || players_winner.last_name AS winner_name, players_loser.first_name || ' ' || players_loser.last_name AS loser_name FROM matches JOIN players AS players_winner ON matches.winner_name = players_winner.player_id JOIN players AS players_loser ON matches.loser_name = players_loser.player_id WHERE matches.minutes = (SELECT MAX(minutes) FROM matches);
SELECT players.first_name,  AVG(rankings.ranking) AS average_ranking FROM  players  JOIN  rankings  ON  players.player_id = rankings.player_id  GROUP BY  players.player_id, players.first_name;
SELECT players.first_name,              AVG(rankings.ranking)             FROM              players             INNER JOIN rankings ON players.player_id = rankings.player_id             GROUP BY players.first_name;
SELECT players.first_name, players.player_id, SUM(rankings.ranking_points) AS total_ranking_points  FROM  players  JOIN  rankings  ON  players.player_id = rankings.player_id  GROUP BY  players.player_id, players.first_name;
SELECT players.first_name,  SUM(rankings.ranking_points) AS total_ranking_points  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.player_id, players.first_name;
SELECT COUNT(*) as player_count, country_code FROM players GROUP BY country_code;
SELECT COUNT(*) AS player_count, country_code FROM players GROUP BY country_code;
SELECT country_code FROM     players GROUP BY     country_code ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT country_code FROM     players GROUP BY     country_code ORDER BY     COUNT(player_id) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT ranking_date,          SUM(tours) AS total_tours   FROM rankings   GROUP BY ranking_date;
SELECT ranking_date, COUNT(DISTINCT tours) as total_tours   FROM rankings   GROUP BY ranking_date;
SELECT COUNT(*) as match_count, year FROM matches GROUP BY year;
SELECT COUNT(*) AS match_count,  strftime('%Y', tourney_date) AS year  FROM matches  GROUP BY strftime('%Y', tourney_date);
SELECT players.first_name, players.last_name, matches.winner_rank  FROM  players  INNER JOIN  matches  ON  matches.winner_id = players.player_id  ORDER BY  matches.winner_age ASC  LIMIT 3;
SELECT players.first_name, rankings.ranking FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id ORDER BY matches.winner_age ASC LIMIT 3;
SELECT count(DISTINCT matches.winner_id) FROM matches INNER JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'WTA Championships' AND hand = 'L';
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';
SELECT players.first_name, players.country_code, players.birth_date  FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking_points = (SELECT MAX(rankings.ranking_points) FROM rankings) LIMIT 1;
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.winner_rank_points DESC LIMIT 1;
SELECT COUNT(*) AS player_count, hand FROM players GROUP BY hand;
SELECT COUNT(*) AS count, hand FROM players GROUP BY hand;
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT ship.name, ship.tonnage FROM ship ORDER BY ship.name DESC;
SELECT name, date, result  FROM  battle;
SELECT MAX(killed) AS maximum_death_toll, MIN(killed) AS minimum_death_toll FROM death;
SELECT AVG(injured)  FROM death
SELECT death.killed, death.injured  FROM ship  JOIN death ON death.caused_by_ship_id = ship.id  WHERE ship.tonnage = 't';
SELECT battle.name, battle.result FROM battle WHERE battle.bulgarian_commander <> 'Boril';
SELECT battle.id, battle.name FROM battle INNER JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.ship_type = 'Brig'
SELECT battle.id, battle.name FROM battle INNER JOIN ship ON ship.lost_in_battle = battle.id INNER JOIN death ON death.caused_by_ship_id = ship.id GROUP BY battle.id, battle.name HAVING SUM(death.killed) > 10;
SELECT ship.id, ship.name  FROM  ship  JOIN  death  ON  ship.id = death.caused_by_ship_id  GROUP BY  ship.id, ship.name  ORDER BY  SUM(death.injured) DESC  LIMIT 1;
SELECT DISTINCT b.name  FROM battle b  INNER JOIN ship s  ON b.id = s.lost_in_battle  WHERE b.name IN ('Kaloyan', 'Baldwin I');
SELECT COUNT(DISTINCT result) AS result_count FROM battle;
SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225');
SELECT b.name, b.date  FROM battle b JOIN ship s1 ON s1.lost_in_battle = b.id AND s1.name = 'Lettice' JOIN ship s2 ON s2.lost_in_battle = b.id AND s2.name = 'HMS Atalanta';
SELECT battle.name, battle.result, battle.bulgarian_commander  FROM  battle  LEFT JOIN  ship ON ship.lost_in_battle = battle.name  WHERE  ship.name IS NULL AND ship.location = 'English Channel';
SELECT note FROM death WHERE note LIKE '%East%';
SELECT addresses.line_1, addresses.line_2 FROM addresses;
SELECT addresses.line_1, addresses.line_2 FROM addresses;
SELECT COUNT(*)  FROM courses;
SELECT COUNT(*) FROM courses;
SELECT courses.course_description FROM courses WHERE courses.course_name = 'Math';
SELECT course_description FROM courses WHERE course_name LIKE '%Math%';
SELECT zip_postcode     FROM addresses     WHERE city = 'Port Chelsea';
SELECT zip_postcode     FROM      addresses     WHERE      city = 'Port Chelsea';
SELECT departments.department_name, departments.department_id FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_name, departments.department_id HAVING COUNT(degree_programs.degree_program_id) = (     SELECT MAX(degree_count)     FROM (         SELECT departments.department_id, COUNT(degree_programs.degree_program_id) as degree_count         FROM departments         JOIN degree_programs ON departments.department_id = degree_programs.department_id         GROUP BY departments.department_id     ) subquery );
SELECT departments.department_name, departments.department_id  FROM departments  JOIN degree_programs ON departments.department_id = degree_programs.department_id  GROUP BY departments.department_name, departments.department_id  ORDER BY COUNT(degree_programs.degree_program_id) DESC  LIMIT 1;
SELECT COUNT(DISTINCT departments.department_id) FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id;
SELECT COUNT(DISTINCT department_id) FROM degree_programs
SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs;
SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs;
SELECT COUNT(degree_program_id) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering');
SELECT COUNT(degree_program_id) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering');
SELECT sections.section_name, sections.section_description FROM sections;
SELECT section_name, section_description FROM sections;
SELECT courses.course_name, courses.course_id  FROM courses  WHERE courses.course_id IN (     SELECT sections.course_id      FROM sections      GROUP BY sections.course_id      HAVING COUNT(sections.section_id) <= 2 );
SELECT course_name, course_id FROM courses WHERE course_id IN (     SELECT     course_id     FROM     sections     GROUP BY     course_id     HAVING     COUNT(*) < 2 );
SELECT section_name FROM     sections ORDER BY     section_name DESC;
SELECT section_name FROM     sections ORDER BY     section_name DESC;
SELECT semesters.semester_name, semesters.semester_id FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_name, semesters.semester_id HAVING COUNT(student_enrolment.student_id) = (   SELECT MAX(student_count)   FROM (     SELECT COUNT(student_enrolment.student_id) AS student_count     FROM semesters     JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id     GROUP BY semesters.semester_name, semesters.semester_id   ) AS counts );
SELECT semesters.semester_name, semesters.semester_id  FROM semesters  JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id  GROUP BY semesters.semester_name, semesters.semester_id  HAVING COUNT(student_enrolment.student_enrolment_id) = (     SELECT MAX(enrolment_count)     FROM (         SELECT COUNT(student_enrolment.student_enrolment_id) as enrolment_count         FROM student_enrolment         GROUP BY student_enrolment.semester_id     ) );
SELECT departments.department_description FROM   departments WHERE   departments.department_name LIKE '%computer%';
SELECT department_description FROM     departments WHERE     department_name LIKE "%computer%";
SELECT students.first_name,  students.middle_name,  students.last_name,  students.student_id  FROM students  INNER JOIN student_enrolment  ON students.student_id = student_enrolment.student_id  GROUP BY students.student_id  HAVING COUNT(student_enrolment.degree_program_id) = 2;
SELECT students.student_id, students.first_name, students.middle_name, students.last_name   FROM  students   INNER JOIN  (     SELECT student_id, semester_id     FROM student_enrolment     GROUP BY student_id, semester_id     HAVING COUNT(DISTINCT degree_program_id) = 2 ) AS student_enrolment  ON  students.student_id = student_enrolment.student_id;
SELECT students.first_name, students.middle_name, students.last_name  FROM  students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE  degree_programs.degree_summary_name LIKE '%Bachelor%';
SELECT students.first_name, students.middle_name, students.last_name  FROM  students  INNER JOIN degree_programs ON students.student_id = degree_programs.degree_program_id  WHERE degree_programs.degree_summary_name LIKE '%Bachelors%';
SELECT degree_summary_name FROM     degree_programs GROUP BY     degree_summary_name ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT degree_programs.degree_summary_name FROM     degree_programs JOIN     student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY     degree_programs.degree_summary_name ORDER BY     COUNT(student_enrolment.student_id) DESC LIMIT 1;
SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name FROM degree_programs INNER JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_program_id, degree_programs.degree_summary_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;
SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id = ( SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT se.student_id,  s.first_name,  s.middle_name,  s.last_name,  COUNT(se.degree_program_id) as number_of_enrollments FROM student_enrolment se JOIN students s  ON se.student_id = s.student_id GROUP BY se.student_id, s.first_name, s.middle_name, s.last_name ORDER BY number_of_enrollments DESC LIMIT 1;
SELECT students.student_id,  students.first_name,  students.middle_name,  students.last_name,  COUNT(student_enrolment.student_enrolment_id) AS enrollments  FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  GROUP BY students.student_id, students.first_name, students.middle_name, students.last_name  ORDER BY enrollments DESC  LIMIT 1;
SELECT semesters.semester_name FROM semesters LEFT JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id WHERE student_enrolment.semester_id IS NULL;
SELECT semesters.semester_name FROM     semesters LEFT JOIN     student_enrolment ON semesters.semester_id = student_enrolment.semester_id WHERE     student_enrolment.student_id IS NULL;
SELECT DISTINCT course_name  FROM courses  WHERE course_id IN (SELECT course_id FROM student_enrolment);
SELECT DISTINCT courses.course_name FROM courses JOIN student_enrolment_courses ON student_enrolment_courses.course_id = courses.course_id;
SELECT course_name FROM   courses JOIN   student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY   courses.course_name ORDER BY   COUNT(*) DESC LIMIT 1;
SELECT courses.course_name FROM     courses JOIN     student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY     courses.course_name ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT last_name  FROM  students  LEFT JOIN student_enrolment ON students.student_id = student_enrolment.student_id INNER JOIN addresses ON students.current_address_id = addresses.address_id WHERE  student_enrolment.student_id IS NULL  AND addresses.state_province_county = 'North Carolina';
SELECT students.last_name   FROM  students   JOIN  addresses ON students.permanent_address_id = addresses.address_id   WHERE  addresses.state_province_county = 'North Carolina'   AND students.student_id NOT IN (SELECT student_id FROM student_enrolment);
SELECT transcripts.transcript_date, transcripts.transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcripts.transcript_id HAVING COUNT(transcript_contents.student_course_id) >= 2;
SELECT t.transcript_date,  t.transcript_id  FROM transcripts t  INNER JOIN transcript_contents tc  ON t.transcript_id = tc.transcript_id  GROUP BY t.transcript_id, t.transcript_date  HAVING COUNT(DISTINCT tc.student_course_id) >= 2;
SELECT students.cell_mobile_number FROM      students WHERE      students.first_name = 'Timmothy'      AND students.last_name = 'Ward';
SELECT students.cell_mobile_number   FROM students   WHERE students.first_name = 'Timmothy'   AND students.last_name = 'Ward';
SELECT students.first_name, students.middle_name, students.last_name FROM students ORDER BY students.date_first_registered LIMIT 1;
SELECT students.first_name, students.middle_name, students.last_name     FROM      students     ORDER BY      students.date_first_registered ASC     LIMIT 1;
SELECT students.first_name, students.middle_name, students.last_name FROM     students ORDER BY     students.date_first_registered ASC LIMIT 1;
SELECT first_name,  middle_name,  last_name  FROM students  WHERE graduation_date = (SELECT MIN(graduation_date) FROM students);
SELECT students.first_name FROM   students JOIN   addresses AS permanent_address ON students.permanent_address_id = permanent_address.address_id JOIN   addresses AS current_address ON students.current_address_id = current_address.address_id WHERE   permanent_address.line_1 <> current_address.line_1;
SELECT students.first_name FROM students JOIN addresses AS permanent ON students.permanent_address_id = permanent.address_id JOIN addresses AS current ON students.current_address_id = current.address_id WHERE permanent.line_1 <> current.line_1;
SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses JOIN students ON students.current_address_id = addresses.address_id GROUP BY addresses.address_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM  addresses  JOIN  students  ON  addresses.address_id = students.current_address_id OR addresses.address_id = students.permanent_address_id GROUP BY  addresses.address_id, addresses.line_1, addresses.line_2 ORDER BY  COUNT(*) DESC  LIMIT 1;
SELECT AVG(transcript_date) AS average_print_date FROM transcripts;
SELECT AVG(transcript_date) FROM transcripts;
SELECT transcript_date, other_details     FROM transcripts     ORDER BY transcript_date ASC     LIMIT 1;
SELECT MIN(transcripts.transcript_date), transcripts.other_details FROM transcripts
SELECT COUNT(DISTINCT transcript_id) AS num_transcripts FROM transcripts;
SELECT COUNT(*)  FROM transcripts;
SELECT transcript_date FROM     transcripts ORDER BY     transcript_date DESC LIMIT 1;
SELECT transcripts.transcript_date FROM     transcripts ORDER BY     transcripts.transcript_date DESC LIMIT 1;
SELECT COUNT(student_course_id) AS max_course_enrollment_count,      student_course_id     FROM transcript_contents     GROUP BY student_course_id     ORDER BY max_course_enrollment_count DESC     LIMIT 1;
SELECT COUNT(*) as count_course, student_course_id FROM transcript_contents GROUP BY student_course_id HAVING count_course = (SELECT MAX(count_course) FROM (SELECT COUNT(DISTINCT transcript_id) as count_course, student_course_id FROM transcript_contents GROUP BY student_course_id) AS subquery);
SELECT transcripts.transcript_date, transcripts.transcript_id FROM   transcripts JOIN   transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY   transcripts.transcript_date, transcripts.transcript_id ORDER BY   COUNT(*) ASC LIMIT 1;
SELECT transcript_date, transcript_id  FROM  (     SELECT          transcript_date,          transcript_id,         COUNT(*) as result_count      FROM          transcripts      GROUP BY          transcript_date, transcript_id )  WHERE  result_count =  (     SELECT          MIN(result_count)      FROM      (         SELECT              COUNT(*) as result_count          FROM              transcripts          GROUP BY              transcript_date, transcript_id     ) ) LIMIT 1;
SELECT semesters.semester_id  FROM  semesters  JOIN students ON semesters.semester_id = students.date_first_registered  JOIN degree_programs ON students.student_id = degree_programs.degree_program_id  WHERE degree_programs.degree_summary_name IN ('Master', 'Bachelor')  GROUP BY semesters.semester_id  HAVING COUNT(DISTINCT degree_programs.degree_summary_name) = 2;
SELECT student_enrolment.semester_id   FROM  student_enrolment   INNER JOIN  degree_programs  ON  student_enrolment.degree_program_id = degree_programs.degree_program_id   WHERE  degree_programs.department_id IN ('Masters', 'Bachelors')   GROUP BY  student_enrolment.semester_id   HAVING  COUNT(DISTINCT degree_programs.department_id) >= 2;
SELECT COUNT(DISTINCT students.current_address_id) FROM students;
SELECT COUNT(DISTINCT current_address_id) FROM students;
SELECT students.other_student_details FROM students ORDER BY students.other_student_details DESC;
SELECT students.last_name,  students.first_name,  students.middle_name,  students.student_id,  students.current_address_id,  students.permanent_address_id,  students.cell_mobile_number,  students.email_address,  students.ssn,  students.date_first_registered,  students.date_left,  students.other_student_details  FROM students  ORDER BY students.last_name DESC;
SELECT section_description   FROM  sections   WHERE  section_name = 'h';
SELECT sections.section_description FROM sections WHERE sections.section_name = 'h';
SELECT students.first_name   FROM  students   JOIN  addresses ON students.permanent_address_id = addresses.address_id   WHERE  addresses.country = 'Haiti' OR students.cell_mobile_number = '09700166582';
SELECT students.first_name   FROM  students   JOIN  addresses ON students.permanent_address_id = addresses.address_id   WHERE  addresses.country = 'Haiti'   OR  students.cell_mobile_number = '09700166582';
SELECT title FROM     cartoon ORDER BY     title ASC;
SELECT title FROM      cartoon ORDER BY      title ASC;
SELECT cartoon.title FROM    cartoon WHERE    cartoon.directed_by = 'Ben Jones';
SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by = 'Ben Jones';
SELECT COUNT(DISTINCT cartoon.id) FROM cartoon WHERE cartoon.written_by = 'Joseph Kuhr';
SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr';
SELECT cartoon.title, cartoon.directed_by FROM     cartoon JOIN     tv_channel ON cartoon.channel = tv_channel.id ORDER BY     cartoon.original_air_date;
SELECT cartoon.title, cartoon.directed_by FROM     cartoon JOIN     tv_channel ON cartoon.channel = tv_channel.id ORDER BY     cartoon.original_air_date;
SELECT cartoon.title FROM   cartoon WHERE   cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Brandon Vietti';
SELECT cartoon.title FROM     cartoon WHERE     cartoon.directed_by IN ('Ben Jones', 'Brandon Vietti');
SELECT country,      COUNT(id) AS num_channels     FROM      tv_channel     GROUP BY      country     ORDER BY      num_channels DESC     LIMIT 1;
SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name) AS num_series_names,     COUNT(DISTINCT content) AS num_contents FROM tv_channel;
SELECT COUNT(DISTINCT series_name) AS num_series, COUNT(DISTINCT content) AS num_contents FROM tv_channel;
SELECT content FROM     tv_channel WHERE     series_name = "Sky Radio";
SELECT content FROM     tv_channel WHERE     series_name = 'Sky Radio';
SELECT tv_channel.package_option   FROM tv_channel   JOIN tv_series ON tv_series.channel = tv_channel.id   WHERE tv_channel.series_name = "Sky Radio";
SELECT tv_channel.package_option   FROM tv_channel   JOIN tv_series ON tv_channel.series_name = tv_series.channel   WHERE tv_channel.series_name = 'Sky Radio';
SELECT COUNT(DISTINCT id) FROM tv_channel WHERE language = 'English';
SELECT COUNT(DISTINCT id) FROM tv_channel WHERE language = 'English';
SELECT tv_channel.language, COUNT(tv_channel.language) AS channel_count FROM tv_channel GROUP BY tv_channel.language ORDER BY channel_count ASC LIMIT 1;
SELECT language, COUNT(*) AS channel_count FROM tv_channel GROUP BY language ORDER BY channel_count ASC LIMIT 1;
SELECT tv_channel.language, COUNT(tv_channel.id) FROM tv_channel GROUP BY tv_channel.language;
SELECT language, COUNT(DISTINCT id) AS number_of_channels FROM tv_channel GROUP BY language;
SELECT tv_channel.series_name FROM     cartoon     INNER JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE     cartoon.title = "The Rise of the Blue Beetle!";
SELECT tv_channel.series_name  FROM  tv_channel  JOIN  cartoon  ON  cartoon.channel = tv_channel.id  WHERE  cartoon.title = 'The Rise of the Blue Beetle';
SELECT cartoon.title  FROM cartoon  JOIN tv_channel ON cartoon.channel = tv_channel.id  WHERE tv_channel.series_name = "Sky Radio";
SELECT cartoon.title FROM     cartoon JOIN     tv_channel ON cartoon.channel = tv_channel.id WHERE     tv_channel.series_name = "Sky Radio";
SELECT episode FROM tv_series ORDER BY rating DESC;
SELECT episode FROM tv_series ORDER BY rating;
SELECT tv_series.episode, tv_series.rating FROM tv_series ORDER BY tv_series.rating DESC LIMIT 3;
SELECT tv_series.episode, tv_series.rating FROM    tv_series ORDER BY    tv_series.rating DESC LIMIT 3;
SELECT MAX(share) AS "max (share)", MIN(share) AS "min (share)" FROM tv_series;
SELECT MAX(share) AS max_share, MIN(share) AS min_share FROM tv_series;
SELECT air_date FROM tv_series WHERE episode = "A Love of a Lifetime";
SELECT tv_series.air_date FROM     tv_series WHERE     tv_series.episode = "A Love of a Lifetime";
SELECT tv_series.weekly_rank     FROM      tv_series     WHERE      tv_series.episode = "A Love of a Lifetime";
SELECT weekly_rank FROM     tv_series WHERE     episode = "A Love of a Lifetime";
SELECT tv_channel.series_name FROM tv_channel INNER JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_series.episode = "A Love of a Lifetime";
SELECT series_name   FROM  tv_series   WHERE  episode = "A Love of a Lifetime";
SELECT tv_series.episode FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio';
SELECT episode  FROM  tv_series  INNER JOIN tv_channel ON tv_series.channel = tv_channel.id  WHERE tv_channel.series_name = "Sky Radio";
SELECT cartoon.directed_by, COUNT(*) AS num_cartoons   FROM cartoon   WHERE cartoon.directed_by IN ('Ben Jones', 'Brandon Vietti', 'Michael Chang')  GROUP BY cartoon.directed_by;
SELECT COUNT(*), directed_by FROM cartoon GROUP BY directed_by;
SELECT production_code, channel FROM     cartoon ORDER BY     original_air_date DESC LIMIT 1;
SELECT cartoon.production_code, cartoon.channel FROM     cartoon WHERE     cartoon.original_air_date = (SELECT MAX(original_air_date) FROM cartoon)
SELECT tv_channel.package_option,  cartoon.title AS series_name  FROM tv_channel  JOIN cartoon ON tv_channel.id = cartoon.channel  WHERE tv_channel.hight_definition_tv = 1;
SELECT tv_channel.package_option, tv_series.series_name  FROM  tv_channel  JOIN  tv_series  ON  tv_channel.id = tv_series.channel WHERE  tv_channel.hight_definition_tv = 1;
SELECT tv_channel.country FROM     cartoon     JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE     cartoon.written_by = 'Todd Casey';
SELECT tv_channel.country FROM     cartoon JOIN     tv_channel ON cartoon.channel = tv_channel.id WHERE     cartoon.written_by = 'Todd Casey';
SELECT tv_channel.country FROM tv_channel WHERE tv_channel.series_name NOT IN (     SELECT     cartoon.channel     FROM     cartoon     WHERE     cartoon.written_by = 'Todd Casey' );
SELECT tv_channel.country  FROM  tv_channel  WHERE  tv_channel.id NOT IN (      SELECT      tv_channel.id      FROM      cartoon      JOIN      tv_channel ON cartoon.channel = tv_channel.id      WHERE      cartoon.written_by = 'Todd Casey'  );
SELECT tv_channel.series_name, tv_channel.country  FROM  cartoon  JOIN  tv_channel  ON  cartoon.channel = tv_channel.id  WHERE  cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Michael Chang';
SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  INNER JOIN tv_series ON tv_channel.id = tv_series.channel  INNER JOIN cartoon ON tv_channel.id = cartoon.channel  WHERE cartoon.directed_by = 'Ben Jones'  INTERSECT  SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  INNER JOIN tv_series ON tv_channel.id = tv_series.channel  INNER JOIN cartoon ON tv_channel.id = cartoon.channel  WHERE cartoon.directed_by = 'Michael Chang';
SELECT tv_channel.pixel_aspect_ratio_par, tv_channel.language  FROM tv_channel   WHERE tv_channel.language <> 'English';
SELECT tv_channel.pixel_aspect_ratio_par, tv_channel.country FROM     tv_channel WHERE     tv_channel.language <> 'English';
SELECT id  FROM  tv_channel  WHERE  country IN (          SELECT      country          FROM      tv_channel          GROUP BY      country          HAVING      COUNT(id) > 2 );
SELECT tv_channel.id  FROM  tv_channel  JOIN  tv_series  ON  tv_channel.id = tv_series.channel  GROUP BY  tv_channel.id  HAVING COUNT(tv_series.channel) > 2;
SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT tv_channel.id FROM tv_channel INNER JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.directed_by = 'Ben Jones' );
SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id NOT IN (     SELECT cartoon.channel     FROM cartoon     WHERE cartoon.directed_by = 'Ben Jones' );
SELECT tv_channel.package_option FROM     tv_channel WHERE     tv_channel.id NOT IN (         SELECT             cartoon.channel         FROM             cartoon         WHERE             cartoon.directed_by = 'Ben Jones'     );
SELECT tv_channel.package_option FROM   tv_channel WHERE   tv_channel.id NOT IN (     SELECT       cartoon.channel     FROM       cartoon     WHERE       cartoon.directed_by = 'Ben Jones'   );
SELECT COUNT(poker_player_id) FROM poker_player;
SELECT COUNT(poker_player_id) FROM poker_player;
SELECT earnings FROM      poker_player ORDER BY      earnings DESC;
SELECT earnings FROM     poker_player ORDER BY     earnings DESC;
SELECT final_table_made, best_finish FROM poker_player;
SELECT final_table_made, best_finish FROM poker_player;
SELECT AVG(earnings) AS average_earnings FROM poker_player;
SELECT AVG(earnings) FROM poker_player;
SELECT money_rank FROM     poker_player WHERE     earnings = (         SELECT             MAX(earnings)         FROM             poker_player     );
SELECT money_rank FROM     poker_player ORDER BY     earnings DESC LIMIT 1;
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id;
SELECT name FROM     poker_player JOIN     people ON poker_player.people_id = people.people_id;
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000;
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000;
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made ASC;
SELECT people.name FROM     poker_player JOIN     people ON poker_player.people_id = people.people_id ORDER BY     poker_player.final_table_made ASC;
SELECT birth_date FROM     people WHERE     people_id = (         SELECT             people_id         FROM             poker_player         ORDER BY             earnings ASC         LIMIT 1     );
SELECT people.birth_date FROM     poker_player     JOIN people ON poker_player.people_id = people.people_id ORDER BY     poker_player.earnings ASC LIMIT 1;
SELECT poker_player.money_rank FROM     poker_player INNER JOIN     people ON poker_player.people_id = people.people_id WHERE     people.height = (         SELECT             MAX(height)         FROM             people     );
SELECT poker_player.money_rank     FROM poker_player     INNER JOIN people ON poker_player.people_id = people.people_id     ORDER BY people.height DESC     LIMIT 1;
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200;
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200;
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC;
SELECT people.name FROM     poker_player JOIN     people ON poker_player.people_id = people.people_id ORDER BY     poker_player.earnings DESC;
SELECT people.nationality, COUNT(people.people_id) FROM     people GROUP BY     people.nationality;
SELECT nationality,      COUNT(*) as count     FROM people     GROUP BY nationality;
SELECT nationality FROM     people GROUP BY     nationality ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT nationality FROM     people GROUP BY     nationality ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT DISTINCT nationality FROM people GROUP BY nationality HAVING COUNT(*) > 1;
SELECT nationality FROM     people GROUP BY     nationality HAVING     COUNT(*) >= 2;
SELECT people.name, people.birth_date FROM people ORDER BY people.name ASC;
SELECT people.name, people.birth_date FROM people ORDER BY people.name ASC;
SELECT name FROM    people WHERE    nationality <> 'Russia';
SELECT people.name FROM     people WHERE     people.nationality != 'Russia';
SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player);
SELECT people.name FROM people LEFT JOIN poker_player ON people.people_id = poker_player.people_id WHERE poker_player.people_id IS NULL;
SELECT COUNT(DISTINCT nationality) FROM people;
SELECT COUNT(DISTINCT nationality) FROM people;
SELECT COUNT(DISTINCT state) AS state_count  FROM area_code_state;
SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC;
SELECT vote_id, phone_number, state FROM     votes;
SELECT MAX(area_code), MIN(area_code) FROM area_code_state;
SELECT MAX(created) FROM votes WHERE state = 'CA';
SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway';
SELECT DISTINCT state, created FROM votes;
SELECT contestants.contestant_number, contestants.contestant_name FROM     contestants INNER JOIN     votes ON contestants.contestant_number = votes.contestant_number GROUP BY     contestants.contestant_number, contestants.contestant_name HAVING     COUNT(votes.contestant_number) >= 2;
SELECT contestants.contestant_number, contestants.contestant_name FROM     contestants JOIN     votes ON contestants.contestant_number = votes.contestant_number GROUP BY     contestants.contestant_number, contestants.contestant_name ORDER BY     COUNT(*) ASC LIMIT 1;
SELECT count(*) FROM     votes WHERE     state IN ('NY', 'CA');
SELECT COUNT(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes);
SELECT area_code_state.area_code FROM     votes     JOIN contestants ON votes.contestant_number = contestants.contestant_number     JOIN area_code_state ON votes.state = area_code_state.state GROUP BY     area_code_state.area_code ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT created, state, phone_number FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number WHERE contestants.contestant_name = 'Tabatha Gehling';
SELECT a.area_code FROM votes v INNER JOIN contestants c ON v.contestant_number = c.contestant_number INNER JOIN area_code_state a ON v.state = a.state WHERE c.contestant_name = 'Tabatha Gehling' OR c.contestant_name = 'Kelly Clauss' GROUP BY a.area_code HAVING COUNT(DISTINCT c.contestant_number) = 2;
SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%';
SELECT country.name FROM country WHERE country.indepyear > 1950;
SELECT name FROM country WHERE indepyear > 1950;
SELECT COUNT(*) FROM     country WHERE     governmentform = 'Republic';
SELECT COUNT(DISTINCT name) FROM country WHERE governmentform = 'Republic';
SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean';
SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean';
SELECT continent     FROM      country     WHERE      name = 'Anguilla';
SELECT continent FROM     country WHERE     name = 'Anguilla';
SELECT country.region FROM   city JOIN country ON city.countrycode = country.code WHERE   city.name = 'Kabul';
SELECT region FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Kabul');
SELECT language  FROM      countrylanguage  WHERE      countrycode = 'ABW'  ORDER BY      percentage DESC  LIMIT 1;
SELECT language  FROM countrylanguage  WHERE countrycode = 'ABW'  AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = 'ABW');
SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';
SELECT population, lifeexpectancy FROM     country WHERE     name = 'Brazil';
SELECT population, region FROM country WHERE name = 'Angola';
SELECT population, region FROM country WHERE name = 'Angola';
SELECT AVG(lifeexpectancy) FROM     country WHERE     region = 'Central Africa';
SELECT AVG(lifeexpectancy)   FROM country   WHERE continent = 'Africa' AND name IN ('Angola', 'Burundi', 'Benin', 'Burkina Faso', 'Botswana', 'Central African Republic', 'Cote d''Ivoire', 'Cameroon', 'Congo, Democratic Republic of the', 'Congo, Republic of the', 'Comoros', 'Cape Verde', 'Djibouti', 'Algeria', 'Egypt', 'Eritrea', 'Western Sahara', 'Ethiopia', 'Gabon', 'Gambia, The', 'Ghana', 'Guinea', 'Guinea-Bissau', 'Equatorial Guinea', 'Kenya', 'Lesotho', 'Liberia', 'Libya', 'Madagascar', 'Malawi', 'Mali', 'Mauritania', 'Mauritius', 'Morocco', 'Mozambique', 'Namibia', 'Niger', 'Nigeria', 'Reunion', 'Rwanda', 'Saint Helena', 'Sao Tome and Principe', 'Senegal', 'Seychelles', 'Sierra Leone', 'Somalia', 'South Africa', 'South Sudan', 'Sudan', 'Eswatini', 'Tanzania', 'Togo', 'Tunisia', 'Uganda', 'Mayotte', 'Zambia', 'Zimbabwe');
SELECT country.name FROM   country WHERE   country.continent = 'Asia' ORDER BY   country.lifeexpectancy LIMIT 1;
SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1;
SELECT SUM(country.population) AS total_population, MAX(country.GNP) AS max_GNP FROM country WHERE country.continent = 'Asia';
SELECT SUM(population) AS total_population, MAX(gnp) AS largest_gnp FROM country WHERE continent = 'Asia';
SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic';
SELECT AVG(lifeexpectancy) FROM     country WHERE     continent = 'Africa'     AND governmentform = 'Republic';
SELECT SUM(surfacearea)  FROM     country WHERE     continent = 'Asia' OR continent = 'Europe';
SELECT SUM(surfacearea)  FROM country  WHERE continent IN ('Asia', 'Europe');
SELECT SUM(population)  FROM     city WHERE     district = 'Gelderland';
SELECT SUM(population) FROM     city WHERE     district = 'Gelderland';
SELECT AVG(gnp) AS "avg_gnp",  SUM(population) AS "total_population"  FROM country  WHERE governmentform LIKE '%US territory%';
SELECT AVG(gnp) AS "avg ( gnp )", SUM(population) AS "sum ( population )" FROM country WHERE governmentform LIKE '%US territory%';
SELECT count(DISTINCT language) FROM countrylanguage
SELECT COUNT(DISTINCT language) FROM countrylanguage;
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';
SELECT COUNT(DISTINCT language) FROM     countrylanguage WHERE     countrycode = 'ABW';
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW';
SELECT COUNT(*)  FROM  countrylanguage  WHERE  countrycode = 'AFG'  AND  isofficial = 'T';
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T';
SELECT country.name FROM     country JOIN     countrylanguage ON country.code = countrylanguage.countrycode GROUP BY     country.name ORDER BY     COUNT(countrylanguage.language) DESC LIMIT 1;
SELECT country.name FROM     country INNER JOIN     countrylanguage ON country.code = countrylanguage.countrycode GROUP BY     country.name ORDER BY     COUNT(DISTINCT countrylanguage.language) DESC LIMIT 1;
SELECT continent FROM     country co INNER JOIN     countrylanguage cl ON     co.code = cl.countrycode GROUP BY     continent HAVING     COUNT(DISTINCT cl.language) = (         SELECT             MAX(language_count)         FROM             (                 SELECT                     COUNT(DISTINCT cl.language) as language_count                 FROM                     country co                 INNER JOIN                     countrylanguage cl                 ON                     co.code = cl.countrycode                 GROUP BY                     continent             )     );
SELECT country.continent              FROM  country              JOIN  countrylanguage              ON  country.code = countrylanguage.countrycode              GROUP BY  country.continent              ORDER BY  COUNT(DISTINCT countrylanguage.language) DESC               LIMIT 1;
SELECT COUNT(*) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') AND code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch');
SELECT COUNT(*) FROM (     SELECT countrycode FROM countrylanguage WHERE language = 'English'     INTERSECT     SELECT countrycode FROM countrylanguage WHERE language = 'Dutch' ) AS nations
SELECT country.name  FROM  country  JOIN  countrylanguage AS cl1 ON country.code = cl1.countrycode  JOIN  countrylanguage AS cl2 ON country.code = cl2.countrycode  WHERE  cl1.language = 'English' AND cl2.language = 'French'
SELECT name  FROM  country  WHERE  code IN (     SELECT      countrycode      FROM      countrylanguage      WHERE      language = 'English'  )  AND  code IN (     SELECT      countrycode      FROM      countrylanguage      WHERE      language = 'French' );
SELECT country.name FROM     country WHERE     country.code IN (         SELECT             countrycode         FROM             countrylanguage         WHERE             language = 'English' AND isofficial = 'T'     )     AND country.code IN (         SELECT             countrycode         FROM             countrylanguage         WHERE             language = 'French' AND isofficial = 'T'     );
SELECT country.name  FROM country  WHERE country.code IN (     SELECT countrycode      FROM countrylanguage      WHERE language = 'English' AND isofficial = 'T' ) AND country.code IN (     SELECT countrycode      FROM countrylanguage      WHERE language = 'French' AND isofficial = 'T' );
SELECT COUNT(DISTINCT country.continent) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Chinese';
SELECT COUNT(DISTINCT continent) FROM country WHERE code IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'Chinese' )
SELECT DISTINCT country.region  FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'Dutch');
SELECT DISTINCT country.region  FROM country  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language IN ('Dutch', 'English');
SELECT country.name   FROM country   JOIN countrylanguage ON country.code = countrylanguage.countrycode   WHERE (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch') AND countrylanguage.isofficial = 'T';
SELECT country.code, country.name, country.continent, country.region, country.surfacearea, country.indepyear, country.population, country.lifeexpectancy, country.gnp, country.gnpold, country.localname, country.governmentform, country.headofstate, country.capital, country.code2, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch') AND countrylanguage.isofficial = 'T';
SELECT language FROM countrylanguage WHERE countrycode IN (     SELECT code     FROM country     WHERE continent = 'Asia' ) GROUP BY language ORDER BY SUM(percentage) DESC LIMIT 1;
SELECT language FROM     countrylanguage WHERE     countrycode IN (         SELECT             code         FROM             country         WHERE             continent = 'Asia'     ) GROUP BY     language ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT language  FROM  countrylanguage  WHERE countrycode IN (     SELECT      countrylanguage.countrycode      FROM      countrylanguage      INNER JOIN country ON countrylanguage.countrycode = country.name      WHERE country.governmentform = 'Republic'      GROUP BY countrylanguage.language      HAVING COUNT(DISTINCT country.name) = 1 );
SELECT language FROM     countrylanguage WHERE     countrycode IN (         SELECT             code         FROM             country         WHERE             governmentform = 'Republic'     ) GROUP BY     language HAVING     COUNT(DISTINCT countrycode) = 1;
SELECT city.name, city.population FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1;
SELECT city.name, city.population FROM city INNER JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1;
SELECT country.name, country.population, country.lifeexpectancy FROM country WHERE country.continent = 'Asia' ORDER BY country.surfacearea DESC LIMIT 1;
SELECT country.name, country.population, country.lifeexpectancy FROM country WHERE country.continent = 'Asia' ORDER BY country.surfacearea DESC LIMIT 1;
SELECT AVG(lifeexpectancy)  FROM country  WHERE code NOT IN (     SELECT countrycode      FROM countrylanguage      WHERE language = 'English'      AND isofficial = 'T' );
SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English'     AND isofficial = 'T' );
SELECT SUM(country.population) FROM     country WHERE     country.code NOT IN (         SELECT             countrylanguage.countrycode         FROM             countrylanguage         WHERE             countrylanguage.language = 'English'     );
SELECT SUM(population) FROM country WHERE code NOT IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' )
SELECT countrylanguage.language   FROM  country   JOIN  countrylanguage  ON  country.code = countrylanguage.countrycode   WHERE  country.headofstate = 'Beatrix'   AND  countrylanguage.isofficial = 'T';
SELECT countrylanguage.language FROM     countrylanguage JOIN     country ON countrylanguage.countrycode = country.code WHERE     country.headofstate = 'Beatrix'     AND countrylanguage.isofficial = 'T';
SELECT COUNT(DISTINCT language) FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code WHERE country.indepyear < 1930 AND isofficial = 'T';
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode IN (     SELECT code     FROM country     WHERE indepyear < 1930 ) AND isofficial = 'T';
SELECT country.name   FROM  country   WHERE  country.surfacearea > (          SELECT      MAX(surfacearea)           FROM      country           WHERE      continent = 'Europe' );
SELECT name  FROM  country  WHERE  surfacearea > (     SELECT      MAX(surfacearea)      FROM      country      WHERE      continent = 'Europe' ) AND continent != 'Europe';
SELECT c1.name   FROM  country c1  WHERE  c1.continent = 'Africa'   AND  c1.population <      (          SELECT      MIN(c2.population)           FROM      country c2           WHERE      c2.continent = 'Asia'      );
SELECT country.name FROM   country WHERE   country.continent = 'Africa'   AND country.population < (SELECT MIN(population) FROM country WHERE continent = 'Asia');
SELECT country.name FROM      country WHERE      country.continent = 'Asia' AND country.population > (           SELECT MAX(population)           FROM country           WHERE continent = 'Africa'      );
SELECT name  FROM  country  WHERE  continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa');
SELECT country.code  FROM  country  WHERE  country.code NOT IN (     SELECT      countrycode      FROM      countrylanguage      WHERE      language = 'English' );
SELECT country.code  FROM  country  WHERE  country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English');
SELECT DISTINCT country.code  FROM country  WHERE country.code NOT IN (     SELECT countrycode      FROM countrylanguage      WHERE language = 'English' );
SELECT DISTINCT country.code  FROM country  WHERE country.code NOT IN (     SELECT countrylanguage.countrycode          FROM countrylanguage          WHERE countrylanguage.language = 'English' ) AND EXISTS (     SELECT 1      FROM countrylanguage     WHERE country.code = countrylanguage.countrycode );
SELECT country.code FROM     country WHERE     country.code NOT IN (         SELECT             countrylanguage.countrycode         FROM             countrylanguage         WHERE             language = 'English'     )     AND governmentform <> 'Republic';
SELECT code     FROM      country     WHERE      code NOT IN (        SELECT          countrycode        FROM          countrylanguage        WHERE          language = 'English'        )      AND      governmentform != 'Republic';
SELECT city.name   FROM city   JOIN country ON city.countrycode = country.code   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe'   AND (countrylanguage.language != 'English' OR countrylanguage.isofficial = 'F');
SELECT city.name  FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE city.countrycode IN (SELECT code FROM country WHERE continent = 'Europe')  AND countrylanguage.language = 'English'  AND countrylanguage.isofficial = 'F';
SELECT DISTINCT city.name   FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 'T';
SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T';
SELECT name, indepyear, surfacearea  FROM  country  WHERE  population = (SELECT MIN(population) FROM country WHERE population > 0);
SELECT country.name,  country.indepyear,  country.surfacearea  FROM country   WHERE country.population = (SELECT MIN(population) FROM country);
SELECT country.name, country.population, country.headofstate  FROM country  WHERE country.surfacearea = (     SELECT MAX(surfacearea)      FROM country );
SELECT name, population, headofstate      FROM country     ORDER BY surfacearea DESC     LIMIT 1;
SELECT country.name, COUNT(DISTINCT countrylanguage.language) AS language_count  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  GROUP BY country.name  HAVING COUNT(DISTINCT countrylanguage.language) >= 3;
SELECT COUNT(countrylanguage.language) as language_count, country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING language_count > 2;
SELECT COUNT(*) as num_cities, district  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district;
SELECT COUNT(*) as city_count, district FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;
SELECT country.governmentform AS governmentform, SUM(country.population) AS population  FROM country  GROUP BY country.governmentform HAVING AVG(country.lifeexpectancy) > 72;
SELECT country.governmentform,  SUM(country.population) AS total_population  FROM  country  WHERE  country.governmentform IN (      SELECT      governmentform      FROM      country      WHERE      AVG(lifeexpectancy) > 72      GROUP BY      governmentform  )  GROUP BY  country.governmentform;
SELECT SUM(population) AS sum_population, AVG(lifeexpectancy) AS avg_life_expectancy, continent FROM country GROUP BY continent HAVING avg_life_expectancy < 72;
SELECT continent,  SUM(population) AS total_population,  AVG(lifeexpectancy) AS average_life_expectancy   FROM country   GROUP BY continent   HAVING AVG(lifeexpectancy) < 72;
SELECT country.name, country.surfacearea     FROM      country     ORDER BY      country.surfacearea DESC     LIMIT 5;
SELECT country.name, country.surfacearea FROM country ORDER BY country.surfacearea DESC LIMIT 5;
SELECT country.name FROM    country ORDER BY    country.population DESC LIMIT 3;
SELECT country.name FROM     country ORDER BY     population DESC LIMIT 3;
SELECT country.name FROM    country ORDER BY    country.population ASC LIMIT 3;
SELECT country.name FROM     country ORDER BY     population ASC LIMIT 3;
SELECT COUNT(*)  FROM country  WHERE continent = 'Asia';
SELECT COUNT(*)  FROM      country  WHERE      continent = 'Asia';
SELECT country.name FROM   country WHERE   country.continent = 'Europe'   AND country.population = 80000;
SELECT country.name FROM country WHERE country.continent = 'Europe' AND country.population = 80000;
SELECT SUM(population) AS sum_population,  AVG(surfacearea) AS avg_surfacearea  FROM country  WHERE continent = 'North America' AND surfacearea > 3000;
SELECT SUM(country.population) AS "Total Population",  AVG(country.surfacearea) AS "Average Surface Area"  FROM country  WHERE country.continent = 'North America' AND country.surfacearea > 3000;
SELECT city.name FROM    city WHERE    city.population BETWEEN 160000 AND 900000;
SELECT city.name FROM city WHERE city.population BETWEEN 160000 AND 900000;
SELECT language     FROM      countrylanguage     GROUP BY      language     ORDER BY      COUNT(DISTINCT countrycode) DESC     LIMIT 1;
SELECT language FROM      countrylanguage GROUP BY      language ORDER BY      COUNT(DISTINCT countrycode) DESC LIMIT 1;
SELECT countrylanguage.language, countrylanguage.countrycode, MAX(countrylanguage.percentage) FROM countrylanguage JOIN (     SELECT countrycode, MAX(percentage) AS max_percentage     FROM countrylanguage     GROUP BY countrycode ) AS max_percentage_table ON countrylanguage.countrycode = max_percentage_table.countrycode AND countrylanguage.percentage = max_percentage_table.max_percentage GROUP BY countrylanguage.countrycode;
SELECT countrylanguage.language, country.code, MAX(countrylanguage.percentage) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code;
SELECT COUNT(*)  FROM  (     SELECT countrycode      FROM countrylanguage      WHERE language = 'Spanish'      GROUP BY countrycode      HAVING percentage =      (         SELECT MAX(percentage)          FROM countrylanguage          WHERE countrycode = countrylanguage.countrycode     ) ) AS subquery;
SELECT COUNT(DISTINCT countrycode)  FROM  countrylanguage  WHERE  language = 'Spanish'  AND  isofficial = 'T'  AND  percentage > 50;
SELECT countrylanguage.countrycode, countrylanguage.percentage FROM countrylanguage WHERE language = 'Spanish' ORDER BY percentage DESC LIMIT 1;
SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish' AND countrylanguage.percentage > 50;
SELECT COUNT(conductor_id) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT name FROM   conductor ORDER BY   age ASC;
SELECT conductor.name FROM    conductor ORDER BY    conductor.age;
SELECT conductor.name FROM   conductor WHERE   conductor.nationality != 'USA';
SELECT conductor.name FROM conductor WHERE conductor.nationality <> 'USA';
SELECT record_company FROM   orchestra ORDER BY   year_of_founded DESC;
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;
SELECT AVG(attendance) FROM show;
SELECT AVG(attendance) FROM show;
SELECT MAX(share) AS max_share, MIN(share) AS min_share FROM performance WHERE type != 'Live final';
SELECT MAX(share), MIN(share) FROM performance WHERE type <> 'Live final';
SELECT COUNT(DISTINCT nationality) FROM conductor;
SELECT COUNT(DISTINCT nationality) FROM conductor;
SELECT name FROM    conductor ORDER BY    year_of_work DESC;
SELECT conductor.name FROM      conductor ORDER BY      conductor.year_of_work DESC;
SELECT conductor.name FROM   conductor ORDER BY   conductor.year_of_work DESC LIMIT 1;
SELECT c.name  FROM conductor c  GROUP BY c.name  HAVING MAX(c.year_of_work) - MIN(c.year_of_work) = (     SELECT MAX(years_worked)          FROM (                  SELECT MAX(c2.year_of_work) - MIN(c2.year_of_work) as years_worked                 FROM conductor c2                  GROUP BY c2.name          ) );
SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;
SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;
SELECT conductor.name FROM     conductor JOIN     orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY     conductor.name HAVING     COUNT(DISTINCT orchestra.orchestra_id) > 1;
SELECT conductor.name     FROM conductor     WHERE conductor_id IN (         SELECT conductor_id         FROM orchestra         GROUP BY conductor_id         HAVING COUNT(DISTINCT orchestra_id) > 1     );
SELECT name FROM conductor WHERE conductor_id = (     SELECT conductor_id     FROM orchestra     GROUP BY conductor_id     ORDER BY COUNT(DISTINCT orchestra) DESC     LIMIT 1 );
SELECT conductor.name  FROM  conductor  JOIN  orchestra  ON  conductor.conductor_id = orchestra.conductor_id  GROUP BY  conductor.conductor_id, conductor.name  ORDER BY  COUNT(DISTINCT orchestra.orchestra_id) DESC  LIMIT 1;
SELECT conductor.name FROM     conductor JOIN     orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE     orchestra.year_of_founded > 2008;
SELECT conductor.name FROM     conductor JOIN     orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE     orchestra.year_of_founded > 2008;
SELECT record_company, COUNT(orchestra)     FROM orchestra     GROUP BY record_company;
SELECT record_company, COUNT(orchestra) AS orchestra_count     FROM orchestra     GROUP BY record_company;
SELECT orchestra.major_record_format FROM    orchestra GROUP BY    orchestra.major_record_format ORDER BY    COUNT(*) ASC;
SELECT orchestra.major_record_format, COUNT(*) as frequency FROM     orchestra JOIN     performance ON     orchestra.orchestra_id = performance.orchestra_id GROUP BY     orchestra.major_record_format ORDER BY     frequency DESC;
SELECT orchestra.record_company     FROM orchestra     GROUP BY orchestra.record_company     ORDER BY COUNT(orchestra.orchestra_id) DESC     LIMIT 1;
SELECT record_company FROM     orchestra GROUP BY     record_company ORDER BY     COUNT(orchestra) DESC LIMIT 1;
SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN (     SELECT         orchestra_id     FROM         performance )
SELECT orchestra.orchestra     FROM     orchestra     LEFT JOIN performance ON orchestra.orchestra_id = performance.orchestra_id     WHERE     performance.performance_id IS NULL;
SELECT record_company     FROM      orchestra     WHERE      year_of_founded < 2003     INTERSECT     SELECT      record_company     FROM      orchestra     WHERE      year_of_founded > 2003;
SELECT DISTINCT record_company FROM     orchestra WHERE     year_of_founded < 2003    AND record_company IN (       SELECT record_company       FROM orchestra       WHERE year_of_founded > 2003    );
SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format IN ('CD', 'DVD');
SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format IN ('CD', 'DVD');
SELECT year_of_founded FROM     orchestra WHERE     orchestra_id IN (         SELECT             orchestra_id         FROM             performance         GROUP BY             orchestra_id         HAVING             COUNT(*) > 1     )
SELECT orchestra.year_of_founded FROM     orchestra WHERE     orchestra.orchestra_id IN (         SELECT             orchestra_id         FROM             performance         GROUP BY             orchestra_id         HAVING             COUNT(*) > 1     );
SELECT COUNT(*) FROM highschooler;
SELECT COUNT(*)  FROM highschooler;
SELECT name, grade     FROM highschooler;
SELECT name, grade FROM highschooler
SELECT grade FROM     highschooler;
SELECT grade FROM highschooler;
SELECT grade FROM highschooler WHERE name = 'Kyle';
SELECT grade FROM highschooler WHERE name = 'Kyle';
SELECT name FROM     highschooler WHERE     grade = 10;
SELECT name FROM    highschooler WHERE    grade = 10;
SELECT id FROM highschooler WHERE name = 'Kyle';
SELECT id FROM    highschooler WHERE    name = 'Kyle';
SELECT COUNT(*) FROM     highschooler WHERE     grade IN (9, 10);
SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);
SELECT grade, COUNT(*) as count     FROM highschooler     GROUP BY grade;
SELECT grade, COUNT(name)     FROM highschooler     GROUP BY grade;
SELECT grade FROM     highschooler GROUP BY     grade ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT grade FROM     highschooler GROUP BY     grade ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT highschooler.id, COUNT(friend.friend_id) as num_friends FROM highschooler JOIN friend ON friend.student_id = highschooler.id GROUP BY highschooler.id;
SELECT friend.student_id, COUNT(friend.friend_id) AS num_friends  FROM friend  GROUP BY friend.student_id;
SELECT highschooler.name, COUNT(DISTINCT friend.friend_id) AS number_of_friends  FROM  highschooler  LEFT JOIN  friend  ON  highschooler.id = friend.student_id  GROUP BY  highschooler.id, highschooler.name;
SELECT highschooler.name, COUNT(friend.friend_id)  FROM  highschooler  LEFT JOIN  friend  ON  friend.student_id = highschooler.id  GROUP BY  highschooler.id, highschooler.name;
SELECT name FROM  highschooler WHERE  id IN (    SELECT      student_id    FROM      friend    GROUP BY      student_id    ORDER BY      COUNT(friend_id) DESC    LIMIT 1  );
SELECT name FROM     highschooler WHERE     id IN (         SELECT             student_id         FROM             friend         GROUP BY             student_id         ORDER BY             COUNT(friend_id) DESC         LIMIT 1     );
SELECT name FROM highschooler WHERE id IN (     SELECT student_id     FROM friend     GROUP BY student_id     HAVING COUNT(friend_id) >= 3 );
SELECT name     FROM highschooler     WHERE id IN (         SELECT student_id         FROM friend         GROUP BY student_id         HAVING COUNT(*) >= 3     );
SELECT f.name  FROM  highschooler h  JOIN friend fr ON h.id = fr.student_id  JOIN highschooler f ON fr.friend_id = f.id  WHERE h.name = 'Kyle';
SELECT highschooler.name  FROM  highschooler   JOIN  friend  ON  friend.friend_id = highschooler.id   WHERE  friend.student_id = (     SELECT      id      FROM      highschooler      WHERE      name = 'Kyle' );
SELECT COUNT(*) FROM   friend WHERE   student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT highschooler.id FROM highschooler WHERE id NOT IN ( SELECT friend.student_id FROM friend )
SELECT highschooler.id FROM highschooler WHERE highschooler.id NOT IN (     SELECT         friend.student_id     FROM         friend )
SELECT name FROM     highschooler WHERE     id NOT IN (         SELECT             student_id         FROM             friend     );
SELECT name  FROM  highschooler  WHERE  id NOT IN (SELECT friend_id FROM friend)  AND  id NOT IN (SELECT student_id FROM friend);
SELECT h.id FROM highschooler h  WHERE EXISTS (SELECT 1 FROM friend f WHERE f.friend_id = h.id)  AND EXISTS (SELECT 1 FROM likes l WHERE l.liked_id = h.id AND l.student_id != h.id);
SELECT DISTINCT friend.student_id  FROM  friend  INNER JOIN likes ON friend.student_id = likes.student_id  WHERE  friend.student_id IN (SELECT student_id FROM friend)  AND  friend.student_id IN (SELECT liked_id FROM likes);
SELECT DISTINCT h1.name   FROM highschooler h1  JOIN friend f ON f.student_id = h1.id  JOIN likes l ON l.liked_id = h1.id  WHERE h1.id IN (SELECT friend_id FROM friend)  AND h1.id IN (SELECT liked_id FROM likes);
SELECT h.name   FROM highschooler h   WHERE EXISTS (SELECT 1 FROM friend f WHERE f.student_id = h.id)  AND EXISTS (SELECT 1 FROM likes l WHERE l.liked_id = h.id);
SELECT student_id, COUNT(*) as num_likes FROM likes GROUP BY student_id;
SELECT highschooler.id, COUNT(*) FROM     likes JOIN     highschooler ON     likes.student_id = highschooler.id GROUP BY     highschooler.id;
SELECT highschooler.name, COUNT(likes.liked_id) AS num_likes  FROM  highschooler  JOIN  likes  ON  highschooler.id = likes.student_id  GROUP BY  highschooler.name;
SELECT highschooler.name, COUNT(likes.liked_id) AS num_likes   FROM highschooler   JOIN likes ON likes.student_id = highschooler.id   GROUP BY highschooler.name;
SELECT name     FROM highschooler     WHERE id IN (       SELECT student_id       FROM likes       GROUP BY student_id       ORDER BY COUNT(*) DESC       LIMIT 1     );
SELECT highschooler.name FROM     highschooler JOIN     likes ON highschooler.id = likes.student_id GROUP BY     highschooler.id ORDER BY     COUNT(likes.liked_id) DESC LIMIT 1;
SELECT highschooler.name FROM     highschooler JOIN     likes ON likes.student_id = highschooler.id GROUP BY     highschooler.id HAVING     COUNT(likes.liked_id) >= 2;
SELECT highschooler.name  FROM  highschooler  JOIN likes ON likes.student_id = highschooler.id  GROUP BY highschooler.name  HAVING COUNT(likes.liked_id) >= 2;
SELECT highschooler.name  FROM highschooler  WHERE highschooler.grade > 5  AND highschooler.id IN (SELECT friend.student_id                          FROM friend                          GROUP BY friend.student_id                          HAVING COUNT(friend.friend_id) >= 2);
SELECT highschooler.name FROM     highschooler JOIN     friend ON friend.student_id = highschooler.id WHERE     highschooler.grade > 5 GROUP BY     highschooler.id HAVING     COUNT(DISTINCT friend.friend_id) >= 2;
SELECT COUNT(*) FROM     likes WHERE     student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM likes INNER JOIN highschooler ON likes.liked_id = highschooler.id WHERE highschooler.name = 'Kyle';
SELECT AVG(grade)  FROM highschooler  WHERE id IN (SELECT student_id FROM friend)
SELECT AVG(grade) FROM highschooler WHERE EXISTS (   SELECT *   FROM friend   WHERE friend.student_id = highschooler.id )
SELECT MIN(grade) FROM highschooler WHERE id NOT IN (   SELECT student_id   FROM friend )
SELECT MIN(grade) FROM highschooler WHERE id NOT IN (     SELECT student_id     FROM friend )
SELECT DISTINCT owners.state  FROM  owners INNER JOIN professionals ON owners.state = professionals.state
SELECT state FROM     owners INTERSECT SELECT     state FROM     professionals;
SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)
SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)
SELECT professionals.professional_id, professionals.last_name, professionals.cell_number     FROM professionals     WHERE professionals.state = 'Indiana'     OR professionals.professional_id IN (         SELECT professional_id         FROM treatments         GROUP BY professional_id         HAVING COUNT(*) > 2     );
SELECT professionals.professional_id, professionals.last_name, professionals.cell_number FROM professionals WHERE professionals.state = 'Indiana' OR (SELECT COUNT(*) FROM treatments WHERE treatments.professional_id = professionals.professional_id) > 2;
SELECT dogs.name  FROM  dogs  WHERE  dogs.dog_id NOT IN (     SELECT      treatments.dog_id      FROM      treatments      WHERE      treatments.cost_of_treatment > 1000 )
SELECT dogs.name   FROM dogs   LEFT JOIN treatments ON treatments.dog_id = dogs.dog_id   GROUP BY dogs.name   HAVING SUM(COALESCE(treatments.cost_of_treatment, 0)) <= 1000;
SELECT DISTINCT first_name  FROM  (     SELECT first_name FROM professionals      UNION      SELECT first_name FROM owners )  EXCEPT  SELECT dog_name AS first_name FROM dogs;
SELECT DISTINCT first_name FROM professionals WHERE first_name NOT IN (SELECT first_name FROM owners) UNION SELECT DISTINCT first_name FROM owners WHERE first_name NOT IN (SELECT name FROM dogs)
SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals WHERE professionals.professional_id NOT IN (   SELECT professional_id   FROM treatments )
SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals WHERE professionals.professional_id NOT IN (SELECT professional_id FROM treatments);
SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id, owners.first_name, owners.last_name ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;
SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT professionals.professional_id, professionals.role_code, professionals.first_name FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY professionals.professional_id HAVING COUNT(treatments.professional_id) >= 2;
SELECT professional_id, role_code, first_name FROM professionals WHERE professional_id IN (     SELECT professional_id     FROM treatments     GROUP BY professional_id     HAVING COUNT(*) >= 2 );
SELECT breeds.breed_name FROM     dogs JOIN     breeds ON dogs.breed_code = breeds.breed_code GROUP BY     breeds.breed_name ORDER BY     COUNT(dogs.name) DESC LIMIT 1;
SELECT breeds.breed_name FROM     breeds JOIN     dogs ON breeds.breed_code = dogs.breed_code GROUP BY     breeds.breed_name ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT owners.owner_id, owners.last_name     FROM owners     JOIN dogs ON dogs.owner_id = owners.owner_id     JOIN treatments ON treatments.dog_id = dogs.dog_id     GROUP BY owners.owner_id, owners.last_name     ORDER BY COUNT(treatments.cost_of_treatment) DESC     LIMIT 1;
SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;
SELECT treatment_types.treatment_type_description FROM     treatment_types WHERE     treatment_types.treatment_type_code IN (         SELECT             treatment_type_code         FROM             treatments         GROUP BY             treatment_type_code         HAVING             SUM(cost_of_treatment) = (                 SELECT                     MIN(total_cost)                 FROM                     (                         SELECT                             SUM(cost_of_treatment) AS total_cost                         FROM                             treatments                         GROUP BY                             treatment_type_code                     )             )     );
SELECT treatment_types.description AS treatment_type_description   FROM treatment_types  JOIN treatments  ON treatment_types.treatment_type_code = treatments.treatment_type_code   GROUP BY treatment_types.description   HAVING SUM(treatments.cost_of_treatment) =  (SELECT MIN(total_cost) FROM (SELECT SUM(cost_of_treatment) AS total_cost FROM treatments GROUP BY treatment_type_code)) ORDER BY SUM(treatments.cost_of_treatment) ASC LIMIT 1;
SELECT owners.owner_id,  owners.zip_code  FROM  owners  JOIN  dogs  ON  dogs.owner_id = owners.owner_id  GROUP BY  owners.owner_id,  owners.zip_code  ORDER BY  SUM(dogs.amount_paid) DESC  LIMIT 1;   Note: The above SQL assumes that there is a column 'amount_paid' in the 'dogs' table. If there is no such column, this query will still have an error. The 'amount_paid' column represents the amount of money each owner has paid for their dogs. If there is no such column, the problem can't be solved with the provided tables and columns.
SELECT owners.owner_id, owners.zip_code     FROM owners     JOIN dogs ON owners.owner_id = dogs.owner_id     JOIN treatments ON dogs.dog_id = treatments.dog_id     GROUP BY owners.owner_id, owners.zip_code     ORDER BY SUM(treatments.cost_of_treatment) DESC     LIMIT 1;
SELECT professionals.professional_id, professionals.cell_number  FROM  professionals  INNER JOIN  treatments  ON  professionals.professional_id = treatments.professional_id  GROUP BY  professionals.professional_id, professionals.cell_number  HAVING  COUNT(DISTINCT treatments.treatment_type_code) >= 2;
SELECT professionals.professional_id,  professionals.cell_number   FROM professionals   INNER JOIN treatments  ON treatments.professional_id = professionals.professional_id   GROUP BY professionals.professional_id, professionals.cell_number   HAVING COUNT(DISTINCT treatments.treatment_type_code) >= 2;
SELECT professionals.first_name, professionals.last_name  FROM  professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE  treatments.cost_of_treatment < (     SELECT      AVG(cost_of_treatment)      FROM      treatments );
SELECT first_name, last_name   FROM professionals   WHERE professional_id IN (               SELECT professional_id               FROM treatments               WHERE cost_of_treatment < (                           SELECT AVG(cost_of_treatment)                           FROM treatments               ) );
SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id;
SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id;
SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description FROM     treatments JOIN     treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT owners.first_name, owners.last_name, dogs.size_code  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id;
SELECT owners.first_name,     owners.last_name,     sizes.size_code FROM     owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code;
SELECT owners.first_name, dogs.name FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id;
SELECT dogs.name, treatments.date_of_treatment  FROM  dogs  JOIN  breeds ON dogs.breed_code = breeds.breed_code  JOIN  treatments ON treatments.dog_id = dogs.dog_id  WHERE  dogs.breed_code =      (SELECT      breed_code      FROM      dogs      GROUP BY      breed_code      ORDER BY      COUNT(*) ASC      LIMIT 1);
SELECT dogs.name, treatments.date_of_treatment  FROM dogs  JOIN breeds ON dogs.breed_code = breeds.breed_code  JOIN treatments ON dogs.dog_id = treatments.dog_id  WHERE breeds.breed_code IN (     SELECT breed_code          FROM dogs         GROUP BY breed_code          HAVING COUNT(*) = (         SELECT MIN(breed_count)          FROM (             SELECT COUNT(*) as breed_count             FROM dogs             GROUP BY breed_code         )     ) )
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.owner_id IN (SELECT owner_id FROM owners WHERE owner_id IN (SELECT owner_id FROM owners WHERE state = 'Virginia'));
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'Virginia';
SELECT dogs.date_arrived, dogs.date_departed   FROM dogs   INNER JOIN treatments ON dogs.dog_id = treatments.dog_id   WHERE dogs.date_arrived IS NOT NULL AND dogs.date_departed IS NOT NULL;
SELECT dogs.date_arrived,  dogs.date_departed   FROM  dogs   INNER JOIN  treatments  ON  dogs.dog_id = treatments.dog_id  WHERE  treatments.treatment_id IS NOT NULL;
SELECT owners.last_name               FROM owners               INNER JOIN dogs ON dogs.owner_id = owners.owner_id               WHERE dogs.date_of_birth = (SELECT MAX(date_of_birth) FROM dogs);
SELECT owners.last_name  FROM  owners  JOIN  dogs  ON  owners.owner_id = dogs.owner_id  WHERE  dogs.date_of_birth = (SELECT MAX(date_of_birth) FROM dogs);
SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';
SELECT professionals.email_address FROM      professionals WHERE      professionals.state = 'Hawaii' OR professionals.state = 'Wisconsin';
SELECT dogs.date_arrived, dogs.date_departed FROM dogs;
SELECT date_arrived, date_departed FROM dogs
SELECT COUNT(DISTINCT dogs.dog_id) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id;
SELECT COUNT(DISTINCT dog_id) FROM treatments;
SELECT COUNT(DISTINCT professional_id) FROM treatments
SELECT COUNT(DISTINCT professional_id) FROM treatments
SELECT professionals.role_code, professionals.street, professionals.city, professionals.state FROM professionals WHERE professionals.city LIKE '%West%'
SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%';
SELECT owners.first_name, owners.last_name, owners.email_address FROM owners WHERE owners.state LIKE '%North%';
SELECT owners.first_name, owners.last_name, owners.email_address FROM owners WHERE owners.state LIKE '%North%';
SELECT COUNT(*)  FROM dogs  WHERE age < (SELECT AVG(age) FROM dogs);
SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs);
SELECT treatments.cost_of_treatment FROM treatments ORDER BY treatments.date_of_treatment DESC LIMIT 1;
SELECT cost_of_treatment FROM     treatments ORDER BY     date_of_treatment DESC LIMIT 1;
SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments);
SELECT COUNT(DISTINCT dogs.owner_id) FROM dogs LEFT JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.dog_id IS NULL;
SELECT COUNT(DISTINCT owner_id) FROM owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM dogs)
SELECT COUNT(DISTINCT owner_id) FROM owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM dogs)
SELECT COUNT(DISTINCT professional_id) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments);
SELECT COUNT(DISTINCT professional_id) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments);
SELECT dogs.name, dogs.age, dogs.weight FROM     dogs WHERE     dogs.abandoned_yn = 1;
SELECT dogs.name, dogs.age, dogs.weight FROM dogs WHERE dogs.abandoned_yn = 1;
SELECT AVG(age) FROM dogs;
SELECT AVG(age) AS average_age FROM dogs;
SELECT MAX(age) AS oldest_age FROM dogs;
SELECT MAX(age) FROM dogs;
SELECT charge_type, charge_amount FROM charges;
SELECT charge_type, charge_amount FROM charges;
SELECT MAX(charge_amount) FROM charges;
SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1;
SELECT professionals.email_address, professionals.cell_number, professionals.home_phone     FROM professionals;
SELECT professionals.email_address, professionals.cell_number, professionals.home_phone FROM professionals;
SELECT breeds.breed_name, sizes.size_description FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN sizes ON dogs.size_code = sizes.size_code GROUP BY breeds.breed_name, sizes.size_description;
SELECT DISTINCT dogs.breed_code, dogs.size_code FROM dogs
SELECT professionals.first_name,  treatment_types.treatment_type_description  FROM  professionals  INNER JOIN treatments ON professionals.professional_id = treatments.professional_id  INNER JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT professionals.first_name,  treatments.description AS treatment_type_description  FROM professionals  JOIN treatments  ON professionals.professional_id = treatments.professional_id;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*)  FROM singer;
SELECT singer.name FROM     singer ORDER BY     singer.net_worth_millions ASC;
SELECT name FROM     singer ORDER BY     net_worth_millions ASC;
SELECT birth_year, citizenship FROM singer;
SELECT birth_year, citizenship     FROM      singer;
SELECT name FROM singer WHERE citizenship <> 'France';
SELECT name   FROM  singer   WHERE  citizenship != 'French';
SELECT singer.name FROM singer WHERE singer.birth_year = 1948 OR singer.birth_year = 1949;
SELECT name     FROM singer     WHERE birth_year = 1948 OR birth_year = 1949;
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;
SELECT name     FROM singer     ORDER BY net_worth_millions DESC     LIMIT 1;
SELECT DISTINCT citizenship, COUNT(singer_id) FROM singer GROUP BY citizenship;
SELECT citizenship,     COUNT(*) AS count FROM     singer GROUP BY     citizenship;
SELECT citizenship FROM     singer GROUP BY     citizenship ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT citizenship FROM     singer GROUP BY     citizenship ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship;
SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship;
SELECT song.title, singer.name FROM     song JOIN     singer ON song.singer_id = singer.singer_id;
SELECT song.title, singer.name FROM song INNER JOIN singer ON song.singer_id = singer.singer_id;
SELECT DISTINCT singer.name FROM     singer JOIN     song ON song.singer_id = singer.singer_id WHERE     song.sales > 300000;
SELECT DISTINCT singer.name  FROM singer  JOIN song ON song.singer_id = singer.singer_id  WHERE song.sales > 300000;
SELECT singer.name  FROM  singer  JOIN  (     SELECT      singer_id      FROM      song      GROUP BY      singer_id      HAVING      COUNT(song_id) > 1 ) temp ON singer.singer_id = temp.singer_id;
SELECT singer.name FROM     singer JOIN     song ON singer.singer_id = song.singer_id GROUP BY     singer.name HAVING     COUNT(song.song_id) > 1;
SELECT singer.name, SUM(song.sales) AS total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name;
SELECT singer.name,      SUM(song.sales) AS total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name;
SELECT singer.name FROM   singer LEFT JOIN   song ON singer.singer_id = song.singer_id WHERE   song.song_id IS NULL;
SELECT s.name FROM singer s WHERE s.singer_id NOT IN (     SELECT singer_id     FROM song );
SELECT s.citizenship   FROM singer AS s   WHERE s.birth_year < 1945   INTERSECT   SELECT s.citizenship   FROM singer AS s   WHERE s.birth_year > 1955;
SELECT citizenship FROM singer WHERE birth_year < 1945 INTERSECT SELECT citizenship FROM singer WHERE birth_year > 1955;
SELECT COUNT(*) AS total_available_features FROM other_available_features;
SELECT ref_feature_types.feature_type_name FROM    other_available_features JOIN    ref_feature_types ON    other_available_features.feature_type_code = ref_feature_types.feature_type_code WHERE    other_available_features.feature_name = 'AirCon';
SELECT ref_property_types.property_type_description  FROM  properties  JOIN  ref_property_types  ON  properties.property_type_code = ref_property_types.property_type_code  WHERE  properties.property_type_code = 'property_code';
SELECT properties.property_name   FROM properties   JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code   WHERE (ref_property_types.property_type_code = 'house' OR ref_property_types.property_type_code = 'apartment')   AND properties.room_count > 1;
