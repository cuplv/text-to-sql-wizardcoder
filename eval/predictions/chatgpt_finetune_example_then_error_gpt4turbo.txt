SELECT count ( * ) from singer;
SELECT count ( * ) from singer;
SELECT name , country , age from singer order by age desc;
SELECT name , country , age from singer order by age desc;
SELECT avg ( age ), min ( age ), max ( age ) from singer where country = 'France';
SELECT avg ( age ), min ( age ), max ( age ) from singer where country = 'France';
SELECT s.name, s.song_release_year FROM singer s INNER JOIN singer_in_concert sic ON s.singer_id = sic.singer_id ORDER BY s.age ASC LIMIT 1;
SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer);
SELECT distinct country from singer where age > 20;
SELECT distinct country from singer where age > 20;
SELECT country , count ( * ) from singer group by country;
SELECT country, count(*) FROM singer GROUP BY country;
SELECT song.song_name FROM song JOIN singer ON song.singer_id = singer.singer_id WHERE singer.age > (SELECT AVG(age) FROM singer);
SELECT song_name from singer where age > ( select avg ( age ) from singer );
SELECT location , name from stadium where capacity between 5000 and 10000;
SELECT location , name from stadium where capacity between 5000 and 10000;
SELECT MAX(capacity), AVG(capacity) FROM stadium;
SELECT AVG(capacity) AS "avg(capacity)", MAX(capacity) AS "max(capacity)" FROM stadium;
SELECT name, capacity from stadium order by average desc limit 1;
SELECT name, capacity from stadium order by average desc limit 1;
SELECT count ( * ) from concert where year = 2014 or year = 2015;
SELECT count ( * ) from concert where year = 2014 or year = 2015;
SELECT stadium.name , count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id group by concert.stadium_id;
SELECT stadium.name, count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id group by concert.stadium_id;
SELECT stadium.name, stadium.capacity from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year >= 2014 group by stadium.stadium_id order by count ( * ) desc limit 1;
SELECT stadium.name, stadium.capacity from concert join stadium on concert.stadium_id = stadium.stadium_id group by concert.stadium_id having count ( * ) > 1 order by count ( * ) desc limit 1;
SELECT year from concert group by year order by count ( * ) desc limit 1;
SELECT year from concert group by year order by count ( * ) desc limit 1;
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT DISTINCT stadium_id FROM concert);
SELECT name from stadium where stadium_id not in ( select stadium_id from concert );
SELECT country from singer where age > 40 intersect select country from singer where age < 30;
SELECT name from stadium except select stadium.name from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014;
SELECT s.name FROM stadium s LEFT JOIN concert c ON s.stadium_id = c.stadium_id AND c.year = 2014 WHERE c.concert_id IS NULL;
SELECT concert.concert_name, concert.theme, count ( * ) from concert join singer_in_concert on concert.concert_id = singer_in_concert.concert_id group by concert.concert_id;
SELECT concert.concert_name , concert.theme , count ( * ) from concert join singer_in_concert on concert.concert_id = singer_in_concert.concert_id group by concert.concert_id;
SELECT singer.name , count ( * ) from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id group by singer.singer_id;
SELECT singer.name, COUNT(singer_in_concert.concert_id) AS number_of_concerts FROM singer LEFT JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name, singer.singer_id;
SELECT singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014;
SELECT singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014;
SELECT name, country from singer where song_name like '%Hey%';
SELECT name, country from singer where song_name like '%Hey%';
SELECT stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where year = 2014 intersect select stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where year = 2015;
SELECT stadium.name, stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014 intersect select stadium.name, stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2015;
SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1);
SELECT count ( * ) from stadium join concert on stadium.stadium_id = concert.stadium_id where capacity = ( select max ( capacity ) from stadium );
SELECT count ( * ) from pets where weight > 10;
SELECT count ( * ) from pets where weight > 10;
SELECT weight FROM pets ORDER BY pet_age ASC LIMIT 1;
SELECT weight FROM pets ORDER BY pet_age ASC LIMIT 1;
SELECT max ( weight ), pettype from pets group by pettype;
SELECT max ( weight ), pettype from pets group by pettype;
SELECT count ( * ) from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where student.age > 20;
SELECT count ( * ) from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where student.age > 20;
SELECT count ( * ) from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where pets.pettype = 'dog' and student.sex = 'F';
SELECT COUNT(*) FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE lower(student.sex) = 'female' AND lower(pets.pettype) = 'dog';
SELECT count ( distinct pettype ) from pets;
SELECT count ( distinct pettype ) from pets;
SELECT DISTINCT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype IN ('cat', 'dog'));
SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype IN ('cat', 'dog');
SELECT student.fname from has_pet join student on has_pet.stuid = student.stuid where petid = 'cat' intersect select student.fname from has_pet join student on has_pet.stuid = student.stuid where petid = 'dog';
SELECT student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' intersect select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'dog';
SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat');
SELECT DISTINCT student.major, student.age  FROM student  WHERE student.id NOT IN (     SELECT has_pet.student_id     FROM has_pet     JOIN pets ON has_pet.petid = pets.petid     WHERE pets.pettype = 'cat' );
SELECT DISTINCT student.stuid FROM student LEFT JOIN ( SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' ) AS students_with_cats ON student.stuid = students_with_cats.stuid WHERE students_with_cats.stuid IS NULL;
SELECT DISTINCT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat');
SELECT student.fname, student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'dog' AND student.stuid NOT IN ( SELECT student.stuid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' );
SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' AND student.stuid NOT IN ( SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' );
SELECT pettype, weight FROM pets ORDER BY pet_age ASC LIMIT 1;
SELECT pettype, weight from pets order by pet_age asc limit 1;
SELECT petid, weight from pets where pet_age > 1;
SELECT petid, weight from pets where pet_age > 1;
SELECT avg ( pet_age ), max ( pet_age ), pettype from pets group by pettype ;
SELECT avg ( pet_age ), max ( pet_age ), pettype from pets group by pettype;
SELECT avg ( weight ), pettype from pets group by pettype;
SELECT avg ( weight ), pettype from pets group by pettype;
SELECT distinct student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid;
SELECT distinct student.fname , student.age from has_pet join student on has_pet.stuid = student.stuid;
SELECT pets.petid from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where student.lname = 'Smith';
SELECT pets.petid from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where student.lname = 'Smith';
SELECT count ( * ), stuid from has_pet group by stuid;
SELECT count ( * ) , has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid group by has_pet.stuid;
SELECT student.fname , student.sex from has_pet join student on has_pet.stuid = student.stuid group by has_pet.stuid having count ( * ) > 1 ;
SELECT student.fname, student.sex FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid HAVING COUNT(has_pet.petid) > 1;
SELECT s.lname FROM student AS s JOIN pets AS p ON s.stuid = p.owner_id WHERE p.pettype = 'cat' AND p.pet_age = 3;
SELECT student.lname from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where pets.pettype = 'cat' and pets.pet_age = 3;
SELECT avg ( age ) from student where stuid not in ( select stuid from has_pet );
SELECT avg ( age ) from student where stuid not in ( select stuid from has_pet );
SELECT count ( * ) from continents;
SELECT count ( * ) from continents;
SELECT continents.contid , continents.continent , count ( * ) from countries join continents on countries.continent = continents.contid group by countries.continent;
SELECT continents.contid , continents.continent , count ( * ) from countries join continents on countries.continent = continents.contid group by continents.contid;
SELECT count ( * ) from countries;
SELECT count ( * ) from countries;
SELECT car_makers.fullname , model_list.maker , count ( * ) from car_makers join model_list on car_makers.id = model_list.maker group by model_list.maker;
SELECT car_makers.fullname , model_list.maker , count ( * ) from car_makers join model_list on car_makers.id = model_list.maker group by model_list.maker;
SELECT car_names.model from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.horsepower asc limit 1;
SELECT car_names.model from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.horsepower asc limit 1;
SELECT car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.weight < ( select avg ( weight ) from cars_data );
SELECT car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.weight < ( select avg ( weight ) from cars_data );
SELECT DISTINCT car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970;
SELECT DISTINCT car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970;
SELECT car_names.make, cars_data.year FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.year = (SELECT MIN(year) FROM cars_data);
SELECT car_makers.fullname, cars_data.year FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = (SELECT MIN(year) FROM cars_data);
SELECT distinct model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where cars_data.year > 1980;
SELECT distinct car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.year > 1980;
SELECT continents.contid AS continent,;
SELECT continents.continent , count ( * ) from continents join countries on countries.continent = continents.contid join car_makers on countries.countryid = car_makers.country group by continents.continent;
SELECT countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname order by count ( * ) desc limit 1;
SELECT countries.countryname from countries join car_makers on countries.countryid = car_makers.country group by countries.countryname order by count ( * ) desc limit 1;
SELECT count ( * ), car_makers.fullname from car_makers join model_list on car_makers.id = model_list.maker group by model_list.maker;
SELECT COUNT(model_list.modelid) AS count, car_makers.fullname, car_makers.id FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id;
SELECT cd.accelerate FROM cars_data cd JOIN car_names cn ON cd.id = cn.makeid JOIN model_list ml ON cn.model = ml.modelid JOIN car_makers cm ON ml.maker = cm.id WHERE cn.model = 'amc hornet sportabout (sw)';
WHERE model_list.maker = 'amc' AND model_list.model = 'hornet sportabout (sw)';
SELECT count ( * ) from car_makers join countries on car_makers.country = countries.countryid where countries.countryname = 'france';
SELECT COUNT(DISTINCT maker) FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'France');
SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.country = 'USA';
SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'United States';
SELECT avg ( mpg ) from cars_data where cylinders = 4;
SELECT avg ( mpg ) from cars_data where cylinders = 4;
SELECT min ( weight ) from cars_data where cylinders = 8 and year = 1974;
SELECT min ( weight ) from cars_data where cylinders = 8 and year = 1974;
SELECT maker , model from model_list;
SELECT maker , model from model_list;
SELECT distinct countries.countryname , countries.countryid from countries join car_makers on countries.countryid = car_makers.country;
SELECT countries.countryname , countries.countryid from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) >= 1;
SELECT count ( * ) from cars_data where horsepower > 150;
SELECT count ( * ) from cars_data where horsepower > 150;
SELECT avg ( weight ), year from cars_data group by year;
SELECT avg ( weight ), year from cars_data group by year;
SELECT c.countryname FROM countries c JOIN car_makers cm ON c.countryname = cm.country JOIN continents ct ON c.continent = ct.continent WHERE ct.continent = 'Europe' GROUP BY c.countryname HAVING COUNT(DISTINCT cm.maker) >= 3;
SELECT countryname FROM countries JOIN continents ON countries.continent = continents.contid JOIN car_makers ON countries.countryid = car_makers.country WHERE continents.contid = (SELECT contid FROM continents WHERE continent = 'Europe') GROUP BY countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3;
SELECT MAX(cars_data.horsepower), car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.cylinders = 3;
SELECT MAX(cars_data.horsepower) AS max_horsepower, car_makers.fullname FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.maker WHERE cars_data.cylinders = 3 GROUP BY car_makers.fullname ORDER BY max_horsepower DESC LIMIT 1;
SELECT model FROM car_names WHERE makeid = (SELECT id FROM cars_data ORDER BY mpg DESC LIMIT 1);
SELECT model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id order by cars_data.mpg desc limit 1;
SELECT avg ( horsepower ) from cars_data where year < 1980;
SELECT avg ( horsepower ) from cars_data where year < 1980;
SELECT avg ( cars_data.edispl ) from cars_data join car_names on cars_data.id = car_names.makeid where car_names.model = 'volvo';
SELECT avg ( cars_data.edispl ) from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id where car_makers.maker = 'volvo';
SELECT max ( accelerate ), cylinders from cars_data group by cylinders;
SELECT max ( accelerate ), cylinders from cars_data group by cylinders;
SELECT model from car_names group by model order by count ( * ) desc limit 1;
SELECT model FROM car_names GROUP BY model ORDER BY COUNT(DISTINCT makeid) DESC LIMIT 1;
SELECT count ( * ) from cars_data where cylinders > 4;
SELECT count ( * ) from cars_data where cylinders > 4;
SELECT count ( * ) from cars_data where year = 1980;
SELECT count ( * ) from cars_data where year = 1980;
SELECT COUNT(DISTINCT model_list.model) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker WHERE car_makers.fullname = 'American Motor Company';
SELECT COUNT(DISTINCT model) FROM model_list WHERE maker = (SELECT id FROM car_makers WHERE fullname = 'American Motor Company');
SELECT car_makers.fullname, car_makers.id FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id HAVING COUNT(DISTINCT model_list.model) > 3;
SELECT car_makers.fullname, model_list.maker from car_makers join model_list on car_makers.id = model_list.maker group by model_list.maker having count ( * ) > 3;
SELECT DISTINCT model_list.model FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.model = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.fullname = 'General Motors' OR cars_data.weight > 3500;
SELECT DISTINCT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id LEFT JOIN cars_data ON model_list.modelid = cars_data.id WHERE car_makers.fullname = 'General Motors' OR cars_data.weight > 3500;
SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000;
SELECT distinct year from cars_data where weight < 4000 intersect select distinct year from cars_data where weight > 3000;
SELECT horsepower from cars_data order by accelerate desc limit 1;
SELECT horsepower from cars_data order by accelerate desc limit 1;
SELECT cars_data.cylinders from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where model_list.model = 'volvo' order by cars_data.accelerate asc limit 1;
SELECT cd.cylinders FROM cars_data AS cd JOIN car_names AS cn ON cd.id = cn.makeid JOIN model_list AS ml ON cn.model = ml.modelid JOIN car_makers AS cm ON ml.maker = cm.id WHERE cm.maker = 'volvo' ORDER BY cd.accelerate ASC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT accelerate FROM cars_data ORDER BY horsepower DESC LIMIT 1);
SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT accelerate FROM cars_data ORDER BY horsepower DESC LIMIT 1);
SELECT COUNT(*) FROM ( SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(car_makers.country) > 2 ) AS subquery;
SELECT COUNT(*) FROM ( SELECT country AS countryid FROM car_makers GROUP BY countryid HAVING COUNT(id) > 2 ) AS subquery;
SELECT count ( * ) from cars_data where cylinders > 6;
SELECT count ( * ) from cars_data where cylinders > 6;
SELECT car_names.model from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.cylinders = 4 order by cars_data.horsepower desc limit 1;
SELECT model_list.model FROM model_list JOIN cars_data ON model_list.model = cars_data.model;
SELECT car_names.makeid, car_names.make FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cylinders <= 3;
SELECT car_names.makeid , car_names.make from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.cylinders < 4 and cars_data.horsepower != ( select min ( horsepower ) from cars_data );
SELECT max ( mpg ) from cars_data where cylinders = 8 or year < 1980;
SELECT max ( mpg ) from cars_data where cylinders = 8 or year < 1980;
SELECT DISTINCT model_list.model FROM model_list JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id JOIN car_makers ON car_names.make = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.fullname != 'Ford Motor Company';
SELECT DISTINCT ml.model FROM model_list ml INNER JOIN car_makers cm ON ml.maker = cm.id INNER JOIN cars_data cd ON ml.modelid = cd.id WHERE cd.weight < 3500 AND cm.fullname != 'Ford Motor Company';
SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers);
SELECT countryname FROM countries WHERE countryid NOT IN ( SELECT country FROM car_makers WHERE country IS NOT NULL );
SELECT COUNT(*) FROM (SELECT car_makers.id FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id HAVING COUNT(DISTINCT model_list.model) >= 2 ) AS subquery WHERE subquery.id IS NOT NULL;
SELECT cm.id, cm.maker FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker JOIN car_names cn ON ml.model = cn.model JOIN cars_data cd ON cn.makeid = cd.id GROUP BY cm.id, cm.maker HAVING COUNT(DISTINCT ml.modelid) >= 2 AND COUNT(DISTINCT cd.id) > 3;
SELECT countries.countryid, countries.countryname FROM countries JOIN car_makers ON car_makers.country = countries.countryid LEFT JOIN model_list ON car_makers.id = model_list.maker LEFT JOIN car_names ON model_list.modelid = car_names.model GROUP BY countries.countryid, countries.countryname HAVING COUNT(DISTINCT car_makers.id) > 3 OR SUM(CASE WHEN model_list.model = 'fiat' THEN 1 ELSE 0 END) > 0;
SELECT DISTINCT countries.countryid, countries.countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country LEFT JOIN model_list ON car_makers.id = model_list.maker LEFT JOIN car_names ON model_list.modelid = car_names.model WHERE car_makers.maker = 'fiat' OR countries.countryid IN ( SELECT country FROM car_makers GROUP BY country HAVING COUNT(*) > 3 );
SELECT country from airlines where airline = 'JetBlue Airways';
SELECT country FROM airlines WHERE airline = 'JetBlue Airways';
SELECT abbreviation from airlines where airline = 'JetBlue Airways';
SELECT abbreviation FROM airlines WHERE name = 'JetBlue Airways';
SELECT airline, abbreviation from airlines where country = 'USA';
SELECT airline, abbreviation FROM airlines WHERE country = 'USA';
SELECT airportcode , airportname from airports where city = 'Anthony';
SELECT airportcode , airportname from airports where city = 'Anthony';
SELECT count ( * ) from airlines;
SELECT count ( * ) from airlines;
SELECT count ( * ) from airports;
SELECT count ( * ) from airports;
SELECT count ( * ) from flights;
SELECT count ( * ) from flights;
SELECT airline from airlines where abbreviation = 'UAL';
SELECT airline from airlines where abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines WHERE country = 'USA';
SELECT COUNT(*) FROM airlines WHERE country = 'USA';
SELECT city , country from airports where airportname = 'Alton';
SELECT city , country from airports where airportname = 'Alton';
SELECT airportname from airports where airportcode = 'AKO';
SELECT airportname from airports where airportcode = 'AKO';
SELECT airportname from airports where city = 'Aberdeen';
SELECT airportname from airports where city = 'Aberdeen';
SELECT count ( * ) from flights where sourceairport = 'APG';
SELECT count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen';
SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Athens';
SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Athens';
SELECT count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen';
SELECT count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen';
SELECT count ( * ) from airports join flights on airports.airportcode = flights.destairport where airports.city = 'Aberdeen';
SELECT count ( * ) from airports where city = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports AS source ON flights.sourceairport = source.airportcode JOIN airports AS dest ON flights.destairport = dest.airportcode WHERE TRIM(LOWER(source.city)) = 'aberdeen' AND TRIM(LOWER(dest.city)) = 'ashley';
SELECT COUNT(*) FROM flights f JOIN airports a1 ON f.sourceairport = a1.airportcode JOIN airports a2 ON f.destairport = a2.airportcode WHERE a1.city = 'Aberdeen' AND a2.city = 'Ashley';
SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.abbreviation = 'B6';
SELECT count ( * ) from flights join airlines on flights.airline = airlines.airline where airlines.airline = 'United Airlines' and flights.destairport = 'ASY';
SELECT count ( * ) from airports join flights on airports.airportcode = flights.destairport join airlines on flights.airline = airlines.abbreviation where airlines.airline = 'United Airlines' and airports.airportname = 'Asbury Park Ocean Twp';
SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';
SELECT count ( * ) from flights join airports on airports.airportcode = flights.sourceairport where airports.airportname = 'Ardmore Municipal Airport' and flights.airline = 'United Airlines';
SELECT count ( * ) from airports join flights on airports.airportcode = flights.destairport where airports.city = 'Aberdeen' and flights.airline = 'United Airlines';
SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode join airlines on flights.airline = airlines.abbreviation where airports.city = 'Aberdeen' and airlines.airline = 'United Airlines';
SELECT airports.city from airports join flights on airports.airportcode = flights.destairport group by airports.city order by count ( * ) desc limit 1;
SELECT airports.city from airports join flights on flights.destairport = airports.airportcode group by airports.city order by count ( * ) desc limit 1;
SELECT airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1;
SELECT airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1;
SELECT airportcode FROM flights GROUP BY airportcode ORDER BY COUNT(flight_id) DESC LIMIT 1;
SELECT airport, COUNT(*) as total_flights FROM ( SELECT destairport AS airport FROM flights UNION ALL SELECT sourceairport FROM flights ) AS combined GROUP BY airport ORDER BY total_flights DESC LIMIT 1;
SELECT airports.airportcode from airports join flights on flights.destairport = airports.airportcode group by airports.airportcode order by count ( * ) asc limit 1;
SELECT airportcode FROM airports WHERE airportcode IN ( SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1 ) UNION SELECT airportcode FROM airports WHERE airportcode IN ( SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) ASC LIMIT 1 );
SELECT airline, COUNT(*) AS number_of_flights FROM flights GROUP BY airline ORDER BY number_of_flights DESC LIMIT 1;
SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline ORDER BY num_flights DESC LIMIT 1;
SELECT al.abbreviation, al.country FROM airlines al JOIN ( SELECT f.airline, COUNT(*) AS flight_count FROM flights f GROUP BY f.airline ORDER BY flight_count ASC LIMIT 1 ) AS subq ON al.abbreviation = subq.airline;
SELECT a.abbreviation, a.country FROM airlines a LEFT JOIN flights f ON a.uid = f.airline GROUP BY a.abbreviation, a.country ORDER BY COUNT(f.flightno) ASC LIMIT 1;
SELECT distinct airlines.airline from airlines join flights on airlines.abbreviation = flights.airline join airports on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen';
SELECT airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'AHD';
SELECT distinct airlines.airline from airlines join flights on airlines.airline = flights.airline join airports on flights.sourceairport = airports.airportcode where flights.destairport = 'AHD';
SELECT distinct airline from flights where destairport = 'AHD';
SELECT airline from flights where destairport = 'APG' intersect select airline from flights where destairport = 'CVO';
SELECT airlines.airline from airlines join flights on airlines.airline = flights.airline join airports on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen' intersect select airlines.airline from airlines join flights on airlines.airline = flights.airline join airports on airports.airportcode = flights.sourceairport where airports.city = 'Corvallis';
SELECT airlines.airline from airlines join flights on airlines.abbreviation = flights.airline where flights.sourceairport = 'CVO' except select airlines.airline from airlines join flights on airlines.abbreviation = flights.airline where flights.sourceairport = 'APG';
SELECT airlines.airline from airlines join flights on airlines.airline = flights.airline join airports on airports.airportcode = flights.sourceairport where airports.city = 'Columbia' except select airlines.airline from airlines join flights on airlines.airline = flights.airline join airports on airports.airportcode = flights.sourceairport where airports.city = 'Marion';
SELECT airline FROM flights GROUP BY airline HAVING COUNT(DISTINCT flightno) >= 10;
SELECT airline FROM flights GROUP BY airline HAVING COUNT(flightno) >= 10;
SELECT a.airline FROM airlines AS a WHERE a.abbreviation NOT IN ( SELECT f.airline FROM flights AS f GROUP BY f.airline HAVING COUNT(*) >= 200 );
SELECT A.airline FROM airlines A JOIN ( SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline ) AS F ON A.abbreviation = F.airline WHERE F.num_flights < 200;
SELECT flightno FROM flights JOIN airlines ON flights.airline = airlines.abbreviation WHERE airlines.airline = 'United Airlines';
SELECT flightno FROM flights JOIN airlines ON flights.airline = airlines.abbreviation WHERE airlines.abbreviation = 'UA';
SELECT distinct flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.airportname = 'Phillips Army Air Field';
SELECT flightno FROM flights WHERE sourceairport = 'APG';
SELECT flightno from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Malabo';
SELECT flightno FROM flights WHERE dest = 'APG';
SELECT distinct flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen';
SELECT flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen';
SELECT flights.flightno from airports join flights on airports.airportcode = flights.destairport where airports.city = 'Aberdeen';
SELECT flightno from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen';
SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen' or airports.city = 'Abilene';
SELECT count ( * ) from airports where city = 'Aberdeen' or city = 'Abilene';
SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights) AND airportcode NOT IN (SELECT destairport FROM flights);
SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights) AND airportcode NOT IN (SELECT destairport FROM flights);
SELECT count ( * ) from employee;
SELECT count ( * ) from employee;
SELECT name from employee order by age asc;
SELECT name from employee order by age asc;
SELECT count ( * ), city from employee group by city;
SELECT count ( * ), city from employee group by city;
SELECT city from employee where age < 30 group by city having count ( * ) > 1;
SELECT city from employee where age < 30 group by city having count ( * ) > 1;
SELECT count ( * ), location from shop group by location;
SELECT count(*) AS count, location FROM shop GROUP BY location;
SELECT manager_name , district from shop order by number_products desc limit 1;
SELECT manager_name , district from shop order by number_products desc limit 1;
SELECT MIN(number_products), MAX(number_products) FROM shop;
SELECT MIN(number_products), MAX(number_products) FROM shop;
SELECT name, location, district from shop order by number_products desc;
SELECT name, location, district from shop order by number_products desc;
SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop);
SELECT name from shop where number_products > ( select avg ( number_products ) from shop );
SELECT employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by employee.employee_id order by count ( * ) desc limit 1;
SELECT employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by employee.employee_id order by count ( * ) desc limit 1;
SELECT employee.name from evaluation join employee on evaluation.employee_id = employee.employee_id order by evaluation.bonus desc limit 1;
SELECT employee.name from evaluation join employee on evaluation.employee_id = employee.employee_id order by evaluation.bonus desc limit 1;
SELECT name from employee where employee_id not in ( select employee_id from evaluation );
SELECT name from employee where employee_id not in ( select employee_id from evaluation );
SELECT shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by hiring.shop_id order by count ( * ) desc limit 1;
SELECT shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by hiring.shop_id order by count ( * ) desc limit 1;
SELECT name from shop where shop_id not in ( select shop_id from hiring );
SELECT name from shop where shop_id not in ( select shop_id from hiring );
SELECT count ( * ), shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by shop.name;
SELECT shop.name, COUNT(hiring.employee_id) AS number_of_employees FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name;
SELECT sum ( bonus ) from evaluation;
SELECT sum ( bonus ) from evaluation;
SELECT * from hiring;
SELECT * from hiring;
SELECT district from shop where number_products < 3000 intersect select district from shop where number_products > 10000;
SELECT location from shop where number_products < 3000 intersect select location from shop where number_products > 10000;
SELECT count ( distinct location ) from shop;
SELECT count ( distinct location ) from shop;
SELECT count ( * ) from documents;
SELECT count ( * ) from documents;
SELECT document_id, document_name, document_description from documents;
SELECT document_id , document_name , document_description from documents;
SELECT document_name, template_id from documents where document_description like '%w%';
SELECT document_name, template_id from documents where document_description like '%w%';
SELECT document_id , template_id , document_description from documents where document_name = 'Robbin CV';
SELECT document_id , template_id , document_description from documents where document_name = 'Robbin CV';
SELECT count ( distinct template_id ) from documents;
SELECT count ( distinct template_id ) from documents;
SELECT count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT';
SELECT count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT';
SELECT template_id , count ( * ) from documents group by template_id;
SELECT template_id , count ( * ) from documents group by template_id;
SELECT templates.template_id , templates.template_type_code from documents join templates on documents.template_id = templates.template_id group by documents.template_id order by count ( * ) desc limit 1;
SELECT t.template_id, t.template_type_code FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id, t.template_type_code ORDER BY COUNT(d.document_id) DESC LIMIT 1;
SELECT template_id from documents group by template_id having count ( * ) > 1;
SELECT template_id from documents group by template_id having count ( * ) > 1;
SELECT template_id from templates except select template_id from documents;
SELECT template_id from templates except select template_id from documents;
SELECT count ( * ) from templates;
SELECT count ( * ) from templates;
SELECT template_id , version_number , template_type_code from templates;
SELECT template_id , version_number , template_type_code from templates;
SELECT distinct template_type_code from templates;
SELECT distinct template_type_code from templates;
SELECT template_id from templates where template_type_code = 'PP' union select template_id from templates where template_type_code = 'PPT';
SELECT template_id from templates where template_type_code = 'PP' or template_type_code = 'PPT';
SELECT count ( * ) from templates where template_type_code = 'CV';
SELECT count ( * ) from templates where template_type_code = 'CV';
SELECT version_number , template_type_code from templates where version_number > 5;
SELECT version_number , template_type_code from templates where version_number > 5;
SELECT template_type_code , count ( * ) from templates group by template_type_code;
SELECT template_type_code , count ( * ) from templates group by template_type_code;
SELECT template_type_code from templates group by template_type_code order by count ( * ) desc limit 1;
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT template_type_code from templates group by template_type_code having count ( * ) < 3;
SELECT template_type_code from templates group by template_type_code having count ( * ) < 3;
SELECT min(version_number), template_type_code FROM templates GROUP BY template_type_code ORDER BY min(version_number) ASC LIMIT 1;
SELECT MIN(version_number), template_type_code FROM templates GROUP BY template_type_code ORDER BY MIN(version_number) ASC LIMIT 1;
SELECT templates.template_type_code from documents join templates on documents.template_id = templates.template_id where documents.document_name = 'Data base';
SELECT template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id WHERE document_name = 'Data base';
SELECT distinct documents.document_name from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'BK';
SELECT documents.document_name from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'BK';
SELECT template_type_code, count ( * ) from documents join templates on documents.template_id = templates.template_id group by templates.template_type_code;
SELECT template_type_code , count ( * ) from documents join templates on documents.template_id = templates.template_id group by templates.template_type_code;
SELECT templates.template_type_code from documents join templates on documents.template_id = templates.template_id group by templates.template_type_code order by count ( * ) desc limit 1;
SELECT templates.template_type_code from documents join templates on documents.template_id = templates.template_id group by templates.template_type_code order by count ( * ) desc limit 1;
SELECT template_type_code from templates except select ref_template_types.template_type_code from documents join templates on documents.template_id = templates.template_id join ref_template_types on templates.template_type_code = ref_template_types.template_type_code;
SELECT template_type_code FROM ref_template_types EXCEPT SELECT template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id;
SELECT template_type_code , template_type_description from ref_template_types;
SELECT template_type_code , template_type_description from ref_template_types;
SELECT template_type_description from ref_template_types where template_type_code = 'AD';
SELECT template_type_description from ref_template_types where template_type_code = 'AD';
SELECT template_type_code from ref_template_types where template_type_description = 'Book';
SELECT template_type_code from ref_template_types where template_type_description = 'Book';
SELECT distinct ref_template_types.template_type_description from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code join documents on documents.template_id = templates.template_id;
SELECT DISTINCT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id;
SELECT templates.template_id from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'Presentation';
SELECT templates.template_id from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'Presentation';
SELECT count ( * ) from paragraphs;
SELECT count ( * ) from paragraphs;
SELECT count ( * ) from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Summer Show';
SELECT count ( * ) from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Summer Show';
SELECT other_details from paragraphs where paragraph_text = 'Korea';
SELECT d.other_details FROM paragraphs p JOIN documents d ON p.document_id = d.document_id WHERE p.paragraph_text LIKE '%Korea%';
SELECT paragraph_id , paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Welcome to NY';
SELECT paragraphs.paragraph_id, paragraphs.paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Welcome to NY';
SELECT paragraphs.paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Customer reviews';
SELECT paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Customer reviews';
SELECT document_id , count ( * ) from paragraphs group by document_id order by document_id asc;
SELECT document_id , count ( * ) from paragraphs group by document_id order by document_id asc;
SELECT documents.document_id , documents.document_name , count ( * ) from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id;
SELECT documents.document_id , documents.document_name , count ( * ) from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id;
SELECT document_id from paragraphs group by document_id having count ( * ) >= 2;
SELECT document_id from paragraphs group by document_id having count ( * ) >= 2;
SELECT documents.document_id, documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count ( * ) desc limit 1;
SELECT documents.document_id , documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count ( * ) desc limit 1;
SELECT document_id from paragraphs group by document_id order by count ( * ) asc limit 1;
SELECT document_id from paragraphs group by document_id order by count ( * ) asc limit 1;
SELECT document_id from paragraphs group by document_id having count ( * ) between 1 and 2;
SELECT document_id from paragraphs group by document_id having count ( * ) between 1 and 2;
SELECT document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland';
SELECT documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id where paragraphs.paragraph_text like '%Brazil%' intersect select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id where paragraphs.paragraph_text like '%Ireland%';
SELECT count ( * ) from teacher;
SELECT count ( * ) from teacher;
SELECT name from teacher order by age asc;
SELECT name from teacher order by age asc;
SELECT age , hometown from teacher;
SELECT age , hometown from teacher;
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District';
SELECT name FROM teacher WHERE TRIM(LOWER(hometown)) <> LOWER('Little Lever Urban District');
SELECT name from teacher where age = 32 or age = 33;
SELECT name from teacher where age = 32 or age = 33;
SELECT hometown from teacher order by age asc limit 1;
SELECT hometown from teacher order by age asc limit 1;
SELECT hometown , count ( * ) from teacher group by hometown;
SELECT hometown, count ( * ) from teacher group by hometown;
SELECT hometown from teacher group by hometown order by count ( * ) desc limit 1;
SELECT hometown from teacher group by hometown order by count ( * ) desc limit 1;
SELECT hometown from teacher group by hometown having count ( * ) >= 2;
SELECT hometown from teacher group by hometown having count ( * ) >= 2;
SELECT teacher.name, course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id;
SELECT teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id;
SELECT teacher.name, course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc;
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC;
SELECT teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id join course on course_arrange.course_id = course.course_id where course.course = 'Math';
SELECT t.name FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id JOIN course c ON ca.course_id = c.course_id WHERE c.name = 'Math';
SELECT name, COUNT(*) FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name;
SELECT teacher.name, COUNT(course_arrange.course_id) FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name;
SELECT teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count ( * ) >= 2;
SELECT teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count ( * ) >= 2;
SELECT name from teacher where teacher_id not in ( select teacher_id from course_arrange );
SELECT name from teacher where teacher_id not in ( select teacher_id from course_arrange );
SELECT count ( * ) from visitor where age < 30;
SELECT name from visitor where level_of_membership > 4 order by level_of_membership desc;
SELECT avg ( age ) from visitor where level_of_membership <= 4;
SELECT name , level_of_membership from visitor where level_of_membership > 4 order by age desc;
SELECT museum_id , name from museum order by num_of_staff desc limit 1 ;
SELECT avg ( num_of_staff ) from museum where open_year < 2009;
SELECT num_of_staff, open_year FROM museum WHERE name = 'Plaza Museum';
SELECT name from museum where num_of_staff > ( select min ( num_of_staff ) from museum where open_year > 2010 );
SELECT visitor.id, visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visit.visitor_id, visit.museum_id HAVING COUNT(visit.visitor_id) > 1;
SELECT visitor.id, visitor.name, visitor.level_of_membership, SUM(visit.total_spent) AS total_spent FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.level_of_membership ORDER BY total_spent DESC LIMIT 1;
SELECT museum.museum_id, museum.name from museum join visit on museum.museum_id = visit.museum_id group by visit.museum_id order by count ( * ) desc limit 1;
SELECT name from museum where museum_id not in ( select museum_id from visit );
SELECT visitor.name, visitor.age from visitor join visit on visitor.id = visit.visitor_id order by visit.num_of_ticket desc limit 1;
SELECT avg ( num_of_ticket ), max ( num_of_ticket ) from visit;
SELECT sum(total_spent) FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership = 1;
SELECT visitor.name from visit join museum on visit.museum_id = museum.museum_id join visitor on visit.visitor_id = visitor.id where museum.open_year < 2009 intersect select visitor.name from visit join museum on visit.museum_id = museum.museum_id join visitor on visit.visitor_id = visitor.id where museum.open_year > 2011;
SELECT COUNT(DISTINCT id) FROM visitor WHERE id NOT IN ( SELECT DISTINCT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id WHERE open_year > 2010 );
SELECT count ( * ) from museum where open_year > 2013 or open_year < 2008;
SELECT count ( * ) from players;
SELECT count ( * ) from players;
SELECT count ( * ) from matches;
SELECT count ( * ) from matches;
SELECT DISTINCT p.first_name, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_ioc = 'USA';
SELECT first_name, birth_date FROM players WHERE country = 'USA';
SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;
SELECT AVG(loser_age), AVG(winner_age) FROM matches;
SELECT avg ( winner_rank ) from matches;
SELECT avg ( winner_rank ) from matches;
SELECT min(loser_rank) FROM matches;
SELECT min(loser_rank) FROM matches;
SELECT count ( distinct country_code ) from players;
SELECT count ( distinct country_code ) from players;
SELECT count ( distinct loser_name ) from matches;
SELECT count ( distinct loser_name ) from matches;
SELECT tourney_name from matches group by tourney_name having count ( * ) > 10;
SELECT tourney_name from matches group by tourney_name having count ( * ) > 10;
SELECT DISTINCT p.first_name, p.last_name FROM players p WHERE EXISTS ( SELECT 1 FROM matches m2013 WHERE m2013.year = 2013 AND m2013.winner_id = p.player_id ) AND EXISTS ( SELECT 1 FROM matches m2016 WHERE m2016.year = 2016 AND m2016.winner_id = p.player_id );
SELECT winner_name FROM matches WHERE year = 2013 INTERSECT SELECT winner_name FROM matches WHERE year = 2016;
SELECT count ( * ) from matches where year = 2013 or year = 2016;
SELECT count ( * ) from matches where year = 2013 or year = 2016;
SELECT DISTINCT p.country_code, p.first_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches m2 ON p.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open';
SELECT DISTINCT p.first_name, p.country_code FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open';
SELECT first_name, country_code FROM players ORDER BY date_of_birth ASC LIMIT 1;
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date;
SELECT first_name , last_name from players where hand = 'L' order by birth_date asc;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name, p.country_code ORDER BY SUM(r.tours) DESC LIMIT 1;
SELECT p.first_name, p.country_code FROM players AS p WHERE p.player_id = ( SELECT r.player_id FROM rankings AS r GROUP BY r.player_id ORDER BY SUM(r.tours) DESC LIMIT 1 );
SELECT year from matches group by year order by count ( * ) desc limit 1;
SELECT year from matches group by year order by count ( * ) desc limit 1;
SELECT winner_name , winner_rank_points from matches group by winner_id order by count ( * ) desc limit 1;
SELECT winner_name, winner_rank_points FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT winner_name from matches where tourney_name = 'Australian Open' order by winner_rank_points desc limit 1;
SELECT winner_name from matches where tourney_name = 'Australian Open' order by winner_rank_points desc limit 1;
SELECT winner_name , loser_name from matches order by minutes desc limit 1;
SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1;
SELECT players.first_name, AVG(rankings.ranking) AS avg_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;
SELECT players.first_name, AVG(rankings.ranking) AS avg_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;
SELECT players.first_name, SUM(rankings.ranking_points) AS sum_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;
SELECT first_name, SUM(ranking_points) AS sum_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, first_name;
SELECT count ( * ), country_code from players group by country_code;
SELECT count ( * ), country_code from players group by country_code;
SELECT country_code from players group by country_code order by count ( * ) desc limit 1;
SELECT country_code from players group by country_code order by count ( * ) desc limit 1;
SELECT country_code from players group by country_code having count ( * ) > 50;
SELECT country_code from players group by country_code having count ( * ) > 50;
SELECT ranking_date, SUM(COALESCE(tours, 0)) AS sum_tours FROM rankings GROUP BY ranking_date;
SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT year, COUNT(*) FROM matches GROUP BY year;
SELECT STRFTIME('%Y', DATETIME(tourney_date, 'unixepoch')) AS year, COUNT(*) AS match_count FROM matches GROUP BY year;
SELECT winner_name, winner_rank from matches order by winner_age asc limit 3;
SELECT winner_name, winner_rank from matches order by winner_age asc limit 3;
SELECT count(DISTINCT winner_id) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';
SELECT count(distinct winner_name) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE players.hand = 'L' AND matches.tourney_name = 'WTA Championships';
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN rankings r ON p.player_id = r.player_id ORDER BY r.ranking_points DESC LIMIT 1;
SELECT players.first_name, players.country_code, players.birth_date from players join matches on players.player_id = matches.winner_id order by matches.winner_rank_points desc limit 1;
SELECT hand, COUNT(*) AS player_count FROM players GROUP BY hand;
SELECT count ( * ), hand from players group by hand;
SELECT count ( * ) from ship where disposition_of_ship = 'Captured';
SELECT name, tonnage from ship order by name desc;
SELECT name, date FROM battle;
SELECT max ( killed ), min ( killed ) from death;
SELECT avg ( injured ) from death;
SELECT death.killed , death.injured from death join ship on death.caused_by_ship_id = ship.id where ship.tonnage = 't';
SELECT name , result from battle where bulgarian_commander != 'Boril';
SELECT distinct battle.id , battle.name from battle join ship on ship.lost_in_battle = battle.id where ship.ship_type = 'Brig';
SELECT battle.id , battle.name from battle join ship on ship.lost_in_battle = battle.id join death on death.caused_by_ship_id = ship.id group by battle.id having sum ( death.killed ) > 10;
SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1;
SELECT DISTINCT name FROM battle WHERE commander = 'Kaloyan' INTERSECT SELECT DISTINCT name FROM battle WHERE commander = 'Baldwin I';
SELECT count ( distinct result ) from battle;
SELECT count ( * ) from battle where id not in ( select lost_in_battle from ship where tonnage = 225 );
SELECT battle.name, battle.date from battle join ship on battle.id = ship.lost_in_battle where ship.name = 'Lettice' intersect select battle.name, battle.date from battle join ship on battle.id = ship.lost_in_battle where ship.name = 'HMS Atalanta';
SELECT b.name, b.result, b.bulgarian_commander FROM battle b WHERE NOT EXISTS ( SELECT 1 FROM ship s WHERE s.lost_in_battle = b.id AND s.location = 'English Channel' );
SELECT note from death where note like '%East%';
SELECT line_1, line_2 from addresses;
SELECT line_1, line_2 from addresses;
SELECT count ( * ) from courses;
SELECT count ( * ) from courses;
SELECT course_description FROM courses WHERE course_name = 'math';
SELECT course_description from courses where course_name = 'math';
SELECT zip_postcode from addresses where city = 'Port Chelsea';
SELECT zip_postcode from addresses where city = 'Port Chelsea';
SELECT departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1;
SELECT departments.department_name, degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1;
SELECT count ( distinct department_id ) from degree_programs;
SELECT count ( distinct department_id ) from degree_programs;
SELECT count ( distinct degree_summary_name ) from degree_programs;
SELECT count ( distinct degree_summary_name ) from degree_programs;
SELECT count ( * ) from departments join degree_programs on departments.department_id = degree_programs.department_id where departments.department_name = 'Engineering';
SELECT count ( * ) from degree_programs join departments on degree_programs.department_id = departments.department_id where departments.department_name = 'Engineering';
SELECT section_name, section_description from sections;
SELECT section_name, section_description from sections;
SELECT courses.course_name , courses.course_id from courses join sections on courses.course_id = sections.course_id group by sections.course_id having count ( * ) <= 2 ;
SELECT c.course_id, c.course_name FROM courses c WHERE ( SELECT COUNT(*) FROM sections s WHERE s.course_id = c.course_id ) < 2;
SELECT section_name from sections order by section_name desc;
SELECT section_name from sections order by section_name desc;
SELECT semesters.semester_name, student_enrolment.semester_id from student_enrolment join semesters on student_enrolment.semester_id = semesters.semester_id group by student_enrolment.semester_id order by count ( * ) desc limit 1;
SELECT semesters.semester_name, student_enrolment.semester_id from student_enrolment join semesters on student_enrolment.semester_id = semesters.semester_id group by student_enrolment.semester_id order by count ( * ) desc limit 1;
SELECT department_description from departments where department_name like '%computer%';
SELECT department_description from departments where department_name like '%computer%';
SELECT students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id having count ( * ) = 2;
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM students s JOIN ( SELECT student_id, semester_id FROM student_enrolment GROUP BY student_id, semester_id HAVING COUNT(DISTINCT degree_program_id) = 2 ) AS subq ON s.student_id = subq.student_id;
SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name LIKE 'Bachelor%' OR degree_summary_name LIKE 'BSc%' OR degree_summary_name LIKE 'BA%';
SELECT s.first_name, s.middle_name, s.last_name FROM students s JOIN degree_programs dp ON s.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE 'Bachelors%';
SELECT degree_programs.degree_summary_name from student_enrolment join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id group by degree_programs.degree_summary_name order by count ( * ) desc limit 1;
SELECT degree_programs.degree_summary_name from student_enrolment join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id group by student_enrolment.degree_program_id order by count ( * ) desc limit 1;
SELECT degree_programs.degree_program_id, degree_summary_name FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_programs.degree_program_id ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;
SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by student_enrolment.degree_program_id order by count ( * ) desc limit 1;
SELECT students.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) , student_enrolment.student_id from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id order by count ( * ) desc limit 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(*) AS enrollments FROM students AS s JOIN student_enrolment AS se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY enrollments DESC LIMIT 1;
SELECT semester_name from semesters except select semesters.semester_name from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id;
SELECT semester_name from semesters except select semesters.semester_name from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id;
SELECT DISTINCT c.course_name FROM courses c JOIN student_enrolment se ON c.course_id = se.course_id;
SELECT DISTINCT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id;
SELECT course_name FROM courses WHERE course_id = ( SELECT course_id FROM student_enrolment_courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( * ) desc limit 1;
SELECT s.last_name FROM students AS s LEFT JOIN student_enrolment AS se ON s.student_id = se.student_id JOIN addresses AS a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND se.student_id IS NULL;
SELECT DISTINCT s.last_name FROM students s JOIN addresses a ON s.current_address_id = a.address_id LEFT JOIN student_enrolment se ON s.student_id = se.student_id WHERE a.state_province_county = 'North Carolina' AND se.student_id IS NULL;
SELECT transcripts.transcript_date, transcript_contents.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id group by transcript_contents.transcript_id having count ( * ) >= 2;
SELECT transcripts.transcript_date,transcript_contents.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id group by transcript_contents.transcript_id having count ( * ) >= 2;
SELECT cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Ward';
SELECT cell_mobile_number FROM students WHERE LOWER(first_name) = 'timmothy' AND LOWER(last_name) = 'ward';
SELECT first_name, middle_name, last_name from students order by date_first_registered asc limit 1;
SELECT first_name, middle_name, last_name from students order by date_first_registered asc limit 1;
SELECT first_name , middle_name , last_name from students order by date_first_registered asc limit 1;
SELECT s.first_name, s.middle_name, s.last_name FROM students s JOIN graduations g ON s.student_id = g.student_id ORDER BY g.graduation_year ASC LIMIT 1;
SELECT first_name FROM students WHERE permanent_address_id != current_address_id;
SELECT first_name from students where permanent_address_id != current_address_id;
SELECT address_id, line_1, line_2 FROM addresses JOIN students ON addresses.address_id = students.current_address_id GROUP BY address_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT addresses.address_id, addresses.line_1, addresses.line_2 from addresses join students on students.permanent_address_id = addresses.address_id group by addresses.address_id order by count ( * ) desc limit 1;
SELECT avg ( transcript_date ) from transcripts;
SELECT avg ( transcript_date ) from transcripts;
SELECT transcript_date , other_details from transcripts order by transcript_date asc limit 1;
SELECT transcripts.transcript_date, transcripts.other_details from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id order by transcripts.transcript_date asc limit 1;
SELECT count ( * ) from transcripts;
SELECT count ( * ) from transcripts;
SELECT transcript_date from transcripts order by transcript_date desc limit 1;
SELECT transcript_date from transcripts order by transcript_date desc limit 1;
SELECT count ( * ) as count, student_course_id FROM transcript_contents GROUP BY student_course_id ORDER BY count DESC LIMIT 1;
SELECT sec.student_course_id, sec.student_enrolment_id, COUNT(*) AS count FROM transcript_contents tc INNER JOIN student_enrolment_courses sec ON tc.student_course_id = sec.student_course_id GROUP BY sec.student_course_id, sec.student_enrolment_id ORDER BY count DESC LIMIT 1;
SELECT transcripts.transcript_date,transcripts.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id group by transcripts.transcript_id order by count ( * ) asc limit 1;
SELECT transcripts.transcript_date, transcripts.transcript_id FROM transcripts LEFT JOIN results ON transcripts.transcript_id = results.transcript_id GROUP BY transcripts.transcript_id ORDER BY COUNT(results.transcript_id) ASC LIMIT 1;
SELECT semester_id FROM (SELECT e.semester_id FROM enrollments e JOIN students s ON e.student_id = s.student_id JOIN degree_programs d ON s.degree_program_id = d.degree_program_id WHERE d.degree_summary_name = 'Master' INTERSECT SELECT e.semester_id FROM enrollments e JOIN students s ON e.student_id = s.student_id JOIN degree_programs d ON s.degree_program_id = d.degree_program_id WHERE d.degree_summary_name = 'Bachelor');
SELECT s1.semester_id FROM student_enrolment AS s1 JOIN degree_programs AS dp1 ON s1.degree_program_id = dp1.degree_program_id AND dp1.degree_level = 'Masters' INTERSECT SELECT s2.semester_id FROM student_enrolment AS s2 JOIN degree_programs AS dp2 ON s2.degree_program_id = dp2.degree_program_id AND dp2.degree_level = 'Bachelors';
SELECT count ( distinct current_address_id ) from students;
SELECT COUNT(DISTINCT current_address_id) FROM students;
SELECT other_student_details FROM students ORDER BY other_student_details DESC;
SELECT current_address_id, permanent_address_id, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM students ORDER BY last_name DESC, first_name DESC, middle_name DESC;
SELECT section_description from sections where section_name = 'h';
SELECT section_description from sections where section_name = 'h';
SELECT DISTINCT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR current_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582';
SELECT DISTINCT s.first_name FROM students AS s JOIN addresses AS a ON s.permanent_address_id = a.address_id WHERE a.country = 'Haiti' OR s.cell_mobile_number = '09700166582';
SELECT title from cartoon order by title asc;
SELECT title from cartoon order by title asc;
SELECT title from cartoon where directed_by = 'Ben Jones';
SELECT title from cartoon where directed_by = 'Ben Jones';
SELECT count ( * ) from cartoon where written_by = 'Joseph Kuhr';
SELECT count ( * ) from cartoon where written_by = 'Joseph Kuhr';
SELECT title, directed_by from cartoon order by original_air_date asc;
SELECT title, directed_by FROM cartoon ORDER BY original_air_date;
SELECT title from cartoon where directed_by = 'Ben Jones' or directed_by = 'Brandon Vietti';
SELECT title from cartoon where directed_by = 'Ben Jones' or directed_by = 'Brandon Vietti';
SELECT country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1;
SELECT country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1;
SELECT count ( distinct series_name ), count ( distinct content ) from tv_channel;
SELECT count ( distinct series_name ), count ( distinct content ) from tv_channel;
SELECT content from tv_channel where series_name = 'Sky Radio';
SELECT content from tv_channel where series_name = 'Sky Radio';
SELECT package_option from tv_channel where series_name = 'Sky Radio';
SELECT DISTINCT package_option FROM tv_channel WHERE series_name = 'Sky Radio';
SELECT count ( * ) from tv_channel where language = 'English';
SELECT count ( * ) from tv_channel where language = 'English';
SELECT language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1;
SELECT language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1;
SELECT language , count ( * ) from tv_channel group by language;
SELECT language, COUNT(*) FROM tv_channel GROUP BY language;
SELECT tv_channel.series_name from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.title = 'The Rise of the Blue Beetle!';
SELECT tc.series_name FROM tv_channel tc WHERE tc.id = ( SELECT c.channel FROM cartoon c WHERE c.title = 'The Rise of the Blue Beetle' LIMIT 1 );
SELECT cartoon.title from cartoon join tv_channel on cartoon.channel = tv_channel.id where tv_channel.series_name = 'Sky Radio';
SELECT cartoon.title from cartoon join tv_channel on cartoon.channel = tv_channel.id where tv_channel.series_name = 'Sky Radio';
SELECT episode from tv_series order by rating asc;
SELECT episode from tv_series order by rating asc;
SELECT episode, rating from tv_series order by rating desc limit 3;
SELECT episode, rating from tv_series order by rating desc limit 3;
SELECT MAX(share), MIN(share) FROM tv_series;
SELECT max ( share ), min ( share ) from tv_series;
SELECT air_date from tv_series where episode = 'A Love of a Lifetime';
SELECT air_date from tv_series where episode = 'A Love of a Lifetime';
SELECT weekly_rank from tv_series where episode = 'A Love of a Lifetime';
SELECT weekly_rank from tv_series where episode = 'A Love of a Lifetime';
SELECT tv_channel.series_name from tv_channel join tv_series on tv_channel.id = tv_series.channel where tv_series.episode = 'A Love of a Lifetime';
SELECT series_name FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE episode = 'A Love of a Lifetime';
SELECT tv_series.episode from tv_channel join tv_series on tv_channel.id = tv_series.channel where tv_channel.series_name = 'Sky Radio';
SELECT episode from tv_series join tv_channel on tv_series.channel = tv_channel.id where series_name = 'Sky Radio';
SELECT count ( * ), directed_by from cartoon group by directed_by;
SELECT count ( * ), directed_by from cartoon group by directed_by;
SELECT production_code , channel from cartoon order by original_air_date desc limit 1;
SELECT production_code , channel from cartoon order by original_air_date desc limit 1;
SELECT package_option, tv_series.name AS series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE hight_definition_tv = 'Yes';
SELECT tv_channel.package_option, tv_series.series_name FROM tv_channel JOIN tv_series ON tv_series.channel = tv_channel.id WHERE tv_channel.high_definition_tv = 'Yes';
SELECT country from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.written_by = 'Todd Casey';
SELECT tv_channel.country from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.written_by = 'Todd Casey';
SELECT DISTINCT country FROM tv_channel WHERE series_name NOT IN ( SELECT channel FROM cartoon WHERE written_by = 'Todd Casey' );
SELECT country from tv_channel except select tv_channel.country from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.written_by = 'Todd Casey';
SELECT tv_channel.series_name, tv_channel.country from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.directed_by = 'Ben Jones' intersect select series_name, country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Michael Chang';
SELECT tv_channel.series_name, tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones' intersect select tv_channel.series_name, tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Michael Chang';
SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language != 'English';
SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language != 'English';
SELECT id from tv_channel group by country having count ( * ) > 2;
SELECT id FROM tv_channel GROUP BY id HAVING COUNT(DISTINCT series_name) > 2;
SELECT id from tv_channel except select channel from cartoon where directed_by = 'Ben Jones';
SELECT id from tv_channel except select cartoon.channel from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.directed_by = 'Ben Jones';
SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');
SELECT DISTINCT package_option FROM tv_channel WHERE id NOT IN ( SELECT DISTINCT channel FROM cartoon WHERE directed_by = 'Ben Jones' );
SELECT count ( * ) from poker_player;
SELECT count ( * ) from poker_player;
SELECT earnings from poker_player order by earnings desc;
SELECT earnings from poker_player order by earnings desc;
SELECT final_table_made , best_finish from poker_player;
SELECT final_table_made , best_finish from poker_player;
SELECT avg ( earnings ) from poker_player;
SELECT avg ( earnings ) from poker_player;
SELECT money_rank from poker_player order by earnings desc limit 1;
SELECT money_rank from poker_player order by earnings desc limit 1;
SELECT max ( final_table_made ) from poker_player where earnings < 200000;
SELECT max ( final_table_made ) from poker_player where earnings < 200000;
SELECT people.name from people join poker_player on people.people_id = poker_player.people_id;
SELECT people.name from poker_player join people on poker_player.people_id = people.people_id;
SELECT people.name from poker_player join people on poker_player.people_id = people.people_id where earnings > 300000;
SELECT people.name from people join poker_player on people.people_id = poker_player.people_id where poker_player.earnings > 300000;
SELECT people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.final_table_made asc;
SELECT people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.final_table_made asc;
SELECT people.birth_date from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings asc limit 1;
SELECT people.birth_date from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings asc limit 1;
SELECT poker_player.money_rank from people join poker_player on people.people_id = poker_player.people_id order by people.height desc limit 1;
SELECT poker_player.money_rank from people join poker_player on people.people_id = poker_player.people_id order by people.height desc limit 1;
SELECT avg ( poker_player.earnings ) from people join poker_player on people.people_id = poker_player.people_id where people.height > 200;
SELECT avg ( poker_player.earnings ) from people join poker_player on people.people_id = poker_player.people_id where people.height > 200;
SELECT people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings desc;
SELECT people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings desc;
SELECT distinct nationality , count ( * ) from people group by nationality;
SELECT nationality, count(*) FROM people GROUP BY nationality;
SELECT nationality from people group by nationality order by count ( * ) desc limit 1;
SELECT nationality from people group by nationality order by count ( * ) desc limit 1;
SELECT nationality from people group by nationality having count ( * ) >= 2;
SELECT nationality from people group by nationality having count ( * ) >= 2;
SELECT name, birth_date from people order by name asc;
SELECT name, birth_date from people order by name asc;
SELECT name from people where nationality != 'Russia';
SELECT name from people where nationality != 'Russia';
SELECT name from people where people_id not in ( select people_id from poker_player );
SELECT name from people where people_id not in ( select people_id from poker_player );
SELECT count ( distinct nationality ) from people;
SELECT count ( distinct nationality ) from people;
SELECT count ( * ) from area_code_state;
SELECT contestant_number , contestant_name from contestants order by contestant_name desc;
SELECT vote_id , phone_number , state from votes;
SELECT max ( area_code ), min ( area_code ) from area_code_state;
SELECT max ( votes.created ) from area_code_state join votes on area_code_state.state = votes.state where area_code_state.state = 'CA';
SELECT contestant_name from contestants where contestant_name != 'Jessie Alloway';
SELECT distinct state , created from votes;
SELECT contestants.contestant_number, contestants.contestant_name from votes join contestants on votes.contestant_number = contestants.contestant_number group by votes.contestant_number having count ( * ) >= 2;
SELECT contestants.contestant_number, contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by contestants.contestant_number order by count ( * ) asc limit 1;
SELECT count ( * ) from votes where state = 'NY' or state = 'CA';
SELECT count ( * ) from contestants where contestant_number not in ( select contestant_number from votes );
SELECT area_code from area_code_state join votes on area_code_state.state = votes.state group by area_code_state.area_code order by count ( * ) desc limit 1;
SELECT votes.created, votes.state, votes.phone_number from contestants join votes on contestants.contestant_number = votes.contestant_number where contestants.contestant_name = 'Tabatha Gehling';
SELECT DISTINCT acs.area_code FROM area_code_state acs JOIN votes v ON acs.state = v.state WHERE v.contestant_number IN ( SELECT c1.contestant_number FROM contestants c1 WHERE c1.name = 'Tabatha Gehling' ) AND v.area_code IN ( SELECT v2.area_code FROM votes v2 JOIN area_code_state acs2 ON v2.state = acs2.state WHERE v2.contestant_number IN ( SELECT c2.contestant_number FROM contestants c2 WHERE c2.name = 'Kelly Clauss' ) );
SELECT contestant_name from contestants where contestant_name like '%Al%';
SELECT name from country where indepyear > 1950;
SELECT name from country where indepyear > 1950;
SELECT count ( * ) from country where governmentform = 'Republic';
SELECT count ( * ) from country where governmentform = 'Republic';
SELECT sum ( surfacearea ) from country where region = 'Caribbean';
SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean';
SELECT continent from country where name = 'Anguilla';
SELECT continent from country where name = 'Anguilla';
SELECT country.region from city join country on city.countrycode = country.code where city.name = 'Kabul';
SELECT district FROM city WHERE name = 'Kabul';
SELECT language from countrylanguage where countrycode = 'ABW' order by percentage desc limit 1;
SELECT language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Aruba' AND isofficial = 1;
SELECT population, lifeexpectancy from country where name = 'Brazil';
SELECT population , lifeexpectancy from country where name = 'Brazil';
SELECT region, population FROM country WHERE name = 'Angola';
SELECT population, region FROM country WHERE name = 'Angola';
SELECT avg ( lifeexpectancy ) from country where region = 'Central Africa';
SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND code IN ('List of Central Africa country codes');
SELECT name from country where continent = 'Asia' order by lifeexpectancy asc limit 1;
SELECT name from country where continent = 'Asia' order by lifeexpectancy asc limit 1;
SELECT sum ( population ), max ( gnp ) from country where continent = 'Asia';
SELECT sum ( population ), max ( gnp ) from country where continent = 'Asia';
SELECT avg ( lifeexpectancy ) from country where continent = 'Africa' and governmentform = 'Republic';
SELECT avg ( lifeexpectancy ) from country where continent = 'Africa' and governmentform = 'Republic';
SELECT sum ( surfacearea ) from country where continent = 'Asia' or continent = 'Europe';
SELECT sum ( surfacearea ) from country where continent = 'Asia' or continent = 'Europe';
SELECT sum ( population ) from city where district = 'Gelderland';
SELECT sum ( city.population ) from city where district = 'Gelderland';
SELECT avg ( gnp ), sum ( population ) from country where governmentform = 'US Territory';
SELECT AVG(gnp), SUM(population) FROM country WHERE governmentform = 'US Territory';
SELECT count ( distinct language ) from countrylanguage;
SELECT count ( distinct language ) from countrylanguage;
SELECT count ( distinct governmentform ) from country where continent = 'Africa';
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';
SELECT count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Aruba';
SELECT count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Aruba';
SELECT count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Afghanistan' and countrylanguage.isofficial = 'T';
SELECT count ( * ) from countrylanguage where countrycode = 'AFG' and isofficial = 'T';
SELECT name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY COUNT(language) DESC LIMIT 1;
SELECT name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT continent from countrylanguage join country on countrylanguage.countrycode = country.code group by country.continent order by count ( distinct countrylanguage.language ) desc limit 1;
SELECT continent from country group by continent order by count ( * ) desc limit 1;
SELECT COUNT(*) FROM ( SELECT countrycode FROM countrylanguage WHERE language = 'English' INTERSECT SELECT countrycode FROM countrylanguage WHERE language = 'Dutch' );
SELECT COUNT(DISTINCT countrycode) FROM ( SELECT countrycode FROM countrylanguage WHERE language = 'English' INTERSECT SELECT countrycode FROM countrylanguage WHERE language = 'Dutch' ) AS intersected_countries;
SELECT country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French';
SELECT country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French';
SELECT name FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T' INTERSECT SELECT countrycode FROM countrylanguage WHERE language = 'French' AND isofficial = 'T' );
SELECT name FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T' INTERSECT SELECT countrycode FROM countrylanguage WHERE language = 'French' AND isofficial = 'T' );
SELECT count ( * ) from ( select country.continent from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'Chinese' group by country.continent );
SELECT count ( distinct country.continent ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'Chinese';
SELECT distinct country.region from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'Dutch' or countrylanguage.language = 'English';
SELECT DISTINCT country.region FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('Dutch', 'English');
SELECT DISTINCT name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE (language = 'English' OR language = 'Dutch') AND TRIM(isofficial) = 'T';
SELECT * FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch') AND countrylanguage.isofficial = 'T';
SELECT language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE continent = 'Asia' GROUP BY language ORDER BY SUM(percentage * country.population) DESC LIMIT 1;
SELECT language from countrylanguage join country on countrylanguage.countrycode = country.code where country.continent = 'Asia' group by countrylanguage.language order by count ( * ) desc limit 1;
SELECT language from countrylanguage join country on countrylanguage.countrycode = country.code where country.governmentform = 'Republic' group by countrylanguage.language having count ( * ) = 1;
SELECT language from countrylanguage join country on countrylanguage.countrycode = country.code where country.governmentform = 'Republic' group by countrylanguage.language having count ( * ) = 1;
SELECT name, MAX(population) as population FROM city WHERE countrycode IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T');
SELECT name, MAX(population) FROM city WHERE countrycode IN (SELECT countrycode FROM countrylanguage WHERE language = 'English');
SELECT name, population, lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1;
SELECT name, population, lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1;
SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T');
SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T');
SELECT SUM(c.population) FROM country AS c WHERE c.code NOT IN ( SELECT cl.countrycode FROM countrylanguage AS cl WHERE cl.language = 'English' AND cl.IsOfficial = 'T' );
SELECT SUM(population) FROM country WHERE code NOT IN ( SELECT countrycode FROM countrylanguage WHERE language = 'English' );
SELECT countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.headofstate = 'Beatrix' and countrylanguage.isofficial = 'T';
SELECT countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.headofstate = 'Beatrix' and countrylanguage.isofficial = 'T';
SELECT count ( distinct language ) from countrylanguage cl join country c on cl.countrycode = c.code where c.indepyear < 1930 and cl.isofficial = 'T';
SELECT count ( distinct language ) from countrylanguage join country on countrylanguage.countrycode = country.code where indepyear < 1930 and isofficial = 'T';
SELECT name FROM country WHERE surfacearea > ALL (SELECT surfacearea FROM country WHERE continent = 'Europe');
SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe');
SELECT DISTINCT c1.name FROM country AS c1 WHERE c1.continent = 'Africa' AND c1.population < (SELECT MIN(c2.population) FROM country AS c2 WHERE c2.continent = 'Asia');
SELECT name from country where continent = 'Africa' and population < ( select min ( population ) from country where continent = 'Asia' );
SELECT name from country where continent = 'Asia' and population > ( select max ( population ) from country where continent = 'Africa' );
SELECT name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa');
SELECT c.code FROM country AS c LEFT JOIN countrylanguage AS cl ON c.code = cl.countrycode AND cl.language = 'English' WHERE cl.language IS NULL;
SELECT code FROM country EXCEPT SELECT countrycode FROM countrylanguage WHERE language = 'English';
SELECT DISTINCT countrycode FROM countrylanguage WHERE language != 'English';
SELECT DISTINCT countrycode FROM countrylanguage WHERE language != 'English';
SELECT code FROM country WHERE code NOT IN ( SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T' ) AND governmentform NOT LIKE '%Republic%';
SELECT code from country except select countrycode from countrylanguage where language = 'English' except select code from country where governmentform = 'Republic';
SELECT name FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = 'Europe' AND city.countrycode NOT IN ( SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T' );
SELECT name FROM city WHERE countrycode NOT IN ( SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T' ) AND district = 'Europe';
SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = '1';
SELECT distinct city.name from city join country on city.countrycode = country.code join countrylanguage on country.code = countrylanguage.countrycode where country.continent = 'Asia' and countrylanguage.language = 'Chinese' and countrylanguage.isofficial = 'T';
SELECT name, surfacearea, indepyear FROM country ORDER BY population ASC LIMIT 1;
SELECT name, indepyear, surfacearea FROM country ORDER BY population ASC NULLS LAST LIMIT 1;
SELECT name, population, headofstate FROM country ORDER BY surfacearea DESC LIMIT 1;
SELECT name , population , headofstate from country order by surfacearea desc limit 1;
SELECT country.name, COUNT(countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(countrylanguage.language) >= 3;
SELECT country.name, COUNT(countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code, country.name HAVING COUNT(countrylanguage.language) > 2;
SELECT count ( * ), district from city where population > ( select avg ( population ) from city ) group by district;
SELECT count ( * ), district from city where population > ( select avg ( population ) from city ) group by district;
SELECT c.governmentform, SUM(c.population) AS sum_population FROM country c INNER JOIN ( SELECT governmentform FROM country GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72 ) sub ON sub.governmentform = c.governmentform GROUP BY c.governmentform;
SELECT governmentform, SUM(population) AS sum_population FROM country GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72;
SELECT sum(population), avg(lifeexpectancy), continent FROM country GROUP BY continent HAVING avg(lifeexpectancy) < 72;
SELECT continent, SUM(population) AS total_population, AVG(lifeexpectancy) AS avg_lifeexpectancy FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72;
SELECT name, surfacearea from country order by surfacearea desc limit 5;
SELECT name, surfacearea from country order by surfacearea desc limit 5;
SELECT name from country order by population desc limit 3;
SELECT name from country order by population desc limit 3;
SELECT name from country order by population asc limit 3;
SELECT name from country order by population asc limit 3;
SELECT count ( * ) from country where continent = 'Asia';
SELECT count ( * ) from country where continent = 'Asia';
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;
SELECT name from country where continent = 'Europe' and population = 80000;
SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_area FROM country WHERE continent = 'North America' AND surfacearea > 3000;
SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_surfacearea FROM country WHERE continent = 'North America' AND surfacearea > 3000;
SELECT name from city where population between 160000 and 900000;
SELECT name from city where population between 160000 and 900000;
SELECT language from countrylanguage group by language order by count ( * ) desc limit 1;
SELECT language from countrylanguage group by language order by count ( * ) desc limit 1;
SELECT cl1.countrycode, cl1.language, cl1.percentage FROM countrylanguage cl1 JOIN ( SELECT countrycode, MAX(percentage) AS max_percentage FROM countrylanguage GROUP BY countrycode ) cl2 ON cl1.countrycode = cl2.countrycode AND cl1.percentage = cl2.max_percentage;
SELECT cl.countrycode, cl.language, cl.percentage FROM countrylanguage cl INNER JOIN ( SELECT countrycode, MAX(percentage) AS max_percentage FROM countrylanguage GROUP BY countrycode ) AS subquery ON cl.countrycode = subquery.countrycode AND cl.percentage = subquery.max_percentage;
SELECT COUNT(*) FROM ( SELECT cl.countrycode FROM countrylanguage cl INNER JOIN ( SELECT countrycode, MAX(percentage) AS max_percentage FROM countrylanguage GROUP BY countrycode ) AS max_country_percentage ON cl.countrycode = max_country_percentage.countrycode WHERE cl.language = 'Spanish' AND cl.percentage = max_country_percentage.max_percentage ) AS SpanishSpeakingCountries;
SELECT COUNT(*) FROM ( SELECT countrycode, MAX(percentage) AS max_percentage FROM countrylanguage WHERE language = 'Spanish' GROUP BY countrycode ) AS subquery JOIN countrylanguage AS cl ON subquery.countrycode = cl.countrycode AND subquery.max_percentage = cl.percentage WHERE cl.language = 'Spanish';
SELECT countrycode, MAX(percentage) as max_percentage FROM countrylanguage WHERE language = 'Spanish' GROUP BY countrycode;
SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish' AND countrylanguage.percentage > 50;
SELECT count ( * ) from conductor;
SELECT count ( * ) from conductor;
SELECT name from conductor order by age asc;
SELECT name from conductor order by age asc;
SELECT name from conductor where nationality != 'USA';
SELECT name from conductor where nationality != 'USA';
SELECT record_company from orchestra order by year_of_founded desc;
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;
SELECT avg ( attendance ) from show;
SELECT avg ( attendance ) from show;
SELECT max ( share ), min ( share ) from performance where type != 'Live final';
SELECT max ( share ), min ( share ) from performance where type != 'Live final';
SELECT count ( distinct nationality ) from conductor;
SELECT count ( distinct nationality ) from conductor;
SELECT name from conductor order by year_of_work desc;
SELECT name from conductor order by year_of_work desc;
SELECT name from conductor order by year_of_work desc limit 1;
SELECT name from conductor order by year_of_work desc limit 1;
SELECT conductor.name, orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id;
SELECT conductor.name, orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id;
SELECT conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.name having count ( * ) > 1;
SELECT conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.name having count ( * ) > 1;
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY COUNT(orchestra.orchestra) DESC LIMIT 1;
SELECT conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.conductor_id order by count ( * ) desc limit 1;
SELECT conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id where orchestra.year_of_founded > 2008;
SELECT conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id where orchestra.year_of_founded > 2008;
SELECT record_company , count ( * ) from orchestra group by record_company;
SELECT record_company , count ( * ) from orchestra group by record_company;
SELECT major_record_format from orchestra group by major_record_format order by count ( * ) asc;
SELECT major_record_format from orchestra group by major_record_format order by count ( * ) asc;
SELECT record_company from orchestra group by record_company order by count ( * ) desc limit 1;
SELECT record_company from orchestra group by record_company order by count ( * ) desc limit 1;
SELECT orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance );
SELECT orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance );
SELECT record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003;
SELECT record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003;
SELECT count ( * ) from orchestra where major_record_format = 'CD' or major_record_format = 'DVD';
SELECT count ( * ) from orchestra where major_record_format = 'CD' or major_record_format = 'DVD';
SELECT orchestra.year_of_founded from orchestra join performance on orchestra.orchestra_id = performance.orchestra_id group by performance.orchestra_id having count ( * ) > 1;
SELECT orchestra.year_of_founded from orchestra join performance on orchestra.orchestra_id = performance.orchestra_id group by performance.orchestra_id having count ( * ) > 1;
SELECT count ( * ) from highschooler;
SELECT count ( * ) from highschooler;
SELECT name , grade from highschooler;
SELECT name, grade from highschooler;
SELECT grade FROM highschooler;
SELECT grade FROM highschooler;
SELECT grade from highschooler where name = 'Kyle';
SELECT grade from highschooler where name = 'Kyle';
SELECT distinct name from highschooler where grade = 10;
SELECT name from highschooler where grade = 10;
SELECT id FROM highschooler WHERE name = 'Kyle';
SELECT id FROM highschooler WHERE name = 'Kyle';
SELECT count ( * ) from highschooler where grade = 9 or grade = 10;
SELECT count ( * ) from highschooler where grade = 9 or grade = 10;
SELECT grade, COUNT(*) FROM highschooler GROUP BY grade;
SELECT grade , count ( * ) from highschooler group by grade;
SELECT grade from highschooler group by grade order by count ( * ) desc limit 1;
SELECT grade from highschooler group by grade order by count ( * ) desc limit 1;
SELECT grade from highschooler group by grade having count ( * ) >= 4;
SELECT grade from highschooler group by grade having count ( * ) >= 4;
SELECT student_id , count ( * ) from friend group by student_id;
SELECT student_id , count ( * ) from friend group by student_id;
SELECT highschooler.name , count ( * ) from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id;
SELECT highschooler.name, COUNT(DISTINCT friend.friend_id) AS friend_count FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id, highschooler.name;
SELECT name FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id ORDER BY COUNT(friend.friend_id) DESC LIMIT 1;
SELECT highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id order by count ( * ) desc limit 1;
SELECT highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id having count ( * ) >= 3;
SELECT highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id having count ( * ) >= 3;
SELECT H2.name FROM highschooler H1 JOIN friend ON H1.id = friend.student_id JOIN highschooler H2 ON friend.friend_id = H2.id WHERE H1.name = 'Kyle';
SELECT H.name FROM highschooler H JOIN friend F ON H.id = F.friend_id JOIN highschooler K ON F.student_id = K.id WHERE K.name = 'Kyle';
SELECT COUNT(*) FROM friend JOIN highschooler ON friend.student_id = highschooler.id WHERE highschooler.name = 'Kyle';
SELECT COUNT(*) FROM friend WHERE friend.student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT id from highschooler except select student_id from friend;
SELECT id from highschooler where id not in ( select student_id from friend );
SELECT name from highschooler where id not in ( select student_id from friend );
SELECT name from highschooler where id not in ( select student_id from friend );
SELECT DISTINCT highschooler.id FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.liked_id WHERE highschooler.id IN (SELECT friend_id FROM friend) AND highschooler.id IN (SELECT liked_id FROM likes);
SELECT DISTINCT f.student_id FROM friend f JOIN likes l ON f.student_id = l.liked_id WHERE f.student_id IN (SELECT liked_id FROM likes WHERE student_id != liked_id);
SELECT DISTINCT h.name FROM highschooler h WHERE EXISTS ( SELECT * FROM friend WHERE student_id = h.id ) AND EXISTS ( SELECT * FROM friend WHERE friend_id = h.id ) AND EXISTS ( SELECT * FROM likes WHERE liked_id = h.id );
SELECT DISTINCT h.name FROM highschooler h WHERE EXISTS ( SELECT 1 FROM friend f WHERE f.student_id = h.id ) AND EXISTS ( SELECT 1 FROM likes l WHERE l.liked_id = h.id );
SELECT student_id , count ( * ) from likes group by student_id;
SELECT student_id , count ( * ) from likes group by student_id;
SELECT highschooler.name, COUNT(likes.liked_id) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id, highschooler.name;
SELECT highschooler.name , count ( * ) from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id;
SELECT name FROM highschooler JOIN likes ON highschooler.id = likes.liked_id GROUP BY name ORDER BY COUNT(likes.liked_id) DESC LIMIT 1;
SELECT name FROM highschooler WHERE id = ( SELECT liked_id FROM likes GROUP BY liked_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT name from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id having count ( * ) >= 2 ;
SELECT highschooler.name from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id having count ( * ) >= 2 ;
SELECT name FROM highschooler WHERE grade > 5 AND id IN ( SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(*) >= 2 );
SELECT name FROM highschooler WHERE id IN ( SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(friend_id) >= 2 ) AND grade > 5;
SELECT count(*) FROM likes JOIN highschooler ON likes.liked_id = highschooler.id WHERE highschooler.name = 'Kyle';
SELECT count ( * ) from likes join highschooler on likes.liked_id = highschooler.id where highschooler.name = 'Kyle';
SELECT AVG(h.grade) FROM highschooler h WHERE EXISTS (SELECT 1 FROM friend f WHERE f.student_id = h.id OR f.friend_id = h.id);
SELECT AVG(grade) FROM highschooler WHERE id IN ( SELECT student_id FROM friend UNION SELECT friend_id FROM friend );
SELECT min ( grade ) from highschooler where id not in ( select student_id from friend );
SELECT min ( grade ) from highschooler where id not in ( select student_id from friend );
SELECT state from owners intersect select state from professionals;
SELECT state from owners intersect select state from professionals;
SELECT avg ( age ) from dogs where dog_id in ( select dog_id from treatments );
SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments);
SELECT professional_id , last_name , cell_number from professionals where state = 'Indiana' or professional_id in ( select professional_id from treatments group by professional_id having count ( * ) > 2 );
SELECT p.professional_id, p.last_name, p.cell_number FROM professionals p LEFT JOIN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2) t ON p.professional_id = t.professional_id WHERE p.state = 'Indiana' OR t.professional_id IS NOT NULL;
SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments GROUP BY dog_id HAVING sum(cost_of_treatment) > 1000);
SELECT dogs.name FROM dogs WHERE dogs.owner_id NOT IN ( SELECT owners.owner_id FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id HAVING SUM(treatments.cost_of_treatment) > 1000 );
SELECT first_name FROM professionals UNION SELECT first_name FROM owners EXCEPT SELECT name AS first_name FROM dogs;
SELECT first_name from professionals union select first_name from owners except select name from dogs;
SELECT professional_id , role_code , email_address from professionals where professional_id not in ( select professional_id from treatments );
SELECT professional_id , role_code , email_address from professionals where professional_id not in ( select professional_id from treatments );
SELECT owners.owner_id, owners.first_name, owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id group by owners.owner_id order by count ( * ) desc limit 1;
SELECT owners.owner_id , owners.first_name , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id group by owners.owner_id order by count ( * ) desc limit 1;
SELECT professionals.professional_id , professionals.role_code , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id group by treatments.professional_id having count ( * ) >= 2;
SELECT professionals.professional_id, professionals.role_code, professionals.first_name from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2;
SELECT breed_name FROM breeds JOIN dogs ON breeds.breed_code = dogs.breed_code GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT breed_name FROM breeds JOIN dogs ON breeds.breed_code = dogs.breed_code GROUP BY breeds.breed_name ORDER BY COUNT(dogs.breed_code) DESC LIMIT 1;
SELECT owners.owner_id , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id group by owners.owner_id order by count ( * ) desc limit 1;
SELECT owners.owner_id, owners.last_name, SUM(treatments.cost_of_treatment) AS total_cost FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY total_cost DESC LIMIT 1;
SELECT treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code group by treatments.treatment_type_code order by sum ( treatments.cost_of_treatment ) asc limit 1;
SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code = (SELECT treatment_type_code FROM treatments GROUP BY treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1);
SELECT owner_id, zip_code FROM owners WHERE owner_id = (SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY SUM(weight) DESC LIMIT 1);
SELECT owners.owner_id , owners.zip_code from treatments join dogs on treatments.dog_id = dogs.dog_id join owners on dogs.owner_id = owners.owner_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1;
SELECT p.professional_id, p.cell_number FROM professionals p INNER JOIN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2 ) AS subq ON p.professional_id = subq.professional_id;
SELECT p.professional_id, p.cell_number FROM professionals AS p WHERE p.professional_id IN ( SELECT t.professional_id FROM treatments AS t GROUP BY t.professional_id HAVING COUNT(DISTINCT t.treatment_type_code) >= 2 );
WITH AverageCost AS ( SELECT AVG(cost_of_treatment) AS avg_cost FROM treatments ) SELECT p.first_name, p.last_name FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id JOIN AverageCost ON t.cost_of_treatment < AverageCost.avg_cost GROUP BY p.professional_id, p.first_name, p.last_name;
SELECT DISTINCT      p.first_name,      p.last_name  FROM      professionals p JOIN      treatments t ON p.professional_id = t.professional_id  WHERE      t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);
SELECT treatments.date_of_treatment, professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id;
SELECT treatments.date_of_treatment, professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id;
SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT owners.first_name, owners.last_name, sizes.size_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code;
SELECT owners.first_name, owners.last_name, sizes.size_code from owners join dogs on owners.owner_id = dogs.owner_id join sizes on dogs.size_code = sizes.size_code;
SELECT owners.first_name, dogs.name from owners join dogs on owners.owner_id = dogs.owner_id;
SELECT owners.first_name, dogs.name from owners join dogs on owners.owner_id = dogs.owner_id;
SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE dogs.breed_code = ( SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1 );
SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE dogs.breed_code = ( SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) LIMIT 1 );
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'Virginia';
SELECT distinct owners.first_name, dogs.name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = 'Virginia';
SELECT DISTINCT dogs.date_arrived, dogs.date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id;
SELECT DISTINCT dogs.date_arrived, dogs.date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id;
SELECT o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.date_of_birth = (SELECT MAX(date_of_birth) FROM dogs);
SELECT o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id ORDER BY d.date_of_birth DESC LIMIT 1;
SELECT DISTINCT email_address FROM professionals WHERE TRIM(UPPER(state)) IN ('HI', 'WI');
SELECT email_address from professionals where state = 'Hawaii' or state = 'Wisconsin';
SELECT date_arrived, date_departed from dogs;
SELECT date_arrived, date_departed from dogs;
SELECT count ( distinct dog_id ) from treatments;
SELECT count ( distinct dog_id ) from treatments;
SELECT count ( distinct professional_id ) from treatments;
SELECT count ( distinct professional_id ) from treatments;
SELECT role_code, street, city, state from professionals where city like '%West%';
SELECT role_code, street, city, state from professionals where city like '%West%';
SELECT first_name, last_name, email_address from owners where state like '%North%';
SELECT first_name, last_name, email_address from owners where state like '%North%';
SELECT count ( * ) from dogs where age < ( select avg ( age ) from dogs );
SELECT count ( * ) from dogs where age < ( select avg ( age ) from dogs );
SELECT cost_of_treatment from treatments order by date_of_treatment desc limit 1;
SELECT cost_of_treatment from treatments order by date_of_treatment desc limit 1;
SELECT count ( * ) from dogs where dog_id not in ( select dog_id from treatments );
SELECT count ( * ) from dogs where dog_id not in ( select dog_id from treatments );
SELECT COUNT(*) FROM owners WHERE owner_id NOT IN ( SELECT DISTINCT owner_id FROM dogs WHERE date_adopted IS NULL OR abandoned_yn = 'Y' );
SELECT COUNT(*) FROM ( SELECT owners.owner_id FROM owners LEFT JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id HAVING COUNT(CASE WHEN dogs.date_adopted IS NULL THEN 1 END) = 0 ) AS owners_without_dogs;
SELECT count ( * ) from professionals where professional_id not in ( select professional_id from treatments );
SELECT count ( * ) from professionals where professional_id not in ( select professional_id from treatments );
SELECT name , age , weight from dogs where abandoned_yn = 1;
SELECT name, age, weight from dogs where abandoned_yn = 1;
SELECT avg ( age ) from dogs;
SELECT avg ( age ) from dogs;
SELECT max ( age ) from dogs;
SELECT max ( age ) from dogs;
SELECT charge_type , sum ( charge_amount ) from charges group by charge_type;
SELECT charge_type , charge_amount from charges;
SELECT max ( charge_amount ) from charges;
SELECT charge_amount from charges order by charge_amount desc limit 1;
SELECT email_address, cell_number, home_phone from professionals;
SELECT email_address, cell_number, home_phone from professionals;
SELECT DISTINCT dogs.breed_code, dogs.size_code FROM dogs;
SELECT DISTINCT breeds.breed_name, sizes.size_description FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN sizes ON dogs.size_code = sizes.size_code;
SELECT distinct professionals.first_name, treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code join professionals on treatments.professional_id = professionals.professional_id;
SELECT professionals.first_name, treatments.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id;
SELECT count ( * ) from singer;
SELECT count ( * ) from singer;
SELECT name from singer order by net_worth_millions asc;
SELECT name from singer order by net_worth_millions asc;
SELECT birth_year , citizenship from singer;
SELECT birth_year , citizenship from singer;
SELECT name from singer where citizenship != 'France';
SELECT name FROM singer WHERE citizenship <> 'French';
SELECT name FROM singer WHERE birth_year IN (1948, 1949);
SELECT name from singer where birth_year = 1948 or birth_year = 1949;
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;
SELECT name from singer order by net_worth_millions desc limit 1;
SELECT distinct citizenship , count ( * ) from singer group by citizenship;
SELECT citizenship , count ( * ) from singer group by citizenship;
SELECT citizenship from singer group by citizenship order by count ( * ) desc limit 1;
SELECT citizenship from singer group by citizenship order by count ( * ) desc limit 1;
SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship;
SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship;
SELECT song.title, singer.name from song join singer on song.singer_id = singer.singer_id;
SELECT song.title, singer.name from song join singer on song.singer_id = singer.singer_id;
SELECT distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000;
SELECT distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000;
SELECT name FROM singer WHERE singer_id IN ( SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(*) > 1 );
SELECT s.name FROM singer s INNER JOIN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(*) > 1 ) AS subquery ON s.singer_id = subquery.singer_id;
SELECT singer.name, sum ( song.sales ) from singer join song on singer.singer_id = song.singer_id group by singer.name;
SELECT singer.name, SUM(song.sales) FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name;
SELECT name from singer where singer_id not in ( select singer_id from song );
SELECT name from singer where singer_id not in ( select singer_id from song );
SELECT citizenship from singer where birth_year > 1955 intersect select citizenship from singer where birth_year < 1945;
SELECT citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955;
SELECT count ( * ) from other_available_features;
SELECT ref_feature_types.feature_type_name from other_available_features join ref_feature_types on other_available_features.feature_type_code = ref_feature_types.feature_type_code where other_available_features.feature_name = 'AirCon';
SELECT DISTINCT pt.property_type_description FROM properties p JOIN ref_property_types pt ON p.property_type_code = pt.property_type_code;
SELECT property_name FROM properties WHERE room_count > 1 AND property_type_code IN ('house', 'apartment');
