SELECT COUNT (*) FROM singer
SELECT COUNT (*) FROM singer
SELECT name,        country,        age FROM singer ORDER BY age ASC
SELECT name,        country,        age FROM singer ORDER BY age DESC
SELECT AVG (age), MIN (age), MAX (age) FROM singer WHERE country = 'France'
SELECT AVG (age), MIN (age), MAX (age) FROM singer WHERE country = 'France'   AND is_male = 'Y'
SELECT song_name,        song_release_year FROM singer WHERE age =     (SELECT MIN (age)      FROM singer)
SELECT song_name,        song_release_year FROM singer ORDER BY age ASC LIMIT 10
SELECT DISTINCT country FROM singer WHERE age > 20
SELECT DISTINCT country FROM singer WHERE age > 20
SELECT country,        COUNT (*) FROM singer GROUP BY country
SELECT country,        COUNT (*) FROM singer GROUP BY country
SELECT song_name FROM singer WHERE age >     (SELECT AVG (age)      FROM singer)
SELECT song_name FROM singer WHERE age >     (SELECT AVG (age)      FROM singer)
SELECT LOCATION,        name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
SELECT LOCATION,        name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
SELECT MAX (capacity), AVG (average) FROM stadium
SELECT AVG (capacity), MAX (capacity) FROM stadium
SELECT name,        capacity FROM stadium GROUP BY stadium_id ORDER BY AVG (average) DESC LIMIT 1
SELECT stadium.name,        stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.stadium_id ORDER BY AVG (concert.attendance) DESC LIMIT 1
SELECT COUNT (*) FROM concert WHERE YEAR = '2014'   OR YEAR = '2015'
SELECT COUNT (*) FROM concert WHERE YEAR = 2014   OR YEAR = 2015
SELECT stadium.name,        COUNT (*) FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id GROUP BY concert.stadium_id
SELECT stadium.name,        COUNT (*) FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.stadium_id
SELECT stadium.name,        stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year >= 2014 GROUP BY concert.stadium_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT stadium.name,        stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year > 2013 GROUP BY concert.stadium_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT (*) DESC LIMIT 1
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT (*) DESC LIMIT 1
SELECT name FROM stadium WHERE stadium_id NOT IN     (SELECT stadium_id      FROM concert)
SELECT name FROM stadium WHERE stadium_id NOT IN     (SELECT stadium_id      FROM concert)
SELECT country FROM singer WHERE age > 40 INTERSECT   SELECT country   FROM singer WHERE age < 30
SELECT name FROM stadium WHERE stadium_id NOT IN     (SELECT stadium_id      FROM concert      WHERE YEAR = 2014 )
SELECT name FROM stadium EXCEPT SELECT stadium.name FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE YEAR = 2014
SELECT concert.concert_name,        concert.theme,        COUNT (*) FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_id
SELECT concert.concert_name,        concert.theme,        COUNT (*) FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name,          concert.theme
SELECT singer.name,        COUNT (*) FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name
SELECT singer.name,        COUNT (*) FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name
SELECT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014
SELECT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014
SELECT singer.name,        singer.country FROM singer JOIN song ON singer.song_name = song.title WHERE song.title like '%Hey%'
SELECT singer.name,        singer.country FROM singer JOIN song ON singer.song_name = song.song_name WHERE song.title like '%Hey%'
SELECT stadium.name,        stadium.location FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2014 INTERSECT   SELECT stadium.name,          stadium.location   FROM concert   JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2015
SELECT stadium.name,        stadium.location FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2014 INTERSECT   SELECT stadium.name,          stadium.location   FROM concert   JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2015
SELECT COUNT (*) FROM concert WHERE stadium_id =     (SELECT MAX (stadium_id)      FROM stadium)
SELECT COUNT (*) FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id ORDER BY stadium.capacity DESC LIMIT 1
SELECT COUNT (*) FROM pets WHERE weight > 10
COUNT (*) FROM pets WHERE weight > 10
SELECT weight FROM pets WHERE pet_age < 10   AND pettype = 'dog' ORDER BY pet_age ASC LIMIT 1
SELECT MIN (weight) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.age <= 18   AND pets.pettype = 'Dog'
SELECT MAX (weight), pettype FROM pets GROUP BY pettype
SELECT MAX (weight), pettype FROM pets GROUP BY pettype
SELECT COUNT (*) FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE student.age IN     (SELECT stuid      FROM student      GROUP BY age      HAVING AVG (age) >= 20)
SELECT COUNT (*) FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20   AND has_pet.stuid IN     (SELECT stuid      FROM student      WHERE age > 20 )
SELECT COUNT (*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE student.sex = 'F'   AND has_pet.petid = pets.petid   AND pets.pettype = 'dog'
SELECT COUNT (*) FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE student.sex = 'F'   AND pets.pettype = 'dog'
SELECT COUNT (DISTINCT pettype) FROM pets
SELECT COUNT (DISTINCT pettype) FROM pets
SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat'   OR pets.pettype = 'dog'
SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat'   OR pets.pettype = 'dog'
SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' INTERSECT   SELECT student.fname   FROM student   JOIN has_pet ON student.stuid = has_pet.stuid   JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog'
SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' INTERSECT   SELECT student.fname   FROM student   JOIN has_pet ON student.stuid = has_pet.stuid   JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog'
SELECT major,        age FROM student WHERE stuid NOT IN     (SELECT stuid      FROM has_pet      JOIN pets ON has_pet.petid = pets.petid      WHERE pets.pettype = 'cat' )
SELECT major,        age FROM student EXCEPT SELECT student.major,        student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat'
SELECT stuid FROM student EXCEPT SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat'
SELECT stuid FROM student WHERE stuid NOT IN     (SELECT stuid      FROM has_pet      JOIN pets ON has_pet.petid = pets.petid      WHERE pets.pettype = 'cat' )
SELECT student.fname,        student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE has_pet.petid = 'Dog' EXCEPT SELECT student.fname,        student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE has_pet.petid = 'Cat'
SELECT student.fname FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' EXCEPT SELECT student.fname FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat'
SELECT pettype,        weight FROM pets ORDER BY pet_age ASC LIMIT 1
SELECT pettype,        weight FROM pets ORDER BY pet_age ASC LIMIT 1
SELECT petid,        weight FROM pets WHERE pet_age > 1
SELECT petid,        weight FROM pets WHERE pet_age > 1
SELECT AVG (age), MAX (age), pettype FROM pets GROUP BY pettype
SELECT AVG (pets.pet_age), MAX (pets.pet_age), pets.pettype FROM pets JOIN has_pet ON pets.petid = has_pet.petid GROUP BY pets.pettype
SELECT AVG (weight), pettype FROM pets GROUP BY pettype
SELECT AVG (weight), pettype FROM pets GROUP BY pettype
SELECT fname,        age FROM student WHERE stuid IN     (SELECT stuid      FROM has_pet)
SELECT DISTINCT student.fname,                 student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE has_pet.petid IN     (SELECT petid      FROM has_pet)
SELECT has_pet.petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE student.lname = 'Smith'
SELECT has_pet.petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE student.lname = 'Smith'   AND has_pet.stuid = student.stuid
SELECT stuid,        COUNT (DISTINCT petid) FROM has_pet GROUP BY stuid
SELECT COUNT (*), stuid FROM has_pet GROUP BY stuid ORDER BY COUNT (*) DESC
SELECT student.fname,        student.sex FROM has_pet JOIN student ON has_pet.stuid = student.stuid GROUP BY student.stuid HAVING COUNT (*) > 1
SELECT student.fname,        student.sex FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid HAVING COUNT (*) > 1
SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pet_age = 3   AND pets.weight > 60
SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pet_age = '3'   AND pets.weight < 100
SELECT AVG (age) FROM student WHERE stuid NOT IN     (SELECT stuid      FROM has_pet)
SELECT AVG (age) FROM student WHERE stuid NOT IN     (SELECT stuid      FROM has_pet)
SELECT COUNT (*) FROM continents
SELECT COUNT (DISTINCT continent) FROM continents
SELECT continents.contid,        continents.continent,        COUNT (*) FROM countries JOIN continents ON countries.continent = continents.contid GROUP BY countries.continent
SELECT continents.contid,        continents.continent,        COUNT (*) FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid
SELECT COUNT (*) FROM countries
###
SELECT car_makers.fullname,        car_makers.id,        COUNT (*) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id ORDER BY COUNT (*) DESC
SELECT car_makers.fullname,        car_makers.id,        COUNT (*) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id ORDER BY COUNT (*) DESC
SELECT model FROM cars_data ORDER BY horsepower ASC LIMIT 1
SELECT model_list.model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY cars_data.horsepower ASC LIMIT 1
SELECT model FROM cars_data WHERE weight <     (SELECT AVG (weight)      FROM cars_data)
SELECT model FROM cars_data WHERE weight <     (SELECT AVG (weight)      FROM cars_data)
SELECT car_makers.maker FROM car_makers JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year = 1970
SELECT DISTINCT car_makers.maker FROM car_makers JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year = 1970
SELECT car_names.make,        cars_data.year FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.accelerate > 10 ORDER BY cars_data.year ASC LIMIT 3
SELECT maker,        YEAR FROM cars_data ORDER BY YEAR ASC LIMIT 1
SELECT DISTINCT model FROM car_names WHERE YEAR > '1980'
SELECT DISTINCT cars_data.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.year > 1980
SELECT countries.countryname,        COUNT (*) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname ORDER BY COUNT (*) DESC
SELECT continents.continent,        COUNT (*) FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN continents ON countries.continent = continents.contid GROUP BY continents.continent
SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname ORDER BY COUNT (*) DESC LIMIT 1
SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY car_makers.country ORDER BY COUNT (*) DESC LIMIT 1
SELECT car_makers.fullname,        COUNT (*) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname
SELECT COUNT (*), car_makers.id,                   car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id
SELECT accelerate FROM cars_data WHERE id = 'amc hornet sportabout'
cars_data
SELECT COUNT (DISTINCT maker) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'France'
SELECT COUNT (DISTINCT car_makers.id) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'France'   AND car_makers.maker = 'Toyota'
SELECT COUNT (DISTINCT car_makers.maker) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'USA'   OR countries.countryname = 'Canada'
SELECT COUNT (*) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN car_makers ON car_names.makeid = car_makers.id JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'United States'   AND car_names.model!= 'Toyota Corolla'   AND car_names.model!= 'Lexus LS'
SELECT AVG (mpg) FROM cars_data WHERE cylinders = 4
SELECT AVG (mpg) FROM cars_data WHERE cylinders = 4
SELECT MIN (weight) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.model = 'F-150'   AND cars_data.cylinders = 8   AND cars_data.year = 1974
SELECT MIN (weight) FROM cars_data WHERE cylinders = 8   AND YEAR = 1974
car_makers
car_makers
SELECT countries.countryname,        countries.countryid FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT (*) >= 1
SELECT countries.countryname,        countries.countryid FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT (*) >= 1
SELECT COUNT (*) FROM cars_data WHERE horsepower > 150
SELECT COUNT (*) FROM cars_data WHERE horsepower > 150
SELECT AVG (weight), YEAR FROM cars_data GROUP BY YEAR
SELECT AVG (weight), YEAR FROM cars_data GROUP BY YEAR
SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT (*) >= 3
SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT (*) >= 3
SELECT cars_data.horsepower,        car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.cylinders = 3 GROUP BY car_names.make ORDER BY COUNT (*) DESC LIMIT 1
SELECT horsepower,        maker FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cylinders = 3 GROUP BY maker ORDER BY MAX (horsepower) DESC LIMIT 1
SELECT model FROM cars_data ORDER BY mpg DESC LIMIT 1
SELECT model_list.model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY cars_data.mpg DESC LIMIT 1
SELECT AVG (horsepower) FROM cars_data WHERE YEAR < 1980
SELECT AVG (horsepower) FROM cars_data WHERE YEAR < 1980
SELECT AVG (cars_data.edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE model_list.model = 'volvo'
SELECT AVG (edispl) FROM cars_data WHERE cylinders = 8   AND YEAR > 2013
SELECT MAX (accelerate), cylinders FROM cars_data GROUP BY cylinders
SELECT MAX (accelerate) FROM cars_data GROUP BY cylinders
SELECT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id GROUP BY model_list.model ORDER BY COUNT (*) DESC LIMIT 1
SELECT _,        COUNT (_) FROM _ GROUP BY _ ORDER BY COUNT (_) DESC LIMIT _
SELECT COUNT (*) FROM cars_data WHERE cylinders > 4
SELECT COUNT (*) FROM cars_data WHERE cylinders > 4
SELECT COUNT (*) FROM cars_data WHERE YEAR = '1980'
SELECT COUNT (*) FROM cars_data WHERE YEAR = 1980
SELECT COUNT (DISTINCT model_list.model) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker WHERE car_makers.fullname = 'American Motor Company'
SELECT COUNT (*) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker WHERE car_makers.maker = 'American Motor Company'   AND model_list.model!= 'X5'
SELECT car_makers.fullname,        car_makers.id FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id HAVING COUNT (*) > 3
SELECT maker,        id FROM model_list GROUP BY maker HAVING COUNT (*) > 3
SELECT DISTINCT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = 'General Motors' UNION SELECT DISTINCT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.weight > 3500
SELECT DISTINCT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.weight > 3500 UNION SELECT DISTINCT model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker WHERE car_makers.maker = 'General Motors'
SELECT YEAR FROM cars_data WHERE weight BETWEEN 3000 AND 4000
SELECT DISTINCT YEAR FROM cars_data WHERE weight < 4000 INTERSECT   SELECT DISTINCT YEAR   FROM cars_data WHERE weight > 3000
SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1
SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1
SELECT cylinders FROM cars_data WHERE accelerate =     (SELECT MIN (accelerate)      FROM cars_data      WHERE accelerate > 10 )   AND model = 'volvo'
SELECT cylinders FROM cars_data WHERE accelerate = '30'   AND make = 'Volvo' ORDER BY cylinders ASC LIMIT 1
SELECT COUNT (*) FROM cars_data WHERE accelerate >     (SELECT MAX (accelerate)      FROM cars_data)
SELECT COUNT (*) FROM cars_data WHERE accelerate >     (SELECT MAX (accelerate)      FROM cars_data)
SELECT COUNT (*) FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.countryname!= 'USA' GROUP BY countries.countryname HAVING COUNT (*) > 2
SELECT COUNT (*) FROM car_makers GROUP BY country HAVING COUNT (*) > 2
SELECT COUNT (*) FROM cars_data WHERE cylinders > 6
SELECT COUNT (*) FROM cars_data WHERE cylinders > 6
SELECT model_list.model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1
SELECT model FROM cars_data WHERE cylinders = 4 GROUP BY model ORDER BY COUNT (*) DESC LIMIT 1
SELECT car_makers.maker,        car_makers.fullname FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN car_makers ON car_names.makeid = car_makers.id WHERE cars_data.cylinders >     (SELECT MIN (cylinders)      FROM cars_data) EXCEPT SELECT car_makers.maker,        car_makers.fullname FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN car_makers ON car_names.makeid = car_makers.id GROUP BY car_makers.maker HAVING MAX (cars_data.cylinders) > 3
SELECT id,        maker,        fullname FROM car_makers WHERE horsepower <     (SELECT MIN (horsepower)      FROM cars_data)
SELECT MAX (mpg) FROM cars_data WHERE cylinders = 8   OR YEAR < 1980
SELECT MAX (mpg) FROM cars_data WHERE cylinders = 8   OR YEAR < 1980
SELECT model FROM model_list WHERE weight < 3500 EXCEPT SELECT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.maker = 'Ford Motor Company'
SELECT DISTINCT model_list.model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.weight < 3500   AND car_makers.maker!= 'Ford'
SELECT countryname FROM countries EXCEPT SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country
SELECT countryname FROM countries EXCEPT SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country
SELECT maker FROM model_list GROUP BY maker HAVING COUNT (*) >= 2 UNION SELECT maker FROM car_makers GROUP BY maker HAVING COUNT (*) > 3
SELECT car_makers.id,        car_makers.maker FROM car_makers JOIN cars_data ON car_makers.id = cars_data.id GROUP BY car_makers.id HAVING COUNT (*) >= 2 UNION SELECT car_makers.id,        car_makers.maker FROM car_makers JOIN cars_data ON car_makers.id = cars_data.id GROUP BY car_makers.id HAVING COUNT (*) > 3
SELECT countryid,        countryname FROM countries WHERE countryid IN     (SELECT DISTINCT country      FROM car_makers) INTERSECT   SELECT countries.countryid,          countries.countryname   FROM countries   JOIN model_list ON countries.countryid = model_list.maker WHERE model_list.model = 'fiat' UNION SELECT countries.countryid,        countries.countryname FROM countries JOIN model_list ON countries.countryid = model_list.maker WHERE model_list.model = 'fiat' INTERSECT   SELECT countryid,          countryname   FROM countries GROUP BY countryid HAVING COUNT (*) > 3
SELECT countries.countryid,        countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT (*) > 3 UNION SELECT countries.countryid,        countries.countryname FROM countries JOIN model_list ON countries.countryid = model_list.maker WHERE model_list.model = 'Fiat'
SELECT country FROM airlines WHERE airline = 'JetBlue Airways'
SELECT country FROM airlines WHERE airline = 'JetBlue Airways'
SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways'
SELECT abbreviation FROM airlines WHERE airline = 'Jetblue Airways'
SELECT airline,        abbreviation FROM airlines WHERE country = 'USA'
SELECT airline,        abbreviation FROM airlines WHERE country = 'USA'
SELECT airportcode,        airportname FROM airports WHERE city = 'Anthony'
SELECT airportcode,        airportname FROM airports WHERE city = 'Anthony'
SELECT COUNT (*) FROM airlines
SELECT COUNT (*) FROM airlines
###
SELECT COUNT (*) FROM airports
10896543 ###
SELECT COUNT (*) FROM flights
SELECT airline FROM airlines WHERE abbreviation = 'UAL'
SELECT airline FROM airlines WHERE abbreviation = 'UAL'
SELECT COUNT (*) FROM airlines WHERE country = 'USA'
SELECT COUNT (*) FROM airlines WHERE country = 'USA'
SELECT city,        country FROM airports WHERE airportcode = 'ALT'
SELECT city,        country FROM airports WHERE airportname = 'Alton'
SELECT airportname FROM airports WHERE airportcode = 'AKO'
SELECT airportname FROM airports WHERE airportcode = 'AKO'
SELECT airportname FROM airports WHERE city = 'Aberdeen'
SELECT airportname FROM airports WHERE city = 'Aberdeen'   AND country = 'United Kingdom'
COUNT (*) FROM flights WHERE sourceairport = 'APG'
SELECT COUNT (*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'APG'
SELECT COUNT (*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.country = 'Australia'   AND airports.countryabbrev = 'AU'
###
COUNT (*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'
COUNT (*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'
SELECT COUNT (*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'   AND airports.country = 'United States'
SELECT COUNT (*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'   AND airports.country = 'United Kingdom'   AND flights.flightno!= 'NA'
COUNT (*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'   AND airports.city = 'Ashley'
3427061961
SELECT COUNT (*) FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE airlines.airline = 'JetBlue Airways'
SELECT COUNT (*) FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE airlines.airline = 'JetBlue Airways'
COUNT (*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Austin'   AND airports.countryabbrev = 'US'   AND flights.airline = 'United Airlines'
SELECT COUNT (*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.country = 'United States'   AND airports.city = 'Austin'   AND flights.airline = 'United Airlines'
SELECT COUNT (*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Austin'   AND airlines.airline = 'United Airlines'
SELECT COUNT (*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.country = 'United States'   AND flights.airline = 'United Airlines'
SELECT COUNT (*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'   AND flights.airline = 'United Airlines'
COUNT (*) FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE airlines.airline = 'United Airlines'   AND airports.city = 'Aberdeen'
SELECT airports.city FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY airports.city ORDER BY COUNT (*) DESC LIMIT 1
SELECT airports.city FROM airports JOIN flights ON airports.airportcode = flights.destairport GROUP BY airports.city ORDER BY COUNT (*) DESC LIMIT 1
SELECT airports.city FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY flights.sourceairport ORDER BY COUNT (*) DESC LIMIT 1
SELECT airports.city FROM flights JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT (*) DESC LIMIT 1
SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT (*) DESC LIMIT 1
SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT (*) DESC LIMIT 1
SELECT airports.airportcode FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY airports.airportcode ORDER BY COUNT (*) ASC LIMIT 1
SELECT flights.sourceairport FROM flights JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY flights.sourceairport ORDER BY COUNT (*) ASC LIMIT 1
SELECT airline FROM flights GROUP BY airline ORDER BY COUNT (*) DESC LIMIT 1
SELECT airline FROM flights GROUP BY airline ORDER BY COUNT (*) DESC LIMIT 1
SELECT airlines.abbreviation,        airlines.country FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY flights.airline ORDER BY COUNT (*) ASC LIMIT 1
SELECT airlines.abbreviation,        airports.country FROM flights JOIN airports ON flights.destairport = airports.airportcode JOIN airlines ON flights.airline = airlines.uid GROUP BY airlines.abbreviation ORDER BY COUNT (*) ASC LIMIT 1
SELECT airline FROM flights WHERE sourceairport = 'AHD'
SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.sourceairport = 'AHD'
SELECT airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Austin'   AND airports.country = 'United States'
SELECT airline FROM flights WHERE destairport = 'ALA'
SELECT airline FROM flights WHERE sourceairport = 'APG' INTERSECT   SELECT airline   FROM flights WHERE sourceairport = 'CVO'
SELECT airline FROM flights WHERE sourceairport = 'APG' INTERSECT   SELECT airline   FROM flights WHERE sourceairport = 'CVO'
SELECT airline FROM flights WHERE sourceairport = 'CVO' EXCEPT SELECT airline FROM flights WHERE sourceairport = 'APG'
SELECT airline FROM flights WHERE sourceairport = 'CVO' EXCEPT SELECT airline FROM flights WHERE sourceairport = 'APG'
SELECT airline FROM flights GROUP BY airline HAVING COUNT (*) >= 10
SELECT airline FROM flights GROUP BY airline HAVING COUNT (*) >= 10
SELECT airline FROM flights GROUP BY airline HAVING COUNT (*) < 200
SELECT airline FROM flights GROUP BY airline HAVING COUNT (*) < 200
SELECT flightno FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE airlines.airline = 'United Airlines'
SELECT flightno FROM flights WHERE airline = 'United Airlines'
SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Austin'   AND airports.country = 'USA'
SELECT flightno FROM flights WHERE sourceairport = 'APG'
SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'APG'   AND airports.country = 'United States'
SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Albuquerque'   AND airports.country = 'USA'   AND airports.airportname = 'Portland International Airport'   AND flights.airline = 'American Airlines'
SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'   AND flights.airline = 'AA'
SELECT flightno FROM flights WHERE sourceairport = 'ABR'
SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE city = 'Aberdeen'   AND airports.country = 'United States'
SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'   AND airports.country = 'United Kingdom'
SELECT COUNT (*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'   OR airports.city = 'Abilene'
SELECT COUNT (*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE city = 'Aberdeen'   OR city = 'Abilene'
SELECT airportname FROM airports WHERE airportcode NOT IN     (SELECT DISTINCT sourceairport      FROM flights      UNION SELECT DISTINCT destairport      FROM flights)
SELECT airportcode FROM airports EXCEPT SELECT sourceairport FROM flights UNION SELECT destairport FROM flights
###
###
SELECT name FROM employee ORDER BY age ASC
SELECT name FROM employee ORDER BY age ASC
SELECT COUNT (*), city FROM employee GROUP BY city
SELECT COUNT (*), city FROM employee GROUP BY city
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT (*) > 1
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT (*) > 1
SELECT LOCATION,        COUNT (*) FROM shop GROUP BY LOCATION
SELECT LOCATION,        COUNT (*) FROM shop GROUP BY LOCATION
SELECT manager_name,        district FROM shop ORDER BY number_products DESC LIMIT 1
SELECT manager_name,        district FROM shop ORDER BY number_products DESC LIMIT 1
SELECT MIN (number_products), MAX (number_products) FROM shop
SELECT MIN (number_products), MAX (number_products) FROM shop
SELECT name,        LOCATION,        district FROM shop ORDER BY number_products DESC
SELECT name,        LOCATION,        district FROM shop ORDER BY number_products DESC
SELECT name FROM shop WHERE number_products >     (SELECT AVG (number_products)      FROM shop)
SELECT name FROM shop WHERE number_products >     (SELECT AVG (number_products)      FROM shop)
SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY evaluation.employee_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY evaluation.employee_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT employee.name FROM evaluation JOIN employee ON evaluation.employee_id = employee.employee_id GROUP BY evaluation.employee_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1
SELECT name FROM employee WHERE employee_id NOT IN     (SELECT DISTINCT employee_id      FROM evaluation)
SELECT name FROM employee WHERE employee_id NOT IN     (SELECT employee_id      FROM evaluation)
SELECT shop.name FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY hiring.shop_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT shop.name FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY shop.name ORDER BY COUNT (*) DESC LIMIT 1
SELECT name FROM shop EXCEPT SELECT shop.name FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id
SELECT name FROM shop WHERE shop_id NOT IN     (SELECT shop_id      FROM hiring)
SELECT shop.name,        COUNT (*) FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY hiring.shop_id
SELECT COUNT (*), shop.name FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY shop.name
SELECT SUM (bonus) FROM evaluation
SELECT SUM (bonus) FROM evaluation
SELECT * FROM hiring
SELECT * FROM hiring
SELECT district FROM shop WHERE number_products < 3000 INTERSECT   SELECT district   FROM shop WHERE number_products > 10000
SELECT district FROM shop WHERE number_products < 3000 INTERSECT   SELECT district   FROM shop WHERE number_products > 10000
SELECT COUNT (DISTINCT LOCATION) FROM shop
SELECT COUNT (DISTINCT LOCATION) FROM shop
SELECT COUNT (*) FROM documents
SELECT COUNT (*) FROM documents
SELECT document_id,        document_name,        document_description FROM documents
SELECT document_id,        document_name,        document_description FROM documents
SELECT document_name,        template_id FROM documents WHERE document_description like '%w%'
SELECT documents.document_name,        documents.template_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE paragraphs.paragraph_text like '%w%'
SELECT document_id,        template_id,        document_description FROM documents WHERE document_name = 'Robbin CV'
SELECT document_id,        template_id,        document_description FROM documents WHERE document_name = 'Robbin CV'
SELECT COUNT (DISTINCT template_id) FROM documents
COUNT (DISTINCT templates.template_id)
SELECT COUNT (*) FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'PPT'
SELECT COUNT (*) FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'PPT'
SELECT templates.template_id,        COUNT (*) FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id
SELECT COUNT (*), documents.template_id FROM documents JOIN templates ON documents.template_id = templates.template_id GROUP BY documents.template_id
SELECT documents.template_id,        ref_template_types.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code GROUP BY documents.template_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT templates.template_id,        templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id GROUP BY documents.template_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT templates.template_id FROM documents JOIN templates ON documents.template_id = templates.template_id GROUP BY templates.template_id HAVING COUNT (*) > 1
SELECT template_id FROM documents GROUP BY template_id HAVING COUNT (*) > 1
SELECT template_id FROM templates EXCEPT SELECT template_id FROM documents
SELECT template_id FROM templates EXCEPT SELECT template_id FROM documents
SELECT COUNT (*) FROM templates
templates
SELECT template_id,        version_number,        template_type_code FROM templates
SELECT template_id,        version_number,        template_type_code FROM templates
SELECT DISTINCT template_type_code FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code
SELECT DISTINCT template_type_code FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code
SELECT template_id FROM templates WHERE template_type_code = 'PP'   OR template_type_code = 'PPT'
SELECT template_id FROM templates WHERE template_type_code = 'PP'   OR template_type_code = 'PPT'
SELECT COUNT (*) FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_code = 'CV'
SELECT COUNT (*) FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_description = 'CV'   AND templates.date_effective_to >= '2013-08-26 09:54:17'   AND templates.date_effective_from <= '2006-04-06 22:12:46'
SELECT version_number,        template_type_code FROM templates WHERE version_number > 5
SELECT version_number,        template_type_code FROM templates WHERE version_number > 5
SELECT template_type_code,        COUNT (*) FROM templates GROUP BY template_type_code
SELECT template_type_code,        COUNT (*) FROM templates GROUP BY template_type_code
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT (*) DESC LIMIT 1
SELECT templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id GROUP BY templates.template_type_code ORDER BY COUNT (*) DESC LIMIT 1
SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT (*) < 3
SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT (*) < 3
SELECT version_number,        template_type_code FROM templates ORDER BY version_number ASC LIMIT 1
SELECT version_number,        template_type_code FROM templates ORDER BY version_number ASC LIMIT 1
SELECT templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Data base'   AND templates.date_effective_to =     (SELECT MAX (date_effective_to)      FROM templates)
SELECT templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Data base'
SELECT documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK'
SELECT documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK'
SELECT templates.template_type_code,        COUNT (*) FROM documents JOIN templates ON documents.template_id = templates.template_id GROUP BY templates.template_type_code
SELECT templates.template_type_code,        COUNT (*) FROM documents JOIN templates ON documents.template_id = templates.template_id GROUP BY templates.template_type_code
SELECT template_type_code FROM documents GROUP BY template_type_code ORDER BY COUNT (*) DESC LIMIT 1
SELECT template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id GROUP BY templates.template_type_code ORDER BY COUNT (*) DESC LIMIT 1
SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN     (SELECT DISTINCT template_type_code      FROM documents)
SELECT template_type_code FROM ref_template_types EXCEPT SELECT templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id
SELECT template_type_code,        template_type_description FROM ref_template_types ORDER BY template_type_code ASC
SELECT template_type_code,        template_type_description FROM ref_template_types
SELECT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code WHERE templates.template_type_code = 'AD'
SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'
SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'
SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'
SELECT DISTINCT ref_template_types.template_type_description FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code
SELECT DISTINCT documents.document_description FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'Statement'   AND templates.date_effective_to > '2016-09-30 15:46:28'   AND templates.date_effective_from < '2017-09-30 15:46:28'
SELECT template_id FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_description = 'Presentation'
SELECT template_id FROM documents WHERE document_description = 'Presentation'
###
###
SELECT COUNT (*) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE documents.document_name = 'Summer Show'
SELECT COUNT (*) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE documents.document_name = 'Summer Show'
SELECT paragraph_text FROM paragraphs WHERE paragraph_text like '%Korea %'
SELECT other_details FROM paragraphs WHERE paragraph_text like '% Korea %'
SELECT paragraphs.paragraph_id,        paragraphs.paragraph_text FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE documents.document_name = 'Welcome to NY'
SELECT paragraphs.paragraph_id,        paragraphs.paragraph_text FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE documents.document_name = 'Welcome to NY'
SELECT paragraphs.paragraph_text FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE documents.document_name = 'Customer reviews'
SELECT paragraphs.paragraph_text FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE documents.document_name = 'Customer reviews'
SELECT document_id,        COUNT (*) FROM paragraphs GROUP BY document_id ORDER BY document_id ASC
SELECT document_id,        COUNT (*) FROM paragraphs GROUP BY document_id ORDER BY document_id ASC
SELECT document_id,        document_name,        COUNT (*) FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id,          documents.document_name
SELECT document_id,        document_name,        COUNT (*) FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id GROUP BY document_id,          document_name
SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT (*) >= 2
SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT (*) >= 2
SELECT document_id,        document_name FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id GROUP BY document_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT documents.document_id,        documents.document_name FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT (*) ASC LIMIT 1
SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT (*) ASC LIMIT 1
SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT (*) >= 1
SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT (*) >= 1 OR COUNT (*) <= 2
SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil' INTERSECT   SELECT document_id   FROM paragraphs WHERE paragraph_text = 'Ireland'
SELECT document_id FROM paragraphs WHERE paragraph_text like '%Brazil%'   OR paragraph_text like '%Ireland%'
SELECT COUNT (*) FROM teacher
SELECT COUNT (*) FROM teacher
SELECT name FROM teacher ORDER BY age ASC
SELECT name FROM teacher ORDER BY age ASC
SELECT age,        hometown FROM teacher
SELECT age,        hometown FROM teacher
SELECT name FROM teacher WHERE hometown!= 'Little Lever Urban District'
SELECT name FROM teacher WHERE hometown!= 'Little Lever Urban District'
SELECT name FROM teacher WHERE age = 32   OR age = 33
SELECT name FROM teacher WHERE age = 32   OR age = 33
SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1
SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1
SELECT hometown,        COUNT (*) FROM teacher GROUP BY hometown
SELECT hometown,        COUNT (DISTINCT teacher_id) FROM teacher GROUP BY hometown
SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT (*) DESC LIMIT 1
SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT (*) DESC LIMIT 1
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT (*) >= 2
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT (*) >= 2
SELECT teacher.name,        course.course FROM course_arrange JOIN course ON course_arrange.course_id = course.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id
SELECT teacher.name,        course.course FROM course_arrange JOIN course ON course_arrange.course_id = course.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id
SELECT teacher.name,        course.course FROM course_arrange JOIN course ON course_arrange.course_id = course.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id ORDER BY teacher.name ASC
SELECT teacher.name,        course.course FROM course_arrange JOIN course ON course_arrange.course_id = course.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id ORDER BY teacher.name ASC
SELECT teacher.name FROM course JOIN course_arrange ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id WHERE course.course_name = math'
SELECT teacher.name FROM course_arrange JOIN course ON course_arrange.course_id = course.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id WHERE course.course = math'
SELECT teacher.name,        COUNT (*) FROM course_arrange JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id GROUP BY teacher.name
SELECT teacher.name,        COUNT (*) FROM course_arrange JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id GROUP BY teacher.name
SELECT teacher.name FROM course_arrange JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id GROUP BY course_arrange.teacher_id HAVING COUNT (*) >= 2
SELECT teacher.name FROM course_arrange JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id GROUP BY course_arrange.teacher_id HAVING COUNT (*) >= 2
SELECT name FROM teacher WHERE teacher_id NOT IN     (SELECT teacher_id      FROM course_arrange)
SELECT name FROM teacher WHERE teacher_id NOT IN     (SELECT teacher_id      FROM course_arrange)
SELECT COUNT (*) FROM visitor WHERE age < 30   AND level_of_membership = regular'
SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership ASC
SELECT AVG (age) FROM visitor WHERE level_of_membership NOT IN     (SELECT DISTINCT level_of_membership      FROM visitor      WHERE level_of_membership > 4 )
SELECT name,        level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age ASC
SELECT museum_id,        name FROM museum ORDER BY num_of_staff DESC LIMIT 1
SELECT AVG (num_of_staff) FROM museum WHERE open_year < 2009
SELECT open_year,        num_of_staff FROM museum WHERE name = 'Plaza Museum'
SELECT name FROM museum WHERE num_of_staff >     (SELECT MIN (num_of_staff)      FROM museum      WHERE open_year > 2010 )
SELECT visitor.id,        visitor.name,        visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id HAVING COUNT (*) > 1
SELECT visitor.id,        visitor.name,        visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id ORDER BY SUM (visit.total_spent) DESC LIMIT 1
SELECT museum_id,        museum.name FROM museum JOIN visit ON museum.museum_id = visit.museum_id GROUP BY visit.museum_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT name FROM museum WHERE museum_id NOT IN     (SELECT museum_id      FROM visit)
SELECT visitor.name,        visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visit.visitor_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT AVG (num_of_ticket), MAX (num_of_ticket) FROM visit
SELECT SUM (total_spent) FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership = '1'
SELECT visitor.name FROM visitor JOIN visit ON visitor.id = visit.visitor_id JOIN museum ON museum.museum_id = visit.museum_id WHERE museum.open_year < 2009 INTERSECT   SELECT visitor.name   FROM visitor   JOIN visit ON visitor.id = visit.visitor_id   JOIN museum ON museum.museum_id = visit.museum_id WHERE museum.open_year > 2011
SELECT COUNT (*) FROM visitor WHERE id NOT IN     (SELECT visitor_id      FROM visit      WHERE museum_id IN          (SELECT museum_id           FROM museum           WHERE open_year > 2010 ) )
SELECT COUNT (*) FROM museum WHERE open_year > 2013   OR open_year < 2008
SELECT COUNT (*) FROM players
SELECT COUNT (*) FROM players
SELECT COUNT (*) FROM matches
matches
SELECT first_name,        birth_date FROM players WHERE country_code = 'USA'
SELECT first_name,        birth_date FROM players WHERE country_code = 'USA'
SELECT AVG (loser_age) FROM matches UNION SELECT AVG (winner_age) FROM matches
SELECT AVG (loser_age), AVG (winner_age) FROM matches GROUP BY loser_name,          winner_name
SELECT AVG (rankings.ranking) FROM rankings JOIN matches ON rankings.tours = matches.tourney_id AND rankings.player_id = matches.winner_id WHERE matches.winning_pos = '1'   OR matches.winning_pos = '2'   OR matches.winning_pos = '3'   OR matches.winning_pos = '4'   OR matches.winning_pos = '5'
SELECT AVG (winner_rank) FROM rankings WHERE player_id NOT IN     (SELECT DISTINCT player_id      FROM matches)
SELECT MAX (matches.loser_rank) FROM matches JOIN rankings ON matches.tourney_id = rankings.tours AND matches.loser_id = rankings.player_id WHERE rankings.ranking > 2500   OR matches.loser_rank_points < 75000
SELECT loser_rank FROM matches WHERE loser_rank!= '?' GROUP BY loser_rank ORDER BY COUNT (*) DESC LIMIT 1
SELECT COUNT (DISTINCT country_code) FROM players
SELECT COUNT (DISTINCT country_code) FROM players
SELECT COUNT (DISTINCT loser_name) FROM matches WHERE score < 400   OR score > 500
SELECT COUNT (DISTINCT loser_name) FROM matches JOIN players ON matches.loser_id = players.player_id
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT (*) > 10
SELECT tourney_name FROM matches WHERE YEAR!= '2006' GROUP BY tourney_name HAVING COUNT (*) > 10
SELECT players.first_name,        players.last_name FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = '2013' INTERSECT   SELECT players.first_name,          players.last_name   FROM players   JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = '2016'
SELECT players.first_name,        players.last_name FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = '2013' INTERSECT   SELECT players.first_name,          players.last_name   FROM players   JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = '2016'
SELECT COUNT (*) FROM matches WHERE YEAR = '2013'   OR YEAR = '2016'
SELECT COUNT (*) FROM matches WHERE YEAR = 2013 INTERSECT   SELECT COUNT (*)   FROM matches WHERE YEAR = 2016
SELECT players.country_code,        players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON rankings.tourney_id = matches.tourney_id WHERE matches.tourney_name = 'WTA Championship' INTERSECT   SELECT players.country_code,          players.first_name   FROM players   JOIN rankings ON players.player_id = rankings.player_id   JOIN matches ON rankings.tourney_id = matches.tourney_id WHERE matches.tourney_name = 'Australian Open'
SELECT players.first_name,        players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON rankings.tourney_id = matches.tourney_id WHERE rankings.ranking = '1' INTERSECT   SELECT players.first_name,          players.country_code   FROM players   JOIN rankings ON players.player_id = rankings.player_id   JOIN matches ON rankings.tourney_id = matches.tourney_id WHERE rankings.ranking = '2'
SELECT first_name,        country_code FROM players ORDER BY birth_date DESC LIMIT 1
SELECT first_name,        country_code FROM players ORDER BY birth_date ASC LIMIT 1
SELECT first_name,        last_name FROM players ORDER BY birth_date ASC
SELECT first_name,        last_name FROM players ORDER BY birth_date ASC
SELECT first_name,        last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC
SELECT first_name,        last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC
SELECT players.first_name,        players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT players.first_name,        players.country_code FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY COUNT (*) DESC LIMIT 1
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY COUNT (*) DESC LIMIT 1
SELECT players.first_name,        players.last_name,        rankings.ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY rankings.player_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT players.first_name,        players.last_name,        players.country_code,        rankings.ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY rankings.player_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT players.first_name,        players.last_name FROM rankings JOIN players ON rankings.player_id = players.player_id WHERE rankings.tours = 'Australian Open' ORDER BY rankings.ranking_points DESC LIMIT 1
SELECT players.first_name,        players.last_name FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = 'Australian Open'   AND rankings.ranking > 1 GROUP BY players.player_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT matches.loser_name,        players.first_name,        players.last_name,        matches.minutes FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY matches.minutes DESC LIMIT 1
SELECT players.first_name,        players.last_name,        matches.tourney_name,        matches.tourney_date FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.minutes =     (SELECT MAX (minutes)      FROM matches)
SELECT AVG (ranking), first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
SELECT players.first_name,        AVG (rankings.ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id
SELECT players.first_name,        players.last_name,        rankings.ranking_points FROM rankings JOIN players ON rankings.player_id = players.player_id ORDER BY rankings.ranking_points ASC
SELECT players.first_name,        SUM (rankings.ranking_points) FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY players.first_name
SELECT country_code,        COUNT (*) FROM players GROUP BY country_code
SELECT country_code,        COUNT (*) FROM players GROUP BY country_code
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT (*) DESC LIMIT 1
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT (*) DESC LIMIT 1
SELECT country_code FROM players GROUP BY country_code HAVING COUNT (*) > 50
SELECT country_code FROM players GROUP BY country_code HAVING COUNT (*) > 50
SELECT tourney_date,        COUNT (*) FROM rankings GROUP BY tourney_date ORDER BY COUNT (*) DESC LIMIT 10
SELECT ranking_date,        COUNT (*) FROM rankings GROUP BY ranking_date
SELECT COUNT (*), YEAR FROM matches GROUP BY YEAR ORDER BY COUNT (*) DESC
SELECT COUNT (*), YEAR FROM matches GROUP BY YEAR
SELECT players.first_name,        players.last_name,        rank.ranking FROM   (SELECT *    FROM rankings    ORDER BY ranking ASC    LIMIT 3) AS rank JOIN players ON rank.player_id = players.player_id ORDER BY players.birth_date ASC LIMIT 3
SELECT players.first_name,        players.last_name,        matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.winner_age ASC LIMIT 3 EXCEPT SELECT players.first_name,        players.last_name,        matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.winner_age DESC LIMIT 2 EXCEPT SELECT players.first_name,        players.last_name,        matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.winner_age DESC LIMIT 1
SELECT COUNT (DISTINCT players.first_name) FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championship' INTERSECT   SELECT COUNT (DISTINCT players.first_name)   FROM players   JOIN matches ON players.player_id = matches.loser_id WHERE matches.tourney_name = 'WTA Championship'
SELECT COUNT (*) FROM players JOIN matches ON players.player_id = matches.winner_id WHERE players.hand = 'Left'   AND matches.tourney_name = 'World Tour Auto racing Championship'
SELECT players.first_name,        players.country_code,        players.birth_date FROM   (SELECT *    FROM rankings    JOIN players ON rankings.player_id = players.player_id    ORDER BY rankings.ranking_points DESC) WHERE rankings.player_id =     (SELECT MAX (player_id)      FROM rankings)
SELECT players.first_name,        players.country_code,        players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours > 0 ORDER BY rankings.ranking_points DESC LIMIT 1
SELECT winner_hand,        COUNT (*) FROM matches GROUP BY winner_hand
SELECT winner_hand,        COUNT (*) FROM matches GROUP BY winner_hand
SELECT COUNT (*) FROM death WHERE note = 'Captured'
SELECT name,        tonnage FROM ship ORDER BY name DESC
SELECT name, date, RESULT FROM battle
SELECT MAX (death.killed), MIN (death.killed), death.id FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY death.id
SELECT AVG (injured), id FROM death GROUP BY id
SELECT * FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'
SELECT name,        RESULT FROM battle WHERE bulgarian_commander!= 'Boril'
SELECT DISTINCT battle.id,                 battle.name FROM death JOIN ship ON death.caused_by_ship_id = ship.id JOIN battle ON ship.lost_in_battle = battle.id WHERE ship.ship_type = 'Brig'   AND battle.result = 'loss'
SELECT battle.id,        battle.name FROM death JOIN ship ON death.caused_by_ship_id = ship.id JOIN battle ON ship.lost_in_battle = battle.id GROUP BY battle.id HAVING SUM (death.killed) + SUM (death.injured) > 10
SELECT death.caused_by_ship_id,        ship.name FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY death.caused_by_ship_id ORDER BY SUM (death.injured) DESC LIMIT 1
SELECT DISTINCT battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE bulgarian_commander = 'Kaloyan'   AND latin_commander = 'Baldwin I'
SELECT COUNT (DISTINCT RESULT) FROM battle
SELECT COUNT (*) FROM battle WHERE id NOT IN     (SELECT lost_in_battle      FROM ship      WHERE tonnage = 225 )
SELECT battle.name,        battle.date FROM ship JOIN battle ON ship.lost_in_battle = battle.id WHERE ship.name = 'Lettice' EXCEPT SELECT battle.name,        battle.date FROM ship JOIN battle ON ship.lost_in_battle = battle.id WHERE ship.name = 'HMS Atalanta'
SELECT name,        RESULT,        bulgarian_commander FROM battle WHERE id NOT IN     (SELECT lost_in_battle      FROM ship      WHERE LOCATION = 'English Channel' )
SELECT note FROM death WHERE note like '%East%'
SELECT line_1,        line_2 FROM addresses
SELECT line_1,        line_2 FROM addresses
SELECT COUNT (*) FROM courses
SELECT COUNT (*) FROM courses
SELECT course_description FROM courses WHERE course_name = 'Math'
SELECT course_description FROM courses WHERE course_name = 'Mathematics'
SELECT addresses.zip_postcode FROM addresses JOIN students ON addresses.address_id = students.current_address_id WHERE addresses.city = 'Port Chelsea'   AND addresses.state_province_county = 'NY'
SELECT zip_postcode FROM addresses WHERE line_1 = 'Port Chelsea'   AND city = 'London'   AND country = 'UK'
SELECT departments.department_name,        degree_programs.degree_program_id FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY degree_programs.degree_program_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT departments.department_name,        degree_programs.degree_program_id FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id GROUP BY departments.department_name ORDER BY COUNT (*) DESC LIMIT 1
SELECT COUNT (DISTINCT department_id) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id WHERE departments.department_name!= 'None'   AND degree_programs.degree_summary_name!= 'None'
SELECT COUNT (DISTINCT department_id) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id
SELECT COUNT (DISTINCT degree_summary_name) FROM degree_programs
SELECT COUNT (DISTINCT degree_summary_name) FROM degree_programs
0
SELECT COUNT (*) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id WHERE departments.department_name = 'Engineering'   AND degree_programs.degree_summary_name = 'Bachelor of Science'
SELECT section_name,        section_description FROM sections
SELECT section_name,        section_description FROM sections
SELECT courses.course_name,        courses.course_id FROM courses JOIN sections ON courses.course_id = sections.course_id GROUP BY courses.course_id HAVING COUNT (*) <= 2
SELECT courses.course_name,        courses.course_id FROM sections JOIN courses ON sections.course_id = courses.course_id GROUP BY courses.course_id HAVING COUNT (*) < 2
SELECT section_name FROM sections ORDER BY section_name DESC
SELECT section_name FROM sections ORDER BY section_name DESC
SELECT semesters.semester_name,        semesters.semester_id FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT semesters.semester_name,        semesters.semester_id FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT department_description FROM departments WHERE department_name like '%computer%'
SELECT department_description FROM departments WHERE department_name like '%computer%'
SELECT students.first_name,        students.middle_name,        students.last_name,        student_enrolment.student_enrolment_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.degree_program_id = '2' GROUP BY student_enrolment.student_id ORDER BY COUNT (*) ASC LIMIT 500
SELECT students.first_name,        students.middle_name,        students.last_name,        student_enrolment.student_enrolment_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.degree_program_id = '2'   AND student_enrolment.semester_id = '1'
SELECT students.first_name,        students.middle_name,        students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Bachelor'   AND student_enrolment.registration_date <= '2015-09-14 17:46:48'   AND student_enrolment.deregistration_date >= '2015-06-21 22:18:28'
SELECT students.first_name,        students.middle_name,        students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Bachelor of Science'   OR degree_programs.degree_summary_name = 'Master of Business Administration (MBA)'
SELECT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY courses.course_name ORDER BY COUNT (*) DESC LIMIT 1
SELECT degree_programs.degree_summary_name FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY student_enrolment.degree_program_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT courses.course_id,        courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY courses.course_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT degree_programs.degree_program_id,        degree_programs.degree_summary_description FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY student_enrolment.degree_program_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT students.student_id,        students.first_name,        students.middle_name,        students.last_name,        COUNT (*) FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT students.first_name,        students.middle_name,        students.last_name,        students.student_id,        COUNT (*) FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT semester_name FROM semesters EXCEPT SELECT semesters.semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id
SELECT semester_name FROM semesters EXCEPT SELECT semesters.semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id HAVING COUNT (*) > 50000
SELECT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY courses.course_id HAVING COUNT (DISTINCT student_enrolment_courses.student_enrolment_id) >= 20
SELECT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id WHERE courses.course_id IN     (SELECT course_id      FROM student_enrolment_courses)
SELECT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY courses.course_name ORDER BY COUNT (*) DESC LIMIT 1
SELECT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY courses.course_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT last_name FROM students WHERE state_province_county = 'North Carolina' EXCEPT SELECT DISTINCT students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name!= 'None'   AND students.state_province_county = 'North Carolina'
SELECT last_name FROM students WHERE state_province_county = 'North Carolina' EXCEPT SELECT students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name!= 'Computer Science'   OR degrees.degree_type!= 'Bachelor'
SELECT transcripts.transcript_date,        transcript_id FROM transcript_contents JOIN transcripts ON transcript_contents.transcript_id = transcripts.transcript_id GROUP BY transcript_contents.transcript_id HAVING COUNT (*) >= 2
SELECT transcripts.transcript_date,        transcript_contents.transcript_id FROM courses JOIN transcript_contents ON courses.course_id = transcript_contents.course_id JOIN transcripts ON transcript_contents.transcript_id = transcripts.transcript_id GROUP BY transcripts.transcript_date,          transcript_contents.transcript_id HAVING COUNT (*) >= 2
SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy'   AND last_name = 'Ward'
SELECT cell_mobile_number FROM students WHERE first_name = 'Timothy'   AND last_name = 'Ward'
SELECT first_name,        middle_name,        last_name FROM students ORDER BY date_first_registered ASC LIMIT 1
SELECT students.first_name,        students.middle_name,        students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id ORDER BY student_enrolment.date_first_registered ASC LIMIT 1
SELECT first_name,        middle_name,        last_name FROM students WHERE date_first_registered <= '2008-05-06 09:47:35' ORDER BY date_first_registered ASC LIMIT 1
SELECT first_name,        middle_name,        last_name FROM students WHERE date_left = '9999-12-31' ORDER BY date_first_registered ASC LIMIT 1
SELECT first_name FROM students WHERE permanent_address_id!=     (SELECT permanent_address_id      FROM students      WHERE first_name = 'Dan'        AND last_name = 'Walton' )
SELECT first_name FROM students WHERE permanent_address_id!=     (SELECT current_address_id      FROM students      WHERE first_name = 'Susan' )
SELECT addresses.address_id,        addresses.line_1,        addresses.line_2,        addresses.city,        addresses.zip_postcode,        addresses.state_province_county FROM addresses JOIN students ON addresses.address_id = students.current_address_id GROUP BY students.current_address_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT addresses.address_id,        addresses.line_1,        addresses.line_2 FROM addresses JOIN students ON addresses.address_id = students.current_address_id GROUP BY addresses.address_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT AVG (transcript_date) FROM transcripts
SELECT AVG (transcript_date) FROM transcripts
SELECT transcript_date,        other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1
SELECT transcript_date,        other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1
###
SELECT COUNT (*) FROM transcripts
SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1
SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1
SELECT student_enrolment_id FROM student_enrolment_courses GROUP BY student_enrolment_id ORDER BY COUNT (*) DESC LIMIT 10
SELECT courses.enrollment_id,        courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY courses.enrollment_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT transcript_date,        transcript_id FROM transcripts GROUP BY transcript_date ORDER BY COUNT (*) ASC LIMIT 1
SELECT transcript_date,        transcript_id FROM transcripts GROUP BY transcript_id ORDER BY COUNT (*) ASC LIMIT 1
SELECT semester_id FROM student_enrolment WHERE degree_program_id = 'Master of Science' INTERSECT   SELECT semester_id   FROM student_enrolment WHERE degree_program_id = 'Bachelor of Science'
SELECT semester_id FROM student_enrolment JOIN semesters ON student_enrolment.semester_id = semesters.semester_id WHERE student_enrolment.degree_program_id = 'Master of Business Administration' INTERSECT   SELECT semester_id   FROM student_enrolment   JOIN semesters ON student_enrolment.semester_id = semesters.semester_id WHERE student_enrolment.degree_program_id = 'Bachelor of Science in Computer Science'
SELECT COUNT (DISTINCT current_address_id) FROM students WHERE date_left = '9999-12-31'   AND date_first_registered!= '9999-12-31'
SELECT DISTINCT addresses.line_1,                 addresses.city,                 addresses.zip_postcode FROM addresses JOIN students ON addresses.address_id = students.current_address_id WHERE addresses.country = 'Canada'   OR addresses.country = 'USA'
SELECT * FROM students ORDER BY date_first_registered DESC
SELECT other_student_details FROM students ORDER BY last_name DESC
SELECT section_name FROM sections WHERE course_id = '601'   AND section_name!= 'F'
SELECT section_description FROM sections WHERE section_name = 'h'
SELECT first_name FROM students WHERE country = 'Haiti'   OR cell_mobile_number = '09700166582'
SELECT first_name FROM students WHERE country = 'Haiti'   AND cell_mobile_number = '09700166582' UNION SELECT first_name FROM students WHERE country = 'Haiti'   AND permanent_address_id!= 'None'
SELECT title FROM cartoon ORDER BY title ASC
SELECT title FROM cartoon ORDER BY title ASC
SELECT title FROM cartoon WHERE directed_by = 'Ben Jones'
SELECT title FROM cartoon WHERE directed_by = 'Ben Jones'
SELECT COUNT (*) FROM cartoon WHERE written_by = 'Joseph Kuhr'
SELECT COUNT (*) FROM cartoon WHERE written_by = 'Joseph Kuhr'
SELECT title,        directed_by FROM cartoon ORDER BY original_air_date ASC
SELECT title,        directed_by FROM cartoon ORDER BY original_air_date ASC
SELECT title FROM cartoon WHERE directed_by = 'Ben Jones'   OR directed_by = 'Brandon Vietti'
SELECT title FROM cartoon WHERE directed_by = 'Ben Jones'   OR directed_by = 'Brandon Vietti'
SELECT country,        COUNT (*) FROM tv_channel GROUP BY country ORDER BY COUNT (*) DESC LIMIT 1
SELECT country,        COUNT (*) FROM tv_channel GROUP BY country ORDER BY COUNT (*) DESC LIMIT 1
SELECT COUNT (DISTINCT series_name), COUNT (DISTINCT content) FROM tv_channel
SELECT COUNT (DISTINCT series_name), COUNT (DISTINCT content) FROM tv_channel
SELECT content FROM tv_channel WHERE series_name = 'Sky Radio'
SELECT content FROM tv_channel WHERE series_name = 'Sky Radio'
SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'
SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'
SELECT COUNT (*) FROM tv_channel WHERE LANGUAGE = 'english'
SELECT COUNT (*) FROM tv_channel WHERE LANGUAGE = 'english'
SELECT LANGUAGE,        COUNT (*) FROM tv_channel GROUP BY LANGUAGE ORDER BY COUNT (*) ASC LIMIT 1
SELECT LANGUAGE,        COUNT (*) FROM tv_channel GROUP BY LANGUAGE ORDER BY COUNT (*) ASC LIMIT 1
SELECT LANGUAGE,        COUNT (*) FROM tv_channel GROUP BY LANGUAGE
SELECT LANGUAGE,        COUNT (*) FROM tv_channel GROUP BY LANGUAGE
SELECT tv_channel.series_name FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.title = 'The Rise of the Blue Beetle!'
SELECT tv_channel.series_name FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.title = 'The Rise of the Blue Beetle'   OR cartoon.title = 'Scary Movie 2'   AND cartoon.written_by = 'Robin'
SELECT cartoon.title FROM cartoon JOIN tv_series ON cartoon.channel = tv_series.channel WHERE tv_series.series_name = 'Sky Radio'   AND cartoon.original_air_date >= '2003-07-16'   AND cartoon.original_air_date <= '2003-10-22'
SELECT cartoon.title FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio'   AND tv_channel.content = 'TV'
SELECT episode FROM tv_series ORDER BY rating ASC
SELECT episode FROM tv_series ORDER BY rating ASC
SELECT episode,        rating FROM tv_series ORDER BY rating DESC LIMIT 3
SELECT episode,        rating FROM tv_series ORDER BY rating DESC LIMIT 3
SELECT MIN (SHARE), MAX (SHARE) FROM tv_series
SELECT MAX (SHARE), MIN (SHARE) FROM tv_series
SELECT air_date FROM tv_series WHERE episode = 'A Love of a Lifetime'
SELECT air_date FROM tv_series WHERE episode = 'A Love of a Lifetime'   AND channel = 'Channel 2'
SELECT weekly_rank FROM tv_series WHERE episode = 'A Love of a Lifetime'
SELECT weekly_rank FROM tv_series WHERE episode = 'A Love of a Lifetime'
SELECT tv_channel.series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_series.episode = 'A Love of a Lifetime'
SELECT tv_channel.series_name FROM cartoon JOIN tv_series ON cartoon.channel = tv_series.channel WHERE cartoon.title = 'A Love of a Lifetime'   OR tv_series.episode = 'A Love of a Lifetime'
SELECT tv_series.episode FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio'
SELECT episode FROM tv_series WHERE series_name = 'Sky Radio'
SELECT directed_by,        COUNT (*) FROM cartoon GROUP BY directed_by
SELECT directed_by,        COUNT (*) FROM cartoon GROUP BY directed_by
SELECT production_code,        channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1
SELECT production_code,        channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1
SELECT package_option,        series_name FROM tv_channel WHERE hight_definition_tv = 'Yes'
SELECT package_option,        series_name FROM tv_channel WHERE hight_definition_tv = 'yes'
SELECT country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey'   AND tv_channel.content = 'Cartoon'
SELECT country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey'   OR cartoon.directed_by = 'Todd Casey'
SELECT country FROM tv_channel WHERE series_name!= 'cartoons'   AND content!= 'cartoon' EXCEPT SELECT country FROM cartoon WHERE written_by = 'Todd Casey'
SELECT country FROM tv_channel WHERE content = 'Cartoons'   AND written_by!= 'Todd Casey' EXCEPT SELECT country FROM tv_channel WHERE content = 'Movies'
SELECT tv_channel.series_name,        tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = 'Ben Jones'   OR cartoon.directed_by = 'Michael Chang'
SELECT tv_channel.series_name,        tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = 'Ben Jones' INTERSECT   SELECT tv_channel.series_name,          tv_channel.country   FROM cartoon   JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = 'Michael Chang'
SELECT pixel_aspect_ratio_par,        country FROM tv_channel WHERE LANGUAGE!= 'english'
SELECT pixel_aspect_ratio_par,        country FROM tv_channel WHERE LANGUAGE!= 'english'
SELECT channel FROM tv_channel GROUP BY country HAVING COUNT (*) > 2
SELECT id FROM tv_channel GROUP BY channel_owner_id HAVING COUNT (*) > 2
SELECT id FROM tv_channel WHERE series_name!= 'cartoons' EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'
SELECT id FROM tv_channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'
SELECT package_option FROM tv_channel WHERE series_name = 'Cartoon'   AND directed_by!= 'Ben Jones' EXCEPT SELECT package_option FROM tv_channel WHERE series_name = 'Music'   OR series_name = 'TV Shows'
SELECT package_option FROM tv_channel WHERE series_name!= 'cartoon'   AND directed_by!= 'Ben Jones'
COUNT (*)
###
SELECT earnings FROM poker_player ORDER BY earnings DESC
SELECT earnings FROM poker_player ORDER BY earnings DESC
SELECT final_table_made,        best_finish FROM poker_player ORDER BY best_finish ASC
SELECT final_table_made,        best_finish FROM poker_player ORDER BY money_rank DESC LIMIT 10
SELECT AVG (earnings) FROM poker_player WHERE final_table_made = 'yes'
SELECT AVG (earnings) FROM poker_player
SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1
SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1
SELECT MAX (final_table_made) FROM poker_player WHERE earnings < 200000
SELECT MAX (final_table_made) FROM poker_player WHERE earnings < 200000
SELECT people.name FROM people JOIN poker_player ON people.people_id = poker_player.people_id
SELECT people.name FROM people JOIN poker_player ON people.people_id = poker_player.people_id
SELECT people.name FROM people JOIN poker_player ON people.people_id = poker_player.people_id WHERE poker_player.earnings > 300000
SELECT people.name FROM people JOIN poker_player ON people.people_id = poker_player.people_id WHERE poker_player.earnings > 300000
SELECT people.name FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY poker_player.final_table_made ASC
SELECT people.name FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY poker_player.final_table_made ASC
SELECT people.birth_date FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY poker_player.earnings ASC LIMIT 1
SELECT people.birth_date FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY poker_player.earnings ASC LIMIT 1
SELECT money_rank FROM poker_player ORDER BY people.height DESC LIMIT 1
SELECT money_rank FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY people.height DESC LIMIT 1
SELECT AVG (earnings) FROM people JOIN poker_player ON people.people_id = poker_player.people_id WHERE people.height > 200
SELECT AVG (earnings) FROM people JOIN poker_player ON people.people_id = poker_player.people_id WHERE people.height > 200   AND poker_player.money_rank = '1'
SELECT people.name FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY poker_player.earnings DESC
SELECT people.name FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY poker_player.earnings DESC
SELECT nationality,        COUNT (*) FROM people GROUP BY nationality
SELECT nationality,        COUNT (*) FROM people GROUP BY nationality
SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT (*) DESC LIMIT 1
SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT (*) DESC LIMIT 1
SELECT nationality FROM people GROUP BY nationality HAVING COUNT (*) >= 2
SELECT nationality FROM people GROUP BY nationality HAVING COUNT (*) >= 2
SELECT name,        birth_date FROM people ORDER BY name ASC
SELECT name,        birth_date FROM people ORDER BY name ASC
SELECT name FROM people WHERE nationality!= 'Russia'
SELECT name FROM people WHERE nationality!= 'Russia'
SELECT name FROM people WHERE nationality!= 'Poker' EXCEPT SELECT people.name FROM people JOIN poker_player ON people.people_id = poker_player.people_id WHERE poker_player.final_table_made = 1   OR poker_player.money_rank > 500
SELECT name FROM people WHERE people_id NOT IN     (SELECT people_id      FROM poker_player)
SELECT COUNT (DISTINCT nationality) FROM people
SELECT COUNT (DISTINCT nationality) FROM people
SELECT COUNT (*) FROM area_code_state
SELECT contestant_number,        contestant_name FROM contestants ORDER BY contestant_name DESC
SELECT vote_id,        phone_number,        state FROM votes
SELECT MAX (area_code), MIN (area_code) FROM area_code_state
SELECT created FROM votes WHERE state = 'CA' ORDER BY created DESC LIMIT 1
SELECT contestant_name FROM contestants WHERE contestant_name!= 'Jessie Alloway'
SELECT DISTINCT state,                 created FROM votes
SELECT contestants.contestant_name,        votes.phone_number FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number GROUP BY votes.contestant_number HAVING COUNT (*) >= 2
SELECT contestant_number,        contestant_name FROM votes ORDER BY created ASC LIMIT 1
SELECT COUNT (*) FROM votes WHERE state = 'NY'   OR state = 'CA'
SELECT COUNT (*) FROM contestants WHERE contestant_number NOT IN     (SELECT contestant_number      FROM votes)
SELECT area_code_state.area_code FROM area_code_state JOIN votes ON area_code_state.state = votes.state GROUP BY area_code_state.state ORDER BY COUNT (*) DESC LIMIT 1
SELECT created,        state,        phone_number FROM votes WHERE contestant_number =     (SELECT contestant_number      FROM contestants      WHERE contestant_name = 'Tabatha Gehling' )
SELECT area_code FROM votes WHERE contestant_number = 3 INTERSECT   SELECT area_code   FROM votes WHERE contestant_number = 5
SELECT contestant_name FROM contestants WHERE contestant_name like '%Al%'
SELECT name FROM country WHERE indepyear > 1950   AND independent = 'Yes'
SELECT name FROM country WHERE indepyear > 1950
SELECT COUNT (*) FROM country WHERE governmentform = 'Republic'
SELECT COUNT (*) FROM country WHERE governmentform = 'Republic'
SELECT SUM (country.surfacearea) FROM country JOIN region ON country.region = region.code WHERE region.name = 'Caribbean'
SELECT SUM (country.surfacearea) FROM country JOIN city ON country.code = city.countrycode WHERE city.district = 'Carribean'
SELECT continent FROM country WHERE name = 'Anguilla'
SELECT continent FROM country WHERE name = 'Anguilla'
SELECT district FROM city WHERE name = 'Kabul'
SELECT region FROM country WHERE name = 'Kabul'
SELECT LANGUAGE FROM countrylanguage WHERE countrycode = 'ABW' GROUP BY LANGUAGE ORDER BY COUNT (*) DESC LIMIT 1
SELECT LANGUAGE FROM countrylanguage WHERE countrycode = 'ABW' GROUP BY LANGUAGE ORDER BY COUNT (*) DESC LIMIT 1
SELECT population,        lifeexpectancy FROM country WHERE name = 'Brazil'
SELECT population,        lifeexpectancy FROM country WHERE name = 'Brazil'
SELECT region,        population FROM country WHERE name = 'Angola'
country
SELECT AVG (country.lifeexpectancy) FROM country JOIN city ON country.code = city.countrycode WHERE city.district = 'Central Africa'   AND country.region = 'Africa'
SELECT AVG (country.lifeexpectancy) FROM country JOIN city ON country.code = city.countrycode WHERE country.region = 'Central Africa'   AND city.population > 10000
SELECT name FROM country WHERE lifeexpectancy =     (SELECT MIN (lifeexpectancy)      FROM country      WHERE region = 'Asia' )   AND region = 'Asia'
SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1
SELECT SUM (population), MAX (gnp) FROM country JOIN city ON country.code = city.countrycode WHERE country.region = 'Asia'   AND city.population > 1000
SELECT COUNT (*), MAX (gnp) FROM country WHERE continent = 'Asia'
SELECT AVG (country.lifeexpectancy) FROM country JOIN city ON country.code = city.countrycode WHERE country.continent = 'Africa'   AND country.governmentform = 'Republic'
SELECT AVG (country.lifeexpectancy) FROM country JOIN city ON country.code = city.countrycode WHERE city.countrycode = 'Africa'   AND country.governmentform = 'Republic'
SELECT SUM (surfacearea) FROM country WHERE continent = 'Asia'   OR continent = 'Europe'
SELECT SUM (country.surfacearea) FROM country JOIN city ON country.code = city.countrycode WHERE country.region = 'Asia'   OR country.region = 'Europe'
SELECT COUNT (*) FROM city WHERE district = 'Gelderland'
SELECT SUM (population) FROM city WHERE district = 'Gelderland'
SELECT AVG (gnp), SUM (population) FROM country WHERE governmentform = 'United States'
SELECT AVG (gnp), SUM (population) FROM country WHERE region = 'United States'
SELECT COUNT (DISTINCT LANGUAGE) FROM countrylanguage
SELECT COUNT (DISTINCT LANGUAGE) FROM countrylanguage
SELECT COUNT (DISTINCT governmentform) FROM country WHERE continent = 'Africa'
SELECT COUNT (DISTINCT governmentform) FROM country WHERE continent = 'Africa'
SELECT COUNT (*) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = 'Aruba'   AND countrylanguage.isofficial = 1
SELECT COUNT (*) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = 'Aruba'   AND countrylanguage.isofficial = 1
SELECT COUNT (*) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = 'Afghanistan'   AND countrylanguage.isofficial = 1
SELECT COUNT (*) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = 'Afghanistan'   AND countrylanguage.isofficial = 1
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY COUNT (*) DESC LIMIT 1
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY SUM (countrylanguage.percentage) DESC LIMIT 1
SELECT _ FROM _ GROUP BY _ ORDER BY COUNT (DISTINCT _) DESC LIMIT _
SELECT continent FROM countrylanguage GROUP BY continent ORDER BY COUNT (*) DESC LIMIT 1
SELECT COUNT (*) FROM country WHERE name = 'English' INTERSECT   SELECT COUNT (*)   FROM country WHERE name = 'Dutch'
SELECT COUNT (DISTINCT country.name) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'english' INTERSECT   SELECT COUNT (DISTINCT country.name)   FROM country   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'dutch'
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'english' INTERSECT   SELECT country.name   FROM country   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'french'
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'english' INTERSECT   SELECT country.name   FROM country   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'french'
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'T'   AND countrylanguage.language = 'en' INTERSECT   SELECT country.name   FROM country   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'T'   AND countrylanguage.language = 'fr'
SELECT name FROM country WHERE name!= 'China' INTERSECT   SELECT country.name   FROM country   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 1   AND countrylanguage.language = 'French'   OR countrylanguage.isofficial = 1   AND countrylanguage.language = 'English'
SELECT COUNT (DISTINCT continent) FROM country WHERE name = 'China'
SELECT COUNT (*) FROM country WHERE governmentform = 'Chinese'   AND continent!= 'Asia'
SELECT region FROM country WHERE name = 'English' UNION SELECT region FROM country WHERE name = 'Dutch'
SELECT region FROM country WHERE name = 'Netherlands' INTERSECT   SELECT region   FROM country WHERE name = 'English'
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'T'   AND countrylanguage.language = 'English'   OR countrylanguage.isofficial = 'T'   AND countrylanguage.language = 'Dutch'
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'T'   AND countrylanguage.language = 'English' INTERSECT   SELECT country.name   FROM country   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'T'   AND countrylanguage.language = 'Dutch'
SELECT LANGUAGE FROM countrylanguage WHERE countrycode = 'AS' GROUP BY LANGUAGE ORDER BY COUNT (*) DESC LIMIT 1
SELECT LANGUAGE FROM countrylanguage WHERE countrycode = 'KOR' GROUP BY LANGUAGE ORDER BY COUNT (*) DESC LIMIT 1
SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.governmentform = 'Republic' GROUP BY countrylanguage.language HAVING COUNT (*) = 1
SELECT LANGUAGE FROM countrylanguage GROUP BY countrycode HAVING COUNT (DISTINCT isofficial) = 1
SELECT city.name,        city.population FROM city JOIN country ON city.countrycode = country.code WHERE country.governmentform = 'Constitutional Monarchy'   AND country.language = 'english' GROUP BY city.id ORDER BY SUM (city.population) DESC LIMIT 1
SELECT name FROM countrylanguage WHERE LANGUAGE = 'english' ORDER BY percentage DESC LIMIT 1
SELECT name,        population,        lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1
SELECT name,        population,        lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY population DESC LIMIT 1
SELECT AVG (lifeexpectancy) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial!= 'T'   AND countrylanguage.language = 'en'
SELECT AVG (country.lifeexpectancy) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial!= 'T'   AND countrylanguage.language = 'en'
SELECT SUM (population) FROM country WHERE name!= 'England'   AND name!= 'Northern Ireland'   AND name!= 'Scotland'   AND name!= 'Wales'
SELECT COUNT (*) FROM country WHERE code NOT IN     (SELECT countrycode      FROM countrylanguage      WHERE LANGUAGE = 'en' )
SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.headofstate = 'Beatrix'   AND countrylanguage.isofficial = 1
SELECT countrylanguage.isofficial FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.headofstate = 'Beatrix Marie'   AND countrylanguage.isofficial = 1
SELECT COUNT (DISTINCT LANGUAGE) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.indepyear < 1930   AND countrylanguage.isofficial = 'T'
SELECT COUNT (DISTINCT LANGUAGE) FROM countrylanguage WHERE isofficial = 'T'   AND indepyear < 1930
SELECT country.name FROM country JOIN city ON country.code = city.countrycode WHERE city.population >     (SELECT MIN (city.population)      FROM city      JOIN country ON city.countrycode = country.code      WHERE country.continent = 'Europe' )
SELECT * FROM country WHERE surfacearea >     (SELECT MAX (surfacearea)      FROM country      WHERE continent = 'Europe' )
SELECT * FROM country WHERE continent = 'Africa'   AND population <     (SELECT MAX (population)      FROM country      WHERE continent = 'Asia' )
SELECT * FROM country WHERE continent = 'Africa'   AND population <     (SELECT MIN (population)      FROM country      WHERE continent = 'Asia' )
SELECT name FROM country WHERE continent = 'Asia'   AND population >     (SELECT MAX (population)      FROM country      WHERE continent = 'Africa' )
SELECT * FROM country WHERE continent = 'Asia'   AND population >     (SELECT MAX (population)      FROM country      WHERE continent = 'Africa' )
SELECT countrycode FROM country WHERE name!= 'English' EXCEPT SELECT countrycode FROM countrylanguage WHERE LANGUAGE = 'en'
SELECT countrycode FROM country WHERE name!= 'English' EXCEPT SELECT countrycode FROM countrylanguage WHERE LANGUAGE = 'en'
SELECT countrycode FROM country EXCEPT SELECT country.countrycode FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'F'   AND countrylanguage.language = 'en'
SELECT countrycode FROM countrylanguage WHERE LANGUAGE!= 'english' EXCEPT SELECT countrycode FROM countrylanguage WHERE isofficial = 1   AND LANGUAGE = 'english'
SELECT code FROM country WHERE governmentform!= 'Republic' EXCEPT SELECT countrycode FROM countrylanguage WHERE LANGUAGE = 'English'
SELECT code FROM country WHERE governmentform!= 'Republic' EXCEPT SELECT countrycode FROM countrylanguage WHERE LANGUAGE = 'English'
SELECT name FROM country WHERE continent = 'Europe'   AND LANGUAGE!= 'en' EXCEPT SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 1   AND country.continent = 'Europe'   AND countrylanguage.language!= 'en'
SELECT name FROM city WHERE countrycode = 'EU' EXCEPT SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe'   AND countrylanguage.isofficial = 0   AND countrylanguage.language = 'en'
SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia'   AND countrylanguage.isofficial = 1   AND countrylanguage.language = 'Chinese'
SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.region = 'Asia'   AND countrylanguage.language = 'Chinese' INTERSECT   SELECT DISTINCT city.name   FROM city   JOIN country ON city.countrycode = country.code   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.region = 'Europe'   AND countrylanguage.isofficial = 1   AND countrylanguage.language!= 'English'
SELECT name,        indepyear,        surfacearea FROM country ORDER BY population ASC LIMIT 1
SELECT name,        indepyear,        surfacearea FROM country ORDER BY population ASC LIMIT 1
SELECT population,        name,        headofstate FROM country ORDER BY surfacearea DESC LIMIT 1
SELECT name,        population,        headofstate FROM country ORDER BY surfacearea DESC LIMIT 1
SELECT country.name,        COUNT (*) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT (*) >= 3
SELECT country.name,        COUNT (DISTINCT countrylanguage.language) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT (DISTINCT countrylanguage.language) > 2
SELECT COUNT (*), district FROM city WHERE population >     (SELECT AVG (population)      FROM city) GROUP BY district HAVING COUNT (*) >   (SELECT AVG (population)    FROM city)
SELECT district,        COUNT (*) FROM city WHERE population >     (SELECT AVG (population)      FROM city) GROUP BY district
SELECT governmentform,        SUM (population) FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform HAVING AVG (lifeexpectancy) > 72
SELECT governmentform,        SUM (population) FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform
SELECT continent,        AVG (lifeexpectancy), SUM (population) FROM country GROUP BY continent HAVING AVG (lifeexpectancy) < 72
SELECT continent,        SUM (population), AVG (lifeexpectancy) FROM country GROUP BY continent HAVING AVG (lifeexpectancy) < 72
SELECT name,        surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
SELECT name,        surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
SELECT name FROM country ORDER BY population DESC LIMIT 3
SELECT name FROM country ORDER BY population DESC LIMIT 3
SELECT name FROM country ORDER BY population ASC LIMIT 3
SELECT country.name FROM city JOIN country ON city.countrycode = country.code GROUP BY country.name ORDER BY COUNT (*) ASC LIMIT 3
SELECT COUNT (*) FROM country WHERE continent = 'Asia'
SELECT COUNT (DISTINCT country.name) FROM country JOIN city ON country.code = city.countrycode WHERE country.region = 'Asia'
SELECT name FROM country WHERE continent = 'Europe'   AND population = 80000
SELECT name FROM country WHERE region = 'Europe' INTERSECT   SELECT country.name   FROM country   JOIN city ON country.code = city.countrycode WHERE city.population = 80000
SELECT SUM (population), AVG (surfacearea) FROM country WHERE continent = 'North America'   AND surfacearea > 3000
SELECT country.surfacearea,        SUM (city.population), AVG (country.surfacearea) FROM city JOIN country ON city.countrycode = country.code WHERE country.region = 'North America'   AND country.surfacearea > 3000 GROUP BY country.code ORDER BY SUM (city.population) DESC LIMIT 1
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000
SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY COUNT (*) DESC LIMIT 1
SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY COUNT (*) DESC LIMIT 1
SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY COUNT (*) DESC LIMIT 1
SELECT country.code,        country.name,        countrylanguage.language,        MAX (countrylanguage.percentage) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code ORDER BY MAX (countrylanguage.percentage) DESC LIMIT 1
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish' GROUP BY country.name ORDER BY COUNT (*) DESC LIMIT 1
SELECT COUNT (*) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish'   AND country.region!= 'Asia'
SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish' ORDER BY countrylanguage.percentage DESC LIMIT 1
SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish'   AND country.predominantlyuse == 'Yes'
SELECT COUNT (*) FROM conductor
###
SELECT name FROM conductor ORDER BY age ASC
SELECT name FROM conductor ORDER BY age ASC
SELECT name FROM conductor WHERE nationality!= 'USA'
SELECT name FROM conductor WHERE nationality!= 'USA'
SELECT record_company FROM orchestra WHERE year_of_founded > 1960 ORDER BY year_of_founded DESC
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC
SELECT AVG (attendance) FROM SHOW
SELECT AVG (attendance) FROM SHOW
SELECT MAX (SHARE), MIN (SHARE) FROM performance WHERE TYPE!= 'Live final'
SELECT MAX (SHARE), MIN (SHARE) FROM performance WHERE TYPE!= 'Live final' NOT IN     (SELECT TYPE      FROM performance      WHERE TYPE = 'Live final' )
SELECT COUNT (DISTINCT nationality) FROM conductor
SELECT COUNT (DISTINCT nationality) FROM conductor
SELECT name FROM conductor ORDER BY year_of_work DESC
SELECT name FROM conductor ORDER BY year_of_work DESC
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY orchestra.conductor_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT conductor.name,        orchestra.orchestra FROM orchestra JOIN conductor ON orchestra.conductor_id = conductor.conductor_id
SELECT orchestra.orchestra,        conductor.name FROM orchestra JOIN conductor ON orchestra.conductor_id = conductor.conductor_id
SELECT conductor.name FROM orchestra JOIN conductor ON orchestra.conductor_id = conductor.conductor_id GROUP BY orchestra.conductor_id HAVING COUNT (*) > 1
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY orchestra.conductor_id HAVING COUNT (*) > 1
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY orchestra.conductor_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT conductor.name FROM orchestra JOIN conductor ON orchestra.conductor_id = conductor.conductor_id WHERE orchestra.year_of_founded > 2008
SELECT conductor.name FROM orchestra JOIN conductor ON orchestra.conductor_id = conductor.conductor_id WHERE orchestra.year_of_founded > 2008
SELECT record_company,        COUNT (*) FROM orchestra GROUP BY record_company
###
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT (*) ASC
SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT (*) DESC LIMIT 1
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT (*) DESC LIMIT 1
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT (*) DESC LIMIT 1
SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN     (SELECT orchestra_id      FROM performance)
SELECT * FROM orchestra WHERE orchestra_id NOT IN     (SELECT orchestra_id      FROM performance)
SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT   SELECT record_company   FROM orchestra WHERE year_of_founded > 2003
SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT   SELECT record_company   FROM orchestra WHERE year_of_founded > 2003
SELECT COUNT (*) FROM orchestra WHERE major_record_format = 'CD'   OR major_record_format = 'DVD'
SELECT COUNT (*) FROM orchestra WHERE major_record_format = 'CD'   OR major_record_format = 'DVD'
SELECT orchestra.year_of_founded FROM orchestra JOIN performance ON orchestra.orchestra_id = performance.orchestra_id GROUP BY orchestra.year_of_founded HAVING COUNT (*) > 1
SELECT orchestra.year_of_founded FROM orchestra JOIN performance ON orchestra.orchestra_id = performance.orchestra_id GROUP BY orchestra.year_of_founded HAVING COUNT (*) > 1
SELECT COUNT (*) FROM highschooler WHERE grade = 10   AND name like '%s%'
SELECT COUNT (*) FROM highschooler WHERE grade = 10
SELECT name,        grade FROM highschooler
SELECT name,        grade FROM highschooler
SELECT DISTINCT grade FROM highschooler
SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT (*) DESC LIMIT 10
SELECT grade FROM highschooler WHERE name = 'Kyle'
SELECT grade FROM highschooler WHERE name = 'Kyle'
SELECT name FROM highschooler WHERE grade = 10
SELECT name FROM highschooler WHERE grade = 10
SELECT id FROM highschooler WHERE name = 'Kyle'
SELECT id FROM highschooler WHERE name = 'Kyle'
SELECT COUNT (*) FROM highschooler WHERE grade = 9   OR grade = 10
SELECT COUNT (*) FROM highschooler WHERE grade = 9   OR grade = 10
SELECT COUNT (*), grade FROM highschooler WHERE grade!= 10 GROUP BY grade
SELECT COUNT (*), grade FROM highschooler GROUP BY grade ORDER BY COUNT (*) ASC
SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT (*) DESC LIMIT 1
SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT (*) DESC LIMIT 1
SELECT grade FROM highschooler GROUP BY grade HAVING COUNT (*) >= 4
SELECT grade FROM highschooler GROUP BY grade HAVING COUNT (*) >= 4
SELECT student_id,        COUNT (*) FROM friend GROUP BY student_id
COUNT (*) FOR EACH highschooler.name
SELECT highschooler.name,        COUNT (DISTINCT friend.friend_id) FROM friend JOIN highschooler ON friend.student_id = highschooler.id GROUP BY highschooler.name ORDER BY COUNT (DISTINCT friend.friend_id) DESC LIMIT 10
SELECT highschooler.name,        COUNT (*) FROM friend JOIN highschooler ON friend.student_id = highschooler.id GROUP BY highschooler.name
SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY friend.student_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id = highschooler.id GROUP BY friend.student_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY friend.student_id HAVING COUNT (*) >= 3
SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id = highschooler.id GROUP BY friend.student_id HAVING COUNT (*) >= 3
SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.friend_id WHERE highschooler.name = 'Kyle'   AND friend.level = 1
SELECT _ FROM _ WHERE _!=     (SELECT _      FROM _      WHERE _ ) ORDER BY _ ASC
SELECT COUNT (*) FROM friend JOIN highschooler ON friend.student_id = highschooler.id WHERE highschooler.grade = 9   AND highschooler.name = 'Kyle'
SELECT COUNT (*) FROM friend JOIN highschooler ON friend.student_id = highschooler.id WHERE highschooler.name = 'Kyle'   AND highschooler.grade = 10
SELECT id FROM highschooler WHERE id NOT IN     (SELECT student_id      FROM friend)
SELECT id FROM highschooler EXCEPT SELECT highschooler.id FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN highschooler friend_of_student ON friend.friend_id = friend_of_student.id GROUP BY highschooler.id HAVING COUNT (*) >= 10
SELECT name FROM highschooler WHERE grade = 10   AND id NOT IN     (SELECT student_id      FROM friend)
SELECT name FROM highschooler WHERE id NOT IN     (SELECT student_id      FROM friend)
SELECT friend.student_id FROM friend JOIN likes ON friend.student_id = likes.student_id WHERE likes.liked_id!= '1' INTERSECT   SELECT likes.student_id   FROM likes   JOIN likes ON likes.student_id = likes.liked_id WHERE likes.liked_id!= '1'
SELECT student_id FROM likes WHERE liked_id!= 36 INTERSECT   SELECT student_id   FROM friend   JOIN likes ON friend.student_id = likes.student_id WHERE friend.friend_id!= 21   OR likes.liked_id!= 36
SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id = highschooler.id WHERE friend.friend_id!= 14 INTERSECT   SELECT highschooler.name   FROM likes   JOIN highschooler ON likes.liked_id = highschooler.id WHERE likes.student_id!= 53
SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id = highschooler.id WHERE highschooler.grade >= 10 INTERSECT   SELECT highschooler.name   FROM likes   JOIN highschooler ON likes.liked_id = highschooler.id WHERE highschooler.grade >= 10
COUNT (*) BY student_id
COUNT (*) FOR student_id
SELECT highschooler.name,        COUNT (*) FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id ORDER BY COUNT (*) DESC LIMIT 10
SELECT highschooler.name,        COUNT (*) FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY likes.student_id ORDER BY COUNT (*) DESC LIMIT 10
SELECT highschooler.name FROM likes JOIN highschooler ON likes.liked_id = highschooler.id ORDER BY likes.student_id ASC LIMIT 1
SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY likes.student_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY likes.student_id HAVING COUNT (*) >= 2
SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY likes.student_id HAVING COUNT (*) >= 2
SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id WHERE grade > 5 GROUP BY likes.student_id HAVING COUNT (*) >= 2
SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN highschooler AS hs ON friend.friend_id = hs.id WHERE hs.grade > 5 GROUP BY hs.id HAVING COUNT (*) >= 2
SELECT COUNT (*) FROM highschooler JOIN likes ON highschooler.id = likes.student_id WHERE highschooler.name = 'Kyle'
SELECT COUNT (*) FROM highschooler JOIN likes ON highschooler.id = likes.student_id WHERE highschooler.name = 'Kyle'   AND likes.type = 1
SELECT AVG (grade) FROM highschooler WHERE id IN     (SELECT student_id      FROM friend      GROUP BY student_id      HAVING COUNT (*) >= 2)
SELECT AVG (highschooler.grade) FROM friend JOIN highschooler ON friend.student_id = highschooler.id WHERE friend.friend_id = 103   OR friend.friend_id = 104
SELECT MIN (grade) FROM highschooler WHERE id NOT IN     (SELECT friend.student_id      FROM friend      JOIN highschooler ON friend.student_id = highschooler.id)
SELECT MIN (grade) FROM highschooler WHERE id NOT IN     (SELECT student_id      FROM friend)
SELECT state FROM owners WHERE owner_id IN     (SELECT owner_id      FROM dogs) INTERSECT   SELECT state   FROM professionals WHERE professional_id IN     (SELECT professional_id      FROM treatments)
SELECT owners.state FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id INTERSECT SELECT professionals.state FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id
SELECT AVG (dogs.age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treated_yn = 'Y'
SELECT AVG (dogs.age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.cost_of_treatment > 0
SELECT professionals.professional_id,        professionals.last_name,        professionals.cell_number FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN dogs ON treatments.dog_id = dogs.dog_id WHERE dogs.state = 'Indiana' UNION SELECT professionals.professional_id,        professionals.last_name,        professionals.cell_number FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id HAVING COUNT (*) > 2
SELECT professional_id,        first_name,        cell_number FROM professionals WHERE state = 'Indiana' UNION SELECT professional_id,        first_name,        cell_number FROM treatments GROUP BY professional_id HAVING COUNT (*) > 2
SELECT name FROM dogs WHERE cost_of_treatment > 1000 EXCEPT SELECT dogs.name FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE cost_of_treatment <= 1000
SELECT name FROM dogs WHERE dog_id NOT IN     (SELECT dog_id      FROM treatments      GROUP BY dog_id      HAVING SUM (cost_of_treatment) > 1000)
SELECT first_name FROM professionals UNION SELECT first_name FROM owners EXCEPT SELECT first_name FROM dogs WHERE name = 'Golden Retriever'
SELECT first_name FROM professionals WHERE role_code = 'Owner' EXCEPT SELECT name FROM dogs
SELECT * FROM professionals WHERE professional_id NOT IN     (SELECT professional_id      FROM treatments)
SELECT professional_id,        role_code,        email_address FROM professionals WHERE professional_id NOT IN     (SELECT professional_id      FROM treatments)
SELECT owners.owner_id,        owners.first_name,        owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT owners.owner_id,        owners.first_name,        owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT (*) DESC LIMIT 1
SELECT professionals.professional_id,        professionals.role_code,        professionals.first_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id HAVING COUNT (*) >= 2
SELECT professionals.professional_id,        professionals.role_code,        professionals.first_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id HAVING COUNT (*) >= 2
SELECT breeds.breed_name FROM breeds JOIN dogs ON breeds.breed_code = dogs.breed_code GROUP BY breeds.breed_name ORDER BY COUNT (*) DESC LIMIT 1
SELECT breeds.breed_name FROM breeds JOIN dogs ON breeds.breed_code = dogs.breed_code GROUP BY dogs.breed_code ORDER BY COUNT (*) DESC LIMIT 1
SELECT professionals.professional_id,        owners.last_name FROM owners JOIN treatments ON owners.owner_id = treatments.dog_id JOIN professionals ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id ORDER BY SUM (treatments.cost_of_treatment) DESC LIMIT 1
SELECT treatments.professional_id,        owners.last_name FROM owners JOIN treatments ON owners.owner_id = treatments.dog_id ORDER BY treatments.cost_of_treatment DESC LIMIT 1
SELECT treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code ORDER BY cost_of_treatment ASC LIMIT 1
SELECT treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM (treatments.cost_of_treatment) ASC LIMIT 1
SELECT owners.owner_id,        owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.price_in_dollars =     (SELECT MAX (price_in_dollars)      FROM dogs)
SELECT owners.owner_id,        owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY SUM (dogs.weight) DESC LIMIT 1
SELECT professional_id,        cell_number FROM treatments GROUP BY professional_id HAVING COUNT (*) >= 2
SELECT professionals.professional_id,        professionals.cell_number FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id HAVING COUNT (*) >= 2
SELECT professionals.first_name,        professionals.last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE cost_of_treatment <     (SELECT AVG (cost_of_treatment)      FROM treatments)
SELECT professionals.first_name,        professionals.last_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.cost_of_treatment <     (SELECT AVG (cost_of_treatment)      FROM treatments)
SELECT date_of_treatment,        professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id
SELECT date_of_treatment,        professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id
SELECT treatments.cost_of_treatment,        treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT cost_of_treatment,        treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT owners.first_name,        owners.last_name,        dogs.size_code FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id WHERE dogs.abandoned_yn = 'N'
SELECT owners.first_name,        owners.last_name,        dogs.size_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id ORDER BY owners.first_name ASC,          owners.last_name ASC,          dogs.size_code ASC
SELECT owners.first_name,        dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id
SELECT owners.first_name,        dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.abandoned_yn = 'N'
SELECT dogs.name,        treatments.date_of_treatment FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.breed_code ORDER BY COUNT (*) ASC LIMIT 1
SELECT dogs.name,        treatments.date_of_treatment FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id ORDER BY treatments.cost_of_treatment ASC LIMIT 3
SELECT owners.first_name,        dogs.name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id WHERE owners.state = 'Virginia'
SELECT owners.first_name,        dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'VA' INTERSECT   SELECT owners.first_name,          dogs.name   FROM owners   JOIN dogs ON owners.owner_id = dogs.owner_id   JOIN addresses ON owners.owner_id = addresses.owner_id WHERE addresses.city = 'Springfield'   AND addresses.state = 'MA'
SELECT date_arrived,        date_departed FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id WHERE treatments.cost_of_treatment!= 0   OR dogs.abandoned_yn = 'Y'
SELECT treatments.date_of_treatment,        treatments.date_of_treatment FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id WHERE dogs.abandoned_yn = 'N'
SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.age =     (SELECT MIN (age)      FROM dogs)
SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.age =     (SELECT MIN (age)      FROM dogs)
SELECT email_address FROM professionals WHERE state = 'Hawaii'   OR state = 'Wisconsin'
SELECT email_address FROM professionals WHERE state = 'Hawaii'   OR state = 'Wisconsin'
SELECT date_arrived,        date_departed FROM dogs
SELECT date_arrived,        date_departed FROM dogs
SELECT COUNT (*) FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id
###
SELECT COUNT (*) FROM treatments
SELECT COUNT (*) FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id JOIN dogs ON treatments.dog_id = dogs.dog_id WHERE dogs.abandoned_yn!= 'Y'   AND professionals.role_code = 'T'
SELECT role_code,        street,        city,        state FROM professionals WHERE city like '%West%'
SELECT role_code,        street,        city,        state FROM professionals WHERE city like '%West%'
SELECT first_name,        last_name,        email_address FROM owners WHERE state like '%North%'
SELECT owners.first_name,        owners.last_name,        owners.email_address FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state like '%North%'
SELECT COUNT (*) FROM dogs WHERE age <     (SELECT AVG (age)      FROM dogs)
SELECT COUNT (*) FROM dogs WHERE age <     (SELECT AVG (age)      FROM dogs)
SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1
SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1
SELECT COUNT (*) FROM dogs WHERE dog_id NOT IN     (SELECT dog_id      FROM treatments)
SELECT COUNT (*) FROM dogs WHERE dog_id NOT IN     (SELECT dog_id      FROM treatments)
SELECT COUNT (*) FROM owners WHERE owner_id NOT IN     (SELECT DISTINCT owners.owner_id      FROM owners      JOIN dogs ON owners.owner_id = dogs.owner_id      WHERE dogs.abandoned_yn!= 'Y' )
SELECT COUNT (*) FROM owners WHERE owner_id NOT IN     (SELECT DISTINCT owner_id      FROM dogs)
SELECT COUNT (*) FROM professionals WHERE professional_id NOT IN     (SELECT professional_id      FROM treatments)
SELECT COUNT (*) FROM professionals WHERE professional_id NOT IN     (SELECT professional_id      FROM treatments)
SELECT name,        age,        weight FROM dogs WHERE abandoned_yn = '1'
SELECT name,        age,        weight FROM dogs WHERE abandoned_yn = 1
SELECT AVG (age) FROM dogs WHERE gender = 'Female'
SELECT AVG (age) FROM dogs WHERE gender = 'M'   AND abandoned_yn = 0
SELECT MAX (dogs.age) FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id WHERE genders = 'Male'   AND breed_code!= 'Poodle'
SELECT MAX (dogs.age) FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id WHERE owners.gender = 'Male'   AND dogs.abandoned_yn!= 1
SELECT charge_type,        SUM (charge_amount) FROM charges GROUP BY charge_type ORDER BY SUM (charge_amount) DESC LIMIT 3
SELECT charge_type,        SUM (charge_amount) FROM charges GROUP BY charge_type ORDER BY SUM (charge_amount) DESC LIMIT 10
SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1
SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1
SELECT email_address,        cell_number,        home_phone FROM professionals
SELECT email_address,        cell_number,        home_phone FROM professionals
SELECT breeds.breed_name,        sizes.size_description FROM breeds JOIN dogs ON breeds.breed_code = dogs.breed_code JOIN sizes ON dogs.size_code = sizes.size_code GROUP BY breeds.breed_name,          sizes.size_description ORDER BY COUNT (*) DESC LIMIT 1000000
SELECT DISTINCT breeds.breed_name,                 sizes.size_description FROM breeds JOIN dogs ON breeds.breed_code = dogs.breed_code JOIN sizes ON dogs.size_code = sizes.size_code
SELECT professionals.first_name,        treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT professionals.first_name,        professionals.role_code,        treatments.date_of_treatment,        treatments.cost_of_treatment FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id
SELECT COUNT (*) FROM singer
SELECT COUNT (*) FROM singer
SELECT name FROM singer ORDER BY net_worth_millions ASC
SELECT name FROM singer ORDER BY net_worth_millions ASC
SELECT birth_year,        citizenship FROM singer
SELECT birth_year,        citizenship FROM singer
SELECT name FROM singer WHERE citizenship!= 'France'
SELECT name FROM singer WHERE citizenship!= 'France'
SELECT name FROM singer WHERE birth_year = '1948'   OR birth_year = '1949'
SELECT name FROM singer WHERE birth_year = 1948   OR birth_year = 1949
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1
SELECT citizenship,        COUNT (*) FROM singer GROUP BY citizenship
SELECT citizenship,        COUNT (*) FROM singer GROUP BY citizenship
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT (*) DESC LIMIT 1
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT (*) DESC LIMIT 1
SELECT citizenship,        MAX (net_worth_millions) FROM singer GROUP BY citizenship
SELECT citizenship,        MAX (net_worth_millions) FROM singer GROUP BY citizenship
SELECT title,        singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id
SELECT title,        name FROM song JOIN singer ON song.singer_id = singer.singer_id
SELECT DISTINCT singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id WHERE song.sales > 300000
SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000
SELECT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.singer_id HAVING COUNT (*) > 1
SELECT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT (*) > 1
SELECT singer.name,        SUM (song.sales) FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name
SELECT singer.name,        SUM (song.sales) FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name
SELECT name FROM singer WHERE singer_id NOT IN     (SELECT singer_id      FROM song)
SELECT name FROM singer EXCEPT SELECT singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id
SELECT citizenship FROM singer WHERE birth_year < 1945 INTERSECT   SELECT citizenship   FROM singer WHERE birth_year > 1955
SELECT citizenship FROM singer WHERE birth_year < 1945 INTERSECT   SELECT citizenship   FROM singer WHERE birth_year > 1955
SELECT COUNT (*) FROM other_available_features
SELECT feature_name FROM other_available_features JOIN ref_feature_types ON other_available_features.feature_type_code = ref_feature_types.feature_type_code WHERE feature_type_name = 'AirCon'   AND other_available_features.feature_name = 'Yes'
SELECT ref_property_types.property_type_description FROM ref_property_types JOIN properties ON ref_property_types.property_type_code = properties.property_type_code WHERE properties.property_type_code = 'A'   OR properties.property_type_code = 'R'   OR properties.property_type_code = 'T'
SELECT property_name FROM properties WHERE property_type_code = 'House' UNION SELECT property_name FROM properties WHERE property_type_code = 'Apartment'   AND room_count > 1
