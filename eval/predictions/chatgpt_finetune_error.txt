SELECT count ( * ) from singer
SELECT count ( * ) from singer
SELECT name , country , age from singer order by age desc
SELECT name, country, age from singer order by age desc
SELECT avg ( age ), min ( age ), max ( age ) from singer where country = 'France'
SELECT avg ( age ), min ( age ), max ( age ) from singer where country = 'France';
SELECT name, song_release_year  FROM singer  ORDER BY age ASC  LIMIT 1;
SELECT name, song_release_year  FROM singer  WHERE age = (SELECT MIN(age) FROM singer)
SELECT distinct country from singer where age > 20
SELECT distinct country from singer where age > 20
SELECT country , count ( * ) from singer group by country
SELECT country , count ( * ) from singer group by country
SELECT singer.name  FROM  singer  WHERE  singer.age > (SELECT AVG(age) FROM singer)
SELECT song_name from singer where age > ( select avg ( age ) from singer )
SELECT location , name from stadium where capacity between 5000 and 10000
SELECT location , name from stadium where capacity between 5000 and 10000
SELECT MAX(capacity), AVG(capacity) FROM stadium
SELECT AVG(capacity) AS average_capacity, MAX(capacity) AS max_capacity FROM stadium
SELECT name, capacity from stadium order by average desc limit 1;
SELECT name, capacity from stadium order by average desc limit 1;
SELECT count ( * ) from concert where year = 2014 or year = 2015
SELECT count ( * ) from concert where year = 2014 or year = 2015
SELECT stadium.name , count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id group by concert.stadium_id;
SELECT stadium.name, count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id group by concert.stadium_id;
SELECT stadium.name, stadium.capacity from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year >= 2014 group by stadium.stadium_id order by count ( * ) desc limit 1
SELECT stadium.name, stadium.capacity from concert join stadium on concert.stadium_id = stadium.stadium_id group by concert.stadium_id order by count ( * ) desc limit 1
SELECT year from concert group by year order by count ( * ) desc limit 1
SELECT year from concert group by year order by count ( * ) desc limit 1
SELECT stadium.stadium_id FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.stadium_id IS NULL
SELECT name  FROM  stadium  WHERE  stadium_id NOT IN ( SELECT stadium_id FROM concert )
SELECT country from singer where age > 40 intersect select country from singer where age < 30
SELECT name from stadium except select stadium.name from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014;
SELECT name from stadium except select stadium.name from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014
SELECT concert.concert_name, concert.theme, count ( * ) from concert join singer_in_concert on concert.concert_id = singer_in_concert.concert_id group by concert.concert_id;
SELECT concert.concert_name , concert.theme , count ( * ) from concert join singer_in_concert on concert.concert_id = singer_in_concert.concert_id group by concert.concert_id
SELECT singer.name, COUNT(concert.concert_id)  FROM  singer  JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  JOIN concert ON singer_in_concert.concert_id = concert.concert_id  GROUP BY singer.name;
SELECT singer.name , count ( * ) from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id group by singer_in_concert.singer_id
SELECT singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014;
SELECT singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on concert.concert_id = singer_in_concert.concert_id where concert.year = 2014;
SELECT name , country from singer where song_name like '%Hey%';
SELECT name, country from singer where song_name like '%Hey%';
SELECT stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2015;
SELECT stadium.name, stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014 intersect select stadium.name, stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2015;
SELECT count(*)  FROM concert  JOIN stadium ON concert.stadium_id = stadium.stadium_id  WHERE stadium.stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)
SELECT count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id where stadium.capacity = ( select max ( capacity ) from stadium );
SELECT count ( * ) from pets where weight > 10
SELECT count ( * ) from pets where weight > 10
SELECT There seems to be a misunderstanding in the question. The weight of the pet is not indicated in the provided tables and there is no mention of the type of pet in the 'pets' table. Based on the information provided, it's impossible to determine the weight of the youngest dog.  However, if we assume there is a 'pet_type' and 'pet_weight' column in the 'pets' table, the correct SQL would be:  ```sql SELECT pet_weight  FROM pets  WHERE pet_type = 'dog'  ORDER BY pet_age ASC  LIMIT 1 ```
SELECT weight  FROM pets  ORDER BY pet_age ASC  LIMIT 1
SELECT max ( weight ), pettype from pets group by pettype;
SELECT max ( weight ), pettype from pets group by pettype;
SELECT count ( * ) from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where student.age > 20
SELECT count ( * ) from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where student.age > 20
SELECT count ( * ) from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where student.sex = 'F' and pets.pettype = 'dog';
SELECT count ( * ) from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where student.sex = 'F' and pets.pettype = 'dog';
SELECT count ( distinct pettype ) from pets
SELECT count ( distinct pettype ) from pets
SELECT student.fname  FROM  student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype IN ('Cat', 'Dog')
SELECT student.fname  FROM  student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype IN ('Cat', 'Dog')
SELECT student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' intersect select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'dog';
SELECT student.fname from has_pet join student on has_pet.stuid = student.stuid where has_pet.petid in ( select petid from pets where pettype = 'Cat' ) intersect select student.fname from has_pet join student on has_pet.stuid = student.stuid where has_pet.petid in ( select petid from pets where pettype = 'Dog' )
SELECT major, age  FROM student  WHERE stuid NOT IN (     SELECT student.stuid      FROM student      JOIN has_pet ON student.stuid = has_pet.stuid      JOIN pets ON has_pet.petid = pets.petid      WHERE pets.pettype = 'cat' );
SELECT major, age  FROM  student  WHERE  stuid NOT IN ( SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'Cat' )
SELECT stuid  FROM  student  WHERE  stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'Cat');
SELECT stuid from student except select student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'
SELECT distinct student.fname , student.age  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'dog'  AND student.stuid NOT IN (   SELECT student.stuid    FROM student    JOIN has_pet ON student.stuid = has_pet.stuid    JOIN pets ON has_pet.petid = pets.petid    WHERE pets.pettype = 'cat' );
SELECT student.fname  FROM  student  JOIN has_pet  ON student.stuid = has_pet.stuid  JOIN pets  ON has_pet.petid = pets.petid  WHERE pets.pettype = 'dog'  AND student.stuid NOT IN (     SELECT      student.stuid      FROM      student      JOIN has_pet      ON student.stuid = has_pet.stuid      JOIN pets      ON has_pet.petid = pets.petid      WHERE pets.pettype = 'cat' );
SELECT pettype, weight  FROM pets  ORDER BY pet_age ASC  LIMIT 1
SELECT pettype, weight from pets order by pet_age asc limit 1
SELECT petid, weight from pets where pet_age > 1
SELECT petid, weight from pets where pet_age > 1
SELECT avg ( pet_age ), max ( pet_age ), pettype from pets group by pettype
SELECT avg ( pet_age ), max ( pet_age ), pettype from pets group by pettype
SELECT avg ( weight ), pettype from pets group by pettype;
SELECT avg ( weight ), pettype from pets group by pettype
SELECT distinct fname , age from student join has_pet on student.stuid = has_pet.stuid;
SELECT distinct student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid
SELECT pets.petid from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where student.lname = 'Smith';
SELECT pets.petid from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where student.lname = 'Smith';
SELECT count ( * ), stuid from has_pet group by stuid;
SELECT count ( * ) , has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid group by has_pet.stuid
SELECT student.fname , student.sex from has_pet join student on has_pet.stuid = student.stuid group by has_pet.stuid having count ( * ) > 1 ;
SELECT student.fname, student.sex  FROM  student  JOIN  has_pet  ON  student.stuid = has_pet.stuid  GROUP BY  has_pet.stuid  HAVING  COUNT(has_pet.petid) > 1;
SELECT student.lname  FROM  student  JOIN  pets  ON  student.stuid = pets.petid  WHERE  pets.pettype = 'cat'  AND  pets.pet_age = 3
SELECT student.lname from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where pets.pettype = 'cat' and pets.pet_age = 3
SELECT avg ( age ) from student where stuid not in ( select stuid from has_pet )
SELECT avg ( age ) from student where stuid not in ( select stuid from has_pet )
SELECT count ( * ) from continents
SELECT count ( * ) from continents
SELECT continents.contid , continents.continent , count ( * ) from countries join continents on countries.continent = continents.contid group by countries.continent
SELECT continents.contid , continents.continent , count ( * ) from countries join continents on countries.continent = continents.contid group by countries.continent
SELECT count ( * ) from countries
SELECT count ( * ) from countries
SELECT car_makers.fullname , model_list.maker , count ( * ) from car_makers join model_list on car_makers.id = model_list.maker group by model_list.maker
SELECT car_makers.fullname , model_list.maker , count ( * ) from car_makers join model_list on car_makers.id = model_list.maker join car_names on car_names.makeid = model_list.modelid group by model_list.maker
SELECT car_names.model from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.horsepower asc limit 1
SELECT car_names.model from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.horsepower asc limit 1;
SELECT car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where weight < ( select avg ( weight ) from cars_data );
SELECT car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.weight < ( select avg ( weight ) from cars_data )
SELECT distinct car_makers.fullname  FROM  car_makers  JOIN model_list ON car_makers.id = model_list.maker  JOIN car_names ON model_list.modelid = car_names.makeid  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cars_data.year = 1970
SELECT distinct car_makers.fullname  FROM  car_makers  JOIN  model_list ON car_makers.id = model_list.maker JOIN  car_names ON model_list.model = car_names.model JOIN  cars_data ON car_names.makeid = cars_data.id  WHERE  cars_data.year = 1970
SELECT car_names.make,  MIN(cars_data.year)  FROM  car_names  JOIN cars_data  ON car_names.makeid = cars_data.id  GROUP BY car_names.make  ORDER BY MIN(cars_data.year)  LIMIT 1;
SELECT car_makers.maker, MIN(cars_data.year)  FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id  GROUP BY car_makers.maker ORDER BY MIN(cars_data.year)  LIMIT 1;
SELECT distinct model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where cars_data.year > 1980
SELECT distinct car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.year > 1980
SELECT continents.contid, COUNT(DISTINCT car_makers.id)  FROM  continents  JOIN countries ON continents.contid = countries.continent  JOIN car_makers ON countries.countryname = car_makers.country  GROUP BY  continents.contid;
SELECT continents.continent, COUNT(car_makers.maker) FROM     continents JOIN     countries ON continents.continent = countries.continent JOIN     car_makers ON countries.countryname = car_makers.country GROUP BY     continents.continent;
SELECT countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname order by count ( * ) desc limit 1
SELECT countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname order by count ( * ) desc limit 1
SELECT count ( * ), car_makers.fullname from car_makers join model_list on car_makers.id = model_list.maker group by model_list.maker
SELECT car_makers.id,  car_makers.fullname,  count(model_list.modelid) AS number_of_models FROM model_list  JOIN car_makers  ON model_list.maker = car_makers.id  GROUP BY car_makers.id, car_makers.fullname;
SELECT cars_data.accelerate  FROM  car_names  JOIN  cars_data  ON  car_names.makeid = cars_data.id  WHERE  car_names.model = 'amc hornet sportabout (sw)';
SELECT cars_data.accelerate  FROM  cars_data  JOIN  car_names ON car_names.makeid = cars_data.id  JOIN model_list ON car_names.model = model_list.model WHERE  model_list.model = 'amc hornet sportabout (sw)';
SELECT count ( * ) from car_makers join countries on car_makers.country = countries.countryid where countries.countryname = 'france'
SELECT count(*)  FROM  car_makers  JOIN  countries ON car_makers.country = countries.countryname WHERE  countries.countryname = 'France'
SELECT COUNT(*)  FROM model_list  JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_makers.country = 'USA'
SELECT count(*)  FROM  countries  JOIN car_makers ON car_makers.country = countries.countryid  JOIN model_list ON model_list.maker = car_makers.maker  WHERE countries.countryname = 'United States';
SELECT avg ( mpg ) from cars_data where cylinders = 4
SELECT avg ( mpg ) from cars_data where cylinders = 4
SELECT min ( weight ) from cars_data where cylinders = 8 and year = 1974
SELECT min ( weight ) from cars_data where cylinders = 8 and year = 1974
SELECT maker , model from model_list
SELECT maker , model from model_list
SELECT distinct countryname, countryid from car_makers join countries on car_makers.country = countries.countryid
SELECT countries.countryname , countries.countryid from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) >= 1
SELECT count ( * ) from cars_data where horsepower > 150
SELECT count ( * ) from cars_data where horsepower > 150
SELECT avg ( weight ), year from cars_data group by year
SELECT avg ( weight ), year from cars_data group by year
SELECT countries.countryname  FROM  countries  JOIN  car_makers  ON  countries.countryname = car_makers.country  JOIN  continents  ON  countries.continent = continents.continent  WHERE  continents.continent = 'Europe'  GROUP BY  countries.countryname  HAVING COUNT ( * ) >= 3;
SELECT countries.countryname  FROM  countries  JOIN  car_makers ON countries.countryname = car_makers.country  JOIN  continents ON countries.continent = continents.contid  WHERE  continents.contid = 'Europe'  GROUP BY  countries.countryname  HAVING  COUNT(car_makers.maker) >= 3;
SELECT max(cars_data.horsepower), car_makers.maker  FROM  cars_data  JOIN  car_names ON cars_data.id = car_names.makeid  JOIN  model_list ON car_names.model = model_list.modelid  JOIN  car_makers ON model_list.maker = car_makers.id  WHERE  cars_data.cylinders = 3;
SELECT max(cars_data.horsepower),  car_makers.fullname  FROM cars_data  JOIN model_list ON cars_data.id = model_list.modelid  JOIN car_makers ON model_list.maker = car_makers.id  WHERE cars_data.cylinders = 3  ORDER BY cars_data.horsepower DESC  LIMIT 1;
SELECT car_names.model  FROM  cars_data  JOIN  car_names ON cars_data.id = car_names.makeid  WHERE  cars_data.mpg = ( SELECT MAX(mpg) FROM cars_data );
SELECT car_names.model from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.mpg desc limit 1
SELECT avg ( horsepower ) from cars_data where year < 1980
SELECT avg ( horsepower ) from cars_data where year < 1980
SELECT avg ( cars_data.edispl ) from car_names join cars_data on car_names.makeid = cars_data.id where car_names.model = 'volvo';
SELECT avg ( cars_data.edispl ) from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id where car_makers.maker = 'volvo';
SELECT max ( accelerate ) , cylinders from cars_data group by cylinders
SELECT max ( accelerate ), cylinders from cars_data group by cylinders;
SELECT model from car_names group by model order by count ( * ) desc limit 1
SELECT model_list.model  FROM  model_list  JOIN  car_names ON model_list.model = car_names.model  GROUP BY  model_list.model  ORDER BY  COUNT(DISTINCT car_names.makeid) DESC  LIMIT 1;
SELECT count ( * ) from cars_data where cylinders > 4
SELECT count ( * ) from cars_data where cylinders > 4
SELECT count ( * ) from cars_data where year = 1980
SELECT count ( * ) from cars_data where year = 1980
SELECT count(*)  FROM  car_makers  JOIN  model_list  ON  car_makers.id = model_list.maker  WHERE  car_makers.fullname = 'American Motor Company';
SELECT count ( * )  FROM  model_list  JOIN  car_makers  ON  model_list.maker = car_makers.id  WHERE  car_makers.fullname = 'American Motor Company';
SELECT car_makers.fullname , car_makers.id from car_makers join model_list on car_makers.id = model_list.maker group by model_list.maker having count ( * ) > 3;
SELECT car_makers.fullname , model_list.maker from car_makers join model_list on car_makers.id = model_list.maker group by model_list.maker having count ( * ) > 3
SELECT distinct car_names.model  FROM car_makers  JOIN model_list ON car_makers.maker = model_list.maker  JOIN car_names ON model_list.model = car_names.model  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE car_makers.fullname = 'General Motors' OR cars_data.weight > 3500
SELECT distinct model  FROM model_list  JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = 'General Motors'  OR model_list.modelid IN (SELECT id FROM cars_data WHERE weight > 3500)
SELECT year from cars_data where weight >= 3000 intersect select year from cars_data where weight <= 4000
SELECT distinct year from cars_data where weight < 4000 intersect select distinct year from cars_data where weight > 3000
SELECT horsepower from cars_data order by accelerate desc limit 1;
SELECT horsepower from cars_data order by accelerate desc limit 1
SELECT cars_data.cylinders from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where model_list.model = 'volvo' order by cars_data.accelerate asc limit 1;
SELECT cars_data.cylinders from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where model_list.maker = ( select id from car_makers where maker = 'volvo' ) order by cars_data.accelerate asc limit 1;
SELECT count ( * )  FROM cars_data  WHERE accelerate > ( SELECT horsepower FROM cars_data ORDER BY horsepower DESC LIMIT 1 );
SELECT count(*)  FROM  cars_data  WHERE  accelerate > (SELECT horsepower FROM cars_data ORDER BY horsepower DESC LIMIT 1);
SELECT count(*)  FROM      countries  JOIN      car_makers  ON      countries.countryname = car_makers.country  GROUP BY      countries.countryname  HAVING      count(*) > 2
SELECT COUNT(*)  FROM  (  SELECT  countries.countryname  FROM  countries  JOIN  car_makers  ON  countries.countryid = car_makers.country  GROUP BY  countries.countryname  HAVING  COUNT(car_makers.maker) > 2  ) a
SELECT count ( * ) from cars_data where cylinders > 6
SELECT count ( * ) from cars_data where cylinders > 6
SELECT model_list.model  FROM  model_list  JOIN  car_names ON model_list.model = car_names.model  JOIN  cars_data ON car_names.makeid = cars_data.id  WHERE  cars_data.cylinders = 4  ORDER BY  cars_data.horsepower DESC  LIMIT 1;
SELECT model_list.model  FROM  model_list  JOIN  cars_data  ON  model_list.model = cars_data.model  WHERE  cars_data.cylinders = 4  ORDER BY  cars_data.horsepower DESC  LIMIT 1;
SELECT car_names.makeid, car_names.make from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.horsepower > ( select min ( horsepower ) from cars_data ) except select car_names.makeid, car_names.make from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.cylinders > 3;
SELECT car_names.makeid , car_names.make from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.cylinders < 4 and cars_data.horsepower != ( select min ( horsepower ) from cars_data );
SELECT max ( mpg ) from cars_data where year < 1980 or cylinders = 8
SELECT max ( mpg ) from cars_data where cylinders = 8 or year < 1980
SELECT distinct model_list.model  FROM model_list  JOIN car_names ON model_list.modelid = car_names.makeid  JOIN cars_data ON car_names.makeid = cars_data.id  JOIN car_makers ON model_list.maker = car_makers.id  WHERE cars_data.weight < 3500 AND car_makers.fullname != 'Ford Motor Company';
SELECT distinct model_list.model  from model_list  join cars_data on model_list.modelid = cars_data.id  where cars_data.weight < 3500  and model_list.maker != (select id from car_makers where fullname = 'Ford Motor Company');
SELECT countryname  FROM  countries  WHERE  countryid NOT IN (SELECT country FROM car_makers)
SELECT countryname  FROM  countries  WHERE  countryid NOT IN (SELECT country FROM car_makers);
SELECT car_makers.id, car_makers.maker  FROM  car_makers  JOIN model_list ON car_makers.id = model_list.maker  JOIN car_names ON model_list.model = car_names.make  GROUP BY  car_makers.id, car_makers.maker  HAVING COUNT(DISTINCT model_list.model) >= 2 AND COUNT(DISTINCT car_makers.id) > 3;
SELECT car_makers.id, car_makers.maker  FROM  car_makers  JOIN  model_list  ON  car_makers.id = model_list.maker  JOIN  car_names  ON  model_list.modelid = car_names.makeid  GROUP BY  car_makers.id, car_makers.maker  HAVING  COUNT(DISTINCT model_list.modelid) >= 2  AND  COUNT(car_names.makeid) > 3;
SELECT car_makers.country, countries.countryname FROM car_makers JOIN countries ON car_makers.country = countries.countryid GROUP BY car_makers.country HAVING COUNT(*) > 3 UNION SELECT car_makers.country, countries.countryname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.makeid JOIN countries ON car_makers.country = countries.countryid WHERE model_list.model = 'fiat';
SELECT countries.countryid, countries.countryname  FROM  countries  JOIN  car_makers  ON  car_makers.country = countries.countryid  WHERE  car_makers.id IN (SELECT maker FROM model_list WHERE model = 'fiat')  OR  countries.countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT ( * ) > 3)
SELECT country from airlines where airline = 'JetBlue Airways';
SELECT country from airlines where airline = 'JetBlue Airways';
SELECT abbreviation from airlines where airline = 'JetBlue Airways'
SELECT abbreviation  FROM  airlines  WHERE  airlinename = 'JetBlue Airways';
SELECT airline, abbreviation from airlines where country = 'USA'
SELECT airline, abbreviation  FROM  airlines  WHERE  country = 'USA'
SELECT airportcode , airportname from airports where city = 'Anthony'
SELECT airportcode , airportname from airports where city = 'Anthony'
SELECT count ( * ) from airlines
SELECT count ( * ) from airlines
SELECT count ( * ) from airports
SELECT count ( * ) from airports
SELECT count ( * ) from flights
SELECT count ( * ) from flights
SELECT airline from airlines where abbreviation = 'UAL'
SELECT airline from airlines where abbreviation = 'UAL'
SELECT COUNT(*)  FROM  airlines  WHERE  country = 'USA'
SELECT count(*)  FROM  airlines  WHERE  country = 'USA';
SELECT city , country from airports where airportname = 'Alton';
SELECT city , country from airports where airportname = 'Alton';
SELECT airportname from airports where airportcode = 'AKO'
SELECT airportname from airports where airportcode = 'AKO'
SELECT airportname from airports where city = 'Aberdeen';
SELECT airportname from airports where city = 'Aberdeen'
SELECT count ( * ) from flights where sourceairport = 'APG'
SELECT count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'
SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Athens';
SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Athens';
SELECT count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen';
SELECT count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen';
SELECT count ( * ) from airports join flights on airports.airportcode = flights.destairport where airports.city = 'Aberdeen';
SELECT count ( * ) from airports where city = 'Aberdeen';
SELECT count ( * )  FROM     airports source_airports  JOIN      flights  ON      source_airports.airportcode = flights.sourceairport  JOIN      airports dest_airports  ON      flights.destairport = dest_airports.airportcode  WHERE      source_airports.city = 'Aberdeen'  AND      dest_airports.city = 'Ashley';
SELECT count(*)  FROM  flights  WHERE  sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen')  AND  destairport IN (SELECT airportcode FROM airports WHERE city = 'Ashley');
SELECT count(*)  FROM  flights  WHERE  airline = 'JetBlue Airways';
SELECT count(*)  FROM  flights  JOIN  airlines  ON  flights.airline = airlines.uid  WHERE  airlines.airline = 'JetBlue Airways';
SELECT count ( * ) from flights join airlines on flights.airline = airlines.airline where airlines.airline = 'United Airlines' and flights.destairport = 'ASY';
SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode join airlines on flights.airline = airlines.abbreviation where airlines.airline = 'United Airlines' and airports.airportname = 'Asymmetric'
SELECT count ( * )  FROM flights  JOIN airlines ON flights.airline = airlines.airline  JOIN airports ON airports.airportcode = flights.sourceairport  WHERE airlines.airline = 'United Airlines'  AND airports.airportcode = 'AHD';
SELECT count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Ardmore' and flights.airline = 'United Airlines';
SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen' and flights.airline = 'United Airlines';
SELECT count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen' and flights.airline = 'United Airlines';
SELECT airports.city from airports join flights on airports.airportcode = flights.destairport group by airports.city order by count ( * ) desc limit 1
SELECT airports.city from airports join flights on airports.airportcode = flights.destairport group by airports.city order by count ( * ) desc limit 1
SELECT airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1
SELECT airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1
SELECT The question and the provided SQL code do not match because there is no information about the number of flights at each airport in the provided table schema. I would assume that there is another table called 'flights' which contains flight details and has a column 'airportcode' that links to the 'airports' table.  Assuming the 'flights' table exists with the 'airportcode' column, the fixed SQL should look like this:  ```sql SELECT airportcode FROM flights GROUP BY airportcode ORDER BY COUNT(*) DESC LIMIT 1 ```  This will give us the airport code that has the highest number of flights, assuming the 'airportcode' in 'flights' table represents the airport of departure.  However, if we need both departure and arrival counts, we would need to adjust the SQL accordingly, and it would be more complex. We would need additional information about the 'flights' table structure.
SELECT destairport  FROM  flights  GROUP BY  destairport  ORDER BY  COUNT(*) DESC  LIMIT 1
SELECT sourceairport  FROM  flights  GROUP BY  sourceairport  ORDER BY  COUNT(*) ASC  LIMIT 1;
SELECT sourceairport  FROM  flights  GROUP BY  sourceairport  ORDER BY  COUNT(*) ASC  LIMIT 1;
SELECT flights.airline FROM flights GROUP BY flights.airline ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airline  FROM  flights  GROUP BY  airline  ORDER BY  COUNT(*) DESC  LIMIT 1;
SELECT airlines.abbreviation , airlines.country  FROM  airlines  JOIN  flights  ON  airlines.abbreviation = flights.airline  GROUP BY  airlines.abbreviation, airlines.country  ORDER BY  COUNT(flights.flightno) ASC  LIMIT 1;
SELECT airlines.abbreviation, airlines.country  FROM  airlines  JOIN  flights  ON  flights.airline = airlines.uid  GROUP BY  airlines.uid  ORDER BY  COUNT(flights.flightno) ASC  LIMIT 1;
SELECT distinct airlines.airline from airlines join flights on airlines.abbreviation = flights.airline join airports on airports.airportcode = flights.sourceairport where airports.city = 'Doha';
SELECT airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'AHD'
SELECT distinct airlines.airline from airlines join flights on airlines.airline = flights.airline join airports on flights.sourceairport = airports.airportcode where airports.airportname = 'Doha Intl';
SELECT distinct airline from flights where destairport = 'AHD';
SELECT airline from flights where sourceairport = 'APG' intersect select airline from flights where sourceairport = 'CVO';
SELECT airlines.airline from flights join airports on flights.sourceairport = airports.airportcode join airlines on flights.airline = airlines.abbreviation where airports.airportcode = 'APG' intersect select airlines.airline from flights join airports on flights.sourceairport = airports.airportcode join airlines on flights.airline = airlines.abbreviation where airports.airportcode = 'CVO';
SELECT airlines.airline  FROM  flights  JOIN  airlines  ON  flights.airline = airlines.abbreviation  JOIN  airports  ON  flights.sourceairport = airports.airportcode  WHERE  airports.airportcode = 'CVO'   EXCEPT   SELECT  airlines.airline  FROM  flights  JOIN  airlines  ON  flights.airline = airlines.abbreviation  JOIN  airports  ON  flights.sourceairport = airports.airportcode  WHERE  airports.airportcode = 'APG';
SELECT airlines.airline from airlines join flights on airlines.airline = flights.airline join airports on airports.airportcode = flights.sourceairport where airports.city = 'Cordova' except select airlines.airline from airlines join flights on airlines.airline = flights.airline join airports on airports.airportcode = flights.sourceairport where airports.city = 'Marion'
SELECT airline  FROM  flights  GROUP BY  airline  HAVING  COUNT(*) >= 10
SELECT airline  FROM  flights  GROUP BY  airline  HAVING  COUNT(*) >= 10
SELECT airlines.airline  FROM  airlines  LEFT JOIN  flights  ON  airlines.abbreviation=flights.airline  GROUP BY  airlines.airline  HAVING  COUNT(flights.flightno) < 200
SELECT a.airline  FROM airlines a INNER JOIN flights f ON a.airline = f.airline  GROUP BY a.airline  HAVING COUNT(f.flightno) < 200
SELECT flightno  FROM  flights  JOIN  airlines ON flights.airline = airlines.uid  WHERE  airlines.airline = 'United Airlines'
SELECT flightno  FROM  flights  JOIN  airlines  ON  flights.airline = airlines.abbreviation WHERE  airlines.airline = 'United Airlines'
SELECT flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.airportname = 'Phillips AAF';
SELECT flightno  FROM  flights  JOIN  airports  ON  flights.sourceairport = airports.airportcode  WHERE  airports.airportcode = 'APG'
SELECT flightno from flights join airports on flights.destairport = airports.airportcode where airports.airportname = 'Marion County';
SELECT distinct flightno  FROM flights  WHERE flightno IN      (SELECT distinct flightno FROM ontime WHERE arrdelay >= 7 AND origin = 'ATL')  INTERSECT      (SELECT distinct flightno FROM ontime WHERE origin = 'APG');
SELECT distinct flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen';
SELECT distinct flights.flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen';
SELECT flights.flightno from airports join flights on airports.airportcode = flights.destairport where airports.city = 'Aberdeen';
SELECT flightno from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen';
SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen' or airports.city = 'Abilene';
SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen' or airports.city = 'Abilene';
SELECT airportname  FROM  airports  WHERE  airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights);
SELECT airportname  FROM  airports  WHERE  airportcode NOT IN (     SELECT      sourceairport      FROM      flights      UNION      SELECT      destairport      FROM      flights )
SELECT count ( * ) from employee
SELECT count ( * ) from employee
SELECT name from employee order by age asc
SELECT name from employee order by age asc
SELECT city, COUNT(*)  FROM  employee  GROUP BY  city;
SELECT count ( * ), city from employee group by city;
SELECT city from employee where age < 30 group by city having count ( * ) > 1
SELECT city from employee where age < 30 group by city having count ( * ) > 1
SELECT count ( * ), location from shop group by location;
SELECT location , COUNT(*)  FROM  shop  GROUP BY  location;
SELECT manager_name , district from shop order by number_products desc limit 1
SELECT manager_name , district from shop order by number_products desc limit 1
SELECT MAX(number_products),  MIN(number_products)  FROM shop
SELECT MAX(number_products), MIN(number_products)  FROM shop
SELECT name, location, district from shop order by number_products desc
SELECT name, location, district from shop order by number_products desc
SELECT shop_id  FROM  shop  WHERE  number_products > (SELECT AVG(number_products) FROM shop);
SELECT name from shop where number_products > ( select avg ( number_products ) from shop );
SELECT employee.name from evaluation join employee on evaluation.employee_id = employee.employee_id group by employee.name order by count ( * ) desc limit 1
SELECT employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by employee.employee_id order by count ( * ) desc limit 1
SELECT employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1
SELECT employee.name from evaluation join employee on evaluation.employee_id = employee.employee_id order by evaluation.bonus desc limit 1
SELECT name from employee where employee_id not in ( select employee_id from evaluation )
SELECT name from employee where employee_id not in ( select employee_id from evaluation )
SELECT shop.name from shop join hiring on shop.shop_id = hiring.shop_id group by hiring.shop_id order by count ( * ) desc limit 1
SELECT shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by hiring.shop_id order by count ( * ) desc limit 1
SELECT name from shop where shop_id not in ( select shop_id from hiring )
SELECT name from shop where shop_id not in ( select shop_id from hiring )
SELECT count ( * ), shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by shop.name
SELECT shop.name, COUNT(*) AS number_of_employees  FROM  shop  JOIN  hiring  ON  shop.shop_id = hiring.shop_id  GROUP BY  shop.name;
SELECT sum ( bonus ) from evaluation
SELECT sum ( bonus ) from evaluation
SELECT * from hiring
SELECT * from hiring
SELECT district from shop where number_products < 3000 intersect select district from shop where number_products > 10000
SELECT location from shop where number_products < 3000 intersect select location from shop where number_products > 10000
SELECT count ( distinct location ) from shop
SELECT count ( distinct location ) from shop
SELECT count ( * ) from documents
SELECT count ( * ) from documents
SELECT document_id , document_name , document_description from documents
SELECT document_id , document_name , document_description from documents
SELECT document_name, template_id from documents where document_description like '%w%';
SELECT document_name, template_id from documents where document_description like '%w%';
SELECT document_id , template_id , document_description from documents where document_name = 'Robbin CV';
SELECT document_id , template_id , document_description from documents where document_name = 'Robbin CV';
SELECT count ( distinct template_id ) from documents
SELECT count ( distinct template_id ) from documents
SELECT count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'
SELECT count ( * ) from templates join documents on templates.template_id = documents.template_id where templates.template_type_code = 'PPT';
SELECT template_id , count ( * ) from documents group by template_id
SELECT template_id , count ( * ) from documents group by template_id
SELECT templates.template_id , templates.template_type_code from documents join templates on documents.template_id = templates.template_id group by documents.template_id order by count ( * ) desc limit 1
SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT template_id from documents group by template_id having count ( * ) > 1
SELECT template_id from documents group by template_id having count ( * ) > 1
SELECT template_id from templates except select template_id from documents
SELECT template_id from templates except select template_id from documents
SELECT count ( * ) from templates
SELECT count ( * ) from templates
SELECT template_id , version_number , template_type_code from templates
SELECT template_id , version_number , template_type_code from templates
SELECT distinct template_type_code from templates
SELECT distinct template_type_code from templates
SELECT template_id from templates where template_type_code = 'PP' union select template_id from templates where template_type_code = 'PPT';
SELECT template_id from templates where template_type_code = 'PP' or template_type_code = 'PPT'
SELECT count ( * ) from templates where template_type_code = 'CV';
SELECT count ( * ) from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_code = 'CV';
SELECT version_number , template_type_code from templates where version_number > 5
SELECT version_number, template_type_code from templates where version_number > 5
SELECT template_type_code , count ( * ) from templates group by template_type_code
SELECT template_type_code , count ( * ) from templates group by template_type_code
SELECT template_type_code from templates group by template_type_code order by count ( * ) desc limit 1
SELECT templates.template_type_code FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code GROUP BY templates.template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT template_type_code from templates group by template_type_code having count ( * ) < 3
SELECT template_type_code from templates group by template_type_code having count ( * ) < 3
SELECT min ( version_number ), template_type_code  FROM templates  GROUP BY template_type_code  ORDER BY min(version_number) ASC  LIMIT 1;
SELECT template_type_code, MIN(version_number)  FROM templates  GROUP BY template_type_code;
SELECT templates.template_type_code from templates join documents on templates.template_id = documents.template_id where documents.document_name = 'Data base'
SELECT templates.template_type_code  FROM  documents  JOIN  templates  ON  documents.template_id = templates.template_id  WHERE  documents.document_name = 'Data base';
SELECT distinct documents.document_name from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'BK'
SELECT documents.document_name from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'BK'
SELECT templates.template_type_code, count ( * ) from documents join templates on documents.template_id = templates.template_id group by templates.template_type_code;
SELECT template_type_code , count ( * ) from documents join templates on documents.template_id = templates.template_id group by templates.template_type_code
SELECT templates.template_type_code from documents join templates on documents.template_id = templates.template_id group by templates.template_type_code order by count ( * ) desc limit 1
SELECT templates.template_type_code from documents join templates on documents.template_id = templates.template_id group by templates.template_type_code order by count ( * ) desc limit 1
SELECT template_type_code from templates except select templates.template_type_code from documents join templates on documents.template_id = templates.template_id
SELECT template_type_code  FROM  ref_template_types  WHERE  template_type_code NOT IN (SELECT template_type_code FROM templates WHERE template_id IN (SELECT template_id FROM documents))
SELECT template_type_code , template_type_description from ref_template_types
SELECT template_type_code , template_type_description from ref_template_types
SELECT template_type_description from ref_template_types where template_type_code = 'AD'
SELECT template_type_description from ref_template_types where template_type_code = 'AD'
SELECT template_type_code from ref_template_types where template_type_description = 'Book'
SELECT template_type_code from ref_template_types where template_type_description = 'Book'
SELECT distinct ref_template_types.template_type_description from documents join templates on documents.template_id = templates.template_id join ref_template_types on templates.template_type_code = ref_template_types.template_type_code;
SELECT DISTINCT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON templates.template_type_code = ref_template_types.template_type_code JOIN documents ON documents.template_id = templates.template_id;
SELECT templates.template_id from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'Presentation'
SELECT templates.template_id from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code where ref_template_types.template_type_description = 'Presentation'
SELECT count ( * ) from paragraphs
SELECT count ( * ) from paragraphs
SELECT count ( * ) from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Summer Show';
SELECT count ( * ) from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Summer Show';
SELECT other_details from paragraphs where paragraph_text = 'Korea';
SELECT paragraphs.paragraph_text, documents.other_details FROM  documents JOIN  paragraphs  ON  documents.document_id = paragraphs.document_id WHERE  paragraphs.paragraph_text LIKE '%Korea %'
SELECT paragraph_id , paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Welcome to NY';
SELECT paragraphs.paragraph_id, paragraphs.paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Welcome to NY';
SELECT paragraphs.paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Customer reviews';
SELECT paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Customer reviews';
SELECT document_id , count ( * ) from paragraphs group by document_id order by document_id asc
SELECT document_id , count ( * ) from paragraphs group by document_id order by document_id asc
SELECT documents.document_id , documents.document_name , count ( * ) from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id
SELECT documents.document_id , documents.document_name , count ( * ) from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id
SELECT document_id from paragraphs group by document_id having count ( * ) >= 2
SELECT document_id from paragraphs group by document_id having count ( * ) >= 2
SELECT documents.document_id , documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count ( * ) desc limit 1
SELECT documents.document_id , documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count ( * ) desc limit 1
SELECT document_id from paragraphs group by document_id order by count ( * ) asc limit 1
SELECT document_id from paragraphs group by document_id order by count ( * ) asc limit 1
SELECT document_id from paragraphs group by document_id having count ( * ) between 1 and 2
SELECT documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id having count ( * ) between 1 and 2
SELECT document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland'
SELECT document_id from paragraphs where paragraph_text like '%Brazil%' intersect select document_id from paragraphs where paragraph_text like '%Ireland%';
SELECT count ( * ) from teacher
SELECT count ( * ) from teacher
SELECT name from teacher order by age asc
SELECT name from teacher order by age asc
SELECT age , hometown from teacher
SELECT age , hometown from teacher
SELECT name  FROM  teacher  WHERE  hometown != 'Little Lever Urban District';
SELECT name  FROM  teacher  WHERE  hometown != 'Little Lever Urban District'
SELECT name from teacher where age = 32 or age = 33
SELECT name from teacher where age = 32 or age = 33
SELECT hometown from teacher order by age asc limit 1
SELECT hometown from teacher order by age asc limit 1;
SELECT hometown , count ( * ) from teacher group by hometown
SELECT hometown, count ( * ) from teacher group by hometown;
SELECT hometown from teacher group by hometown order by count ( * ) desc limit 1;
SELECT hometown from teacher group by hometown order by count ( * ) desc limit 1
SELECT hometown from teacher group by hometown having count ( * ) >= 2
SELECT hometown from teacher group by hometown having count ( * ) >= 2
SELECT teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id
SELECT teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id
SELECT teacher.name, course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc
SELECT teacher.name, course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc;
SELECT teacher.name  FROM  teacher  JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id  JOIN course ON course.course_id = course_arrange.course_id  WHERE course.course = 'math';
SELECT distinct teacher.name  FROM  teacher  JOIN  course_arrange  ON  teacher.teacher_id = course_arrange.teacher_id  JOIN  course  ON  course_arrange.course_id = course.course_id  WHERE  course.name = 'Math';
SELECT teacher.name, COUNT(course_arrange.course_id)  FROM  teacher  JOIN  course_arrange  ON  teacher.teacher_id = course_arrange.teacher_id  GROUP BY  teacher.name
SELECT teacher.name , count ( * ) from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id group by teacher.name
SELECT teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count ( * ) >= 2
SELECT teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count ( * ) >= 2
SELECT name from teacher where teacher_id not in ( select teacher_id from course_arrange )
SELECT name from teacher where teacher_id not in ( select teacher_id from course_arrange )
SELECT count ( * ) from visitor where age < 30
SELECT name from visitor where level_of_membership > 4 order by level_of_membership desc
SELECT avg ( age ) from visitor where level_of_membership <= 4
SELECT name , level_of_membership from visitor where level_of_membership > 4 order by age desc
SELECT museum_id , name from museum order by num_of_staff desc limit 1
SELECT avg ( num_of_staff ) from museum where open_year < 2009
SELECT open_year, num_of_staff  FROM  museum  WHERE  name = 'Plaza Museum'
SELECT name from museum where num_of_staff > ( select min ( num_of_staff ) from museum where open_year > 2010 );
SELECT visitor.id, visitor.name, visitor.age  FROM  visitor  JOIN  visit  ON  visitor.id = visit.visitor_id  GROUP BY  visitor.id, visit.museum_id  HAVING  COUNT(visit.museum_id) > 1
SELECT visitor.id, visitor.name, visitor.level_of_membership  FROM  visitor  JOIN  visit  ON  visitor.id = visit.visitor_id  GROUP BY  visitor.id  ORDER BY  SUM(visit.total_spent) DESC  LIMIT 1;
SELECT museum.museum_id, museum.name  FROM  visit  JOIN  museum  ON  visit.museum_id = museum.museum_id  GROUP BY  visit.museum_id  ORDER BY  COUNT(*) DESC  LIMIT 1;
SELECT name from museum where museum_id not in ( select museum_id from visit )
SELECT visitor.name, visitor.age from visitor join visit on visitor.id = visit.visitor_id order by visit.num_of_ticket desc limit 1
SELECT avg ( num_of_ticket ), max ( num_of_ticket ) from visit
SELECT sum ( total_spent ) from visitor join visit on visitor.id = visit.visitor_id where level_of_membership = 1
SELECT visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on visit.museum_id = museum.museum_id where museum.open_year < 2009 intersect select visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on visit.museum_id = museum.museum_id where museum.open_year > 2011
SELECT count ( distinct visitor.id )  FROM visitor  WHERE visitor.id NOT IN (     SELECT DISTINCT visit.visitor_id      FROM visit      JOIN museum      ON museum.museum_id = visit.museum_id      WHERE museum.open_year > 2010);
SELECT count ( * ) from museum where open_year > 2013 or open_year < 2008
SELECT count ( * ) from players
SELECT count ( * ) from players
SELECT count ( * ) from matches
SELECT count ( * ) from matches
SELECT players.first_name, players.birth_date  FROM players  JOIN matches  ON players.player_id = matches.winner_id  WHERE matches.winner_ioc = 'USA' GROUP BY players.player_id;
SELECT distinct players.first_name, players.birth_date  FROM  players  JOIN  rankings  ON  players.player_id = rankings.player_id  WHERE  players.player_country = 'USA'
SELECT AVG(winner_age) AS avg_winner_age,  AVG(loser_age) AS avg_loser_age  FROM matches
SELECT AVG(winner_age) AS average_winner_age, AVG(loser_age) AS average_loser_age FROM matches;
SELECT avg ( winner_rank ) from matches
SELECT avg ( winner_rank ) from matches
SELECT MAX(loser_rank)  FROM matches;
SELECT min ( loser_rank ) from matches
SELECT count ( distinct country_code ) from players
SELECT count ( distinct country_code ) from players
SELECT count ( distinct loser_name ) from matches
SELECT count ( distinct loser_name ) from matches
SELECT tourney_name from matches group by tourney_name having count ( * ) > 10
SELECT tourney_name from matches group by tourney_name having count ( * ) > 10
SELECT players.first_name,  players.last_name  FROM matches  JOIN players ON matches.winner_id = players.player_id  WHERE matches.year = 2013   INTERSECT   SELECT  players.first_name,  players.last_name  FROM matches  JOIN players ON matches.winner_id = players.player_id  WHERE matches.year = 2016;
SELECT players.first_name,  players.last_name  FROM players  JOIN matches  ON players.player_id = matches.winner_id  WHERE matches.year = 2013  INTERSECT  SELECT  players.first_name,  players.last_name  FROM players  JOIN matches  ON players.player_id = matches.winner_id  WHERE matches.year = 2016;
SELECT count ( * ) from matches where year = 2013 or year = 2016
SELECT count ( * ) from matches where year = 2013 or year = 2016
SELECT players.first_name, players.country_code  FROM players  JOIN matches ON players.player_id = matches.winner_id  WHERE matches.tourney_name = 'WTA Championships'  INTERSECT  SELECT players.first_name, players.country_code  FROM players  JOIN matches ON players.player_id = matches.winner_id  WHERE matches.tourney_name = 'Australian Open';
SELECT players.first_name, players.country_code  FROM players  JOIN matches ON players.player_id = matches.winner_id  WHERE matches.tourney_name = 'WTA Championships'  INTERSECT  SELECT players.first_name, players.country_code  FROM players  JOIN matches ON players.player_id = matches.winner_id  WHERE matches.tourney_name = 'Australian Open';
SELECT players.first_name, players.country_code  FROM  players  JOIN  rankings  ON  players.player_id = rankings.player_id  ORDER BY  rankings.ranking_date DESC  LIMIT 1
SELECT players.first_name, players.country_code  FROM  players JOIN rankings  ON players.player_id = rankings.player_id  ORDER BY rankings.ranking_date DESC  LIMIT 1
SELECT distinct first_name, last_name  FROM players  ORDER BY birth_date ASC;
SELECT first_name, last_name  FROM players  ORDER BY birth_date ASC;
SELECT first_name , last_name from players where hand = 'L' order by birth_date asc
SELECT first_name, last_name from players where hand = 'L' order by birth_date asc
SELECT players.first_name,  players.country_code  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.player_id  ORDER BY SUM(rankings.tours) DESC  LIMIT 1
SELECT players.first_name, players.country_code  FROM rankings  JOIN players  ON rankings.player_id = players.player_id  GROUP BY rankings.player_id  ORDER BY  SUM(rankings.tours) DESC  LIMIT 1
SELECT year from matches group by year order by count ( * ) desc limit 1
SELECT year from matches group by year order by count ( * ) desc limit 1;
SELECT winner_name , winner_rank_points from matches group by winner_id order by count ( * ) desc limit 1;
SELECT players.first_name,  players.last_name,  rankings.ranking_points  FROM players  JOIN matches ON players.player_id = matches.winner_id  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY matches.winner_id  ORDER BY count(*) DESC LIMIT 1
SELECT winner_name from matches where tourney_name = 'Australian Open' order by winner_rank_points desc limit 1;
SELECT distinct winner_name from matches where tourney_name = 'Australian Open' order by winner_rank_points desc limit 1;
SELECT winner_name , loser_name from matches order by minutes desc limit 1
SELECT winner.first_name AS winner_first_name, winner.last_name AS winner_last_name, loser.first_name AS loser_first_name, loser.last_name AS loser_last_name FROM matches JOIN players AS winner ON matches.winner_name = winner.player_id JOIN players AS loser ON matches.loser_name = loser.player_id ORDER BY matches.minutes DESC LIMIT 1;
SELECT players.first_name,  AVG(rankings.ranking)  FROM players  JOIN rankings  ON players.player_id = rankings.player_id  GROUP BY players.first_name;
SELECT players.first_name, AVG(rankings.ranking) FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT sum ( rankings.ranking_points ), players.first_name from rankings join players on rankings.player_id = players.player_id group by players.first_name
SELECT players.first_name, SUM(rankings.ranking_points)  FROM  players  JOIN  rankings  ON  players.player_id = rankings.player_id  GROUP BY  players.first_name
SELECT country_code, COUNT(*)  FROM  players  GROUP BY  country_code;
SELECT country_code, COUNT(player_id) FROM  players  GROUP BY  country_code;
SELECT country_code from players group by country_code order by count ( * ) desc limit 1
SELECT country_code from players group by country_code order by count ( * ) desc limit 1
SELECT country_code from players group by country_code having count ( * ) > 50;
SELECT country_code from players group by country_code having count ( * ) > 50
SELECT ranking_date, SUM(tours)  FROM  rankings  GROUP BY  ranking_date;
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT year, COUNT(*)  FROM  matches  GROUP BY  year;
SELECT strftime('%Y', tourney_date) AS Year, COUNT(*) AS Matches_Played FROM matches  GROUP BY Year;
SELECT winner_name, winner_rank from matches order by winner_age asc limit 3
SELECT winner_name, winner_rank from matches order by winner_age asc limit 3;
SELECT count ( * ) from players where hand = 'L' and player_id in ( select winner_id from matches where tourney_name = 'WTA Championships' )
SELECT count ( * )  FROM  matches  WHERE  winner_hand = 'L' AND tourney_name = 'WTA Championships' AND winner_id IN (SELECT player_id FROM players WHERE hand = 'L');
SELECT players.first_name, players.country_code, players.birth_date from players join matches on players.player_id = matches.winner_id order by matches.winner_rank_points desc limit 1;
SELECT players.first_name, players.country_code, players.birth_date from players join matches on matches.winner_id = players.player_id order by matches.winner_rank_points desc limit 1;
SELECT hand, COUNT(*)  FROM  players  GROUP BY  hand;
SELECT hand, COUNT(*)  FROM  players  GROUP BY  hand;
SELECT count ( * ) from ship where disposition_of_ship = 'Captured';
SELECT name, tonnage from ship order by name desc
SELECT name, date, result  FROM  battle
SELECT max ( killed ), min ( killed ) from death
SELECT avg ( injured ) from death
SELECT death.killed , death.injured from death join ship on death.caused_by_ship_id = ship.id where ship.tonnage = 't'
SELECT name , result from battle where bulgarian_commander != 'Boril'
SELECT distinct battle.id , battle.name from battle join ship on battle.id = ship.lost_in_battle where ship.ship_type = 'Brig'
SELECT battle.id , battle.name from battle join ship on ship.lost_in_battle = battle.id join death on death.caused_by_ship_id = ship.id group by battle.id having sum ( death.killed ) > 10
SELECT ship.id, ship.name  FROM  death  JOIN  ship  ON  death.caused_by_ship_id = ship.id  GROUP BY  ship.id, ship.name  ORDER BY  SUM(death.injured) DESC  LIMIT 1;
SELECT distinct battle.name  FROM  battle  JOIN  ship ON battle.id = ship.lost_in_battle  WHERE  battle.name BETWEEN 'Kaloyan' AND 'Baldwin I';
SELECT count ( distinct result ) from battle
SELECT count ( * ) from battle where id not in ( select lost_in_battle from ship where tonnage = 225 )
SELECT battle.name, battle.date from battle join ship on ship.lost_in_battle = battle.id where ship.name = 'Lettice' intersect select battle.name, battle.date from battle join ship on ship.lost_in_battle = battle.id where ship.name = 'HMS Atalanta';
SELECT battle.name,  battle.result,  battle.bulgarian_commander  FROM battle  LEFT JOIN ship ON battle.name = ship.lost_in_battle  WHERE ship.location IS NULL OR ship.location != 'English Channel';
SELECT note from death where note like '%East%';
SELECT line_1, line_2 from addresses
SELECT line_1, line_2 from addresses
SELECT count ( * ) from courses
SELECT count ( * ) from courses
SELECT course_description  FROM  courses  WHERE  course_name = 'Math';
SELECT course_description from courses where course_name = 'math';
SELECT zip_postcode from addresses where city = 'Port Chelsea'
SELECT zip_postcode from addresses where city = 'Port Chelsea'
SELECT departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1
SELECT departments.department_name, degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1
SELECT count ( distinct department_id ) from degree_programs
SELECT count ( distinct department_id ) from degree_programs
SELECT count ( distinct degree_summary_name ) from degree_programs
SELECT count ( distinct degree_summary_name ) from degree_programs
SELECT count ( * ) from degree_programs join departments on degree_programs.department_id = departments.department_id where department_name = 'Engineering';
SELECT count ( * ) from degree_programs join departments on degree_programs.department_id = departments.department_id where departments.department_name = 'Engineering';
SELECT section_name , section_description from sections
SELECT section_name, section_description from sections
SELECT courses.course_name, courses.course_id from courses join sections on courses.course_id = sections.course_id group by courses.course_id having count ( * ) <= 2
SELECT courses.course_name,  courses.course_id  FROM  courses  LEFT JOIN sections ON courses.course_id = sections.course_id  GROUP BY  courses.course_id,  courses.course_name  HAVING COUNT(sections.section_id) < 2;
SELECT section_name from sections order by section_name desc
SELECT section_name from sections order by section_name desc
SELECT semesters.semester_name, student_enrolment.semester_id from student_enrolment join semesters on student_enrolment.semester_id = semesters.semester_id group by student_enrolment.semester_id order by count ( * ) desc limit 1
SELECT semesters.semester_name, student_enrolment.semester_id from student_enrolment join semesters on student_enrolment.semester_id = semesters.semester_id group by student_enrolment.semester_id order by count ( * ) desc limit 1
SELECT department_description from departments where department_name like '%computer%';
SELECT department_description from departments where department_name like '%computer%';
SELECT students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id group by student_enrolment.student_id having count ( * ) = 2;
SELECT students.first_name , students.middle_name , students.last_name , student_enrolment.student_id  FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  GROUP BY student_enrolment.student_id, student_enrolment.semester_id  HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2
SELECT students.first_name , students.middle_name , students.last_name  FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_programs.degree_summary_name LIKE '%Bachelor%';
SELECT students.first_name,  students.middle_name,  students.last_name  FROM students  JOIN degree_programs  ON students.student_id = degree_programs.degree_program_id  WHERE degree_programs.degree_summary_name = 'Bachelors';
SELECT degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_summary_name order by count ( * ) desc limit 1
SELECT degree_programs.degree_summary_name from student_enrolment join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id group by student_enrolment.degree_program_id order by count ( * ) desc limit 1;
SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name FROM degree_programs INNER JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_program_id, degree_programs.degree_summary_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;
SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by student_enrolment.degree_program_id order by count ( * ) desc limit 1
SELECT students.student_id,  students.first_name,  students.middle_name,  students.last_name,  COUNT(*) as number_of_enrollments  FROM student_enrolment  JOIN students  ON student_enrolment.student_id = students.student_id  GROUP BY students.student_id, students.first_name, students.middle_name, students.last_name  ORDER BY number_of_enrollments DESC  LIMIT 1;
SELECT students.first_name,  students.middle_name,  students.last_name,  student_enrolment.student_id,  COUNT(student_enrolment.student_id) as enrollments FROM student_enrolment  JOIN students  ON student_enrolment.student_id = students.student_id  GROUP BY student_enrolment.student_id  ORDER BY enrollments DESC  LIMIT 1;
SELECT semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )
SELECT semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )
SELECT courses.course_name  FROM  courses  JOIN  student_enrolment  ON  courses.course_id = student_enrolment.degree_program_id
SELECT courses.course_name  FROM  courses  JOIN  student_enrolment_courses  ON  courses.course_id = student_enrolment_courses.course_id  GROUP BY  courses.course_name  HAVING  COUNT(student_enrolment_courses.student_course_id) > 0;
SELECT courses.course_name from student_enrolment_courses join courses on student_enrolment_courses.course_id = courses.course_id group by courses.course_name order by count ( * ) desc limit 1
SELECT courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( * ) desc limit 1
SELECT students.last_name  FROM students  JOIN addresses  ON students.current_address_id = addresses.address_id  WHERE addresses.state_province_county = 'North Carolina'  AND students.student_id NOT IN (     SELECT student_enrolment.student_id      FROM student_enrolment )
SELECT distinct students.last_name  FROM students  JOIN addresses  ON students.permanent_address_id = addresses.address_id  WHERE addresses.state_province_county = 'North Carolina'  AND students.student_id NOT IN (     SELECT student_id      FROM student_enrolment )
SELECT transcripts.transcript_date, transcript_contents.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id group by transcript_contents.transcript_id having count ( * ) >= 2;
SELECT transcripts.transcript_date,transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcripts.transcript_id having count ( * ) >= 2;
SELECT cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Ward'
SELECT cell_mobile_number  FROM  students  WHERE  first_name = 'Timmothy'  AND  last_name = 'Ward'
SELECT first_name, middle_name, last_name from students order by date_first_registered asc limit 1;
SELECT first_name , middle_name , last_name from students order by date_first_registered asc limit 1
SELECT first_name , middle_name , last_name from students order by date_first_registered asc limit 1;
SELECT first_name, middle_name, last_name FROM students ORDER BY graduation_date ASC LIMIT 1;
SELECT first_name  FROM  students  WHERE  permanent_address_id != current_address_id
SELECT first_name from students where permanent_address_id != current_address_id
SELECT addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3  FROM  addresses  JOIN  students  ON  addresses.address_id = students.current_address_id  GROUP BY  addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3  ORDER BY  COUNT(students.current_address_id) DESC  LIMIT 1;
SELECT addresses.address_id, addresses.line_1, addresses.line_2 from addresses join students on students.permanent_address_id = addresses.address_id group by addresses.address_id order by count ( * ) desc limit 1;
SELECT avg ( transcript_date ) from transcripts
SELECT avg ( transcript_date ) from transcripts
SELECT transcript_date , other_details from transcripts order by transcript_date asc limit 1;
SELECT transcript_date, other_details  FROM  transcripts  ORDER BY  transcript_date ASC  LIMIT 1;
SELECT count ( * ) from transcripts
SELECT count ( * ) from transcripts
SELECT transcript_date from transcripts order by transcript_date desc limit 1
SELECT transcript_date from transcripts order by transcript_date desc limit 1
SELECT transcript_contents.student_course_id, COUNT(*) AS times FROM     transcript_contents GROUP BY     transcript_contents.student_course_id ORDER BY     times DESC LIMIT 1;
SELECT student_enrolment_courses.student_enrolment_id,  courses.course_name,  COUNT(*) as count  FROM  student_enrolment_courses  JOIN  transcript_contents ON student_enrolment_courses.student_course_id = transcript_contents.student_course_id  JOIN  courses ON student_enrolment_courses.course_id = courses.course_id  GROUP BY  student_enrolment_courses.course_id  ORDER BY  count DESC  LIMIT 1;
SELECT transcripts.transcript_date,transcripts.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1
SELECT transcript_date, transcript_id FROM (     SELECT transcript_date, transcript_id, COUNT(*) as count_transcript     FROM transcripts     GROUP BY transcript_id ) AS count_transcript_table ORDER BY count_transcript ASC LIMIT 1;
SELECT semesters.semester_name  FROM  students  JOIN  degree_programs ON students.degree_program_id = degree_programs.degree_program_id JOIN  semesters ON students.date_first_registered = semesters.semester_name  WHERE  degree_programs.degree_summary_name = 'Master'  INTERSECT  SELECT  semester_name  FROM  students  JOIN  degree_programs ON students.degree_program_id = degree_programs.degree_program_id JOIN  semesters ON students.date_first_registered = semesters.semester_name  WHERE  degree_programs.degree_summary_name = 'Bachelor';
SELECT semester_id  FROM  student_enrolment  WHERE  degree_program_id IN (     SELECT      degree_program_id      FROM      degree_programs      WHERE      department_id IN ('Masters', 'Bachelors') )  GROUP BY  semester_id  HAVING  COUNT(DISTINCT degree_program_id) > 1;
SELECT count ( distinct current_address_id ) from students
SELECT distinct addresses.line_1, addresses.line_2, addresses.line_3, addresses.city, addresses.zip_postcode, addresses.state_province_county, addresses.country  FROM addresses  JOIN students ON (addresses.address_id = students.current_address_id OR addresses.address_id = students.permanent_address_id)
SELECT *  FROM students  ORDER BY last_name DESC, first_name DESC, middle_name DESC
SELECT * FROM students  ORDER BY last_name DESC;
SELECT section_description from sections where section_name = 'h';
SELECT section_description from sections where section_name = 'h'
SELECT students.first_name  FROM  students  JOIN  addresses ON students.permanent_address_id = addresses.address_id  WHERE  addresses.country = 'Haiti' OR students.cell_mobile_number = '09700166582'
SELECT students.first_name  FROM  students  JOIN  addresses  ON  students.permanent_address_id = addresses.address_id  WHERE  addresses.country = 'Haiti'  OR  students.cell_mobile_number = '09700166582';
SELECT title from cartoon order by title asc
SELECT title from cartoon order by title asc
SELECT title from cartoon where directed_by = 'Ben Jones'
SELECT title from cartoon where directed_by = 'Ben Jones'
SELECT count ( * ) from cartoon where written_by = 'Joseph Kuhr'
SELECT count ( * ) from cartoon where written_by = 'Joseph Kuhr'
SELECT title, directed_by from cartoon order by original_air_date asc
SELECT cartoon.title, cartoon.directed_by  FROM  cartoon  JOIN  tv_series  ON  cartoon.channel = tv_series.channel  ORDER BY  tv_series.air_date ASC;
SELECT title from cartoon where directed_by = 'Ben Jones' or directed_by = 'Brandon Vietti'
SELECT title from cartoon where directed_by = 'Ben Jones' or directed_by = 'Brandon Vietti';
SELECT country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1
SELECT country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1
SELECT count ( distinct series_name ), count ( distinct content ) from tv_channel
SELECT count ( distinct series_name ), count ( distinct content ) from tv_channel
SELECT content from tv_channel where series_name = 'Sky Radio'
SELECT content from tv_channel where series_name = 'Sky Radio'
SELECT package_option from tv_channel where series_name = 'Sky Radio'
SELECT package_option  FROM  tv_channel  JOIN  tv_series  ON  tv_channel.series_name = tv_series.channel  WHERE  tv_channel.series_name = 'Sky Radio'
SELECT count ( * ) from tv_channel where language = 'English';
SELECT count ( * ) from tv_channel where language = 'English'
SELECT language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1;
SELECT language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1
SELECT language , count ( * ) from tv_channel group by language;
SELECT language, COUNT(*)  FROM  tv_channel  GROUP BY  language;
SELECT tv_channel.series_name from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.title = 'The Rise of the Blue Beetle!';
SELECT tv_channel.series_name  FROM  cartoon  JOIN  tv_channel  ON  cartoon.channel = tv_channel.id  WHERE  cartoon.title = 'The Rise of the Blue Beetle';
SELECT cartoon.title from cartoon join tv_channel on cartoon.channel = tv_channel.id where tv_channel.series_name = 'Sky Radio'
SELECT cartoon.title from cartoon join tv_channel on cartoon.channel = tv_channel.id where tv_channel.series_name = 'Sky Radio'
SELECT episode from tv_series order by rating asc;
SELECT episode from tv_series order by rating asc
SELECT episode, rating from tv_series order by rating desc limit 3
SELECT episode, rating from tv_series order by rating desc limit 3;
SELECT MIN(share),  MAX(share)  FROM tv_series
SELECT max ( share ), min ( share ) from tv_series
SELECT air_date from tv_series where episode = 'A Love of a Lifetime';
SELECT tv_series.air_date  FROM  tv_series  JOIN  tv_channel  ON  tv_channel.id = tv_series.channel  WHERE  tv_series.episode = 'A Love of a Lifetime';
SELECT weekly_rank from tv_series where episode = 'A Love of a Lifetime';
SELECT weekly_rank from tv_series where episode = 'A Love of a Lifetime';
SELECT tv_channel.series_name from tv_channel join tv_series on tv_channel.id = tv_series.channel where tv_series.episode = 'A Love of a Lifetime';
SELECT tv_series.series_name  FROM  tv_series  JOIN  tv_channel  ON  tv_series.channel = tv_channel.id  WHERE  tv_series.episode = 'A Love of a Lifetime';
SELECT tv_series.episode from tv_channel join tv_series on tv_channel.id = tv_series.channel where tv_channel.series_name = 'Sky Radio';
SELECT episode from tv_series join tv_channel on tv_series.channel = tv_channel.id where series_name = 'Sky Radio';
SELECT directed_by, COUNT(*)  FROM  cartoon  GROUP BY  directed_by;
SELECT count ( * ), directed_by from cartoon group by directed_by;
SELECT production_code , channel from cartoon order by original_air_date desc limit 1
SELECT production_code , channel from cartoon order by original_air_date desc limit 1
SELECT tv_channel.package_option,  tv_series.title  FROM  tv_channel  JOIN  tv_series  ON  tv_channel.id = tv_series.channel  WHERE  tv_channel.hight_definition_tv = 1
SELECT tv_channel.package_option, tv_series.series_name  FROM  tv_channel  JOIN  tv_series ON tv_channel.id = tv_series.channel  WHERE  tv_channel.hight_definition_tv = 'Yes'
SELECT country from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.written_by = 'Todd Casey'
SELECT tv_channel.country from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.written_by = 'Todd Casey';
SELECT country  FROM tv_channel  WHERE series_name NOT IN ( SELECT channel FROM cartoon WHERE written_by = 'Todd Casey' )
SELECT country from tv_channel except select country from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.written_by = 'Todd Casey';
SELECT tv_channel.series_name, tv_channel.country from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.directed_by = 'Ben Jones' intersect select tv_channel.series_name, tv_channel.country from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.directed_by = 'Michael Chang';
SELECT tv_channel.series_name, tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones' intersect select tv_channel.series_name, tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Michael Chang';
SELECT pixel_aspect_ratio_par, language  FROM tv_channel  WHERE language != 'English'
SELECT pixel_aspect_ratio_par, country  FROM  tv_channel  WHERE  language != 'English'
SELECT id  FROM  tv_channel  WHERE  country IN ( SELECT country FROM tv_channel GROUP BY country HAVING COUNT(id) > 2 )
SELECT id  FROM  tv_channel  GROUP BY  id  HAVING  count(*) > 1
SELECT id from tv_channel except select channel from cartoon where directed_by = 'Ben Jones';
SELECT id from tv_channel except select cartoon.channel from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.directed_by = 'Ben Jones';
SELECT package_option  FROM  tv_channel  WHERE  id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');
SELECT package_option  FROM tv_channel  WHERE id NOT IN (     SELECT channel      FROM cartoon      WHERE directed_by = 'Ben Jones' )
SELECT count ( * ) from poker_player
SELECT count ( * ) from poker_player
SELECT earnings from poker_player order by earnings desc
SELECT earnings from poker_player order by earnings desc
SELECT final_table_made , best_finish from poker_player
SELECT final_table_made , best_finish from poker_player
SELECT avg ( earnings ) from poker_player
SELECT avg ( earnings ) from poker_player
SELECT money_rank from poker_player order by earnings desc limit 1;
SELECT money_rank from poker_player order by earnings desc limit 1;
SELECT max ( final_table_made ) from poker_player where earnings < 200000
SELECT max ( final_table_made ) from poker_player where earnings < 200000
SELECT people.name from people join poker_player on people.people_id = poker_player.people_id
SELECT people.name from poker_player join people on poker_player.people_id = people.people_id
SELECT people.name from people join poker_player on people.people_id = poker_player.people_id where poker_player.earnings > 300000
SELECT people.name from poker_player join people on poker_player.people_id = people.people_id where poker_player.earnings > 300000
SELECT people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.final_table_made asc
SELECT people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.final_table_made asc;
SELECT people.birth_date from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings asc limit 1;
SELECT people.birth_date from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings asc limit 1;
SELECT poker_player.money_rank from people join poker_player on people.people_id = poker_player.people_id order by people.height desc limit 1;
SELECT poker_player.money_rank from people join poker_player on people.people_id = poker_player.people_id order by people.height desc limit 1;
SELECT avg ( poker_player.earnings ) from people join poker_player on people.people_id = poker_player.people_id where people.height > 200
SELECT avg ( poker_player.earnings ) from people join poker_player on people.people_id = poker_player.people_id where people.height > 200
SELECT people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings desc
SELECT people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings desc
SELECT distinct nationality , count ( * ) from people group by nationality
SELECT nationality , count ( * ) from people group by nationality;
SELECT nationality from people group by nationality order by count ( * ) desc limit 1
SELECT nationality from people group by nationality order by count ( * ) desc limit 1
SELECT nationality from people group by nationality having count ( * ) >= 2
SELECT nationality from people group by nationality having count ( * ) >= 2
SELECT name, birth_date from people order by name asc
SELECT name, birth_date from people order by name asc
SELECT name from people where nationality != 'Russia'
SELECT name from people where nationality != 'Russia'
SELECT name from people where people_id not in ( select people_id from poker_player )
SELECT name from people where people_id not in ( select people_id from poker_player )
SELECT count ( distinct nationality ) from people
SELECT count ( distinct nationality ) from people
SELECT count ( * ) from area_code_state
SELECT contestant_number , contestant_name from contestants order by contestant_name desc
SELECT vote_id , phone_number , state from votes
SELECT max ( area_code ), min ( area_code ) from area_code_state
SELECT max ( votes.created ) from area_code_state join votes on area_code_state.state = votes.state where area_code_state.state = 'CA';
SELECT contestant_name from contestants where contestant_name != 'Jessie Alloway'
SELECT distinct state , created from votes
SELECT contestants.contestant_number, contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by contestants.contestant_number having count ( * ) >= 2;
SELECT contestants.contestant_number, contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by contestants.contestant_number order by count ( * ) asc limit 1
SELECT count ( * ) from votes where state = 'NY' or state = 'CA'
SELECT count ( * ) from contestants where contestant_number not in ( select contestant_number from votes );
SELECT area_code from area_code_state join votes on area_code_state.state = votes.state group by area_code_state.area_code order by count ( * ) desc limit 1
SELECT votes.created, votes.state, votes.phone_number from votes join contestants on votes.contestant_number = contestants.contestant_number where contestants.contestant_name = 'Tabatha Gehling';
SELECT area_code_state.area_code  FROM votes  JOIN area_code_state ON votes.state = area_code_state.state  JOIN contestants as c1 ON votes.contestant_number = c1.contestant_number  WHERE c1.contestant_name = 'Tabatha Gehling' INTERSECT  SELECT area_code_state.area_code  FROM votes  JOIN area_code_state ON votes.state = area_code_state.state  JOIN contestants as c2 ON votes.contestant_number = c2.contestant_number  WHERE c2.contestant_name = 'Kelly Clauss'
SELECT contestant_name from contestants where contestant_name like '%Al%';
SELECT name from country where indepyear > 1950;
SELECT name from country where indepyear > 1950
SELECT count ( * ) from country where governmentform = 'Republic';
SELECT count ( * ) from country where governmentform = 'Republic';
SELECT sum ( surfacearea ) from country where region = 'Caribbean';
SELECT SUM(surfacearea)  FROM  country  WHERE  region = 'Caribbean';
SELECT continent from country where name = 'Anguilla'
SELECT continent from country where name = 'Anguilla'
SELECT country.region from city join country on city.countrycode = country.code where city.name = 'Kabul';
SELECT district  FROM  city  WHERE  name = 'Kabul';
SELECT language from countrylanguage where countrycode = 'ABW' order by percentage desc limit 1;
SELECT language  FROM  countrylanguage  WHERE  countrycode IN ( SELECT code FROM country WHERE name = 'Aruba' )  AND  isofficial = 'T';
SELECT population , lifeexpectancy from country where name = 'Brazil'
SELECT population , lifeexpectancy from country where name = 'Brazil'
SELECT region, population  FROM  country  WHERE  name = 'Angola'
SELECT region , population  FROM  country  WHERE  name = 'Angola'
SELECT avg ( lifeexpectancy ) from country where region = 'Central Africa'
SELECT avg(lifeexpectancy) FROM country WHERE continent = 'Africa' AND name = 'Central African Republic'
SELECT name from country where continent = 'Asia' order by lifeexpectancy asc limit 1;
SELECT name from country where continent = 'Asia' order by lifeexpectancy asc limit 1
SELECT sum ( population ), max ( gnp ) from country where continent = 'Asia'
SELECT sum ( population ), max ( gnp ) from country where continent = 'Asia';
SELECT avg ( lifeexpectancy ) from country where continent = 'Africa' and governmentform = 'Republic'
SELECT avg ( lifeexpectancy ) from country where continent = 'Africa' and governmentform = 'Republic'
SELECT sum ( surfacearea ) from country where continent = 'Asia' or continent = 'Europe'
SELECT sum ( surfacearea ) from country where continent = 'Asia' or continent = 'Europe'
SELECT sum ( population ) from city where district = 'Gelderland';
SELECT sum ( city.population ) from city join country on city.countrycode = country.code where city.district = 'Gelderland';
SELECT avg(gnp), sum(population)  FROM  country  WHERE  governmentform = 'US Territory';
SELECT avg(gnp), sum(population)  FROM country  WHERE governmentform LIKE '%US%'
SELECT count ( distinct language ) from countrylanguage
SELECT count ( distinct language ) from countrylanguage
SELECT count ( distinct governmentform ) from country where continent = 'Africa';
SELECT count ( distinct governmentform ) from country where continent = 'Africa';
SELECT count ( * ) from countrylanguage where countrycode = 'ABW';
SELECT count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Aruba';
SELECT count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Afghanistan' and isofficial = 'T'
SELECT count ( * ) from countrylanguage where countrycode = 'AFG' and isofficial = 'T';
SELECT country.name  FROM  country  JOIN  countrylanguage ON country.code = countrylanguage.countrycode  GROUP BY  country.name  ORDER BY  COUNT(DISTINCT countrylanguage.language) DESC  LIMIT 1;
SELECT country.name  FROM  country  JOIN countrylanguage  ON country.name = countrylanguage.countrycode  GROUP BY country.name  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT continent from countrylanguage join country on countrylanguage.countrycode = country.code group by country.continent order by count ( distinct countrylanguage.language ) desc limit 1
SELECT continent from countrylanguage join country on countrylanguage.countrycode = country.code group by country.continent order by count ( distinct countrylanguage.language ) desc limit 1
SELECT COUNT(*) FROM (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English'     INTERSECT     SELECT countrycode     FROM countrylanguage     WHERE language = 'Dutch' ) AS both_languages_countries;
SELECT COUNT(DISTINCT countrycode) FROM     countrylanguage WHERE     language IN ('English', 'Dutch')
SELECT country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French';
SELECT country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French';
SELECT name from country where code in ( select countrycode from countrylanguage where language = 'English' and isofficial = 'T' intersect select countrycode from countrylanguage where language = 'French' and isofficial = 'T' )
SELECT country.name  FROM  country  JOIN  countrylanguage  ON  country.code = countrylanguage.countrycode  WHERE  countrylanguage.language = 'English'  AND  countrylanguage.isofficial = 'T'   INTERSECT   SELECT  country.name  FROM  country  JOIN  countrylanguage  ON  country.code = countrylanguage.countrycode  WHERE  countrylanguage.language = 'French'  AND  countrylanguage.isofficial = 'T';
SELECT count(DISTINCT continent)  FROM country  WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese')
SELECT COUNT(DISTINCT continent) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Chinese';
SELECT distinct country.region from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'Dutch' or countrylanguage.language = 'English';
SELECT distinct country.region from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'Dutch' or countrylanguage.language = 'English';
SELECT country.name  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code  WHERE (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch')  AND countrylanguage.isofficial = 'T';
SELECT country.name  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code  WHERE (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch') AND countrylanguage.isofficial = 'T';
SELECT language  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code  WHERE country.continent = 'Asia'  ORDER BY percentage DESC  LIMIT 1;
SELECT language from countrylanguage join country on countrylanguage.countrycode = country.code where country.continent = 'Asia' group by countrylanguage.language order by count ( * ) desc limit 1
SELECT language from countrylanguage join country on countrylanguage.countrycode = country.code where country.governmentform = 'Republic' group by countrylanguage.language having count ( * ) = 1;
SELECT language from countrylanguage join country on countrylanguage.countrycode = country.code where country.governmentform = 'Republic' group by countrylanguage.language having count ( * ) = 1
SELECT city.name  FROM city  JOIN countrylanguage  ON city.countrycode = countrylanguage.countrycode  WHERE countrylanguage.language = 'English'  ORDER BY city.population DESC  LIMIT 1
SELECT city.name  FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE countrylanguage.language = 'English'  ORDER BY city.population DESC  LIMIT 1
SELECT name, population, lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1;
SELECT name, population, lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1
SELECT avg(lifeexpectancy)  FROM  country  WHERE  code IN (SELECT countrycode FROM countrylanguage WHERE language != 'English' AND isofficial = 'T')
SELECT avg(lifeexpectancy)  FROM country  WHERE code NOT IN      (SELECT countrycode       FROM countrylanguage       WHERE language = 'English' AND isofficial = 'T');
SELECT sum(population)  FROM  country  WHERE  code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
SELECT SUM(population)  FROM country  WHERE code NOT IN (     SELECT countrycode      FROM countrylanguage      WHERE language = 'English' )
SELECT countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.headofstate = 'Beatrix' and countrylanguage.isofficial = 'T';
SELECT countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.headofstate = 'Beatrix' and countrylanguage.isofficial = 'T';
SELECT count ( distinct language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.indepyear < 1930 and countrylanguage.isofficial = 'T';
SELECT count ( distinct language ) from countrylanguage join country on countrylanguage.countrycode = country.code where indepyear < 1930 and isofficial = 'T';
SELECT name  FROM  country  WHERE  surfacearea > ( SELECT MAX ( surfacearea ) FROM country WHERE continent = 'Europe' );
SELECT name  FROM  country  WHERE  surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe');
SELECT name  FROM  country  WHERE  continent = 'Africa'  AND  population < ( SELECT                 MIN ( population )                 FROM                 country                 WHERE                 continent = 'Asia' );
SELECT name from country where continent = 'Africa' and population < ( select min ( population ) from country where continent = 'Asia' );
SELECT name from country where continent = 'Asia' and population > ( select max ( population ) from country where continent = 'Africa' );
SELECT name  FROM  country  WHERE  continent = 'Asia' AND population > ( SELECT MAX(population) FROM country WHERE continent = 'Africa' );
SELECT code  FROM  country  EXCEPT  SELECT  countrycode  FROM  countrylanguage  WHERE  language = 'English'
SELECT country.code FROM country LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE (countrylanguage.language != 'English' OR countrylanguage.language IS NULL)
SELECT countrycode  FROM  countrylanguage  WHERE  countrycode NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'english');
SELECT countrycode  FROM  countrylanguage  WHERE  countrycode NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English');
SELECT code  FROM  country  WHERE  code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')  AND  governmentform != 'Republic';
SELECT code from country except select countrycode from countrylanguage where language = 'English' except select code from country where governmentform = 'Republic'
SELECT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Europe'  AND (countrylanguage.language = 'English' AND countrylanguage.isofficial = 'F')
SELECT city.name  FROM  city  JOIN  countrylanguage  ON  city.countrycode = countrylanguage.countrycode  WHERE  countrylanguage.language = 'English'  AND  countrylanguage.isofficial = 'F'  AND  city.countrycode IN (SELECT countrycode FROM country WHERE continent = 'Europe')
SELECT distinct city.name  FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  JOIN country ON city.countrycode = country.code  WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'
SELECT distinct city.name from city join country on city.countrycode = country.code join countrylanguage on country.code = countrylanguage.countrycode where country.continent = 'Asia' and countrylanguage.language = 'Chinese' and countrylanguage.isofficial = 'T';
SELECT name, indepyear, surfacearea  FROM country  ORDER BY population ASC  LIMIT 1
SELECT country.name, country.indepyear, country.surfacearea  FROM  country  ORDER BY  country.population  ASC  LIMIT 1
SELECT population , name , headofstate  FROM country  ORDER BY surfacearea DESC  LIMIT 1;
SELECT name , population , headofstate from country order by surfacearea desc limit 1
SELECT country.name, COUNT(DISTINCT countrylanguage.language)  FROM  countrylanguage  JOIN  country  ON  countrylanguage.countrycode = country.code  GROUP BY  country.name  HAVING  COUNT(DISTINCT countrylanguage.language) >= 3
SELECT country.name, count(countrylanguage.language)  FROM  countrylanguage  JOIN  country  ON  countrylanguage.countrycode = country.code  GROUP BY  countrylanguage.countrycode  HAVING  count(countrylanguage.language) > 2
SELECT count ( * ), district from city where population > ( select avg ( population ) from city ) group by district;
SELECT count ( * ), district from city where population > ( select avg ( population ) from city ) group by district;
SELECT governmentform,  SUM(population)  FROM country  WHERE governmentform IN (     SELECT governmentform      FROM country      GROUP BY governmentform      HAVING AVG(lifeexpectancy) > 72 ) GROUP BY governmentform;
SELECT governmentform, SUM(population)  FROM  country  WHERE  governmentform IN (SELECT governmentform FROM country WHERE lifeexpectancy > 72) GROUP BY governmentform
SELECT continent,  AVG(lifeexpectancy) AS AvgLifeExpectancy,  SUM(population) AS TotalPopulation  FROM country  GROUP BY continent  HAVING AvgLifeExpectancy < 72
SELECT continent,  SUM(population),  AVG(lifeexpectancy)  FROM country  GROUP BY continent  HAVING AVG(lifeexpectancy) < 72;
SELECT name, surfacearea from country order by surfacearea desc limit 5;
SELECT name, surfacearea from country order by surfacearea desc limit 5
SELECT name from country order by population desc limit 3;
SELECT name from country order by population desc limit 3;
SELECT name from country order by population asc limit 3
SELECT name from country order by population asc limit 3;
SELECT count ( * ) from country where continent = 'Asia'
SELECT count ( * ) from country where continent = 'Asia'
SELECT name  FROM  country  WHERE  continent = 'Europe'  AND  population = 80000;
SELECT name from country where continent = 'Europe' and population = 80000
SELECT SUM(population), AVG(surfacearea)  FROM  country  WHERE  continent = 'North America'  AND  surfacearea > 3000;
SELECT SUM (population), AVG (surfacearea)  FROM  country  WHERE  surfacearea > 3000 AND continent = 'North America';
SELECT name from city where population between 160000 and 900000
SELECT name from city where population between 160000 and 900000
SELECT language from countrylanguage group by language order by count ( * ) desc limit 1
SELECT language from countrylanguage group by language order by count ( * ) desc limit 1;
SELECT country.name,  countrylanguage.language  FROM  countrylanguage  JOIN  country  ON  countrylanguage.countrycode = country.code  WHERE  (country.code, countrylanguage.percentage) IN      (SELECT      countrycode,      MAX(percentage)      FROM      countrylanguage      GROUP BY      countrycode)
SELECT countrycode,  language  FROM  (  SELECT    countrycode,    language,    ROW_NUMBER() OVER(PARTITION BY countrycode ORDER BY percentage DESC) AS rn   FROM    countrylanguage )  WHERE rn = 1;
SELECT COUNT(DISTINCT cl.countrycode) FROM countrylanguage cl WHERE cl.language = 'Spanish'  AND cl.percentage = (     SELECT MAX(cl2.percentage)     FROM countrylanguage cl2     WHERE cl2.countrycode = cl.countrycode );
SELECT COUNT(*)  FROM countrylanguage  WHERE language = 'Spanish' AND isofficial = 'T';
SELECT countrycode  FROM  countrylanguage  WHERE  language = 'Spanish'  ORDER BY  percentage DESC  LIMIT 1;
SELECT country.code  FROM  country  JOIN  countrylanguage  ON  country.code = countrylanguage.countrycode  WHERE  countrylanguage.language = 'Spanish'  AND  countrylanguage.isofficial = 'T';
SELECT count ( * ) from conductor
SELECT count ( * ) from conductor
SELECT name from conductor order by age asc
SELECT name from conductor order by age asc
SELECT name  FROM  conductor  WHERE  nationality != 'USA'
SELECT name from conductor where nationality != 'USA'
SELECT record_company from orchestra order by year_of_founded desc;
SELECT orchestra  FROM  orchestra  ORDER BY  year_of_founded DESC;
SELECT avg ( attendance ) from show
SELECT avg ( attendance ) from show
SELECT max ( share ), min ( share ) from performance where type != 'Live final';
SELECT max ( share ), min ( share ) from performance where type != 'Live final';
SELECT count ( distinct nationality ) from conductor
SELECT count ( distinct nationality ) from conductor
SELECT name from conductor order by year_of_work desc;
SELECT name from conductor order by year_of_work desc
SELECT name from conductor order by year_of_work desc limit 1
SELECT name from conductor order by year_of_work desc limit 1
SELECT conductor.name, orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id
SELECT conductor.name, orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id
SELECT conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.name having count ( * ) > 1;
SELECT conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.name having count ( * ) > 1;
SELECT conductor.name  FROM  conductor  JOIN  orchestra  ON  conductor.conductor_id = orchestra.conductor_id  GROUP BY  conductor.name  ORDER BY  COUNT(orchestra.orchestra) DESC  LIMIT 1
SELECT conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.conductor_id order by count ( * ) desc limit 1;
SELECT conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id where orchestra.year_of_founded > 2008
SELECT conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id where orchestra.year_of_founded > 2008
SELECT record_company , count ( * ) from orchestra group by record_company;
SELECT record_company , count ( * ) from orchestra group by record_company;
SELECT major_record_format from orchestra group by major_record_format order by count ( * ) asc;
SELECT major_record_format, COUNT(*) as frequency  FROM orchestra  JOIN performance ON orchestra.orchestra_id = performance.orchestra_id GROUP BY major_record_format  ORDER BY frequency DESC;
SELECT record_company from orchestra group by record_company order by count ( * ) desc limit 1
SELECT record_company from orchestra group by record_company order by count ( * ) desc limit 1
SELECT orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance );
SELECT orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )
SELECT record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003
SELECT record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003
SELECT count ( * ) from orchestra where major_record_format = 'CD' or major_record_format = 'DVD';
SELECT count ( * ) from orchestra where major_record_format = 'CD' or major_record_format = 'DVD';
SELECT orchestra.year_of_founded from orchestra join performance on orchestra.orchestra_id = performance.orchestra_id group by performance.orchestra_id having count ( * ) > 1;
SELECT orchestra.year_of_founded from orchestra join performance on orchestra.orchestra_id = performance.orchestra_id group by performance.orchestra_id having count ( * ) > 1;
SELECT count ( * ) from highschooler
SELECT count ( * ) from highschooler
SELECT name , grade from highschooler
SELECT name , grade from highschooler
SELECT DISTINCT grade  FROM highschooler;
SELECT name, grade  FROM highschooler
SELECT grade from highschooler where name = 'Kyle';
SELECT grade from highschooler where name = 'Kyle'
SELECT name from highschooler where grade = 10
SELECT name from highschooler where grade = 10
SELECT id  FROM  highschooler  WHERE  name = 'Kyle';
SELECT id  FROM  highschooler  WHERE  name = 'Kyle';
SELECT count ( * ) from highschooler where grade = 9 or grade = 10
SELECT count ( * ) from highschooler where grade = 9 or grade = 10;
SELECT grade, COUNT(*)  FROM highschooler  GROUP BY grade;
SELECT grade, COUNT(*)  FROM highschooler  GROUP BY grade;
SELECT grade from highschooler group by grade order by count ( * ) desc limit 1
SELECT grade from highschooler group by grade order by count ( * ) desc limit 1
SELECT grade from highschooler group by grade having count ( * ) >= 4
SELECT grade from highschooler group by grade having count ( * ) >= 4
SELECT student_id , count ( * ) from friend group by student_id
SELECT student_id , count ( * ) from friend group by student_id
SELECT highschooler.name, COUNT(*)  FROM  highschooler  JOIN  friend  ON  highschooler.id = friend.student_id  GROUP BY  highschooler.name ORDER BY  COUNT(*) ASC;
SELECT highschooler.name, COUNT(friend.friend_id) FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id, highschooler.name;
SELECT highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id order by count ( * ) desc limit 1
SELECT highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id order by count ( * ) desc limit 1
SELECT highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id having count ( * ) >= 3
SELECT highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id having count ( * ) >= 3
SELECT highschooler.name  FROM  friend  JOIN highschooler  ON friend.friend_id = highschooler.id  WHERE friend.student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')
SELECT highschooler.name  FROM  friend  JOIN  highschooler ON friend.friend_id = highschooler.id  WHERE  friend.student_id = ( SELECT id FROM highschooler WHERE name = 'Kyle' )
SELECT count ( * ) from friend where student_id = ( select id from highschooler where name = 'Kyle' );
SELECT count ( * ) from highschooler join friend on highschooler.id = friend.student_id where highschooler.name = 'Kyle';
SELECT id  FROM  highschooler  WHERE  id NOT IN (SELECT student_id FROM friend)
SELECT id from highschooler except select student_id from friend
SELECT name from highschooler where id not in ( select student_id from friend )
SELECT name from highschooler where id not in ( select student_id from friend )
SELECT distinct highschooler.id  FROM highschooler  JOIN friend ON highschooler.id = friend.student_id  JOIN likes ON highschooler.id = likes.liked_id;
SELECT friend.student_id FROM friend WHERE EXISTS (     SELECT 1     FROM likes     WHERE likes.student_id = friend.student_id )
SELECT distinct highschooler.name  FROM  highschooler  JOIN friend ON highschooler.id = friend.student_id  JOIN likes ON highschooler.id = likes.liked_id WHERE highschooler.id IN (SELECT friend_id FROM friend)  AND highschooler.id IN (SELECT liked_id FROM likes)
SELECT highschooler.name  FROM  highschooler  JOIN friend ON friend.student_id = highschooler.id  JOIN likes ON likes.liked_id = highschooler.id  GROUP BY highschooler.name  HAVING COUNT(friend.friend_id) > 0 AND COUNT(likes.student_id) > 0;
SELECT student_id , count ( * ) from likes group by student_id;
SELECT student_id , count ( * ) from likes group by student_id
SELECT highschooler.name , count ( * ) from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id;
SELECT highschooler.name , count ( * ) from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id;
SELECT highschooler.name  FROM likes  JOIN highschooler  ON likes.liked_id = highschooler.id  GROUP BY likes.liked_id  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT highschooler.name  FROM  likes  JOIN  highschooler  ON  likes.liked_id = highschooler.id  GROUP BY  highschooler.name  ORDER BY  COUNT(*) DESC  LIMIT 1;
SELECT highschooler.name from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id having count ( * ) >= 2 ;
SELECT highschooler.name from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id having count ( * ) >= 2 ;
SELECT highschooler.name from friend join highschooler on friend.student_id = highschooler.id where highschooler.grade > 5 group by friend.student_id having count ( * ) >= 2;
SELECT highschooler.name  FROM highschooler  JOIN friend ON highschooler.id = friend.student_id  WHERE highschooler.grade > 5  GROUP BY highschooler.id  HAVING COUNT(*) >= 2
SELECT count ( * ) from highschooler join likes on highschooler.id = likes.student_id where highschooler.name = 'Kyle';
SELECT count ( * ) from highschooler join likes on highschooler.id = likes.liked_id where highschooler.name = 'Kyle'
SELECT avg(highschooler.grade) FROM highschooler WHERE highschooler.id IN (SELECT friend.student_id FROM friend)
SELECT avg(highschooler.grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend);
SELECT min ( grade ) from highschooler where id not in ( select student_id from friend )
SELECT MIN(grade)  FROM highschooler  WHERE id NOT IN (SELECT student_id FROM friend);
SELECT state from owners intersect select state from professionals
SELECT state from owners intersect select state from professionals
SELECT avg(dogs.age)  FROM  dogs  JOIN  treatments  ON  dogs.dog_id = treatments.dog_id WHERE treatments.treatment_id IS NOT NULL
SELECT avg(dogs.age)  FROM dogs  JOIN treatments ON dogs.dog_id = treatments.dog_id;
SELECT professional_id , last_name , cell_number from professionals where state = 'Indiana' or professional_id in ( select professional_id from treatments group by professional_id having count ( * ) > 2 )
SELECT distinct professionals.professional_id, professionals.last_name, professionals.cell_number  from professionals  left join treatments on professionals.professional_id = treatments.professional_id  group by professionals.professional_id, professionals.last_name, professionals.cell_number having professionals.state = 'Indiana' or count(treatments.professional_id) > 2;
SELECT dogs.name  FROM  dogs  JOIN treatments  ON dogs.dog_id = treatments.dog_id  GROUP BY  dogs.dog_id  HAVING  SUM(treatments.cost_of_treatment) <= 1000
SELECT dogs.name  FROM  dogs  JOIN treatments ON dogs.dog_id = treatments.dog_id  GROUP BY  dogs.name  HAVING  SUM(treatments.cost_of_treatment) <= 1000;
SELECT first_name  FROM  professionals   UNION   SELECT  first_name  FROM  owners   EXCEPT   SELECT  dog_name -- if the column in 'dogs' table for the dog's name is 'dog_name' FROM  dogs
SELECT first_name from professionals union select first_name from owners except select name from dogs;
SELECT professional_id , role_code , email_address from professionals where professional_id not in ( select professional_id from treatments );
SELECT professional_id , role_code , email_address from professionals where professional_id not in ( select professional_id from treatments )
SELECT owners.owner_id , owners.first_name , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id group by owners.owner_id order by count ( * ) desc limit 1
SELECT owners.owner_id , owners.first_name , owners.last_name from dogs join owners on dogs.owner_id = owners.owner_id group by owners.owner_id order by count ( * ) desc limit 1
SELECT professionals.professional_id , professionals.role_code , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id group by treatments.professional_id having count ( * ) >= 2 ;
SELECT professionals.professional_id, professionals.role_code, professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id group by treatments.professional_id having count ( * ) >= 2;
SELECT breeds.breed_name FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code GROUP BY breeds.breed_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by dogs.breed_code order by count ( * ) desc limit 1;
SELECT owners.owner_id , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id group by owners.owner_id order by count ( * ) desc limit 1
SELECT dogs.owner_id,  owners.last_name  FROM  dogs  JOIN  owners  ON  dogs.owner_id = owners.owner_id  JOIN  treatments  ON  dogs.dog_id = treatments.dog_id  GROUP BY  dogs.owner_id, owners.last_name  ORDER BY  SUM(treatments.cost_of_treatment) DESC  LIMIT 1;
SELECT treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code group by treatments.treatment_type_code order by sum ( treatments.cost_of_treatment ) asc limit 1
SELECT treatment_types.treatment_type_code  FROM  treatments  JOIN  treatment_types  ON  treatments.treatment_type_code = treatment_types.treatment_type_code  GROUP BY  treatments.treatment_type_code  ORDER BY  SUM(treatments.cost_of_treatment) ASC  LIMIT 1
SELECT owners.owner_id,  owners.zip_code  FROM  dogs  JOIN  owners  ON  dogs.owner_id = owners.owner_id  GROUP BY  owners.owner_id  ORDER BY  SUM(dogs.weight) DESC  LIMIT 1
SELECT owners.owner_id , owners.zip_code from treatments join dogs on treatments.dog_id = dogs.dog_id join owners on dogs.owner_id = owners.owner_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1
SELECT professionals.professional_id, professionals.cell_number  FROM  professionals  JOIN  treatments  ON  professionals.professional_id = treatments.professional_id  GROUP BY  professionals.professional_id, professionals.cell_number  HAVING  COUNT(DISTINCT treatments.treatment_type_code) >= 2;
SELECT professionals.professional_id, professionals.cell_number  FROM  professionals JOIN  treatments  ON  professionals.professional_id = treatments.professional_id  GROUP BY  professionals.professional_id, professionals.cell_number HAVING  COUNT(DISTINCT treatments.treatment_type_code) >= 2;
SELECT distinct professionals.first_name, professionals.last_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.cost_of_treatment < (     SELECT AVG(cost_of_treatment)     FROM treatments )
SELECT distinct professionals.first_name,  professionals.last_name  from professionals  join treatments  on professionals.professional_id = treatments.professional_id  where treatments.cost_of_treatment < (     select avg(treatments.cost_of_treatment)      from treatments )
SELECT treatments.date_of_treatment, professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id
SELECT treatments.date_of_treatment, professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id
SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT owners.first_name ,  owners.last_name ,  sizes.size_description  FROM  owners  INNER JOIN dogs ON owners.owner_id = dogs.owner_id  INNER JOIN sizes ON dogs.size_code = sizes.size_code;
SELECT owners.first_name,  owners.last_name,  sizes.size_code FROM  dogs  JOIN owners ON dogs.owner_id = owners.owner_id  JOIN sizes ON dogs.size_code = sizes.size_code;
SELECT owners.first_name, dogs.name from owners join dogs on owners.owner_id = dogs.owner_id
SELECT owners.first_name, dogs.name from dogs join owners on dogs.owner_id = owners.owner_id
SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN treatments ON treatments.dog_id = dogs.dog_id WHERE dogs.breed_code = (     SELECT     breed_code     FROM     (         SELECT         breed_code         FROM         dogs         GROUP BY         breed_code         ORDER BY         COUNT(*) ASC         LIMIT 1     ) )
SELECT dogs.name, treatments.date_of_treatment  FROM  dogs  JOIN  breeds  ON  dogs.breed_code = breeds.breed_code  JOIN  treatments  ON  dogs.dog_id = treatments.dog_id  WHERE  breeds.breed_code = ( SELECT breed_code FROM breeds GROUP BY breed_code ORDER BY COUNT ( * ) ASC LIMIT 1 );
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'Virginia';
SELECT owners.first_name, dogs.name from dogs join owners on dogs.owner_id = owners.owner_id where owners.state = 'Virginia'
SELECT dogs.date_arrived,  dogs.date_departed  FROM  dogs  JOIN  treatments  ON  dogs.dog_id = treatments.dog_id WHERE  treatments.treatment_id IS NOT NULL;
SELECT distinct dogs.date_arrived, dogs.date_departed from dogs join treatments on dogs.dog_id = treatments.dog_id;
SELECT owners.last_name  FROM  dogs  JOIN  owners  ON  dogs.owner_id = owners.owner_id  ORDER BY  dogs.age ASC  LIMIT 1;
SELECT owners.last_name  FROM  dogs  JOIN  owners ON dogs.owner_id = owners.owner_id  ORDER BY  dogs.date_of_birth DESC  LIMIT 1
SELECT email_address  FROM  professionals  WHERE  state IN ('HI', 'WI')
SELECT email_address from professionals where state = 'Hawaii' or state = 'Wisconsin'
SELECT date_arrived, date_departed from dogs
SELECT date_arrived, date_departed from dogs
SELECT count ( distinct dog_id ) from treatments
SELECT count ( distinct dog_id ) from treatments
SELECT count ( distinct professional_id ) from treatments
SELECT count ( distinct professional_id ) from treatments
SELECT role_code, street, city, state from professionals where city like '%West%';
SELECT role_code, street, city, state from professionals where city like '%West%';
SELECT first_name, last_name, email_address from owners where state like '%North%';
SELECT first_name, last_name, email_address from owners where state like '%North%';
SELECT count ( * ) from dogs where age < ( select avg ( age ) from dogs );
SELECT count ( * ) from dogs where age < ( select avg ( age ) from dogs );
SELECT cost_of_treatment  FROM  treatments  ORDER BY  treatment_date DESC  LIMIT 1;
SELECT cost_of_treatment from treatments order by date_of_treatment desc limit 1
SELECT count ( * ) from dogs where dog_id not in ( select dog_id from treatments )
SELECT count ( * ) from dogs where dog_id not in ( select dog_id from treatments )
SELECT COUNT(*)  FROM owners  WHERE owner_id NOT IN (SELECT owner_id FROM dogs WHERE date_departed IS NULL)
SELECT COUNT(*)  FROM owners  WHERE owner_id NOT IN (      SELECT owner_id      FROM dogs      WHERE date_departed IS NULL OR date_departed > CURRENT_DATE )
SELECT count ( * ) from professionals where professional_id not in ( select professional_id from treatments )
SELECT count ( * ) from professionals where professional_id not in ( select professional_id from treatments )
SELECT name , age , weight from dogs where abandoned_yn = 1
SELECT name, age, weight from dogs where abandoned_yn = 1
SELECT avg ( age ) from dogs
SELECT avg ( age ) from dogs
SELECT age from dogs order by age desc limit 1
SELECT max ( age ) from dogs
SELECT charge_type , sum ( charge_amount ) from charges group by charge_type
SELECT charge_type , charge_amount from charges
SELECT max ( charge_amount ) from charges
SELECT charge_amount from charges order by charge_amount desc limit 1;
SELECT email_address, cell_number, home_phone from professionals
SELECT email_address, cell_number, home_phone from professionals
SELECT breeds.breed_name, sizes.size_description  FROM  breeds  CROSS JOIN sizes
SELECT distinct breeds.breed_name, sizes.size_description  from dogs  join breeds on dogs.breed_code = breeds.breed_code  join sizes on dogs.size_code = sizes.size_code
SELECT distinct professionals.first_name, treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code join professionals on treatments.professional_id = professionals.professional_id;
SELECT distinct professionals.first_name, treatments.description  FROM  professionals  INNER JOIN treatments  ON professionals.professional_id = treatments.professional_id;
SELECT count ( * ) from singer
SELECT count ( * ) from singer
SELECT name from singer order by net_worth_millions asc
SELECT name from singer order by net_worth_millions asc
SELECT birth_year , citizenship from singer
SELECT birth_year , citizenship from singer
SELECT name from singer where citizenship != 'France'
SELECT name  FROM  singer  WHERE  citizenship != 'French'
SELECT singer_id  FROM  singer  WHERE  birth_year IN (1948, 1949);
SELECT name from singer where birth_year = 1948 or birth_year = 1949
SELECT singer_id  FROM  singer  ORDER BY  net_worth_millions DESC  LIMIT 1;
SELECT name from singer order by net_worth_millions desc limit 1;
SELECT citizenship, COUNT(*) as number_of_singers FROM singer  GROUP BY citizenship;
SELECT citizenship , count ( * ) from singer group by citizenship;
SELECT citizenship from singer group by citizenship order by count ( * ) desc limit 1;
SELECT citizenship from singer group by citizenship order by count ( * ) desc limit 1
SELECT citizenship, MAX ( net_worth_millions ) FROM singer GROUP BY citizenship;
SELECT citizenship, max ( net_worth_millions ) FROM singer  GROUP BY citizenship;
SELECT song.title, singer.name from song join singer on song.singer_id = singer.singer_id
SELECT song.title, singer.name from song join singer on song.singer_id = singer.singer_id
SELECT distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000;
SELECT distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000
SELECT name  FROM  singer  JOIN  song  ON  singer.singer_id = song.singer_id  GROUP BY  singer.singer_id, singer.name  HAVING  COUNT(song.song_id) > 1;
SELECT singer.name  FROM singer  JOIN song ON singer.singer_id = song.singer_id  GROUP BY singer.name  HAVING COUNT(song.song_id) > 1;
SELECT name, sum ( sales ) from singer join song on singer.singer_id = song.singer_id group by singer.name;
SELECT singer.name, sum(song.sales)  FROM  singer  JOIN  song  ON  singer.singer_id = song.singer_id  GROUP BY  singer.name;
SELECT name from singer where singer_id not in ( select singer_id from song )
SELECT name from singer where singer_id not in ( select singer_id from song )
SELECT citizenship from singer where birth_year > 1955 intersect select citizenship from singer where birth_year < 1945
SELECT citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955
SELECT count ( * ) from other_available_features
SELECT ref_feature_types.feature_type_name from other_available_features join ref_feature_types on other_available_features.feature_type_code = ref_feature_types.feature_type_code where other_available_features.feature_name = 'AirCon'
SELECT ref_property_types.property_type_description  FROM  ref_property_types  INNER JOIN  properties  ON  ref_property_types.property_type_code = properties.property_type_code  WHERE  properties.property_address LIKE '%Galway%';
SELECT property_name  FROM properties  WHERE  (property_type_code = 'house' OR property_type_code = 'apartment')  AND room_count > 1
