SELECT COUNT(DISTINCT singer_id) FROM singer
SELECT COUNT(*) AS total_singers FROM singer;
SELECT name, country, age FROM      singer ORDER BY      age DESC;
SELECT name, country, age     FROM singer     ORDER BY age DESC;
SELECT AVG(age) AS average_age,     MIN(age) AS minimum_age,     MAX(age) AS maximum_age FROM singer WHERE country = 'France';
SELECT AVG(age) AS average_age,      MIN(age) AS minimum_age,      MAX(age) AS maximum_age FROM singer WHERE country = 'France';
SELECT singer.name, singer.song_release_year FROM singer WHERE singer.age = (SELECT MIN(age) FROM singer) LIMIT 1;
SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer);
SELECT DISTINCT country FROM singer WHERE age > 20;
SELECT DISTINCT country FROM singer WHERE age > 20;
SELECT country, COUNT(*) AS number_of_singers FROM singer GROUP BY country;
SELECT country, COUNT(*) AS singer_count     FROM singer     GROUP BY country;
SELECT song.name FROM song JOIN singer ON song.singer_id = singer.singer_id WHERE singer.age > (SELECT AVG(age) FROM singer);
SELECT song_name FROM     singer WHERE     age > (SELECT AVG(age) FROM singer)
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT stadium.location, stadium.name FROM      stadium WHERE      stadium.capacity BETWEEN 5000 AND 10000;
SELECT MAX(capacity) AS "max ( capacity )", AVG(capacity) AS "average" FROM stadium;
SELECT AVG(capacity) AS average_capacity,      MAX(capacity) AS maximum_capacity     FROM stadium;
SELECT stadium.name, stadium.capacity     FROM stadium     WHERE stadium.average = (         SELECT MAX(average)         FROM stadium     );
SELECT stadium.name, stadium.capacity     FROM      stadium     WHERE      stadium.average = (SELECT MAX(average) FROM stadium);
SELECT COUNT(*)  FROM concert  WHERE year IN (2014, 2015);
SELECT COUNT(*)  FROM concert  WHERE year IN (2014, 2015);
SELECT stadium.name, COUNT(*) FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name;
SELECT stadium.name, COUNT(concert.concert_id) AS concert_count FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name;
SELECT stadium.name, stadium.capacity     FROM stadium     JOIN concert ON concert.stadium_id = stadium.stadium_id     WHERE concert.year >= 2014     GROUP BY stadium.name, stadium.capacity     ORDER BY COUNT(concert.concert_id) DESC     LIMIT 1;
SELECT stadium.name, stadium.capacity  FROM stadium  JOIN concert ON concert.stadium_id = stadium.stadium_id WHERE concert.date > '2013-01-01' GROUP BY stadium.stadium_id  ORDER BY COUNT(concert.stadium_id) DESC  LIMIT 1;
SELECT year FROM     concert GROUP BY     year ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT year FROM     concert GROUP BY     year ORDER BY     COUNT(concert_id) DESC LIMIT 1;
SELECT stadium.name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.concert_name IS NULL;
SELECT stadium.name     FROM stadium     WHERE stadium.name NOT IN (SELECT stadium.name FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id);
SELECT country FROM singer WHERE age > 40 AND country IN (     SELECT country     FROM singer     WHERE age < 30 );
SELECT name FROM stadium WHERE stadium_id NOT IN (     SELECT stadium_id FROM concert WHERE year = 2014 );
SELECT stadium.name  FROM stadium  LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id AND concert.year = 2014  WHERE concert.concert_id IS NULL;
SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS count_of_singers FROM concert INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme;
SELECT concert_name, theme, COUNT(singer_id) FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert_name, theme;
SELECT singer.name, COUNT(*)     FROM singer     INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id     INNER JOIN concert ON singer_in_concert.concert_id = concert.concert_id     GROUP BY singer.name;
SELECT singer.name, COUNT(singer_in_concert.singer_id)  FROM singer  INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  GROUP BY singer.name;
SELECT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id WHERE concert.year = 2014;
SELECT singer.name FROM     singer     JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id     JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE     concert.year = 2014;
SELECT singer.name, singer.country     FROM singer     WHERE singer.song_name LIKE '%Hey%';
SELECT singer.name, singer.country     FROM      singer     WHERE      singer.song_name LIKE '%Hey%';
SELECT stadium.name, stadium.location FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014 INTERSECT SELECT stadium.name, stadium.location FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2015;
SELECT stadium.name, stadium.location  FROM     stadium  WHERE     stadium_id IN (         SELECT             stadium_id          FROM             concert          WHERE             year = 2014          INTERSECT          SELECT             stadium_id          FROM             concert          WHERE             year = 2015     );
SELECT COUNT(concert.concert_id) FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE stadium.capacity = (SELECT MAX(capacity) FROM stadium);
SELECT COUNT(*)  FROM concert WHERE stadium_id = (     SELECT stadium_id     FROM stadium     ORDER BY capacity DESC     LIMIT 1 );
SELECT COUNT(*) FROM pets WHERE weight > 10;
SELECT COUNT(*) FROM pets WHERE weight > 10;
SELECT pets.pet_age, pets.pet_weight FROM pets WHERE pets.petid IN (     SELECT has_pet.petid     FROM has_pet     INNER JOIN student ON has_pet.stuid = student.stuid     WHERE student.sex = 'male' ) ORDER BY pets.pet_age ASC LIMIT 1;
SELECT MIN(weight) FROM     pets WHERE     pet_age = (SELECT MIN(pet_age) FROM pets WHERE pet_age > 0)
SELECT MAX(weight) AS max_weight, pettype FROM pets GROUP BY pettype;
SELECT MAX(pets.weight) AS "max ( weight )", pets.pettype FROM pets GROUP BY pets.pettype;
SELECT COUNT(*) FROM   student INNER JOIN   has_pet ON   student.stuid = has_pet.stuid INNER JOIN   pets ON   has_pet.petid = pets.petid WHERE   student.age > 20;
SELECT COUNT(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20;
SELECT COUNT(*) FROM   has_pet JOIN student ON has_pet.stuid = student.stuid JOIN pets ON has_pet.petid = pets.petid WHERE   pets.pettype = 'dog'   AND student.sex = 'F';
SELECT COUNT(*) FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'female' AND pets.pettype = 'dog';
SELECT COUNT(DISTINCT pettype)  FROM pets;
SELECT COUNT(DISTINCT pettype) FROM pets;
SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog';
SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype IN ('cat', 'dog');
SELECT student.fname FROM   student JOIN   has_pet ON student.stuid = has_pet.stuid JOIN   pets ON has_pet.petid = pets.petid WHERE   pets.pettype = 'cat'   AND student.stuid IN (     SELECT       has_pet.stuid     FROM       has_pet       JOIN         pets ON has_pet.petid = pets.petid     WHERE       pets.pettype = 'dog'   );
SELECT student.fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' INTERSECT SELECT student.fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog';
SELECT student.major, student.age FROM student WHERE student.stuid NOT IN ( SELECT has_pet.stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' );
SELECT student.major, student.age FROM student WHERE student.major NOT IN ( SELECT student.major FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' )
SELECT student.stuid  FROM student  LEFT JOIN has_pet ON student.stuid = has_pet.stuid  LEFT JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype IS NULL OR pets.pettype <> 'cat';
SELECT student.stuid FROM student WHERE student.stuid NOT IN (     SELECT has_pet.stuid     FROM has_pet     INNER JOIN pets ON has_pet.petid = pets.petid     WHERE pets.pettype = 'cat' );
SELECT student.fname, student.age FROM     student JOIN     has_pet ON student.stuid = has_pet.stuid JOIN     pets ON has_pet.petid = pets.petid WHERE     pets.pettype = 'dog'     AND NOT EXISTS (         SELECT 1         FROM has_pet         JOIN pets ON has_pet.petid = pets.petid         WHERE student.stuid = has_pet.stuid         AND pets.pettype = 'cat'     );
SELECT student.fname  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'dog'  AND student.stuid NOT IN (     SELECT student.stuid      FROM student      INNER JOIN has_pet ON student.stuid = has_pet.stuid      INNER JOIN pets ON has_pet.petid = pets.petid      WHERE pets.pettype = 'cat' )
SELECT pets.pettype, pets.weight FROM     pets WHERE     pet_age = (         SELECT             MIN(pet_age)         FROM             pets     ) LIMIT 1;
SELECT pets.pettype, pets.weight FROM pets WHERE pets.pet_age = ( SELECT MIN(pet_age) FROM pets )
SELECT pets.petid, pets.weight FROM pets WHERE pets.pet_age > 1;
SELECT pets.petid, pets.weight FROM pets WHERE pets.pet_age > 1;
SELECT AVG(p.pet_age) AS average_age, MAX(p.pet_age) AS maximum_age, p.pettype FROM pets p GROUP BY p.pettype;
SELECT AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age, pettype FROM pets GROUP BY pettype;
SELECT AVG(weight), pettype FROM pets GROUP BY pettype;
SELECT AVG(pets.weight) AS "avg ( weight )", pets.pettype FROM pets GROUP BY pets.pettype;
SELECT student.fname, student.age FROM student WHERE student.stuid IN (SELECT stuid FROM has_pet);
SELECT student.fname, student.age FROM student WHERE student.stuid IN (SELECT stuid FROM has_pet)
SELECT has_pet.petid FROM     student     JOIN has_pet ON student.stuid = has_pet.stuid     JOIN pets ON has_pet.petid = pets.petid WHERE     student.lname = 'Smith';
SELECT pets.petid FROM     student     JOIN has_pet ON student.stuid = has_pet.stuid     JOIN pets ON has_pet.petid = pets.petid WHERE     student.lname = 'Smith'
SELECT COUNT(*) AS pet_count, student.stuid FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid;
SELECT COUNT(*) AS num_pets, has_pet.stuid FROM has_pet GROUP BY has_pet.stuid;
SELECT student.fname, student.sex     FROM student     JOIN has_pet ON student.stuid = has_pet.stuid     GROUP BY student.fname, student.sex     HAVING COUNT(has_pet.stuid) > 1;
SELECT student.fname, student.sex FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid HAVING COUNT(has_pet.petid) > 1;
SELECT student.lname FROM student INNER JOIN pets ON student.stuid = pets.petid WHERE pets.pettype = 'cat' AND pets.pet_age = 3;
SELECT student.lname FROM   student JOIN   has_pet ON student.stuid = has_pet.stuid JOIN   pets ON has_pet.petid = pets.petid WHERE   pets.pettype = 'cat' AND pets.pet_age = 3 LIMIT   1;
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)
SELECT COUNT(*) FROM continents;
SELECT COUNT(DISTINCT contid) FROM continents;
SELECT continents.contid,      continents.continent,      COUNT(countries.countryid) as country_count     FROM      continents     JOIN      countries ON continents.contid = countries.continent     GROUP BY      continents.contid,      continents.continent;
SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS country_count     FROM continents     JOIN countries ON countries.continent = continents.contid     GROUP BY continents.contid, continents.continent;
SELECT COUNT(*) FROM countries;
SELECT COUNT(countryid)  FROM countries;
SELECT car_makers.fullname, car_makers.id, COUNT(*) FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.fullname, car_makers.id;
SELECT car_makers.fullname, car_makers.id, COUNT(DISTINCT model_list.modelid) FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.fullname, car_makers.id;
SELECT model FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE horsepower = (SELECT MIN(horsepower) FROM cars_data);
SELECT model FROM     cars_data JOIN     car_names ON cars_data.id = car_names.makeid ORDER BY     horsepower ASC LIMIT 1;
SELECT car_names.model FROM     cars_data JOIN     car_names ON     cars_data.id = car_names.makeid WHERE     cars_data.weight < (SELECT AVG(weight) FROM cars_data);
SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data);
SELECT DISTINCT car_makers.fullname FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.model = cars_data.model WHERE cars_data.year = 1970;
SELECT DISTINCT car_makers.maker FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970;
SELECT car_makers.fullname AS make, cars_data.year FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.year = (SELECT MIN(year) FROM cars_data);
SELECT car_makers.maker, cars_data.year  FROM car_makers  JOIN cars_data ON car_makers.id = cars_data.id  WHERE cars_data.year = (SELECT MIN(year) FROM cars_data);
SELECT DISTINCT model_list.model FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  WHERE cars_data.year > 1980;
SELECT DISTINCT car_names.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.year > 1980;
SELECT continents.continent, COUNT(DISTINCT car_makers.id) AS count FROM continents JOIN countries ON countries.continent = continents.contid JOIN car_makers ON car_makers.country = countries.country GROUP BY continents.continent;
SELECT continents.continent, COUNT(car_makers.maker) FROM     continents JOIN countries ON countries.continent = continents.contid JOIN car_makers ON car_makers.country = countries.countryid GROUP BY continents.continent;
SELECT countries.countryname FROM   countries INNER JOIN   car_makers ON car_makers.country = countries.countryid GROUP BY   countries.countryname ORDER BY   COUNT(car_makers.maker) DESC LIMIT 1;
SELECT countries.countryname FROM     countries JOIN     car_makers ON car_makers.country = countries.countryid GROUP BY     countries.countryname ORDER BY     COUNT(car_makers.maker) DESC LIMIT 1;
SELECT COUNT(*) AS count, car_makers.fullname AS maker_fullname FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.id, car_makers.fullname;
SELECT COUNT(*) AS num_models, car_makers.fullname, car_makers.id FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.id, car_makers.fullname;
SELECT cars_data.accelerate  FROM      car_makers  JOIN      model_list ON model_list.maker = car_makers.id  JOIN      car_names ON car_names.model = model_list.modelid  JOIN      cars_data ON cars_data.id = car_names.makeid  WHERE      car_makers.maker = 'amc hornet sportabout (sw)';
SELECT cars_data.accelerate  FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model WHERE model_list.model = 'amc hornet sportabout (sw)';
SELECT COUNT(DISTINCT car_makers.maker) FROM   car_makers JOIN   countries ON car_makers.country = countries.countryid WHERE   countries.countryname = 'france';
SELECT COUNT(*) FROM car_makers WHERE country = 'France';
SELECT COUNT(DISTINCT model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.country = 'usa';
SELECT COUNT(*) FROM model_list WHERE maker IN (SELECT maker FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'United States'));
SELECT AVG(mpg)  FROM cars_data  WHERE cylinders = 4;
SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;
SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;
SELECT MIN(weight)  FROM cars_data  WHERE cylinders = 8 AND year = 1974;
SELECT car_makers.maker, model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker;
SELECT car_makers.maker, model_list.model FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker;
SELECT countries.countryname, countries.countryid FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname, countries.countryid;
SELECT countries.countryname, countries.countryid  FROM countries  WHERE countries.countryid IN (SELECT car_makers.country FROM car_makers);
SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;
SELECT count(*) FROM cars_data WHERE horsepower > 150;
SELECT AVG(weight) AS avg_weight, year FROM cars_data GROUP BY year;
SELECT AVG(weight) AS average_weight,      year FROM      cars_data GROUP BY      year;
SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryname = car_makers.country JOIN continents ON countries.continent = continents.continent WHERE continents.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3;
SELECT countries.countryname FROM countries JOIN continents ON countries.continent = continents.contid JOIN car_makers ON countries.country = car_makers.country GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3 AND continents.continent = 'Europe';
SELECT MAX(cars_data.horsepower) AS horsepower, car_names.make AS make  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.modelid  WHERE model_list.cylinders = 3;
SELECT MAX(cars_data.horsepower) as horsepower, car_makers.fullname as make FROM cars_data  JOIN model_list ON cars_data.id = model_list.modelid  JOIN car_makers ON model_list.maker = car_makers.id  WHERE cars_data.cylinders = 3  GROUP BY car_makers.fullname  ORDER BY horsepower DESC  LIMIT 1;
SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model ORDER BY cars_data.mpg DESC LIMIT 1;
SELECT model FROM     car_names JOIN     cars_data ON cars_data.id = car_names.makeid ORDER BY     cars_data.mpg DESC LIMIT 1;
SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;
SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;
SELECT AVG(cars_data.edispl) FROM   cars_data   INNER JOIN car_names ON cars_data.id = car_names.makeid   INNER JOIN model_list ON car_names.model = model_list.model   INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE   car_makers.maker = 'volvo';
SELECT AVG(cars_data.edispl) FROM   cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE   car_makers.maker = 'volvo';
SELECT MAX(accelerate), cylinders FROM cars_data GROUP BY cylinders;
SELECT MAX(accelerate), cylinders FROM cars_data GROUP BY cylinders;
SELECT model FROM model_list GROUP BY model HAVING COUNT(DISTINCT makeid) = (     SELECT MAX(make_count)     FROM (         SELECT COUNT(DISTINCT makeid) as make_count         FROM model_list         GROUP BY model     ) );
SELECT model, COUNT(DISTINCT make) AS num_versions FROM car_names GROUP BY model ORDER BY num_versions DESC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;
SELECT COUNT(*)  FROM cars_data  WHERE cylinders > 4;
SELECT COUNT(*) FROM  cars_data WHERE  year = 1980;
SELECT COUNT(*) FROM cars_data WHERE year = 1980;
SELECT COUNT(DISTINCT model_list.model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = 'American Motor Company';
SELECT COUNT(model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = 'American Motor Company';
SELECT car_makers.fullname, car_makers.id  FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker  GROUP BY car_makers.fullname, car_makers.id  HAVING COUNT(model_list.modelid) > 3;
SELECT car_makers.fullname, car_makers.id FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id HAVING COUNT(model_list.model) > 3;
SELECT DISTINCT model  FROM car_makers  INNER JOIN model_list ON car_makers.maker = model_list.maker  INNER JOIN cars_data ON cars_data.id = model_list.model  WHERE car_makers.fullname = 'General Motors' OR cars_data.weight > 3500;
SELECT DISTINCT model FROM model_list WHERE maker = (     SELECT id FROM car_makers WHERE maker = 'General Motors' ) OR modelid IN (     SELECT id FROM cars_data WHERE weight > 3500 );
SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000;
SELECT DISTINCT year FROM cars_data WHERE weight < 4000    OR weight > 3000;
SELECT cars_data.horsepower FROM cars_data WHERE cars_data.accelerate = ( SELECT MAX(accelerate) FROM cars_data );
SELECT cars_data.horsepower FROM cars_data WHERE cars_data.accelerate = (     SELECT     MAX(accelerate)     FROM     cars_data );
SELECT MIN(cars_data.cylinders) FROM cars_data  JOIN car_names ON cars_data.id = car_names.model  JOIN model_list ON car_names.model = model_list.model  WHERE model_list.model = 'volvo' AND cars_data.accelerate = (SELECT MIN(accelerate) FROM cars_data);
SELECT MIN(cars_data.cylinders)  FROM model_list  JOIN car_makers ON model_list.maker = car_makers.id  JOIN car_names ON model_list.model = car_names.makeid  JOIN cars_data ON car_names.model = cars_data.id  WHERE car_makers.maker = 'volvo'
SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data)
SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data)
SELECT COUNT(DISTINCT countries.countryname) FROM countries JOIN car_makers ON countries.countryname = car_makers.country GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.country) > 2;
SELECT COUNT(*) FROM ( SELECT countries.countryid, COUNT(DISTINCT car_makers.id) as car_makers_count FROM car_makers JOIN countries ON car_makers.country = countries.countryid GROUP BY countries.countryid HAVING car_makers_count > 2 ) as subquery;
SELECT COUNT(*)  FROM cars_data  WHERE cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;
SELECT model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cylinders = 4 GROUP BY model HAVING MAX(horsepower) ORDER BY horsepower DESC LIMIT 1;
SELECT model FROM model_list WHERE model IN (     SELECT model FROM cars_data     WHERE cylinders = 4     ORDER BY horsepower DESC     LIMIT 1 );
SELECT car_names.makeid, car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cars_data.cylinders <= 3;
SELECT car_names.makeid, car_names.make FROM     cars_data JOIN     car_names ON cars_data.id = car_names.makeid WHERE     cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data)     AND cars_data.cylinders < 4;
SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980;
SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;
SELECT DISTINCT model FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.maker <> 'Ford Motor Company';
SELECT DISTINCT model_list.model FROM model_list INNER JOIN cars_data ON model_list.modelid = cars_data.id INNER JOIN car_makers ON cars_data.id = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.maker != 'Ford Motor Company';
SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers);
SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers);
SELECT car_makers.id, car_makers.maker  FROM car_makers  JOIN model_list ON model_list.maker = car_makers.id  GROUP BY car_makers.id, car_makers.maker  HAVING COUNT(DISTINCT model_list.modelid) >= 2  AND COUNT(DISTINCT car_makers.id) > 3;
SELECT car_makers.id, car_makers.maker  FROM car_makers  INNER JOIN model_list ON model_list.maker = car_makers.id  INNER JOIN car_names ON car_names.makeid = model_list.modelid  GROUP BY car_makers.id, car_makers.maker  HAVING COUNT(DISTINCT model_list.model) >= 2  AND COUNT(DISTINCT car_names.makeid) > 3;
SELECT countries.countryid, countries.countryname FROM countries JOIN car_makers ON car_makers.country = countries.countryid JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model WHERE countries.countryid IN (     SELECT car_makers.country     FROM car_makers     GROUP BY car_makers.country     HAVING COUNT(DISTINCT car_makers.id) > 3 ) OR model_list.model = 'fiat';
SELECT countries.countryid, countries.countryname FROM countries JOIN car_makers ON car_makers.country = countries.countryid JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.modelid JOIN cars_data ON cars_data.id = car_names.makeid WHERE countries.countryid IN (     SELECT car_makers.country     FROM car_makers     GROUP BY car_makers.country     HAVING COUNT(DISTINCT car_makers.id) > 3 ) OR countries.countryid IN (     SELECT car_makers.country     FROM car_makers     JOIN model_list ON model_list.maker = car_makers.id     JOIN car_names ON car_names.model = model_list.modelid     WHERE car_names.make = 'fiat' ) GROUP BY countries.countryid, countries.countryname;
SELECT country FROM     airlines WHERE     airline = 'JetBlue Airways';
SELECT country FROM airlines WHERE airline = 'Jetblue Airways';
SELECT abbreviation FROM     airlines WHERE     airline = 'JetBlue Airways';
SELECT abbreviation FROM airlines WHERE abbreviation LIKE '%JetBlue Airways%';
SELECT airline, abbreviation FROM airlines WHERE country = 'USA';
SELECT airline, abbreviation FROM airlines WHERE country = 'USA';
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';
SELECT COUNT(DISTINCT airline) FROM airlines
SELECT COUNT(DISTINCT airline) FROM airlines;
SELECT COUNT(*)  FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT airline FROM     airlines WHERE     abbreviation = 'UAL';
SELECT airline FROM airlines WHERE abbreviation = 'UAL';
SELECT COUNT(DISTINCT airline) FROM airlines WHERE country = 'USA';
SELECT COUNT(DISTINCT airline) FROM airlines WHERE country = 'USA';
SELECT city, country FROM airports WHERE airportname = 'Alton';
SELECT city, country FROM airports WHERE airportname = 'Alton';
SELECT airportname FROM airports WHERE airportcode = 'AKO';
SELECT airportname FROM airports WHERE airportcode = 'AKO';
SELECT airportname FROM     airports WHERE     city = 'Aberdeen';
SELECT airportname  FROM      airports  WHERE      city = 'Aberdeen';
SELECT COUNT(*)  FROM flights  WHERE sourceairport = 'APG';
SELECT COUNT(*)  FROM flights  WHERE sourceairport = 'APG';
SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';
SELECT COUNT(*)  FROM flights  WHERE destairport = 'ATO';
SELECT COUNT(*) FROM     flights JOIN     airports ON flights.sourceairport = airports.airportcode WHERE     airports.city = 'Aberdeen';
SELECT COUNT(*) FROM     flights JOIN     airports ON flights.sourceairport = airports.airportcode WHERE     airports.airportname = 'Aberdeen';
SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen';
SELECT COUNT(*) FROM  flights WHERE destairport = 'Aberdeen';
SELECT COUNT(*)  FROM flights  JOIN airports AS source ON flights.sourceairport = source.airportcode  JOIN airports AS dest ON flights.destairport = dest.airportcode  WHERE source.city = 'Aberdeen' AND dest.city = 'Ashley';
SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley';
SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights WHERE airline LIKE 'Jetblue Airways';
SELECT COUNT(*) FROM     flights WHERE     airline = 'United Airlines' AND destairport = 'ASY';
SELECT COUNT(*) FROM     flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.destairport = airports.airportcode WHERE     airlines.abbreviation = 'UA'     AND airports.airportcode = 'ASY';
SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';
SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';
SELECT COUNT(*) FROM     flights WHERE     airline = 'United Airlines'     AND destairport IN (         SELECT             airportcode         FROM             airports         WHERE             city = 'Aberdeen'     );
SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'Aberdeen';
SELECT airports.city     FROM     airports     INNER JOIN flights ON airports.airportcode = flights.destairport     GROUP BY     airports.city     ORDER BY     COUNT(flights.destairport) DESC     LIMIT 1;
SELECT airports.city FROM     flights JOIN     airports ON flights.destairport = airports.airportcode GROUP BY     airports.city ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT airports.city FROM     airports JOIN     flights ON airports.airportcode = flights.sourceairport GROUP BY     airports.city ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT airports.city FROM     flights JOIN     airports ON flights.sourceairport = airports.airportcode GROUP BY     airports.city ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT airportcode FROM flights GROUP BY airportcode HAVING COUNT(*) = (     SELECT MAX(count)      FROM (         SELECT COUNT(*) as count          FROM flights          GROUP BY airportcode     ) );
SELECT airportcode FROM     airports WHERE     airportcode IN (         SELECT             destairport         FROM             flights         UNION ALL         SELECT             sourceairport         FROM             flights     ) GROUP BY     airportcode ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT airports.airportcode FROM    airports JOIN    flights ON airports.airportcode = flights.destairport GROUP BY    airports.airportcode ORDER BY    COUNT(flights.flightno) ASC LIMIT 1;
SELECT airportcode FROM     airports WHERE     airportcode IN (         SELECT             destairport         FROM             flights         GROUP BY             destairport         HAVING             COUNT(*) = (                 SELECT                     MIN(flight_count)                 FROM                     (                         SELECT                             COUNT(*) AS flight_count                         FROM                             flights                         GROUP BY                             destairport                     )             )     ) LIMIT 1;
SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (     SELECT MAX(flight_count)     FROM (         SELECT COUNT(*) as flight_count         FROM flights         GROUP BY airline     ) );
SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MAX(flight_count) FROM (SELECT airline, COUNT(*) as flight_count FROM flights GROUP BY airline));
SELECT abbreviation, country FROM airlines WHERE airline IN (     SELECT airline     FROM flights     GROUP BY airline     HAVING COUNT(*) = (         SELECT MIN(flight_count)         FROM (             SELECT COUNT(*) as flight_count             FROM flights             GROUP BY airline         ) AS counts     ) ) LIMIT 1;
SELECT airlines.abbreviation, airlines.country FROM airlines INNER JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.abbreviation, airlines.country HAVING COUNT(flights.flightno) = (     SELECT MIN(flight_count)     FROM (         SELECT COUNT(flightno) as flight_count         FROM flights         GROUP BY airline     ) AS subquery );
SELECT airlines.airline FROM    airlines JOIN    flights ON    airlines.airline = flights.airline WHERE    flights.sourceairport = 'AHD';
SELECT airlines.airline FROM   airlines WHERE   EXISTS (     SELECT       1     FROM       flights     WHERE       flights.sourceairport = 'AHD'       AND flights.airline = airlines.airline   );
SELECT airlines.airline FROM airlines JOIN flights ON airlines.abbreviation = flights.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportcode = 'AHD';
SELECT airline FROM    airlines WHERE    airline IN (       SELECT          airline       FROM          flights       WHERE          destairport = 'AHD'    );
SELECT airlines.airline FROM   airlines INNER JOIN   flights ON airlines.abbreviation = flights.airline INNER JOIN   airports ON flights.sourceairport = airports.airportcode WHERE   airports.airportcode IN ('APG', 'CVO') GROUP BY   airlines.airline HAVING   COUNT(DISTINCT airports.airportcode) = 2;
SELECT airlines.airline FROM     airlines WHERE     EXISTS (         SELECT 1         FROM flights         JOIN airports ON flights.sourceairport = airports.airportcode         WHERE airports.city = 'APG'           AND airlines.airline = flights.airline     )     AND EXISTS (         SELECT 1         FROM flights         JOIN airports ON flights.sourceairport = airports.airportcode         WHERE airports.city = 'CVO'           AND airlines.airline = flights.airline     );
SELECT airlines.airline FROM airlines INNER JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport = 'CVO' AND flights.airline NOT IN (     SELECT flights.airline     FROM flights     INNER JOIN airports ON flights.sourceairport = airports.airportcode     WHERE airports.airportcode = 'APG' );
SELECT airlines.airline FROM   airlines WHERE   airlines.uid IN (     SELECT       flights.airline     FROM       flights       JOIN airports ON flights.destairport = airports.airportcode     WHERE       airports.airportcode = 'CVO'   )   AND airlines.uid NOT IN (     SELECT       flights.airline     FROM       flights       JOIN airports ON flights.destairport = airports.airportcode     WHERE       airports.airportcode = 'APG'   );
SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10;
SELECT DISTINCT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10;
SELECT airlines.airline  FROM airlines  LEFT JOIN flights ON airlines.uid = flights.airline  GROUP BY airlines.airline  HAVING COUNT(flights.flightno) < 200;
SELECT airline FROM airlines WHERE uid IN (     SELECT airline     FROM flights     GROUP BY airline     HAVING COUNT(*) < 200 );
SELECT flightno FROM flights WHERE airline = 'United Airlines';
SELECT flightno FROM flights WHERE airline = 'United Airlines';
SELECT flightno FROM flights WHERE sourceairport = 'APG';
SELECT flightno FROM flights WHERE sourceairport = 'APG';
SELECT flightno FROM flights WHERE destairport = 'APG';
SELECT flightno FROM flights WHERE landing = 'APG';
SELECT flightno FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen');
SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen';
SELECT flightno FROM flights INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen';
SELECT flights.flightno FROM    flights JOIN    airports ON flights.destairport = airports.airportcode WHERE    airports.city = 'Aberdeen';
SELECT count(*)  FROM flights  JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen' OR airports.city = 'Abilene';
SELECT COUNT(*) FROM flights WHERE destairport IN ('Aberdeen', 'Abilene');
SELECT airports.airportname FROM   airports LEFT JOIN   flights ON   airports.airportcode = flights.sourceairport OR airports.airportcode = flights.destairport WHERE   flights.sourceairport IS NULL AND flights.destairport IS NULL;
SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights);
SELECT COUNT(*) FROM employee;
SELECT COUNT(*)  FROM employee;
SELECT name FROM     employee ORDER BY     age ASC;
SELECT employee.name FROM      employee ORDER BY      employee.age ASC;
SELECT COUNT(*) AS count, city FROM employee GROUP BY city;
SELECT COUNT(*) AS count, city FROM employee GROUP BY city;
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1;
SELECT city FROM     employee WHERE     age < 30 GROUP BY     city HAVING     COUNT(*) > 1;
SELECT COUNT(*) as count, location FROM shop GROUP BY location;
SELECT COUNT(*) AS num_shops, location FROM shop GROUP BY location;
SELECT shop.manager_name, shop.district FROM shop WHERE shop.number_products = (SELECT MAX(number_products) FROM shop);
SELECT shop.manager_name, shop.district FROM shop WHERE shop.number_products = (     SELECT MAX(number_products)     FROM shop )
SELECT MIN(number_products) AS min_number_products, MAX(number_products) AS max_number_products FROM shop;
SELECT MIN(number_products) AS min_products, MAX(number_products) AS max_products FROM shop;
SELECT shop.name, shop.location, shop.district FROM shop ORDER BY shop.number_products DESC;
SELECT name, location, district FROM shop ORDER BY number_products DESC;
SELECT shop.name FROM shop WHERE shop.number_products > (SELECT AVG(number_products) FROM shop);
SELECT shop.name FROM shop WHERE shop.number_products > (SELECT AVG(number_products) FROM shop);
SELECT employee.name FROM    evaluation JOIN    employee ON evaluation.employee_id = employee.employee_id GROUP BY    employee.name ORDER BY    COUNT(*) DESC LIMIT 1;
SELECT employee.name FROM   employee JOIN   evaluation ON employee.employee_id = evaluation.employee_id GROUP BY   employee.employee_id ORDER BY   COUNT(*) DESC LIMIT 1;
SELECT employee.name FROM     employee JOIN     evaluation ON employee.employee_id = evaluation.employee_id WHERE     evaluation.bonus = (         SELECT             MAX(bonus)         FROM             evaluation     ) LIMIT 1;
SELECT employee.name FROM     employee JOIN     evaluation ON employee.employee_id = evaluation.employee_id ORDER BY     evaluation.bonus DESC LIMIT 1;
SELECT employee.name FROM   employee WHERE   employee.employee_id NOT IN (SELECT employee_id FROM evaluation)
SELECT name FROM   employee WHERE   employee_id NOT IN (SELECT employee_id FROM evaluation);
SELECT shop.name FROM     shop JOIN     hiring ON shop.shop_id = hiring.shop_id GROUP BY     shop.shop_id ORDER BY     COUNT(hiring.employee_id) DESC LIMIT 1;
SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.shop_id ORDER BY COUNT(hiring.employee_id) DESC LIMIT 1;
SELECT shop.name FROM     shop LEFT JOIN     hiring ON shop.shop_id = hiring.shop_id WHERE     hiring.employee_id IS NULL
SELECT shop.name FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.employee_id IS NULL;
SELECT COUNT(*) AS num_employees, shop.name FROM shop INNER JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name;
SELECT COUNT(*) as num_employees, shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name;
SELECT SUM(bonus) AS total_bonus FROM evaluation;
SELECT SUM(bonus) AS total_bonus FROM evaluation;
SELECT * FROM hiring;
SELECT shop_id, employee_id, start_from, is_full_time FROM hiring;
SELECT shop.district FROM shop WHERE shop.number_products < 3000 INTERSECT SELECT shop.district FROM shop WHERE shop.number_products > 10000;
SELECT DISTINCT location FROM shop WHERE number_products < 3000 INTERSECT SELECT DISTINCT location FROM shop WHERE number_products > 10000;
SELECT COUNT(DISTINCT location)  FROM shop;
SELECT COUNT(DISTINCT location) FROM shop;
SELECT COUNT(*) AS document_count FROM documents;
SELECT COUNT(*)  FROM documents;
SELECT documents.document_id, documents.document_name, documents.document_description FROM documents;
SELECT document_id, document_name, document_description FROM     documents;
SELECT documents.document_name, documents.template_id FROM documents WHERE documents.document_description LIKE '%w%';
SELECT documents.document_name, documents.template_id FROM documents WHERE documents.document_description LIKE '%w%';
SELECT documents.document_id, documents.template_id, documents.document_description FROM documents WHERE documents.document_name = "Robbin CV";
SELECT documents.document_id, documents.template_id, documents.document_description FROM documents WHERE documents.document_name = 'Robbin CV';
SELECT COUNT(DISTINCT template_id) FROM documents;
SELECT COUNT(DISTINCT templates.template_id) AS num_templates_used FROM documents JOIN templates ON documents.template_id = templates.template_id;
SELECT COUNT(*) FROM     documents WHERE     template_id IN (         SELECT             template_id         FROM             templates         WHERE             template_type_code = 'PPT'     );
SELECT COUNT(*) FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'PPT';
SELECT templates.template_id, COUNT(documents.document_id) FROM     templates INNER JOIN     documents ON templates.template_id = documents.template_id GROUP BY     templates.template_id;
SELECT templates.template_id,      COUNT(documents.document_id) AS usage_count     FROM documents     INNER JOIN templates ON documents.template_id = templates.template_id     GROUP BY templates.template_id;
SELECT templates.template_id, templates.template_type_code  FROM templates  INNER JOIN documents ON templates.template_id = documents.template_id  GROUP BY templates.template_id, templates.template_type_code  ORDER BY COUNT(documents.template_id) DESC  LIMIT 1;
SELECT templates.template_id, templates.template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1;
SELECT templates.template_id FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id HAVING COUNT(DISTINCT documents.document_id) > 1;
SELECT templates.template_id FROM     templates INNER JOIN     documents ON templates.template_id = documents.template_id GROUP BY     templates.template_id HAVING     COUNT(DISTINCT documents.document_id) > 1;
SELECT templates.template_id FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id WHERE documents.template_id IS NULL;
SELECT templates.template_id     FROM     templates     WHERE     templates.template_id NOT IN (SELECT template_id FROM documents);
SELECT COUNT(DISTINCT template_id) FROM templates;
SELECT COUNT(template_id) FROM templates;
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates;
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates;
SELECT DISTINCT template_type_code FROM templates;
SELECT DISTINCT template_type_code FROM ref_template_types;
SELECT templates.template_id FROM templates WHERE templates.template_type_code = 'PP' OR templates.template_type_code = 'PPT';
SELECT templates.template_id FROM templates WHERE templates.template_type_code = 'PP' OR templates.template_type_code = 'PPT';
SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';
SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';
SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.version_number > 5;
SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.version_number > 5;
SELECT ref_template_types.template_type_code, COUNT(templates.template_id) as num_templates FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_code;
SELECT ref_template_types.template_type_code,     COUNT(templates.template_id) AS number_of_templates FROM     ref_template_types JOIN     templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY     ref_template_types.template_type_code;
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT template_type_code FROM   ref_template_types WHERE   template_type_code IN (     SELECT       template_type_code     FROM       templates     GROUP BY       template_type_code     HAVING       COUNT(*) < 3   );
SELECT ref_template_types.template_type_code FROM     ref_template_types WHERE     ref_template_types.template_type_code IN (         SELECT              template_type_code         FROM              templates         GROUP BY              template_type_code         HAVING              COUNT(*) < 3     );
SELECT MIN(version_number), template_type_code FROM templates GROUP BY template_type_code ORDER BY version_number ASC LIMIT 1;
SELECT MIN(version_number) AS "min ( version_number )", template_type_code FROM templates GROUP BY template_type_code;
SELECT templates.template_type_code FROM     documents JOIN     templates ON documents.template_id = templates.template_id WHERE     documents.document_name = "Data base";
SELECT templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Data base';
SELECT documents.document_name FROM templates JOIN documents ON templates.template_id = documents.template_id WHERE templates.template_type_code = 'BK';
SELECT documents.document_name FROM documents INNER JOIN templates ON documents.template_id = templates.template_id INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_code = 'BK';
SELECT ref_template_types.template_type_code, COUNT(*) FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code;
SELECT ref_template_types.template_type_code, COUNT(DISTINCT documents.document_id) FROM     ref_template_types INNER JOIN     templates ON ref_template_types.template_type_code = templates.template_type_code INNER JOIN     documents ON templates.template_id = documents.template_id GROUP BY     ref_template_types.template_type_code;
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(template_id) DESC LIMIT 1;
SELECT ref_template_types.template_type_code FROM     ref_template_types JOIN     templates ON ref_template_types.template_type_code = templates.template_type_code JOIN     documents ON templates.template_id = documents.template_id GROUP BY     ref_template_types.template_type_code ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT ref_template_types.template_type_code FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code LEFT JOIN documents ON templates.template_id = documents.template_id WHERE documents.document_id IS NULL;
SELECT ref_template_types.template_type_code     FROM      ref_template_types     WHERE      ref_template_types.template_type_code NOT IN (        SELECT          templates.template_type_code        FROM          templates        INNER JOIN          documents ON templates.template_id = documents.template_id      );
SELECT ref_template_types.template_type_code, ref_template_types.template_type_description FROM     ref_template_types;
SELECT template_type_code, template_type_description FROM ref_template_types;
SELECT ref_template_types.template_type_description FROM     ref_template_types WHERE     ref_template_types.template_type_code = "AD";
SELECT ref_template_types.template_type_description FROM     ref_template_types WHERE     ref_template_types.template_type_code = 'AD';
SELECT template_type_code FROM     ref_template_types WHERE     template_type_description = 'Book';
SELECT ref_template_types.template_type_code FROM     ref_template_types WHERE     template_type_description = 'Book';
SELECT DISTINCT ref_template_types.template_type_description FROM   templates INNER JOIN   ref_template_types ON templates.template_type_code = ref_template_types.template_type_code INNER JOIN   documents ON documents.template_id = templates.template_id;
SELECT DISTINCT ref_template_types.template_type_description  FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  JOIN documents ON documents.template_id = templates.template_id  JOIN paragraphs ON paragraphs.document_id = documents.document_id
SELECT templates.template_id FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_description = "Presentation";
SELECT templates.template_id FROM     templates JOIN     ref_template_types ON     templates.template_type_code = ref_template_types.template_type_code WHERE     ref_template_types.template_type_description = 'Presentation';
SELECT COUNT(*) AS total_paragraphs FROM paragraphs;
SELECT COUNT(*)  FROM paragraphs;
SELECT COUNT(*)  FROM      paragraphs  JOIN      documents ON paragraphs.document_id = documents.document_id  WHERE      documents.document_name = 'Summer Show';
SELECT COUNT(*) FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Summer Show';
SELECT paragraph_text, paragraph_id, document_id, other_details  FROM paragraphs  WHERE paragraph_text LIKE '%Korea%';
SELECT documents.other_details FROM documents JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text LIKE '%Korea %';
SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id = (     SELECT document_id     FROM documents     WHERE document_name = 'Welcome to NY' );
SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Welcome to NY');
SELECT paragraph_text FROM     paragraphs JOIN     documents ON paragraphs.document_id = documents.document_id WHERE     documents.document_name = "Customer reviews";
SELECT paragraph_text FROM     paragraphs JOIN     documents ON paragraphs.document_id = documents.document_id WHERE     documents.document_name = 'Customer reviews';
SELECT documents.document_id, COUNT(paragraphs.paragraph_id)     FROM documents     INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id     GROUP BY documents.document_id     ORDER BY documents.document_id;
SELECT documents.document_id, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id;
SELECT documents.document_id, documents.document_name, COUNT(*) FROM documents LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name;
SELECT documents.document_id, documents.document_name, count(paragraphs.document_id) as num_paragraphs FROM     documents JOIN     paragraphs ON documents.document_id = paragraphs.document_id GROUP BY     documents.document_id, documents.document_name;
SELECT documents.document_id FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) >= 2;
SELECT documents.document_id FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) >= 2;
SELECT documents.document_id, documents.document_name FROM documents JOIN ( SELECT document_id, COUNT(*) AS paragraph_count FROM paragraphs GROUP BY document_id ) AS paragraph_counts ON documents.document_id = paragraph_counts.document_id ORDER BY paragraph_counts.paragraph_count DESC LIMIT 1;
SELECT documents.document_id, documents.document_name FROM documents JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1;
SELECT documents.document_id FROM   documents JOIN   paragraphs ON paragraphs.document_id = documents.document_id GROUP BY   documents.document_id ORDER BY   COUNT(paragraphs.paragraph_id) ASC LIMIT 1;
SELECT documents.document_id FROM     documents JOIN     paragraphs ON documents.document_id = paragraphs.document_id GROUP BY     documents.document_id ORDER BY     COUNT(paragraphs.paragraph_id) ASC LIMIT 1;
SELECT documents.document_id FROM     documents WHERE     documents.document_id IN (         SELECT             document_id         FROM             paragraphs         GROUP BY             document_id         HAVING             COUNT(*) >= 1 AND COUNT(*) <= 2     );
SELECT documents.document_id FROM documents WHERE document_id IN (     SELECT document_id     FROM paragraphs     GROUP BY document_id     HAVING COUNT(*) >= 1 AND COUNT(*) <= 2 );
SELECT documents.document_id FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE paragraphs.paragraph_text IN ('Brazil', 'Ireland');
SELECT documents.document_id FROM documents WHERE document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil') AND document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland');
SELECT COUNT(*) FROM teacher;
SELECT COUNT(teacher_id)  FROM teacher;
SELECT name FROM   teacher ORDER BY   age ASC;
SELECT name FROM     teacher ORDER BY     age ASC;
SELECT age, hometown FROM teacher;
SELECT age, hometown FROM teacher;
SELECT teacher.name FROM teacher WHERE teacher.hometown <> 'Little Lever Urban District';
SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District';
SELECT name FROM teacher WHERE age IN (32, 33);
SELECT name FROM teacher WHERE age IN (32, 33);
SELECT teacher.hometown FROM     teacher ORDER BY     teacher.age ASC LIMIT 1;
SELECT hometown FROM     teacher ORDER BY     age ASC LIMIT 1;
SELECT teacher.hometown, COUNT(teacher.teacher_id) as num_teachers FROM teacher GROUP BY teacher.hometown;
SELECT teacher.hometown, COUNT(*) as total_teachers FROM teacher GROUP BY teacher.hometown;
SELECT teacher.hometown FROM     teacher GROUP BY     teacher.hometown ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT teacher.hometown FROM     teacher GROUP BY     teacher.hometown ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT teacher.hometown FROM     teacher GROUP BY     teacher.hometown HAVING     COUNT(DISTINCT teacher.teacher_id) > 1;
SELECT teacher.hometown     FROM teacher     GROUP BY teacher.hometown     HAVING COUNT(DISTINCT teacher.teacher_id) >= 2;
SELECT teacher.name, course.course FROM      teacher JOIN      course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN      course ON course_arrange.course_id = course.course_id;
SELECT teacher.name, course.course FROM     teacher JOIN     course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN     course ON course_arrange.course_id = course.course_id;
SELECT teacher.name,     course.course FROM     teacher JOIN     course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN     course ON course_arrange.course_id = course.course_id ORDER BY     teacher.name ASC;
SELECT teacher.name, course.course FROM   teacher INNER JOIN   course_arrange ON teacher.teacher_id = course_arrange.teacher_id INNER JOIN   course ON course_arrange.course_id = course.course_id ORDER BY   teacher.name ASC;
SELECT teacher.name  FROM course_arrange JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.course = 'math';
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.course_name = 'math';
SELECT teacher.name, COUNT(course_arrange.course_id)     FROM teacher     INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id     GROUP BY teacher.name;
SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name;
SELECT teacher.name FROM     teacher JOIN     course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY     teacher.teacher_id HAVING     COUNT(DISTINCT course_arrange.course_id) >= 2;
SELECT name FROM    teacher WHERE    teacher_id IN (       SELECT          teacher_id       FROM          course_arrange       GROUP BY          teacher_id       HAVING          COUNT(DISTINCT course_id) >= 2    );
SELECT teacher.name FROM     teacher LEFT JOIN     course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE     course_arrange.teacher_id IS NULL;
SELECT teacher.name FROM     teacher WHERE     teacher.teacher_id NOT IN (         SELECT             teacher_id         FROM             course_arrange     )
SELECT COUNT(*) FROM     visitor WHERE     age < 30;
SELECT visitor.name FROM visitor WHERE visitor.level_of_membership > 4 ORDER BY visitor.level_of_membership DESC;
SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4;
SELECT visitor.name, visitor.level_of_membership FROM visitor WHERE visitor.level_of_membership > 4 ORDER BY visitor.age DESC;
SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1;
SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009;
SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum';
SELECT museum.name FROM     museum WHERE     museum.num_of_staff > (         SELECT             MIN(m.num_of_staff)         FROM             museum m         WHERE             m.open_year > 2010     );
SELECT visitor.id, visitor.name, visitor.age FROM    visitor WHERE    visitor.id IN (       SELECT          visitor_id       FROM          visit       GROUP BY          visitor_id       HAVING          COUNT(*) > 1    );
SELECT visitor.id, visitor.name, visitor.level_of_membership  FROM visitor  WHERE visitor.id IN (     SELECT visit.visitor_id      FROM visit      GROUP BY visit.visitor_id      HAVING SUM(visit.total_spent) = (         SELECT MAX(total_spent_sum)          FROM (             SELECT SUM(total_spent) AS total_spent_sum              FROM visit              GROUP BY visitor_id         )     ) );
SELECT museum_id, name FROM     museum WHERE     museum_id IN (         SELECT             museum_id         FROM             visit         GROUP BY             museum_id         ORDER BY             COUNT(*) DESC         LIMIT 1     );
SELECT museum.name FROM   museum WHERE   museum.museum_id NOT IN (SELECT museum_id FROM visit)
SELECT visitor.name, visitor.age FROM     visit JOIN     visitor ON visit.visitor_id = visitor.id GROUP BY     visit.visitor_id ORDER BY     visit.num_of_ticket DESC LIMIT 1;
SELECT AVG(num_of_ticket) AS average_tickets_bought,     MAX(num_of_ticket) AS maximum_tickets_bought FROM     visit;
SELECT SUM(total_spent) FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership = 1;
SELECT visitor.name  FROM visitor  JOIN visit ON visitor.id = visit.visitor_id  JOIN museum ON visit.museum_id = museum.museum_id  WHERE museum.open_year < 2009  INTERSECT  SELECT visitor.name  FROM visitor  JOIN visit ON visitor.id = visit.visitor_id  JOIN museum ON visit.museum_id = museum.museum_id  WHERE museum.open_year > 2011;
SELECT COUNT(DISTINCT visitor_id)  FROM visit  WHERE visitor_id NOT IN (     SELECT DISTINCT visit.visitor_id     FROM visit     INNER JOIN museum ON visit.museum_id = museum.museum_id     WHERE museum.open_year > 2010 )
SELECT COUNT(museum_id) FROM museum WHERE open_year > 2013 OR open_year < 2008;
SELECT COUNT(*) as total_players FROM players;
SELECT COUNT(DISTINCT player_id) AS total_players FROM players;
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) AS match_count FROM matches;
SELECT ###
SELECT ###
SELECT AVG(loser_age) AS avg_loser_age,     AVG(winner_age) AS avg_winner_age FROM matches;
SELECT AVG(loser_age) AS average_loser_age,     AVG(winner_age) AS average_winner_age FROM     matches
SELECT AVG(winner_rank) FROM matches
SELECT AVG(winner_rank) FROM matches;
SELECT MAX(loser_rank) FROM matches;
SELECT MIN(loser_rank) FROM matches;
SELECT COUNT(DISTINCT country_code) AS distinct_country_codes FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT tourney_name FROM     matches GROUP BY     tourney_name HAVING     COUNT(match_num) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT DISTINCT winner_name FROM matches WHERE year = 2013 AND winner_name IN (     SELECT winner_name     FROM matches     WHERE year = 2016 );
SELECT players.first_name, players.last_name  FROM players  JOIN matches ON matches.winner_id = players.player_id  WHERE matches.year = 2013  AND players.player_id IN (     SELECT matches.winner_id      FROM matches      WHERE matches.year = 2016 );
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT players.country_code, players.first_name  FROM players  INNER JOIN matches AS m1 ON m1.winner_id = players.player_id  INNER JOIN matches AS m2 ON m2.winner_id = players.player_id  WHERE m1.tourney_name = 'WTA Championships'  AND m2.tourney_name = 'Australian Open';
SELECT players.country_code, players.first_name FROM players WHERE player_id IN (     SELECT winner_id     FROM matches     WHERE tourney_name = 'WTA Championships' ) AND player_id IN (     SELECT winner_id     FROM matches     WHERE tourney_name = 'Australian Open' )
SELECT players.first_name, players.country_code FROM players JOIN (     SELECT player_id, MIN(ranking_date) AS oldest_date     FROM rankings     GROUP BY player_id ) AS oldest ON players.player_id = oldest.player_id JOIN rankings ON players.player_id = rankings.player_id AND rankings.ranking_date = oldest.oldest_date;
SELECT players.first_name, players.country_code  FROM players  WHERE players.player_id = (     SELECT player_id      FROM rankings      WHERE ranking_date = (         SELECT MIN(ranking_date)          FROM rankings     ) ) LIMIT 1;
SELECT first_name, last_name FROM players ORDER BY birth_date ASC;
SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'left' ORDER BY players.birth_date;
SELECT players.first_name, players.country_code  FROM players  JOIN (    SELECT player_id, COUNT(*) as num_tours     FROM matches     GROUP BY player_id     ORDER BY num_tours DESC     LIMIT 1 ) AS most_tours ON players.player_id = most_tours.player_id;
SELECT players.country_code, players.first_name FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1;
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT year     FROM     matches     GROUP BY     year     ORDER BY     COUNT(match_num) DESC     LIMIT 1;
SELECT matches.winner_name, SUM(rankings.ranking_points) AS total_rank_points FROM matches JOIN rankings ON matches.winner_id = rankings.player_id GROUP BY matches.winner_name ORDER BY COUNT(matches.winner_id) DESC LIMIT 1;
SELECT players.first_name || ' ' || players.last_name AS winner_name, MAX(rankings.ranking_points) AS winner_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY matches.winner_id ORDER BY COUNT(matches.winner_id) DESC LIMIT 1;
SELECT matches.winner_name FROM     matches JOIN     rankings ON matches.winner_id = rankings.player_id WHERE     matches.tourney_name = 'Australian Open' ORDER BY     rankings.ranking_points DESC LIMIT 1;
SELECT matches.winner_name FROM     matches WHERE     tourney_name = 'Australian Open' ORDER BY     winner_rank_points DESC LIMIT 1;
SELECT matches.winner_name, matches.loser_name FROM     matches WHERE     minutes = (         SELECT MAX(minutes) FROM matches     );
SELECT     winner_name,     loser_name FROM     matches WHERE     minutes = (         SELECT             MAX(minutes)         FROM             matches     ) LIMIT 1;
SELECT ###
SELECT ###
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points             FROM players             JOIN rankings ON rankings.player_id = players.player_id             GROUP BY players.player_id, players.first_name;
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points             FROM players             JOIN rankings ON players.player_id = rankings.player_id             GROUP BY players.first_name;
SELECT country_code, COUNT(player_id) as player_count FROM players GROUP BY country_code;
SELECT country_code, COUNT(*) FROM players GROUP BY country_code;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT players.country_code FROM     players GROUP BY     players.country_code ORDER BY     COUNT(players.player_id) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT players.country_code FROM players GROUP BY players.country_code HAVING COUNT(players.player_id) > 50;
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT ranking_date, SUM(tours) AS sum_tours FROM rankings GROUP BY ranking_date;
SELECT COUNT(*) AS count, year FROM matches GROUP BY year;
SELECT COUNT(*) as count, strftime('%Y', tourney_date) as year FROM matches GROUP BY year;
SELECT players.first_name, players.last_name, matches.winner_rank  FROM players  JOIN matches ON matches.winner_id = players.player_id  ORDER BY matches.winner_age ASC  LIMIT 3;
SELECT players.first_name, players.last_name, matches.winner_rank  FROM players  JOIN matches ON matches.winner_id = players.player_id  WHERE matches.winner_age IN (     SELECT DISTINCT winner_age      FROM matches      ORDER BY winner_age ASC      LIMIT 3 ) ORDER BY matches.winner_age ASC;
SELECT COUNT(DISTINCT winner_id)  FROM matches  WHERE tourney_name = 'WTA Championships'  AND winner_hand = 'L';
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';
SELECT players.first_name, players.country_code, players.birth_date FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY matches.winner_rank_points DESC LIMIT 1;
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON matches.winner_id = players.player_id ORDER BY matches.winner_rank_points DESC LIMIT 1;
SELECT COUNT(*) as player_count, hand FROM players GROUP BY hand;
SELECT COUNT(*) AS player_count, hand FROM players GROUP BY hand;
SELECT COUNT(*)  FROM ship  WHERE disposition_of_ship = 'Captured';
SELECT ship.name, ship.tonnage FROM ship ORDER BY ship.name DESC;
SELECT name, date, result FROM battle;
SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll FROM death;
SELECT AVG(injured) FROM death;
SELECT death.killed, death.injured  FROM death  JOIN ship ON death.caused_by_ship_id = ship.id  WHERE ship.tonnage = 't';
SELECT battle.name, battle.result FROM battle WHERE battle.bulgarian_commander <> 'Boril';
SELECT battle.id, battle.name  FROM battle  WHERE battle.id IN (     SELECT DISTINCT ship.lost_in_battle      FROM ship      WHERE ship.ship_type = 'Brig' );
SELECT battle.id, battle.name FROM battle JOIN ship ON ship.lost_in_battle = battle.id JOIN death ON death.caused_by_ship_id = ship.id GROUP BY battle.id, battle.name HAVING COUNT(death.killed) > 10;
SELECT ship.id, ship.name FROM ship JOIN (     SELECT caused_by_ship_id, SUM(injured) AS total_injuries     FROM death     GROUP BY caused_by_ship_id ) AS injury_count ON ship.id = injury_count.caused_by_ship_id ORDER BY injury_count.total_injuries DESC LIMIT 1;
SELECT DISTINCT b.name FROM battle b JOIN ship s1 ON s1.lost_in_battle = b.id JOIN ship s2 ON s2.lost_in_battle = b.id WHERE s1.lost_in_battle = 'Kaloyan'   AND s2.lost_in_battle = 'Baldwin I';
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(DISTINCT battle.id) FROM battle LEFT JOIN ship ON ship.lost_in_battle = battle.id AND ship.tonnage = 225 WHERE ship.id IS NULL;
SELECT battle.name, battle.date  FROM battle  WHERE battle.id IN (   SELECT ship.lost_in_battle    FROM ship    WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta' );
SELECT battle.name, battle.result, battle.bulgarian_commander  FROM battle  WHERE battle.name NOT IN (     SELECT ship.lost_in_battle      FROM ship      WHERE ship.location = 'English Channel' );
SELECT note FROM death WHERE note LIKE '%East%'
SELECT addresses.line_1, addresses.line_2 FROM addresses;
SELECT addresses.line_1, addresses.line_2 FROM addresses;
SELECT COUNT(*) FROM courses;
SELECT COUNT(*) FROM courses;
SELECT courses.course_description FROM     courses WHERE     courses.course_name = 'math';
SELECT course_description FROM     courses WHERE     course_name LIKE '%math%';
SELECT zip_postcode      FROM addresses      WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea';
SELECT departments.department_name, departments.department_id FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_name, departments.department_id HAVING COUNT(degree_programs.degree_program_id) =      (SELECT MAX(degree_count)       FROM          (SELECT departments.department_name, departments.department_id, COUNT(degree_programs.degree_program_id) AS degree_count          FROM departments          JOIN degree_programs ON departments.department_id = degree_programs.department_id          GROUP BY departments.department_name, departments.department_id) AS subquery     );
SELECT department_name, department_id FROM departments WHERE department_id = ( SELECT department_id FROM degree_programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT COUNT(DISTINCT department_id) FROM degree_programs;
SELECT COUNT(DISTINCT department_id) FROM degree_programs;
SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs;
SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs;
SELECT COUNT(*)  FROM degree_programs  WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering');
SELECT COUNT(degree_program_id) FROM degree_programs WHERE department_id IN (SELECT department_id FROM departments WHERE department_name = 'engineering');
SELECT sections.section_name, sections.section_description FROM sections;
SELECT sections.section_name, sections.section_description FROM sections;
SELECT courses.course_name, courses.course_id FROM courses  INNER JOIN sections ON courses.course_id = sections.course_id  GROUP BY courses.course_id  HAVING COUNT(sections.section_id) <= 2;
SELECT courses.course_name, courses.course_id FROM courses LEFT JOIN sections ON courses.course_id = sections.course_id GROUP BY courses.course_id HAVING COUNT(sections.section_id) < 2;
SELECT sections.section_name FROM sections ORDER BY sections.section_name DESC;
SELECT section_name FROM     sections ORDER BY     section_name DESC;
SELECT semesters.semester_name, semesters.semester_id FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_name, semesters.semester_id ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;
SELECT semesters.semester_name, semesters.semester_id FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_name, semesters.semester_id HAVING COUNT(student_enrolment.student_id) =      (SELECT COUNT(student_id)      FROM student_enrolment      GROUP BY semester_id      ORDER BY COUNT(student_id) DESC      LIMIT 1);
SELECT departments.department_description FROM departments WHERE departments.department_name LIKE '%computer%';
SELECT department_description     FROM departments     WHERE department_name LIKE '%computer%';
SELECT students.first_name, students.middle_name, students.last_name, students.student_id  FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  GROUP BY students.first_name, students.middle_name, students.last_name, students.student_id  HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2;
SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2;
SELECT students.first_name, students.middle_name, students.last_name  FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_programs.degree_summary_name LIKE '%Bachelor%';
SELECT first_name, middle_name, last_name FROM students WHERE student_id IN (SELECT student_id FROM degree_programs WHERE degree_summary_name = 'Bachelors');
SELECT degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT degree_summary_name FROM     degree_programs JOIN     student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY     degree_programs.degree_summary_name ORDER BY     COUNT(student_enrolment.student_id) DESC LIMIT 1;
SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_program_id, degree_programs.degree_summary_name ORDER BY COUNT(student_enrolment.student_enrolment_id) DESC LIMIT 1;
SELECT degree_program_id, degree_summary_name FROM     degree_programs WHERE     degree_program_id = (         SELECT degree_program_id         FROM student_enrolment         GROUP BY degree_program_id         ORDER BY COUNT(*) DESC         LIMIT 1     );
SELECT se.student_id, s.first_name, s.middle_name, s.last_name, COUNT(*) as num_enrollments FROM student_enrolment se INNER JOIN students s ON se.student_id = s.student_id GROUP BY se.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(*) = (     SELECT MAX(enrollment_count)     FROM (         SELECT COUNT(*) as enrollment_count         FROM student_enrolment         GROUP BY student_id     ) );
SELECT students.first_name, students.middle_name, students.last_name, student_enrolment.student_id, COUNT(*) FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT semesters.semester_name FROM semesters LEFT JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id WHERE student_enrolment.student_enrolment_id IS NULL;
SELECT semesters.semester_name FROM semesters LEFT JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id WHERE student_enrolment.student_enrolment_id IS NULL;
SELECT DISTINCT c.course_name  FROM courses c INNER JOIN student_enrolment se ON c.course_id = se.degree_program_id;
SELECT DISTINCT courses.course_name  FROM courses  INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id;
SELECT courses.course_name FROM     courses JOIN     student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY     courses.course_name ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT courses.course_name FROM     courses JOIN     student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY     courses.course_name ORDER BY     COUNT(student_enrolment_courses.student_course_id) DESC LIMIT 1;
SELECT last_name  FROM students  WHERE      current_address_id IN (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina')      AND student_id NOT IN (SELECT student_id FROM student_enrolment)
SELECT last_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.state_province_county = 'North Carolina' AND students.student_id NOT IN (     SELECT student_id     FROM student_enrolment )
SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id IN (     SELECT transcript_id     FROM transcript_contents     GROUP BY transcript_id     HAVING COUNT(*) >= 2 )
SELECT transcripts.transcript_date, transcripts.transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcripts.transcript_date, transcripts.transcript_id HAVING COUNT(DISTINCT transcript_contents.student_course_id) >= 2;
SELECT students.cell_mobile_number FROM students WHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward';
SELECT students.cell_mobile_number FROM students WHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward';
SELECT students.first_name, students.middle_name, students.last_name FROM students ORDER BY students.date_first_registered ASC LIMIT 1;
SELECT students.first_name, students.middle_name, students.last_name FROM students ORDER BY students.date_first_registered LIMIT 1;
SELECT students.first_name, students.middle_name, students.last_name FROM students ORDER BY students.date_first_registered ASC LIMIT 1;
SELECT first_name, middle_name, last_name  FROM students  WHERE graduation_date = (SELECT MIN(graduation_date) FROM students);
SELECT students.first_name FROM students JOIN addresses AS permanent ON students.permanent_address_id = permanent.address_id JOIN addresses AS current ON students.current_address_id = current.address_id WHERE permanent.line_1 <> current.line_1 OR permanent.line_2 <> current.line_2 OR permanent.line_3 <> current.line_3 OR permanent.city <> current.city OR permanent.zip_postcode <> current.zip_postcode OR permanent.state_province_county <> current.state_province_county OR permanent.country <> current.country;
SELECT students.first_name FROM students INNER JOIN addresses AS permanent_address ON students.permanent_address_id = permanent_address.address_id INNER JOIN addresses AS current_address ON students.current_address_id = current_address.address_id WHERE permanent_address.line_1 <> current_address.line_1;
SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses WHERE addresses.address_id = (SELECT students.current_address_id FROM students GROUP BY students.current_address_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses JOIN students ON students.permanent_address_id = addresses.address_id OR students.current_address_id = addresses.address_id GROUP BY addresses.address_id ORDER BY COUNT(students.student_id) DESC LIMIT 1;
SELECT AVG(transcript_date) AS average_print_date FROM transcripts;
SELECT AVG(transcript_date) AS average_transcript_date FROM transcripts;
SELECT transcript_date, other_details FROM     transcripts ORDER BY     transcript_date ASC LIMIT 1;
SELECT MIN(transcript_date), other_details FROM transcripts;
SELECT COUNT(DISTINCT transcript_id) AS num_transcripts FROM transcripts;
SELECT COUNT(transcript_id) FROM transcripts;
SELECT transcript_date FROM   transcripts ORDER BY   transcript_date DESC LIMIT 1;
SELECT transcript_date FROM     transcripts ORDER BY     transcript_date DESC LIMIT 1;
SELECT COUNT(*) AS count, student_course_id FROM transcript_contents GROUP BY student_course_id ORDER BY count DESC LIMIT 1;
SELECT MAX(count), student_course_id  FROM (     SELECT          student_course_id,          COUNT(DISTINCT transcript_id) AS count      FROM          transcript_contents      GROUP BY          student_course_id ) AS subquery;
SELECT transcripts.transcript_date,     transcripts.transcript_id FROM     transcripts JOIN     transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY     transcripts.transcript_date,     transcripts.transcript_id ORDER BY     COUNT(*) ASC LIMIT 1;
SELECT transcript_date, transcript_id FROM transcripts GROUP BY transcript_date, transcript_id HAVING COUNT(*) = (SELECT MIN(transcript_count) FROM (SELECT COUNT(*) as transcript_count FROM transcripts GROUP BY transcript_date, transcript_id)) LIMIT 1;
SELECT semesters.semester_id FROM semesters JOIN students ON semesters.semester_id = students.date_first_registered JOIN degree_programs ON students.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Master' AND semesters.semester_id IN (     SELECT semester_id     FROM students     JOIN degree_programs ON students.degree_program_id = degree_programs.degree_program_id     WHERE degree_programs.degree_summary_name = 'Bachelor' ) GROUP BY semesters.semester_id HAVING COUNT(DISTINCT degree_programs.degree_summary_name) = 2;
SELECT (SELECT semester_id FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE department_id = 'Masters') INTERSECT (SELECT semester_id FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE department_id = 'Bachelors');
SELECT COUNT(DISTINCT students.current_address_id)  FROM students
SELECT COUNT(DISTINCT current_address_id) FROM students;
SELECT students.last_name, students.first_name, students.middle_name, students.email_address, students.cell_mobile_number, students.other_student_details, students.student_id FROM students ORDER BY students.last_name DESC;
SELECT other_student_details FROM students ORDER BY last_name DESC;
SELECT section_description FROM sections WHERE section_id = 'h';
SELECT sections.section_description FROM sections WHERE sections.section_name = 'h';
SELECT students.first_name  FROM students  JOIN addresses ON students.permanent_address_id = addresses.address_id  WHERE addresses.country = 'Haiti'  OR students.cell_mobile_number = '09700166582';
SELECT students.first_name  FROM students  INNER JOIN addresses ON students.permanent_address_id = addresses.address_id  WHERE addresses.country = 'Haiti'  UNION  SELECT students.first_name  FROM students  WHERE students.cell_mobile_number = '09700166582';
SELECT title     FROM      cartoon     ORDER BY      title ASC;
SELECT title FROM     cartoon ORDER BY     title ASC;
SELECT cartoon.title FROM     cartoon WHERE     cartoon.directed_by = 'Ben Jones';
SELECT cartoon.title FROM    cartoon WHERE    cartoon.directed_by = 'Ben Jones';
SELECT COUNT(*) FROM cartoon WHERE written_by = "Joseph Kuhr";
SELECT COUNT(*)  FROM cartoon  WHERE written_by = 'Joseph Kuhr';
SELECT cartoon.title, cartoon.directed_by FROM     cartoon JOIN     tv_channel ON cartoon.channel = tv_channel.id ORDER BY     cartoon.original_air_date;
SELECT cartoon.title, cartoon.directed_by     FROM cartoon     JOIN tv_channel ON cartoon.channel = tv_channel.id     ORDER BY cartoon.original_air_date;
SELECT cartoon.title FROM   cartoon WHERE   cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Brandon Vietti';
SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti';
SELECT country, count(id) as num_channels     FROM     tv_channel     GROUP BY     country     ORDER BY     num_channels DESC     LIMIT 1;
SELECT tv_channel.country, COUNT(tv_channel.id) AS num_channels FROM     tv_channel GROUP BY     tv_channel.country ORDER BY     num_channels DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;
SELECT COUNT(DISTINCT series_name) AS num_series, COUNT(DISTINCT content) AS num_contents FROM tv_channel;
SELECT content FROM     tv_channel WHERE     series_name = "Sky Radio";
SELECT content FROM     tv_channel WHERE     series_name = 'Sky Radio';
SELECT tv_channel.package_option  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  WHERE tv_series.series_name = 'Sky Radio';
SELECT tv_channel.package_option  FROM tv_channel  WHERE tv_channel.series_name = 'Sky Radio';
SELECT COUNT(DISTINCT id) FROM tv_channel WHERE language = 'English';
SELECT COUNT(DISTINCT id) FROM tv_channel WHERE language = 'English';
SELECT      tv_channel.language,      COUNT(*) AS count  FROM      tv_channel  LEFT JOIN      (SELECT channel FROM tv_series       UNION ALL       SELECT channel FROM cartoon) AS shows ON tv_channel.id = shows.channel  WHERE      shows.channel IS NULL  GROUP BY      tv_channel.language  ORDER BY      count  ASC  LIMIT 1;
SELECT language, COUNT(DISTINCT tv_channel.id) AS channel_count FROM   tv_channel GROUP BY   language ORDER BY   channel_count LIMIT 1;
SELECT tv_channel.language, COUNT(tv_channel.id) AS num_channels     FROM      tv_channel     GROUP BY      tv_channel.language;
SELECT language, COUNT(DISTINCT tv_channel.id) AS num_channels FROM tv_channel GROUP BY language;
SELECT tv_channel.series_name FROM     cartoon     JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE     cartoon.title = "The Rise of the Blue Beetle!";
SELECT tv_channel.series_name  FROM tv_channel  JOIN cartoon ON cartoon.channel = tv_channel.id  WHERE cartoon.title = 'The Rise of the Blue Beetle';
SELECT cartoon.title  FROM cartoon  JOIN tv_channel ON cartoon.channel = tv_channel.id  JOIN tv_series ON tv_channel.id = tv_series.channel  WHERE tv_channel.series_name = 'Sky Radio';
SELECT cartoon.title FROM     cartoon JOIN     tv_channel ON cartoon.channel = tv_channel.id WHERE     tv_channel.series_name = "Sky Radio";
SELECT tv_series.episode FROM     tv_series ORDER BY     rating;
SELECT episode FROM tv_series ORDER BY rating;
SELECT episode, rating     FROM tv_series     ORDER BY rating DESC     LIMIT 3;
SELECT tv_series.episode, tv_series.rating     FROM      tv_series     ORDER BY      tv_series.rating DESC     LIMIT 3;
SELECT MAX(share) AS "max ( share )", MIN(share) AS "min ( share )" FROM tv_series;
SELECT MAX(share), MIN(share) FROM tv_series;
SELECT tv_series.air_date FROM tv_series WHERE tv_series.episode = "A Love of a Lifetime";
SELECT tv_series.air_date FROM     tv_series WHERE     tv_series.episode = "A Love of a Lifetime";
SELECT tv_series.weekly_rank FROM tv_series WHERE tv_series.episode = "A Love of a Lifetime";
SELECT weekly_rank FROM     tv_series WHERE     episode = "A Love of a Lifetime";
SELECT tv_channel.series_name FROM   tv_channel JOIN   tv_series ON tv_channel.id = tv_series.channel WHERE   tv_series.episode = "A Love of a Lifetime";
SELECT tv_series.series_name  FROM tv_series  WHERE tv_series.episode = "A Love of a Lifetime";
SELECT tv_series.episode FROM   tv_series INNER JOIN   tv_channel ON tv_series.channel = tv_channel.id WHERE   tv_channel.series_name = "Sky Radio";
SELECT episode FROM tv_series WHERE tv_series.series_name = "Sky Radio";
SELECT COUNT(*) AS count, directed_by FROM cartoon GROUP BY directed_by;
SELECT COUNT(*) as count, directed_by FROM cartoon GROUP BY directed_by;
SELECT production_code, channel     FROM      cartoon     ORDER BY      original_air_date DESC     LIMIT 1;
SELECT cartoon.production_code, cartoon.channel FROM     cartoon INNER JOIN     tv_channel ON cartoon.channel = tv_channel.id ORDER BY     cartoon.original_air_date DESC LIMIT 1;
SELECT tv_channel.package_option, tv_series.name AS series_name  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  WHERE tv_channel.hight_definition_tv = 1;
SELECT tv_channel.package_option, tv_channel.series_name FROM tv_channel WHERE tv_channel.hight_definition_tv = 1;
SELECT tv_channel.country FROM     cartoon JOIN     tv_channel ON cartoon.channel = tv_channel.id WHERE     cartoon.written_by = 'Todd Casey';
SELECT tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey';
SELECT tv_channel.country FROM tv_channel WHERE tv_channel.id NOT IN (SELECT cartoon.channel FROM cartoon WHERE cartoon.written_by = 'Todd Casey');
SELECT tv_channel.country FROM tv_channel WHERE tv_channel.id NOT IN (     SELECT cartoon.channel     FROM cartoon     WHERE cartoon.written_by = 'Todd Casey' );
SELECT tv_channel.series_name, tv_channel.country  FROM cartoon  JOIN tv_channel ON cartoon.channel = tv_channel.id  WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang') GROUP BY tv_channel.series_name, tv_channel.country;
SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  WHERE tv_channel.id IN (     SELECT cartoon.channel      FROM cartoon      WHERE cartoon.directed_by = 'Ben Jones'     INTERSECT     SELECT cartoon.channel      FROM cartoon      WHERE cartoon.directed_by = 'Michael Chang' );
SELECT tv_channel.pixel_aspect_ratio_par, tv_channel.country  FROM tv_channel  WHERE tv_channel.language <> 'English';
SELECT tv_channel.pixel_aspect_ratio_par, tv_channel.country FROM     tv_channel WHERE     tv_channel.language <> 'English';
SELECT tv_channel.id  FROM tv_channel  WHERE tv_channel.country IN (     SELECT tv_channel.country      FROM tv_channel      GROUP BY tv_channel.country      HAVING COUNT(tv_channel.id) > 2 );
SELECT tv_channel.id FROM tv_channel GROUP BY tv_channel.id HAVING COUNT(*) > 2;
SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id NOT IN (     SELECT     cartoon.channel     FROM     cartoon     WHERE     cartoon.directed_by = 'Ben Jones' );
SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by = 'Ben Jones' );
SELECT tv_channel.package_option FROM     tv_channel WHERE     tv_channel.id NOT IN (         SELECT             cartoon.channel         FROM             cartoon         WHERE             cartoon.directed_by = 'Ben Jones'     );
SELECT tv_channel.package_option FROM   tv_channel WHERE   tv_channel.id NOT IN (     SELECT       cartoon.channel     FROM       cartoon     WHERE       cartoon.directed_by = 'Ben Jones'   );
SELECT COUNT(poker_player_id) FROM poker_player;
SELECT COUNT(poker_player_id) FROM poker_player;
SELECT earnings FROM     poker_player ORDER BY     earnings DESC;
SELECT poker_player.earnings FROM     poker_player ORDER BY     earnings DESC;
SELECT final_table_made, best_finish FROM poker_player;
SELECT final_table_made, best_finish FROM poker_player;
SELECT AVG(earnings) FROM poker_player;
SELECT AVG(earnings) FROM poker_player;
SELECT money_rank FROM     poker_player WHERE     earnings = (         SELECT             MAX(earnings)         FROM             poker_player     );
SELECT money_rank     FROM      poker_player     ORDER BY      earnings DESC     LIMIT 1;
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id;
SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id;
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000;
SELECT people.name FROM     poker_player     INNER JOIN people ON poker_player.people_id = people.people_id WHERE     poker_player.earnings > 300000;
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made ASC;
SELECT people.name  FROM poker_player  JOIN people ON poker_player.people_id = people.people_id  ORDER BY poker_player.final_table_made ASC;
SELECT people.birth_date FROM     poker_player     INNER JOIN people ON poker_player.people_id = people.people_id ORDER BY     poker_player.earnings ASC LIMIT 1;
SELECT people.birth_date FROM     poker_player JOIN     people ON poker_player.people_id = people.people_id ORDER BY     poker_player.earnings ASC LIMIT 1;
SELECT poker_player.money_rank FROM     poker_player JOIN     people ON poker_player.people_id = people.people_id WHERE     people.height = (SELECT MAX(height) FROM people);
SELECT poker_player.money_rank FROM     poker_player JOIN     people ON poker_player.people_id = people.people_id ORDER BY     people.height DESC LIMIT 1;
SELECT AVG(earnings)  FROM   poker_player JOIN   people ON poker_player.people_id = people.people_id WHERE   height > 200;
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200;
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC;
SELECT people.name FROM     poker_player JOIN     people ON poker_player.people_id = people.people_id ORDER BY     poker_player.earnings DESC;
SELECT people.nationality, COUNT(people.people_id) AS num_people FROM people GROUP BY people.nationality;
SELECT nationality, COUNT(*) as count FROM people GROUP BY nationality;
SELECT nationality FROM     people GROUP BY     nationality ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT nationality FROM     people GROUP BY     nationality ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT DISTINCT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;
SELECT people.name, people.birth_date FROM people ORDER BY people.name ASC;
SELECT people.name, people.birth_date FROM people ORDER BY people.name ASC;
SELECT name FROM     people WHERE     nationality <> 'Russia';
SELECT name FROM people WHERE nationality <> 'Russia';
SELECT people.name FROM people WHERE people.people_id NOT IN (SELECT poker_player.people_id FROM poker_player)
SELECT people.name FROM   people LEFT JOIN   poker_player ON   people.people_id = poker_player.people_id WHERE   poker_player.people_id IS NULL;
SELECT COUNT(DISTINCT nationality) FROM people;
SELECT COUNT(DISTINCT nationality) FROM people;
SELECT COUNT(DISTINCT state) FROM area_code_state;
SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC;
SELECT votes.vote_id, votes.phone_number, votes.state FROM votes;
SELECT MAX(area_code), MIN(area_code) FROM area_code_state;
SELECT MAX(created) FROM votes WHERE state = 'CA';
SELECT contestant_name     FROM contestants     WHERE contestant_name != 'Jessie Alloway';
SELECT DISTINCT state, created FROM votes
SELECT contestants.contestant_number, contestants.contestant_name FROM     contestants INNER JOIN     votes ON     contestants.contestant_number = votes.contestant_number GROUP BY     contestants.contestant_number, contestants.contestant_name HAVING     COUNT(votes.contestant_number) >= 2;
SELECT contestants.contestant_number, contestants.contestant_name FROM     contestants JOIN     votes ON contestants.contestant_number = votes.contestant_number GROUP BY     contestants.contestant_number, contestants.contestant_name ORDER BY     COUNT(votes.vote_id) LIMIT 1;
SELECT COUNT(vote_id) FROM votes WHERE state IN ('NY', 'CA');
SELECT COUNT(*)  FROM contestants  WHERE contestant_number NOT IN (SELECT contestant_number FROM votes)
SELECT area_code_state.area_code FROM     area_code_state JOIN     votes ON votes.state = area_code_state.state GROUP BY     area_code_state.area_code ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT votes.created, votes.state, votes.phone_number FROM votes INNER JOIN contestants ON votes.contestant_number = contestants.contestant_number WHERE contestants.contestant_name = 'Tabatha Gehling';
SELECT area_code FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number JOIN area_code_state ON votes.state = area_code_state.state WHERE contestants.contestant_name = 'Tabatha Gehling' OR contestants.contestant_name = 'Kelly Clauss' GROUP BY area_code HAVING COUNT(DISTINCT contestants.contestant_name) = 2;
SELECT contestant_name FROM     contestants WHERE     contestant_name LIKE '%Al%';
SELECT country.name FROM     country WHERE     country.indepyear > 1950;
SELECT name FROM     country WHERE     indepyear > 1950;
SELECT COUNT(*)  FROM country  WHERE governmentform = 'Republic';
SELECT COUNT(DISTINCT name) FROM country WHERE governmentform = 'Republic';
SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean';
SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean';
SELECT continent     FROM      country     WHERE      name = 'Anguilla';
SELECT continent FROM     country WHERE     name = 'Anguilla';
SELECT region FROM     country WHERE     country.code = (         SELECT             countrycode         FROM             city         WHERE             name = 'Kabul'     );
SELECT district as region FROM city WHERE name = 'Kabul';
SELECT language FROM     countrylanguage WHERE     countrycode = 'ABW' ORDER BY     percentage DESC LIMIT 1;
SELECT countrylanguage.language FROM     countrylanguage JOIN     country ON countrylanguage.countrycode = country.code WHERE     country.name = 'Aruba' AND     countrylanguage.percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = 'ABW');
SELECT population, lifeexpectancy     FROM      country     WHERE      name = 'Brazil';
SELECT population, lifeexpectancy FROM     country WHERE     name = 'Brazil';
SELECT region, population FROM country WHERE name = 'Angola';
SELECT country.region, country.population  FROM country  WHERE country.name = 'Angola';
SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa';
SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND name = 'Central African Republic';
SELECT country.name FROM    country WHERE    country.continent = 'Asia' ORDER BY    country.lifeexpectancy LIMIT 1;
SELECT country.name FROM    country WHERE    continent = 'Asia' ORDER BY    lifeexpectancy LIMIT 1;
SELECT sum(country.population) AS total_population, max(country.GNP) AS maximum_GNP FROM country WHERE country.continent = 'Asia';
SELECT SUM(population) AS total_population, MAX(gnp) AS largest_gnp FROM country WHERE continent = 'Asia';
SELECT AVG(lifeexpectancy)  FROM country  WHERE continent = 'Africa'  AND governmentform = 'Republic';
SELECT AVG(lifeexpectancy)  FROM     country  WHERE     continent = 'Africa' AND governmentform = 'Republic';
SELECT SUM(surfacearea) AS total_surface_area FROM     country WHERE     continent IN ('Asia', 'Europe');
SELECT SUM(surfacearea)  FROM country  WHERE continent = 'Asia' OR continent = 'Europe';
SELECT SUM(population) FROM     city WHERE     district = 'Gelderland';
SELECT SUM(population)  FROM      city  WHERE      district = 'Gelderland';
SELECT AVG(gnp) AS average_gnp, SUM(population) AS total_population FROM country WHERE governmentform = 'US territory';
SELECT AVG(gnp) AS "avg (gnp)", SUM(population) AS "sum (population)" FROM country WHERE governmentform LIKE '%US territory%';
SELECT COUNT(DISTINCT language)  FROM countrylanguage;
SELECT COUNT(DISTINCT language) AS distinct_languages FROM countrylanguage;
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW';
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW';
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T';
SELECT COUNT(*)  FROM countrylanguage  WHERE countrycode = 'AFG'  AND isofficial = 'T';
SELECT country.name FROM     country JOIN     countrylanguage ON country.code = countrylanguage.countrycode GROUP BY     country.name ORDER BY     COUNT(countrylanguage.language) DESC LIMIT 1;
SELECT country.name FROM     country JOIN     countrylanguage ON country.code = countrylanguage.countrycode GROUP BY     country.name ORDER BY     COUNT(DISTINCT countrylanguage.language) DESC LIMIT 1;
SELECT continent FROM (     SELECT continent, COUNT(DISTINCT language) AS num_languages     FROM country     INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode     GROUP BY continent ) AS subquery ORDER BY num_languages DESC LIMIT 1;
SELECT continent FROM country GROUP BY continent HAVING COUNT(DISTINCT language) = (SELECT MAX(language_count) FROM (SELECT COUNT(DISTINCT language) as language_count FROM country GROUP BY continent));
SELECT COUNT(DISTINCT c.code) FROM country c JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.language = 'English' JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl2.language = 'Dutch';
SELECT COUNT(*) FROM (     SELECT countrycode FROM countrylanguage WHERE language = 'English'     INTERSECT     SELECT countrycode FROM countrylanguage WHERE language = 'Dutch' ) AS nations;
SELECT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'English'  AND countrylanguage.isofficial = 'T'  AND country.code IN (     SELECT countrycode      FROM countrylanguage      WHERE language = 'French'      AND isofficial = 'T' );
SELECT country.name  FROM country  WHERE country.code IN (     SELECT countrycode      FROM countrylanguage      WHERE language = 'English' AND isofficial = 'T' )  AND country.code IN (     SELECT countrycode      FROM countrylanguage      WHERE language = 'French' AND isofficial = 'T' );
SELECT country.name FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'French') AND countrylanguage.isofficial = 'T' GROUP BY country.name HAVING COUNT(DISTINCT countrylanguage.language) = 2;
SELECT country.name FROM country WHERE country.code IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' AND isofficial = 'T' ) AND country.code IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'French' AND isofficial = 'T' );
SELECT COUNT(DISTINCT country.continent) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Chinese';
SELECT COUNT(DISTINCT continent) FROM country WHERE code IN (   SELECT countrycode   FROM countrylanguage   WHERE language = 'Chinese' );
SELECT DISTINCT country.region  FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'Dutch');
SELECT DISTINCT region FROM country WHERE code IN (     SELECT countrycode     FROM countrylanguage     WHERE language IN ('Dutch', 'English') );
SELECT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch')  AND countrylanguage.isofficial = 'T';
SELECT country.name  FROM country  INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode  WHERE countrylanguage.isofficial = 'T'  AND (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch');
SELECT language FROM countrylanguage WHERE countrycode IN (     SELECT code     FROM country     WHERE continent = 'Asia' ) ORDER BY percentage DESC LIMIT 1;
SELECT language FROM     countrylanguage WHERE     countrycode IN (         SELECT             code         FROM             country         WHERE             continent = 'Asia'     ) GROUP BY     language ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT language FROM     countrylanguage WHERE     countrycode IN (         SELECT             code         FROM             country         WHERE             governmentform = 'Republic'     ) GROUP BY     language HAVING     COUNT(DISTINCT countrycode) = 1;
SELECT language FROM countrylanguage WHERE countrycode IN (   SELECT code   FROM country   WHERE governmentform = 'Republic' ) GROUP BY language HAVING COUNT(DISTINCT countrycode) = 1;
SELECT city.name, city.population FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1;
SELECT city.name, city.population FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1;
SELECT country.name, country.population, country.lifeexpectancy FROM     country WHERE     country.continent = 'Asia' ORDER BY     country.surfacearea DESC LIMIT 1;
SELECT country.name, country.population, country.lifeexpectancy FROM country WHERE country.continent = 'Asia' ORDER BY country.surfacearea DESC LIMIT 1;
SELECT AVG(lifeexpectancy)  FROM      country WHERE      code NOT IN (         SELECT             countrycode         FROM             countrylanguage         WHERE             language = 'English'             AND isofficial = 'T'     );
SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' AND isofficial = 'T' )
SELECT SUM(country.population) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language != 'English';
SELECT SUM(country.population) FROM country WHERE country.code NOT IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' );
SELECT countrylanguage.language  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.headofstate = 'Beatrix'  AND countrylanguage.isofficial = 1;
SELECT countrylanguage.language FROM     country JOIN     countrylanguage ON countrylanguage.countrycode = country.code WHERE     country.headofstate = 'Beatrix'     AND     countrylanguage.isofficial = 'T';
SELECT COUNT(DISTINCT countrylanguage.language) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.indepyear < 1930 AND countrylanguage.isofficial = 'T';
SELECT COUNT(DISTINCT language) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE indepyear < 1930 AND isofficial = 'T';
SELECT c1.name FROM country c1 WHERE c1.surfacearea > (SELECT MAX(c2.surfacearea) FROM country c2 WHERE c2.continent = 'Europe');
SELECT country.name FROM country WHERE country.surfacearea > (     SELECT MAX(surfacearea)     FROM country     WHERE country.continent = 'Europe' );
SELECT c1.name  FROM country c1  WHERE c1.continent = 'Africa'  AND c1.population < (SELECT MIN(c2.population)                       FROM country c2                       WHERE c2.continent = 'Asia');
SELECT country.name FROM     country WHERE     country.continent = 'Africa' AND     country.population < (         SELECT             MIN(population)         FROM             country         WHERE             continent = 'Asia'     );
SELECT country.name FROM   country WHERE   country.continent = 'Asia'   AND country.population > (     SELECT       MAX(country.population)     FROM       country     WHERE       country.continent = 'Africa'   );
SELECT name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa');
SELECT country.code FROM country WHERE country.code NOT IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' );
SELECT country.code  FROM country  WHERE country.code NOT IN (     SELECT countrycode      FROM countrylanguage      WHERE language = 'English' );
SELECT DISTINCT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.code NOT IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' );
SELECT country.code FROM country WHERE country.code NOT IN (     SELECT country.code     FROM country     JOIN countrylanguage ON country.code = countrylanguage.countrycode     WHERE countrylanguage.language = 'English' );
SELECT country.code FROM   country WHERE   country.code NOT IN (     SELECT       countrycode     FROM       countrylanguage     WHERE       language = 'English'   )   AND governmentform <> 'Republic';
SELECT country.code FROM     country WHERE     country.code NOT IN (         SELECT             countrycode         FROM             countrylanguage         WHERE             language = 'English'     )     AND governmentform <> 'Republic';
SELECT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Europe'  AND countrylanguage.language <> 'English'  AND countrylanguage.isofficial = 'F';
SELECT city.name FROM city WHERE city.district = 'Europe' AND city.name NOT IN (     SELECT city.name     FROM city     INNER JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode     WHERE countrylanguage.language = 'English'     AND countrylanguage.isofficial = 'T' ) ORDER BY city.name;
SELECT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 'T'  GROUP BY city.name;
SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T';
SELECT country.name, country.indepyear, country.surfacearea  FROM country  WHERE country.population = (SELECT MIN(population) FROM country);
SELECT country.name, country.indepyear, country.surfacearea  FROM country  WHERE country.population = (SELECT MIN(population) FROM country);
SELECT country.name, country.population, country.headofstate FROM country WHERE country.surfacearea = (SELECT MAX(surfacearea) FROM country);
SELECT name, population, headofstate FROM country ORDER BY surfacearea DESC LIMIT 1;
SELECT COUNT(countrylanguage.language), country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(countrylanguage.language) >= 3;
SELECT country.name, COUNT(countrylanguage.language) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(countrylanguage.language) > 2;
SELECT COUNT(*) AS count, district FROM city GROUP BY district HAVING population > (SELECT AVG(population) FROM city);
SELECT COUNT(*) as city_count, district FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;
SELECT country.governmentform, SUM(country.population) AS total_population  FROM country  WHERE country.governmentform IN (     SELECT governmentform      FROM country      GROUP BY governmentform      HAVING AVG(lifeexpectancy) > 72 ) GROUP BY country.governmentform;
SELECT country.governmentform,              SUM(country.population) AS total_population             FROM              country             WHERE              country.governmentform IN (                SELECT                  governmentform                FROM                  country                WHERE                  lifeexpectancy > 72                GROUP BY                  governmentform              )             GROUP BY              country.governmentform;
SELECT SUM(population) AS total_population, AVG(lifeexpectancy) AS avg_life_expectancy, continent FROM country GROUP BY continent HAVING avg_life_expectancy < 72;
SELECT continent, SUM(population) as total_population, AVG(lifeexpectancy) as average_life_expectancy  FROM country  GROUP BY continent  HAVING AVG(lifeexpectancy) < 72;
SELECT country.name, country.surfacearea     FROM      country     ORDER BY      country.surfacearea DESC     LIMIT 5;
SELECT country.name, country.surfacearea FROM    country ORDER BY    country.surfacearea DESC LIMIT 5;
SELECT country.name FROM     country ORDER BY     country.population DESC LIMIT 3;
SELECT country.name FROM    country ORDER BY    country.population DESC LIMIT 3;
SELECT country.name FROM     country ORDER BY     population LIMIT 3;
SELECT country.name FROM      country ORDER BY      country.population ASC LIMIT 3;
SELECT COUNT(*)  FROM country  WHERE continent = 'Asia';
SELECT COUNT(*)  FROM      country  WHERE      continent = 'Asia';
SELECT country.name FROM    country WHERE    country.continent = 'Europe' AND country.population = 80000;
SELECT country.name FROM country WHERE country.continent = 'Europe' AND country.population = 80000;
SELECT SUM(country.population) AS sum_population, AVG(country.surfacearea) AS avg_area FROM country WHERE country.continent = 'North America' AND country.surfacearea > 3000;
SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_surface_area FROM country WHERE continent = 'North America' AND surfacearea > 3000;
SELECT city.name FROM city WHERE city.population BETWEEN 160000 AND 900000;
SELECT city.name FROM   city WHERE   city.population BETWEEN 160000 AND 900000;
SELECT language FROM     countrylanguage GROUP BY     language ORDER BY     COUNT(DISTINCT countrycode) DESC LIMIT 1;
SELECT language FROM     countrylanguage GROUP BY     language ORDER BY     COUNT(DISTINCT countrycode) DESC LIMIT 1;
SELECT country.name, countrylanguage.language, MAX(countrylanguage.percentage)  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  GROUP BY country.name;
SELECT cl.language, cl.countrycode, MAX(cl.percentage) FROM countrylanguage cl INNER JOIN (   SELECT countrycode, MAX(percentage) AS max_percentage   FROM countrylanguage   GROUP BY countrycode ) mx ON cl.countrycode = mx.countrycode AND cl.percentage = mx.max_percentage GROUP BY cl.countrycode;
SELECT COUNT(*) FROM (     SELECT country.name     FROM country     JOIN countrylanguage ON country.code = countrylanguage.countrycode     WHERE countrylanguage.language = 'Spanish'     GROUP BY country.name     HAVING countrylanguage.percentage = MAX(countrylanguage.percentage) ) AS subquery;
SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'Spanish' AND percentage > 50;
SELECT countrylanguage.countrycode, MAX(countrylanguage.percentage) FROM countrylanguage WHERE countrylanguage.language = 'Spanish';
SELECT countrylanguage.countrycode, MAX(countrylanguage.percentage)  FROM countrylanguage  WHERE countrylanguage.language = 'Spanish'  GROUP BY countrylanguage.countrycode  HAVING MAX(countrylanguage.percentage) >= 50;
SELECT COUNT(*) FROM conductor;
SELECT COUNT(conductor_id) FROM conductor;
SELECT conductor.name FROM   conductor ORDER BY   conductor.age ASC;
SELECT conductor.name FROM  conductor ORDER BY  conductor.age;
SELECT conductor.name FROM   conductor WHERE   conductor.nationality != "USA";
SELECT conductor.name FROM   conductor WHERE   conductor.nationality != 'USA';
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;
SELECT DISTINCT orchestra.record_company FROM orchestra ORDER BY orchestra.year_of_founded DESC;
SELECT AVG(attendance) FROM show;
SELECT AVG(attendance) FROM show;
SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final';
SELECT MAX(share) AS max_share, MIN(share) AS min_share FROM performance WHERE type != 'Live final';
SELECT COUNT(DISTINCT nationality)  FROM conductor;
SELECT COUNT(DISTINCT nationality) FROM conductor;
SELECT conductor.name FROM     conductor ORDER BY     conductor.year_of_work DESC;
SELECT conductor.name FROM     conductor ORDER BY     conductor.year_of_work DESC;
SELECT name     FROM conductor     ORDER BY year_of_work DESC     LIMIT 1;
SELECT conductor.name FROM conductor GROUP BY conductor.name ORDER BY MAX(conductor.year_of_work) - MIN(conductor.year_of_work) DESC LIMIT 1;
SELECT conductor.name, orchestra.orchestra     FROM      conductor     JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;
SELECT conductor.name AS conductor_name, orchestra.orchestra AS orchestra_name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;
SELECT name  FROM conductor  WHERE conductor_id IN (     SELECT conductor_id      FROM orchestra      GROUP BY conductor_id      HAVING COUNT(DISTINCT orchestra_id) > 1 );
SELECT conductor.name     FROM conductor     INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id     GROUP BY conductor.name     HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1;
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name HAVING COUNT(DISTINCT orchestra.orchestra) = (   SELECT COUNT(DISTINCT orchestra.orchestra)   FROM conductor   JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id   GROUP BY conductor.name   ORDER BY COUNT(DISTINCT orchestra.orchestra) DESC   LIMIT 1 );
SELECT conductor.name FROM conductor INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY COUNT(DISTINCT orchestra.orchestra_id) DESC LIMIT 1;
SELECT conductor.name FROM   conductor JOIN   orchestra ON orchestra.conductor_id = conductor.conductor_id WHERE   orchestra.year_of_founded > 2008;
SELECT conductor.name FROM   conductor JOIN   orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE   orchestra.year_of_founded > 2008;
SELECT record_company, COUNT(orchestra) as num_orchestras FROM orchestra GROUP BY record_company;
SELECT record_company,     COUNT(DISTINCT orchestra) AS num_orchestras FROM     orchestra GROUP BY     record_company;
SELECT orchestra.major_record_format FROM   orchestra GROUP BY   orchestra.major_record_format ORDER BY   COUNT(*) ASC;
SELECT major_record_format, COUNT(*) AS frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC;
SELECT orchestra.record_company FROM orchestra GROUP BY orchestra.record_company ORDER BY COUNT(*) DESC LIMIT 1;
SELECT record_company FROM   orchestra GROUP BY   record_company ORDER BY   COUNT(orchestra) DESC LIMIT 1;
SELECT orchestra FROM   orchestra WHERE   orchestra_id NOT IN (     SELECT       orchestra_id     FROM       performance   );
SELECT orchestra FROM orchestra LEFT JOIN performance ON orchestra.orchestra_id = performance.orchestra_id WHERE performance.performance_id IS NULL;
SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded > 2003;
SELECT record_company FROM   orchestra WHERE   year_of_founded < 2003   AND record_company IN (     SELECT record_company     FROM orchestra     WHERE year_of_founded > 2003   );
SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format IN ('CD', 'DVD');
SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format IN ('CD', 'DVD');
SELECT year_of_founded FROM orchestra WHERE orchestra_id IN ( SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1 );
SELECT orchestra.year_of_founded FROM orchestra JOIN (     SELECT performance.orchestra_id     FROM performance     GROUP BY performance.orchestra_id     HAVING COUNT(DISTINCT performance.performance_id) > 1 ) AS multiple_performances ON orchestra.orchestra_id = multiple_performances.orchestra_id;
SELECT COUNT(*) FROM highschooler;
SELECT COUNT(*) FROM highschooler;
SELECT name, grade     FROM highschooler;
SELECT name, grade FROM highschooler;
SELECT grade FROM highschooler;
SELECT grade FROM highschooler;
SELECT grade FROM   highschooler WHERE   name = 'Kyle';
SELECT grade FROM     highschooler WHERE     name = 'Kyle';
SELECT name FROM highschooler WHERE grade = 10;
SELECT name FROM highschooler WHERE grade = 10;
SELECT id FROM highschooler WHERE name = 'Kyle';
SELECT id FROM highschooler WHERE name = 'Kyle';
SELECT COUNT(*)  FROM highschooler  WHERE grade IN (9, 10);
SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);
SELECT grade, COUNT(*) AS count FROM highschooler GROUP BY grade;
SELECT grade, COUNT(name) FROM highschooler GROUP BY grade;
SELECT grade FROM     highschooler GROUP BY     grade ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT grade FROM     highschooler GROUP BY     grade ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT highschooler.id, COUNT(friend.friend_id) FROM   highschooler JOIN   friend ON friend.student_id = highschooler.id GROUP BY   highschooler.id;
SELECT student_id, COUNT(*) FROM friend GROUP BY student_id;
SELECT highschooler.name, COUNT(friend.friend_id) AS friend_count FROM highschooler LEFT JOIN friend ON friend.student_id = highschooler.id GROUP BY highschooler.name;
SELECT highschooler.name, COUNT(friend.friend_id)  FROM highschooler  LEFT JOIN friend ON friend.student_id = highschooler.id  GROUP BY highschooler.name;
SELECT name FROM     highschooler WHERE     id IN (         SELECT             student_id         FROM             friend         GROUP BY             student_id         HAVING             COUNT(friend_id) = (                 SELECT                     MAX(friend_count)                 FROM                     (                         SELECT                             COUNT(friend_id) AS friend_count                         FROM                             friend                         GROUP BY                             student_id                     ) AS counts             )     ) LIMIT 1;
SELECT name FROM     highschooler WHERE     id IN (         SELECT             student_id         FROM             friend         GROUP BY             student_id         ORDER BY             COUNT(friend_id) DESC         LIMIT 1     )
SELECT name FROM highschooler WHERE id IN (     SELECT student_id     FROM friend     GROUP BY student_id     HAVING COUNT(friend_id) >= 3 );
SELECT highschooler.name FROM highschooler JOIN friend ON friend.student_id = highschooler.id GROUP BY highschooler.name HAVING COUNT(friend.friend_id) >= 3;
SELECT highschooler.name  FROM highschooler  JOIN friend ON friend.friend_id = highschooler.id  WHERE friend.student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT h2.name FROM highschooler h1 JOIN friend f ON f.student_id = h1.id JOIN highschooler h2 ON h2.id = f.friend_id WHERE h1.name = 'Kyle';
SELECT COUNT(*)  FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')
SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT highschooler.id FROM highschooler WHERE highschooler.id NOT IN (SELECT friend.student_id FROM friend)
SELECT id      FROM highschooler      WHERE id NOT IN (SELECT student_id FROM friend)
SELECT name FROM     highschooler WHERE     id NOT IN (         SELECT             student_id         FROM             friend     );
SELECT name FROM highschooler WHERE id NOT IN (SELECT friend_id FROM friend) AND id NOT IN (SELECT student_id FROM friend)
SELECT highschooler.id FROM highschooler WHERE highschooler.id IN (     SELECT     friend.student_id     FROM     friend ) AND highschooler.id IN (     SELECT     likes.liked_id     FROM     likes ) ;
SELECT DISTINCT f.student_id FROM friend AS f INNER JOIN likes AS l ON f.student_id = l.student_id;
SELECT DISTINCT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON h.id = l.student_id WHERE h.id IN (SELECT friend_id FROM friend) AND h.id IN (SELECT liked_id FROM likes);
SELECT name  FROM highschooler  WHERE id IN (     SELECT DISTINCT student_id      FROM friend      WHERE student_id IN (         SELECT DISTINCT liked_id          FROM likes     ) );
SELECT student_id, COUNT(*) AS likes_count FROM likes GROUP BY student_id;
SELECT student_id, COUNT(*) as num_likes FROM likes GROUP BY student_id;
SELECT highschooler.name, COUNT(*)  FROM highschooler  JOIN likes ON highschooler.id = likes.student_id  GROUP BY highschooler.name;
SELECT highschooler.name, COUNT(*) FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name;
SELECT highschooler.name FROM     highschooler WHERE     highschooler.id IN (         SELECT             likes.student_id         FROM             likes         GROUP BY             likes.student_id         ORDER BY             COUNT(*) DESC         LIMIT 1     );
SELECT highschooler.name FROM    highschooler WHERE    highschooler.id = (       SELECT          likes.student_id       FROM          likes       GROUP BY          likes.student_id       ORDER BY          COUNT(*) DESC       LIMIT 1    );
SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) >= 2;
SELECT highschooler.name FROM highschooler JOIN likes ON likes.student_id = highschooler.id GROUP BY highschooler.name HAVING COUNT(likes.student_id) >= 2;
SELECT name FROM highschooler WHERE grade > 5 AND id IN (     SELECT student_id     FROM friend     GROUP BY student_id     HAVING COUNT(friend_id) >= 2 );
SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  WHERE h.grade > 5  GROUP BY h.name  HAVING COUNT(f.friend_id) >= 2;
SELECT COUNT(*) FROM   likes JOIN   highschooler ON likes.student_id = highschooler.id WHERE   highschooler.name = 'Kyle';
SELECT count(*) FROM likes JOIN highschooler ON likes.student_id = highschooler.id WHERE highschooler.name = 'Kyle';
SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend)
SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend)
SELECT MIN(grade) FROM highschooler WHERE id NOT IN (     SELECT student_id     FROM friend )
SELECT MIN(grade) FROM highschooler WHERE id NOT IN (   SELECT student_id FROM friend )
SELECT state FROM owners WHERE state IN (SELECT state FROM professionals) GROUP BY state HAVING COUNT(DISTINCT owner_id) > 0 AND COUNT(DISTINCT professional_id) > 0;
SELECT owners.state FROM owners WHERE owners.state IN (     SELECT professionals.state     FROM professionals     UNION     SELECT owners.state     FROM owners );
SELECT AVG(age) FROM dogs WHERE dog_id IN (   SELECT dog_id   FROM treatments )
SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT DISTINCT dog_id FROM treatments);
SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (     SELECT professional_id     FROM treatments     GROUP BY professional_id     HAVING COUNT(*) > 2 )
SELECT professionals.professional_id, professionals.last_name, professionals.cell_number FROM professionals WHERE professionals.state = 'Indiana' OR (SELECT COUNT(*) FROM treatments WHERE treatments.professional_id = professionals.professional_id) > 2;
SELECT dogs.name FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.name HAVING SUM(treatments.cost_of_treatment) <= 1000;
SELECT dogs.name FROM dogs LEFT JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.name HAVING SUM(treatments.cost_of_treatment) <= 1000;
SELECT first_name FROM (     SELECT first_name FROM professionals     UNION     SELECT first_name FROM owners ) AS names WHERE first_name NOT IN (     SELECT first_name FROM dogs );
SELECT DISTINCT first_name FROM professionals WHERE first_name NOT IN (    SELECT first_name    FROM owners ) UNION SELECT DISTINCT first_name FROM owners WHERE first_name NOT IN (    SELECT name    FROM dogs )
SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals WHERE professionals.professional_id NOT IN ( SELECT treatments.professional_id FROM treatments )
SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals LEFT JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.treatment_id IS NULL;
SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id, owners.first_name, owners.last_name ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;
SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id, owners.first_name, owners.last_name ORDER BY COUNT(dogs.owner_id) DESC LIMIT 1;
SELECT professionals.professional_id, professionals.role_code, professionals.first_name FROM professionals WHERE professionals.professional_id IN (     SELECT professional_id     FROM treatments     GROUP BY professional_id     HAVING COUNT(*) >= 2 );
SELECT professionals.professional_id, professionals.role_code, professionals.first_name FROM professionals INNER JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY professionals.professional_id, professionals.role_code, professionals.first_name HAVING COUNT(treatments.treatment_id) >= 2;
SELECT breed_name FROM     breeds WHERE     breed_code IN (         SELECT             breed_code         FROM             dogs         GROUP BY             breed_code         ORDER BY             COUNT(*) DESC         LIMIT 1     );
SELECT breeds.breed_name FROM     breeds INNER JOIN     dogs ON breeds.breed_code = dogs.breed_code GROUP BY     breeds.breed_name ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY COUNT(treatments.cost_of_treatment) DESC LIMIT 1;
SELECT owners.owner_id, owners.last_name  FROM owners  JOIN dogs ON dogs.owner_id = owners.owner_id  JOIN treatments ON treatments.dog_id = dogs.dog_id  GROUP BY owners.owner_id, owners.last_name  ORDER BY SUM(treatments.cost_of_treatment) DESC  LIMIT 1;
SELECT treatment_types.treatment_type_description FROM     treatment_types JOIN     treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY     treatment_types.treatment_type_description ORDER BY     SUM(treatments.cost_of_treatment) ASC LIMIT 1;
SELECT treatment_types.description  FROM treatment_types  INNER JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code  GROUP BY treatment_types.description  HAVING SUM(treatments.cost_of_treatment) = (SELECT MIN(total_cost)                                              FROM (SELECT SUM(cost_of_treatment) AS total_cost                                                    FROM treatments                                                    GROUP BY treatment_type_code) AS subquery);
SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(dogs.weight) DESC LIMIT 1;
SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;
SELECT professionals.professional_id, professionals.cell_number  FROM professionals  INNER JOIN treatments ON professionals.professional_id = treatments.professional_id  GROUP BY professionals.professional_id, professionals.cell_number  HAVING COUNT(DISTINCT treatments.treatment_type_code) >= 2;
SELECT professionals.professional_id, professionals.cell_number FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id, professionals.cell_number HAVING COUNT(DISTINCT treatments.treatment_type_code) >= 2;
SELECT professionals.first_name, professionals.last_name  FROM professionals  WHERE professionals.professional_id IN (     SELECT treatments.professional_id     FROM treatments     WHERE treatments.cost_of_treatment < (         SELECT AVG(cost_of_treatment)          FROM treatments     ) )
SELECT first_name, last_name FROM professionals WHERE professional_id IN (     SELECT professional_id FROM treatments WHERE cost_of_treatment < (         SELECT AVG(cost_of_treatment) FROM treatments     ) );
SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id;
SELECT treatments.date_of_treatment, professionals.first_name FROM treatments INNER JOIN professionals ON treatments.professional_id = professionals.professional_id;
SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT cost_of_treatment, treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT owners.first_name, owners.last_name, dogs.size_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id;
SELECT owners.first_name, owners.last_name, sizes.size_code FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN sizes ON dogs.size_code = sizes.size_code;
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id;
SELECT owners.first_name, dogs.name FROM owners INNER JOIN dogs ON dogs.owner_id = owners.owner_id;
SELECT dogs.name, treatments.date_of_treatment  FROM dogs  JOIN breeds ON dogs.breed_code = breeds.breed_code  JOIN treatments ON treatments.dog_id = dogs.dog_id  WHERE breeds.breed_code = (     SELECT breed_code      FROM breeds      GROUP BY breed_code      ORDER BY COUNT(*) ASC      LIMIT 1 );
SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON treatments.dog_id = dogs.dog_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY dogs.name, treatments.date_of_treatment HAVING COUNT(*) = 1 ORDER BY breeds.breed_name LIMIT 1;
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.owner_id IN (SELECT owner_id FROM owners WHERE location = 'Virginia');
SELECT owners.first_name, dogs.name     FROM owners     INNER JOIN dogs ON owners.owner_id = dogs.owner_id     WHERE owners.state = 'Virginia';
SELECT dogs.date_arrived, dogs.date_departed  FROM dogs  WHERE dogs.dog_id IN (SELECT dog_id FROM treatments);
SELECT dogs.date_arrived, dogs.date_departed  FROM dogs  WHERE dogs.dog_id IN (SELECT dog_id FROM treatments);
SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE dogs.date_of_birth = (SELECT MIN(date_of_birth) FROM dogs)  ORDER BY dogs.date_of_birth ASC  LIMIT 1;
SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.date_of_birth = (     SELECT MIN(date_of_birth)     FROM dogs ) LIMIT 1;
SELECT email_address FROM     professionals WHERE     state = 'Hawaii'     OR state = 'Wisconsin';
SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';
SELECT dogs.date_arrived, dogs.date_departed FROM dogs;
SELECT dogs.date_arrived, dogs.date_departed FROM dogs;
SELECT COUNT(DISTINCT dog_id) FROM treatments;
SELECT COUNT(DISTINCT dogs.dog_id)  FROM dogs  JOIN treatments ON dogs.dog_id = treatments.dog_id;
SELECT COUNT(DISTINCT professional_id)  FROM treatments;
SELECT COUNT(DISTINCT professional_id) FROM treatments;
SELECT professionals.role_code, professionals.street, professionals.city, professionals.state FROM professionals WHERE professionals.city LIKE '%West%';
SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%';
SELECT owners.first_name, owners.last_name, owners.email_address FROM owners WHERE owners.state LIKE '%North%';
SELECT owners.first_name, owners.last_name, owners.email_address FROM owners WHERE owners.state LIKE '%North%';
SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs);
SELECT COUNT(*)  FROM dogs  WHERE age < (SELECT AVG(age) FROM dogs);
SELECT treatments.cost_of_treatment FROM treatments WHERE treatments.treatment_date = (SELECT MAX(treatment_date) FROM treatments);
SELECT treatments.cost_of_treatment FROM treatments ORDER BY treatments.date_of_treatment DESC LIMIT 1;
SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)
SELECT COUNT(*) FROM dogs WHERE dogs.owner_id NOT IN (SELECT DISTINCT dog_id FROM treatments);
SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM dogs WHERE date_departed IS NULL)
SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs WHERE date_departed IS NULL);
SELECT COUNT(DISTINCT professionals.professional_id) FROM professionals LEFT JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.professional_id IS NULL;
SELECT COUNT(DISTINCT professional_id) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments);
SELECT dogs.name, dogs.age, dogs.weight     FROM dogs     WHERE dogs.abandoned_yn = 1;
SELECT dogs.name, dogs.age, dogs.weight FROM dogs WHERE dogs.abandoned_yn = 1;
SELECT AVG(age) AS average_age FROM dogs;
SELECT AVG(age) FROM dogs;
SELECT MAX(age) FROM dogs;
SELECT MAX(age) AS oldest_age FROM dogs;
SELECT charge_type, charge_amount  FROM charges;
SELECT charge_type, charge_amount FROM charges;
SELECT MAX(charge_amount) FROM charges;
SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1;
SELECT email_address, cell_number, home_phone FROM professionals;
SELECT professionals.email_address, professionals.cell_number, professionals.home_phone FROM professionals;
SELECT breeds.breed_code, sizes.size_code FROM breeds, sizes, dogs WHERE dogs.breed_code = breeds.breed_code AND dogs.size_code = sizes.size_code;
SELECT DISTINCT dogs.breed_code, dogs.size_code FROM dogs
SELECT professionals.first_name, treatment_types.treatment_type_description  FROM professionals  JOIN treatments ON treatments.professional_id = professionals.professional_id  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT professionals.first_name, treatments.description  FROM professionals  INNER JOIN treatments ON treatments.professional_id = professionals.professional_id;
SELECT COUNT(*) AS total_singers FROM singer;
SELECT COUNT(singer_id) FROM singer;
SELECT name FROM   singer ORDER BY   net_worth_millions ASC;
SELECT name FROM singer ORDER BY net_worth_millions ASC;
SELECT birth_year, citizenship FROM singer;
SELECT birth_year, citizenship FROM singer;
SELECT name FROM singer WHERE citizenship <> 'France';
SELECT name FROM singer WHERE citizenship <> 'French';
SELECT name FROM singer WHERE birth_year IN (1948, 1949);
SELECT name FROM     singer WHERE     birth_year IN (1948, 1949);
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;
SELECT name     FROM      singer     ORDER BY      net_worth_millions DESC     LIMIT 1;
SELECT citizenship, COUNT(DISTINCT singer_id) FROM     singer GROUP BY     citizenship;
SELECT citizenship, COUNT(singer_id)     FROM      singer     GROUP BY      citizenship;
SELECT citizenship FROM     singer GROUP BY     citizenship ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT citizenship FROM     singer GROUP BY     citizenship ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT citizenship,     MAX(net_worth_millions) AS max_net_worth FROM     singer GROUP BY     citizenship;
SELECT citizenship,      MAX(net_worth_millions) AS max_net_worth FROM singer GROUP BY citizenship;
SELECT song.title, singer.name FROM     song     JOIN singer ON song.singer_id = singer.singer_id;
SELECT song.title, singer.name FROM     song JOIN     singer ON song.singer_id = singer.singer_id;
SELECT DISTINCT singer.name FROM     song JOIN     singer ON song.singer_id = singer.singer_id WHERE     song.sales > 300000;
SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000;
SELECT name FROM singer WHERE singer_id IN (     SELECT singer_id     FROM song     GROUP BY singer_id     HAVING COUNT(*) > 1 );
SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(song_id) > 1);
SELECT singer.name, SUM(song.sales) as total_sales FROM singer JOIN song ON song.singer_id = singer.singer_id GROUP BY singer.name;
SELECT singer.name, SUM(song.sales) AS total_sales FROM singer  JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name;
SELECT singer.name FROM     singer LEFT JOIN     song ON     singer.singer_id = song.singer_id WHERE     song.song_id IS NULL;
SELECT singer.name FROM singer LEFT JOIN song ON singer.singer_id = song.singer_id WHERE song.singer_id IS NULL;
SELECT citizenship  FROM singer  WHERE birth_year < 1945  INTERSECT  SELECT citizenship  FROM singer  WHERE birth_year > 1955;
SELECT citizenship     FROM singer     WHERE birth_year < 1945     INTERSECT     SELECT citizenship     FROM singer     WHERE birth_year > 1955;
SELECT COUNT(*) as total_available_features FROM other_available_features;
SELECT ref_feature_types.feature_type_name FROM other_available_features JOIN ref_feature_types ON other_available_features.feature_type_code = ref_feature_types.feature_type_code WHERE other_available_features.feature_name = 'AirCon';
SELECT DISTINCT ref_property_types.property_type_description  FROM properties  JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code  WHERE properties.property_type_code = [desired property code];
SELECT properties.property_name  FROM properties  JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code  WHERE ref_property_types.property_type IN ('house', 'apartment')  AND properties.room_count > 1;
