SELECT COUNT(DISTINCT singer_id) AS total_singers FROM singer;
SELECT COUNT(*) AS total_singers FROM singer;
SELECT name, country, age FROM singer ORDER BY age DESC;
SELECT name, country, age     FROM singer     ORDER BY age DESC;
SELECT AVG(age) AS average_age,     MIN(age) AS minimum_age,     MAX(age) AS maximum_age FROM singer WHERE country = 'France';
SELECT AVG(age) as average_age, MIN(age) as minimum_age, MAX(age) as maximum_age FROM singer WHERE country = 'France';
SELECT singer.name, singer.song_release_year  FROM singer INNER JOIN (     SELECT MIN(age) AS min_age     FROM singer ) AS youngest ON singer.age = youngest.min_age LIMIT 1;
SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer)
SELECT DISTINCT country FROM singer WHERE age > 20;
SELECT DISTINCT country FROM singer WHERE age > 20;
SELECT country, COUNT(name) AS singer_count     FROM     singer     GROUP BY     country;
SELECT country,      COUNT(name) AS singer_count      FROM singer      GROUP BY country;
SELECT song.name             FROM singer             JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id             JOIN concert ON singer_in_concert.concert_id = concert.concert_id             JOIN stadium ON concert.stadium_id = stadium.stadium_id             JOIN song ON concert.song_id = song.song_id             WHERE singer.age > (SELECT AVG(age) FROM singer);
SELECT song_name FROM     singer WHERE     age > (SELECT AVG(age) FROM singer)
SELECT location, name FROM     stadium WHERE     capacity BETWEEN 5000 AND 10000;
SELECT location, name FROM      stadium WHERE      capacity BETWEEN 5000 AND 10000;
SELECT MAX(capacity) AS max_capacity, AVG(capacity) AS average_capacity FROM stadium;
SELECT AVG(capacity), MAX(capacity) FROM stadium;
SELECT stadium.name, stadium.capacity FROM stadium WHERE stadium.average = (   SELECT MAX(average)   FROM stadium )
SELECT stadium.name, stadium.capacity FROM stadium WHERE stadium.average = (SELECT MAX(average) FROM stadium);
SELECT COUNT(*) FROM concert WHERE year IN (2014, 2015);
SELECT COUNT(concert_id) FROM concert WHERE year IN (2014, 2015);
SELECT stadium.name, COUNT(*) FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.stadium_id;
SELECT stadium.name, COUNT(concert.concert_id)  FROM stadium  JOIN concert ON stadium.stadium_id = concert.stadium_id  GROUP BY stadium.stadium_id;
SELECT stadium.name, stadium.capacity     FROM     stadium     JOIN concert ON stadium.stadium_id = concert.stadium_id     WHERE     concert.year >= 2014     GROUP BY     stadium.name, stadium.capacity     ORDER BY     COUNT(concert.concert_id) DESC     LIMIT 1;
SELECT name, capacity              FROM stadium              WHERE stadium_id IN (                 SELECT stadium_id                  FROM concert                  WHERE concert_date > '2013-01-01'                  GROUP BY stadium_id                  HAVING COUNT(*) = (                     SELECT MAX(concert_count)                      FROM (                         SELECT stadium_id, COUNT(*) AS concert_count                          FROM concert                          WHERE concert_date > '2013-01-01'                          GROUP BY stadium_id                     )                 )             );
SELECT year     FROM concert     GROUP BY year     ORDER BY COUNT(*) DESC     LIMIT 1;
SELECT year  FROM      concert  GROUP BY      year  ORDER BY      COUNT(*) DESC  LIMIT 1;
SELECT stadium.stadium_name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.stadium_id IS NULL;
SELECT stadium.name FROM stadium WHERE stadium.stadium_id NOT IN (SELECT concert.stadium_id FROM concert)
SELECT country  FROM singer  WHERE age > 40  AND country IN (SELECT country FROM singer WHERE age < 30);
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014);
SELECT stadium.name  FROM stadium  WHERE stadium.stadium_id NOT IN (    SELECT concert.stadium_id     FROM concert     WHERE concert.year = 2014 );
SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) as num_singers  FROM concert  JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id  GROUP BY concert.concert_name, concert.theme;
SELECT concert_name, theme, COUNT(DISTINCT singer_id)  FROM concert  JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id  GROUP BY concert_name, theme;
SELECT singer.name, COUNT(*) FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY singer.name;
SELECT singer.name, COUNT(concert.concert_id) as concert_count FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY singer.name;
SELECT singer.name FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id JOIN singer ON singer_in_concert.singer_id = singer.singer_id WHERE concert.year = 2014;
SELECT singer.name FROM    singer INNER JOIN    singer_in_concert ON singer.singer_id = singer_in_concert.singer_id INNER JOIN    concert ON singer_in_concert.concert_id = concert.concert_id WHERE    concert.year = 2014;
SELECT name, country     FROM singer     WHERE song_name LIKE '%Hey%';
SELECT singer.name, singer.country     FROM      singer     WHERE      song_name LIKE '%Hey%';
SELECT stadium.name, stadium.location FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014 INTERSECT SELECT stadium.name, stadium.location FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2015;
SELECT stadium.name, stadium.location FROM     concert     INNER JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE     concert.year = 2014     INTERSECT SELECT     stadium.name, stadium.location FROM     concert     INNER JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE     concert.year = 2015;
SELECT COUNT(*)  FROM concert WHERE stadium_id = (     SELECT stadium_id     FROM stadium     ORDER BY capacity DESC     LIMIT 1 );
SELECT count(*) FROM concert WHERE stadium_id = (     SELECT stadium_id     FROM stadium     ORDER BY capacity DESC     LIMIT 1 );
SELECT COUNT(*) FROM pets WHERE weight > 10;
SELECT COUNT(*) FROM pets WHERE weight > 10;
SELECT pets.pet_weight FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pet_type = 'dog' AND pets.pet_age = ( SELECT MIN(pet_age) FROM pets WHERE pet_type = 'dog' ) LIMIT 1;
SELECT MIN(pets.weight) AS weight FROM pets WHERE pets.pet_age = (SELECT MIN(pets.pet_age) FROM pets WHERE pets.pet_type = 'dog') AND pets.pet_type = 'dog';
SELECT MAX(weight), pettype FROM pets GROUP BY pettype;
SELECT MAX(weight) AS "max ( weight )", pettype FROM pets GROUP BY pettype;
SELECT COUNT(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20;
SELECT COUNT(petid) FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20;
SELECT COUNT(*) FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE s.sex = 'F' AND p.pettype = 'dog';
SELECT COUNT(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'female' AND pets.pettype = 'dog';
SELECT COUNT(DISTINCT pettype) FROM pets
SELECT COUNT(DISTINCT pettype)  FROM pets;
SELECT DISTINCT student.fname  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype IN ('cat', 'dog');
SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype IN ('cat', 'dog');
SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' INTERSECT SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog';
SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' INTERSECT SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog';
SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat');
SELECT student.major, student.age FROM student WHERE student.major NOT IN (SELECT student.major FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat') AND student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat')
SELECT student.stuid FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat');
SELECT student.stuid FROM student WHERE student.stuid NOT IN (     SELECT     has_pet.stuid     FROM     has_pet     INNER JOIN pets ON has_pet.petid = pets.petid     WHERE     pets.pettype = 'cat' );
SELECT student.fname, student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' AND student.stuid NOT IN ( SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' );
SELECT student.fname, student.age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' AND student.stuid NOT IN (     SELECT has_pet.stuid     FROM has_pet     INNER JOIN pets ON has_pet.petid = pets.petid     WHERE pets.pettype = 'cat' );
SELECT pets.pettype, pets.weight FROM     pets WHERE     pet_age = (         SELECT             MIN(pet_age)         FROM             pets     ) LIMIT 1;
SELECT pets.pettype, pets.weight FROM   pets WHERE   pet_age = (     SELECT       MIN(pet_age)     FROM       pets   ) LIMIT 1;
SELECT pets.petid, pets.weight FROM pets WHERE pets.pet_age > 1;
SELECT pets.petid, pets.weight FROM pets WHERE pets.pet_age > 1;
SELECT AVG(pet_age) AS "avg ( pet_age )", MAX(pet_age) AS "max ( pet_age )", pettype FROM pets GROUP BY pettype;
SELECT AVG(p.pet_age) AS average_age, MAX(p.pet_age) AS maximum_age, p.pettype FROM pets p GROUP BY p.pettype;
SELECT AVG(weight) AS "avg (weight)", pettype FROM pets GROUP BY pettype;
SELECT     AVG(pets.weight) AS "avg ( weight )",     pets.pettype FROM     pets GROUP BY     pets.pettype;
SELECT student.fname, student.age FROM student WHERE student.stuid IN (SELECT has_pet.stuid FROM has_pet);
SELECT DISTINCT student.fname, student.age  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid;
SELECT pets.petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.lname = 'Smith';
SELECT has_pet.petid FROM     student     INNER JOIN has_pet ON student.stuid = has_pet.stuid     INNER JOIN pets ON has_pet.petid = pets.petid WHERE     student.lname = 'Smith';
SELECT COUNT(*) AS num_pets, student.stuid FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid;
SELECT COUNT(*) AS num_pets, has_pet.stuid FROM has_pet GROUP BY has_pet.stuid;
SELECT student.fname, student.sex FROM student WHERE student.stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1);
SELECT student.fname, student.sex FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.fname, student.sex HAVING COUNT(has_pet.petid) > 1;
SELECT student.lname  FROM student  JOIN pets ON student.stuid = pets.petid  WHERE pets.pettype = 'cat'  AND pets.pet_age = 3;
SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pet_age = 3;
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet);
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet);
SELECT COUNT(DISTINCT continent) FROM continents;
SELECT count(*) as number_of_continents FROM continents;
SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS num_countries FROM continents JOIN countries ON countries.continent = continents.contid GROUP BY continents.contid, continents.continent;
SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS country_count FROM continents INNER JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent;
SELECT COUNT(*) FROM countries;
SELECT COUNT(*) FROM countries;
SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid) FROM car_makers LEFT JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.fullname;
SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id;
SELECT model             FROM car_names             INNER JOIN model_list ON car_names.model = model_list.model             INNER JOIN cars_data ON car_names.makeid = cars_data.id             WHERE cars_data.horsepower = (SELECT MIN(horsepower) FROM cars_data);
SELECT model FROM     car_names JOIN     cars_data ON cars_data.id = car_names.makeid ORDER BY     cars_data.horsepower ASC LIMIT 1;
SELECT car_names.model FROM   cars_data JOIN   car_names ON cars_data.id = car_names.makeid WHERE   cars_data.weight < (SELECT AVG(weight) FROM cars_data);
SELECT model FROM car_names WHERE makeid IN (     SELECT id     FROM cars_data     WHERE weight < (SELECT AVG(weight) FROM cars_data) );
SELECT DISTINCT car_makers.maker              FROM car_makers              JOIN car_names ON car_makers.id = car_names.makeid              JOIN cars_data ON car_names.model = cars_data.id              WHERE cars_data.year = 1970;
SELECT DISTINCT car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970;
SELECT car_names.make || ' ' || car_names.model AS make, cars_data.year  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.modelid  JOIN car_makers ON model_list.maker = car_makers.id  WHERE cars_data.year = (SELECT MIN(year) FROM cars_data)
SELECT car_makers.maker, MIN(cars_data.year)  FROM car_makers  JOIN cars_data ON car_makers.id = cars_data.id  GROUP BY car_makers.maker  ORDER BY MIN(cars_data.year)  LIMIT 1;
SELECT DISTINCT model_list.model  FROM model_list  JOIN car_names ON model_list.model = car_names.model  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cars_data.year > 1980;
SELECT DISTINCT car_names.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.year > 1980;
SELECT continents.continent, COUNT(DISTINCT car_makers.id) AS count FROM continents JOIN countries ON continents.contid = countries.continent JOIN car_makers ON countries.countryname = car_makers.country GROUP BY continents.continent;
SELECT continents.continent, COUNT(DISTINCT car_makers.maker) as car_maker_count FROM continents LEFT JOIN countries ON countries.continent = continents.continent LEFT JOIN car_makers ON car_makers.country = countries.countryname GROUP BY continents.continent;
SELECT countries.countryname     FROM      countries     INNER JOIN      car_makers ON countries.countryid = car_makers.country     GROUP BY      countries.countryname     ORDER BY      COUNT(car_makers.maker) DESC     LIMIT 1;
SELECT countries.countryname FROM     countries JOIN     car_makers ON car_makers.country = countries.countryid GROUP BY     car_makers.country ORDER BY     COUNT(car_makers.maker) DESC LIMIT 1;
SELECT COUNT(modelid) AS model_count, car_makers.fullname AS maker_fullname FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.id, car_makers.fullname;
SELECT COUNT(*) AS number_of_car_models, car_makers.fullname, car_makers.id FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.fullname, car_makers.id;
SELECT cars_data.accelerate FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.makeid JOIN cars_data ON car_names.model = cars_data.id WHERE car_names.model = 'amc hornet sportabout (sw)';
SELECT cars_data.accelerate FROM   cars_data JOIN   car_names ON cars_data.id = car_names.makeid JOIN   model_list ON car_names.model = model_list.model WHERE   car_names.make = 'amc hornet sportabout (sw)';
SELECT COUNT(*) FROM     car_makers JOIN     countries ON car_makers.country = countries.countryid WHERE     countries.countryname = 'france';
SELECT COUNT(*) FROM car_makers WHERE country = 'France';
SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.country = 'usa';
SELECT COUNT(*) FROM model_list  JOIN car_makers ON model_list.maker = car_makers.maker  JOIN countries ON car_makers.country = countries.countryid  WHERE countries.countryname = 'United States';
SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;
SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;
SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;
SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;
SELECT car_makers.maker, model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker;
SELECT car_makers.maker, model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker;
SELECT countries.countryname, countries.countryid  FROM countries  WHERE countries.countryid IN (SELECT car_makers.country FROM car_makers);
SELECT countries.countryname, countries.countryid  FROM countries  WHERE countries.countryid IN      (SELECT car_makers.country      FROM car_makers);
SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;
SELECT AVG(weight) AS average_weight, year FROM cars_data GROUP BY year;
SELECT AVG(weight) AS average_weight,      year FROM      cars_data GROUP BY      year;
SELECT countries.countryname FROM countries JOIN continents ON countries.continent = continents.contid JOIN car_makers ON countries.countryname = car_makers.country WHERE continents.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3;
SELECT c.countryname FROM countries c JOIN continents cn ON c.continent = cn.contid JOIN car_makers cm ON c.countryname = cm.country GROUP BY c.countryname HAVING COUNT(DISTINCT cm.maker) >= 3 AND cn.contid = 'Europe';
SELECT MAX(cars_data.horsepower) AS horsepower, car_makers.maker AS make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE model_list.cylinders = 3 GROUP BY car_makers.maker;
SELECT MAX(cars_data.horsepower) AS horsepower, car_makers.fullname AS make FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3 GROUP BY car_makers.fullname ORDER BY horsepower DESC LIMIT 1;
SELECT model_list.model FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  ORDER BY cars_data.mpg DESC  LIMIT 1;
SELECT car_names.model FROM     cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid ORDER BY cars_data.mpg DESC LIMIT 1;
SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;
SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;
SELECT AVG(cars_data.edispl) FROM   cars_data JOIN   car_names ON   cars_data.id = car_names.makeid JOIN   model_list ON   car_names.model = model_list.model JOIN   car_makers ON   model_list.maker = car_makers.id WHERE   car_makers.maker = 'volvo';
SELECT AVG(cars_data.edispl) FROM     cars_data JOIN     car_names ON cars_data.id = car_names.makeid JOIN     model_list ON car_names.model = model_list.model JOIN     car_makers ON model_list.maker = car_makers.id WHERE     car_makers.maker = 'volvo';
SELECT MAX(accelerate), cylinders FROM cars_data GROUP BY cylinders;
SELECT MAX(accelerate), cylinders FROM cars_data GROUP BY cylinders;
SELECT model FROM model_list GROUP BY model HAVING COUNT(DISTINCT modelid) = (SELECT MAX(version_count) FROM (SELECT model, COUNT(DISTINCT modelid) AS version_count FROM model_list GROUP BY model));
SELECT model_list.model, COUNT(DISTINCT model_list.model) AS version_count  FROM model_list  GROUP BY model_list.model  ORDER BY version_count DESC  LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;
SELECT COUNT(*)  FROM cars_data  WHERE year = 1980;
SELECT COUNT(*) FROM cars_data WHERE year = 1980;
SELECT COUNT(DISTINCT modelid) FROM model_list WHERE maker = (     SELECT id     FROM car_makers     WHERE fullname = 'American Motor Company' );
SELECT COUNT(DISTINCT model)  FROM model_list  JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_makers.fullname = 'American Motor Company';
SELECT car_makers.fullname, car_makers.id FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id HAVING COUNT(model_list.modelid) > 3;
SELECT car_makers.fullname, car_makers.id FROM car_makers WHERE car_makers.id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(model) > 3);
SELECT DISTINCT model FROM model_list WHERE maker IN (     SELECT maker     FROM car_makers     WHERE fullname = 'General Motors' ) OR model IN (     SELECT model     FROM cars_data     WHERE weight > 3500 );
SELECT DISTINCT model_list.model  FROM model_list  INNER JOIN car_makers ON model_list.maker = car_makers.id  LEFT JOIN cars_data ON model_list.modelid = cars_data.id  WHERE car_makers.fullname = 'General Motors' OR cars_data.weight > 3500;
SELECT DISTINCT year  FROM cars_data  WHERE weight >= 3000 AND weight <= 4000;
SELECT DISTINCT year FROM cars_data WHERE weight < 4000 INTERSECT SELECT DISTINCT year FROM cars_data WHERE weight > 3000;
SELECT cars_data.horsepower FROM cars_data WHERE cars_data.accelerate = (     SELECT MAX(accelerate)     FROM cars_data );
SELECT cars_data.horsepower FROM cars_data WHERE cars_data.accelerate = ( SELECT MAX(accelerate) FROM cars_data );
SELECT cars_data.cylinders FROM model_list JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE model_list.model = 'volvo' ORDER BY cars_data.accelerate LIMIT 1;
SELECT MIN(cars_data.cylinders) FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_makers.maker = 'volvo';
SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);
SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data);
SELECT COUNT(*) FROM (     SELECT countries.countryname, COUNT(DISTINCT car_makers.country) as car_maker_count     FROM countries     JOIN car_makers ON car_makers.country = countries.countryname     GROUP BY countries.countryname     HAVING car_maker_count > 2 ) AS subquery;
SELECT COUNT(*) FROM (     SELECT countries.countryid     FROM countries     JOIN car_makers ON car_makers.country = countries.countryid     GROUP BY countries.countryid     HAVING COUNT(DISTINCT car_makers.id) > 2 ) AS subquery;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;
SELECT model FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1;
SELECT model_list.model FROM   model_list JOIN   cars_data   ON model_list.model = cars_data.model WHERE   cars_data.cylinders = 4 GROUP BY   model_list.model HAVING   cars_data.horsepower = (SELECT MAX(horsepower) FROM cars_data WHERE cylinders = 4);
SELECT car_names.makeid, car_names.make FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cars_data.cylinders <= 3;
SELECT car_names.makeid, car_names.make FROM     cars_data JOIN     car_names ON cars_data.id = car_names.makeid WHERE     cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data)     AND cars_data.cylinders < 4;
SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980;
SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;
SELECT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < 3500 AND car_makers.maker != 'Ford Motor Company';
SELECT model_list.model FROM model_list WHERE model_list.maker <> 'Ford Motor Company' AND model_list.modelid IN (     SELECT cars_data.id     FROM cars_data     WHERE cars_data.weight < 3500 );
SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers);
SELECT countries.countryname  FROM countries  LEFT JOIN car_makers ON countries.countryid = car_makers.country  WHERE car_makers.maker IS NULL;
SELECT car_makers.id, car_makers.maker FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2 AND COUNT(DISTINCT car_makers.id) > 3;
SELECT car_makers.id, car_makers.maker  FROM car_makers  INNER JOIN model_list ON model_list.maker = car_makers.id  INNER JOIN car_names ON car_names.makeid = model_list.modelid  GROUP BY car_makers.id, car_makers.maker  HAVING COUNT(DISTINCT model_list.modelid) >= 2 AND COUNT(DISTINCT car_names.makeid) > 3;
SELECT countries.countryid, countries.countryname FROM countries WHERE countries.countryid IN (     SELECT car_makers.country     FROM car_makers     GROUP BY car_makers.country     HAVING COUNT(DISTINCT car_makers.id) > 3 ) OR countries.countryid IN (     SELECT car_makers.country     FROM car_makers     JOIN car_names ON car_names.makeid = car_makers.id     JOIN model_list ON model_list.modelid = car_names.model     WHERE model_list.model = 'fiat' );
SELECT countries.countryid, countries.countryname  FROM countries  WHERE countries.countryid IN (      SELECT car_makers.country       FROM car_makers       GROUP BY car_makers.country       HAVING COUNT(DISTINCT car_makers.id) > 3 ) OR countries.countryid IN (      SELECT car_makers.country       FROM car_makers       INNER JOIN car_names ON car_names.makeid = car_makers.id       INNER JOIN model_list ON model_list.modelid = car_names.model       WHERE model_list.maker = 'fiat' )
SELECT country FROM     airlines WHERE     airline = 'JetBlue Airways';
SELECT country FROM airlines WHERE airline = 'Jetblue Airways';
SELECT abbreviation FROM     airlines WHERE     airline = 'JetBlue Airways';
SELECT abbreviation FROM airlines WHERE abbreviation LIKE '%JetBlue%';
SELECT airline, abbreviation FROM airlines WHERE country = 'USA';
SELECT airline, abbreviation FROM airlines WHERE country = 'USA';
SELECT airportcode, airportname     FROM airports     WHERE city = 'Anthony';
SELECT airports.airportcode, airports.airportname FROM airports WHERE airports.city = 'Anthony';
SELECT COUNT(DISTINCT airline) FROM airlines;
SELECT COUNT(DISTINCT airline) FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*)  FROM flights;
SELECT COUNT(*) FROM flights;
SELECT airline FROM airlines WHERE abbreviation = 'UAL';
SELECT airline FROM airlines WHERE abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines WHERE country = 'USA';
SELECT COUNT(*)  FROM airlines  WHERE country = 'USA';
SELECT city, country     FROM airports     WHERE airportname = 'Alton';
SELECT city, country FROM airports WHERE airportname = 'Alton';
SELECT airportname FROM     airports WHERE     airportcode = 'AKO';
SELECT airportname FROM airports WHERE airportcode = 'AKO';
SELECT airportname FROM airports WHERE city = 'Aberdeen';
SELECT airportname FROM airports WHERE city = 'Aberdeen';
SELECT COUNT(*) FROM     flights WHERE     sourceairport = 'APG';
SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';
SELECT COUNT(*)  FROM flights  WHERE destairport = 'ATO';
SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';
SELECT COUNT(*)  FROM flights  WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen');
SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen';
SELECT COUNT(*) FROM     flights JOIN     airports ON flights.destairport = airports.airportcode WHERE     airports.city = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports AS source_airports ON flights.sourceairport = source_airports.airportcode JOIN airports AS dest_airports ON flights.destairport = dest_airports.airportcode WHERE source_airports.city = 'Aberdeen' AND dest_airports.city = 'Ashley';
SELECT COUNT(*)  FROM flights  INNER JOIN airports ON flights.sourceairport = airports.airportcode  WHERE airports.city = 'Aberdeen' AND flights.destairport = 'Ashley';
SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights WHERE airline = 'Jetblue Airways';
SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY';
SELECT COUNT(*) FROM   flights WHERE   airline = 'United Airlines'   AND destairport = 'ASY';
SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';
SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';
SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.airline INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.abbreviation = 'UA' AND airports.city = 'Aberdeen';
SELECT COUNT(*) FROM     flights INNER JOIN     airlines ON flights.airline = airlines.airline INNER JOIN     airports ON flights.destairport = airports.airportcode WHERE     airlines.airline = 'United Airlines'     AND airports.city = 'Aberdeen';
SELECT airports.city FROM     airports JOIN     flights ON flights.destairport = airports.airportcode GROUP BY     airports.city ORDER BY     COUNT(flights.flightno) DESC LIMIT 1;
SELECT airports.city FROM     airports JOIN     flights ON airports.airportcode = flights.destairport GROUP BY     airports.city ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT airports.city FROM     airports JOIN     flights ON airports.airportcode = flights.sourceairport GROUP BY     airports.city ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT airports.city FROM     flights JOIN     airports ON flights.sourceairport = airports.airportcode GROUP BY     airports.city ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT airportcode              FROM flights              GROUP BY airportcode              HAVING COUNT(*) = (             SELECT COUNT(*) AS flight_count              FROM flights              GROUP BY airportcode              ORDER BY flight_count DESC              LIMIT 1             );
SELECT destairport as airportcode FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.airportcode   FROM airports  LEFT JOIN flights ON airports.airportcode = flights.destairport  GROUP BY airports.airportcode  HAVING COUNT(flights.flightno) = (     SELECT MIN(flight_count)     FROM (         SELECT COUNT(flights.flightno) as flight_count         FROM airports         LEFT JOIN flights ON airports.airportcode = flights.destairport         GROUP BY airports.airportcode     ) );
SELECT airportcode FROM     airports WHERE     airportcode IN (         SELECT             destairport         FROM             flights         UNION ALL         SELECT             sourceairport         FROM             flights     ) GROUP BY     airportcode ORDER BY     COUNT(*) ASC LIMIT 1;
SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airline  FROM flights  GROUP BY airline  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT abbreviation, country FROM airlines WHERE airline IN (     SELECT airline     FROM flights     GROUP BY airline     HAVING COUNT(*) = (         SELECT MIN(flight_count)         FROM (             SELECT COUNT(*) as flight_count             FROM flights             GROUP BY airline         )     ) ) LIMIT 1;
SELECT abbreviation, country FROM airlines WHERE abbreviation = (     SELECT airline     FROM flights     GROUP BY airline     ORDER BY COUNT(*) ASC     LIMIT 1 ) LIMIT 1;
SELECT airlines.airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airlines ON flights.airline = airlines.airline WHERE airports.airportcode = 'AHD';
SELECT airlines.airline FROM   airlines JOIN   flights ON airlines.airline = flights.airline WHERE   flights.sourceairport = 'AHD';
SELECT airlines.airline FROM     airlines WHERE     airlines.airline IN (         SELECT             flights.airline         FROM             flights             JOIN airports ON flights.destairport = airports.airportcode         WHERE             airports.airportcode = 'AHD'     );
SELECT airline FROM   airlines WHERE   airline IN (SELECT airline FROM flights WHERE destairport = 'AHD');
SELECT airlines.airline FROM airlines INNER JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport = 'APG' AND flights.destairport = 'CVO';
SELECT airlines.airline FROM   airlines WHERE   EXISTS (     SELECT       1     FROM       flights       INNER JOIN airports ON flights.sourceairport = airports.airportcode     WHERE       airports.city = 'APG'       AND airlines.airline = flights.airline   )   AND EXISTS (     SELECT       1     FROM       flights       INNER JOIN airports ON flights.sourceairport = airports.airportcode     WHERE       airports.city = 'CVO'       AND airlines.airline = flights.airline   );
SELECT airlines.airline FROM   airlines INNER JOIN   flights ON airlines.airline = flights.airline LEFT JOIN   airports AS a1 ON flights.sourceairport = a1.airportcode LEFT JOIN   airports AS a2 ON flights.destairport = a2.airportcode WHERE   a1.airportcode = 'CVO'   AND a2.airportcode != 'APG';
SELECT airlines.airline FROM   airlines WHERE   EXISTS (     SELECT       1     FROM       flights       JOIN airports ON flights.sourceairport = airports.airportcode     WHERE       flights.airline = airlines.airline       AND airports.airportcode = 'CVO'   )   AND NOT EXISTS (     SELECT       1     FROM       flights       JOIN airports ON flights.sourceairport = airports.airportcode     WHERE       flights.airline = airlines.airline       AND airports.airportcode = 'APG'   );
SELECT airline  FROM airlines  WHERE airline IN (SELECT airline                    FROM flights                    GROUP BY airline                    HAVING COUNT(*) >= 10);
SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10;
SELECT airline FROM airlines WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(flightno) < 200);
SELECT airline FROM airlines WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200);
SELECT flightno FROM flights WHERE airline = 'United Airlines';
SELECT flightno FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.abbreviation = 'UA';
SELECT flightno FROM flights WHERE sourceairport = 'APG';
SELECT flightno FROM flights WHERE sourceairport = 'APG';
SELECT flightno FROM flights WHERE destairport = 'APG';
SELECT flightno  FROM flights  WHERE destination = 'APG';
SELECT flights.flightno FROM     flights JOIN     airports ON flights.sourceairport = airports.airportcode WHERE     airports.city = 'Aberdeen';
SELECT flightno FROM  flights WHERE sourceairport = 'Aberdeen';
SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen';
SELECT flights.flightno FROM     flights JOIN     airports ON flights.destairport = airports.airportcode WHERE     airports.city = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen' OR airports.city = 'Abilene';
SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city IN ('Aberdeen', 'Abilene');
SELECT airportname FROM airports WHERE airportcode NOT IN (     SELECT DISTINCT sourceairport     FROM flights     UNION     SELECT DISTINCT destairport     FROM flights );
SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights) AND airportcode NOT IN (SELECT destairport FROM flights);
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT name FROM     employee ORDER BY     age ASC;
SELECT employee.name FROM     employee ORDER BY     employee.age ASC;
SELECT COUNT(*) AS count, city FROM employee GROUP BY city;
SELECT COUNT(*) AS count, city FROM employee GROUP BY city;
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(employee_id) > 1;
SELECT employee.city FROM     employee WHERE     employee.age < 30 GROUP BY     employee.city HAVING     COUNT(*) > 1;
SELECT COUNT(*) as shop_count, location FROM shop GROUP BY location;
SELECT COUNT(*) AS num_shops, location FROM shop GROUP BY location;
SELECT shop.manager_name, shop.district FROM shop WHERE shop.number_products = (     SELECT MAX(number_products)     FROM shop )
SELECT shop.manager_name, shop.district FROM shop WHERE shop.number_products = (     SELECT MAX(number_products)     FROM shop )
SELECT MIN(number_products) AS min_number_products, MAX(number_products) AS max_number_products FROM shop;
SELECT MIN(number_products) AS min_number_products, MAX(number_products) AS max_number_products FROM shop;
SELECT shop.name, shop.location, shop.district FROM shop ORDER BY shop.number_products DESC;
SELECT shop.name, shop.location, shop.district FROM     shop ORDER BY     shop.number_products DESC;
SELECT shop.name FROM shop WHERE shop.number_products > (SELECT AVG(number_products) FROM shop);
SELECT shop.name FROM shop WHERE shop.number_products > (SELECT AVG(number_products) FROM shop);
SELECT employee.name FROM     employee INNER JOIN     evaluation ON employee.employee_id = evaluation.employee_id GROUP BY     employee.employee_id ORDER BY     COUNT(evaluation.year_awarded) DESC LIMIT 1;
SELECT employee.name FROM     employee JOIN     evaluation ON employee.employee_id = evaluation.employee_id GROUP BY     employee.name ORDER BY     COUNT(*) DESC LIMIT     1;
SELECT employee.name FROM    employee JOIN    evaluation ON employee.employee_id = evaluation.employee_id WHERE    evaluation.bonus = (       SELECT          MAX(bonus)       FROM          evaluation    );
SELECT employee.name FROM     employee JOIN     evaluation ON employee.employee_id = evaluation.employee_id ORDER BY     evaluation.bonus DESC LIMIT 1;
SELECT name FROM employee WHERE employee_id NOT IN (     SELECT employee_id FROM evaluation )
SELECT employee.name FROM     employee WHERE     employee.employee_id NOT IN (         SELECT             evaluation.employee_id         FROM             evaluation     );
SELECT shop.name FROM     shop INNER JOIN     hiring ON shop.shop_id = hiring.shop_id GROUP BY     shop.name ORDER BY     COUNT(hiring.employee_id) DESC LIMIT 1;
SELECT shop.name     FROM shop     INNER JOIN hiring ON shop.shop_id = hiring.shop_id     GROUP BY shop.shop_id     ORDER BY COUNT(hiring.employee_id) DESC     LIMIT 1;
SELECT shop.name FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.employee_id IS NULL;
SELECT shop.name FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.employee_id IS NULL;
SELECT COUNT(*) as num_employees, shop.name FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY shop.name;
SELECT COUNT(*) AS count, shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name;
SELECT SUM(bonus) AS total_bonus FROM evaluation;
SELECT SUM(bonus) AS total_bonus FROM evaluation;
SELECT hiring.shop_id, hiring.employee_id, hiring.start_from, hiring.is_full_time FROM hiring;
SELECT shop_id, employee_id, start_from, is_full_time FROM hiring;
SELECT shop.district FROM shop WHERE number_products < 3000 AND shop_id IN (   SELECT shop_id   FROM shop   WHERE number_products > 10000 );
SELECT DISTINCT location FROM shop WHERE number_products < 3000 INTERSECT SELECT DISTINCT location FROM shop WHERE number_products > 10000;
SELECT COUNT(DISTINCT location)  FROM shop;
SELECT COUNT(DISTINCT location) AS distinct_store_locations FROM shop;
SELECT COUNT(*) FROM documents;
SELECT COUNT(*) AS document_count FROM documents;
SELECT documents.document_id, documents.document_name, documents.document_description FROM documents;
SELECT document_id, document_name, document_description FROM documents;
SELECT documents.document_name, documents.template_id FROM documents WHERE documents.document_description LIKE '%w%';
SELECT documents.document_name, documents.template_id     FROM     documents     WHERE     documents.document_description LIKE '%w%'
SELECT documents.document_id, documents.template_id, documents.document_description FROM documents WHERE documents.document_name = "Robbin CV";
SELECT documents.document_id, documents.template_id, documents.document_description FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Robbin CV';
SELECT COUNT(DISTINCT documents.template_id) AS total_templates FROM documents
SELECT COUNT(DISTINCT templates.template_id) AS total_templates_used FROM documents INNER JOIN templates ON documents.template_id = templates.template_id;
SELECT COUNT(*) FROM documents WHERE template_id IN (     SELECT template_id     FROM templates     WHERE template_type_code = 'PPT' )
SELECT COUNT(*) FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'PPT';
SELECT templates.template_id, COUNT(documents.document_id) FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id;
SELECT templates.template_id,      COUNT(documents.document_id) AS usage_count FROM      templates INNER JOIN      documents ON templates.template_id = documents.template_id GROUP BY      templates.template_id;
SELECT templates.template_id, templates.template_type_code  FROM templates  JOIN documents ON documents.template_id = templates.template_id  GROUP BY templates.template_id, templates.template_type_code  ORDER BY COUNT(documents.template_id) DESC  LIMIT 1;
SELECT templates.template_id, templates.template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code HAVING COUNT(documents.document_id) = (     SELECT MAX(docCount)     FROM (         SELECT COUNT(document_id) AS docCount         FROM documents         GROUP BY template_id     ) );
SELECT templates.template_id FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id HAVING COUNT(DISTINCT documents.document_id) > 1;
SELECT templates.template_id FROM     templates JOIN     documents ON templates.template_id = documents.template_id GROUP BY     templates.template_id HAVING     COUNT(documents.document_id) > 1;
SELECT templates.template_id FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id WHERE documents.template_id IS NULL;
SELECT templates.template_id     FROM     templates     WHERE     templates.template_id NOT IN (SELECT template_id FROM documents);
SELECT COUNT(DISTINCT template_id) FROM templates;
SELECT COUNT(template_id) FROM templates;
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates;
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates;
SELECT DISTINCT template_type_code FROM templates
SELECT DISTINCT template_type_code FROM ref_template_types;
SELECT templates.template_id FROM templates WHERE templates.template_type_code = 'PP' OR templates.template_type_code = 'PPT';
SELECT templates.template_id  FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_code = 'PP'     OR ref_template_types.template_type_code = 'PPT';
SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';
SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';
SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.version_number > 5;
SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.version_number > 5;
SELECT ref_template_types.template_type_code, COUNT(templates.template_id) AS num_templates FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_code;
SELECT ref_template_types.template_type_code,      COUNT(templates.template_id) AS template_count     FROM      ref_template_types     LEFT JOIN      templates ON ref_template_types.template_type_code = templates.template_type_code     GROUP BY      ref_template_types.template_type_code;
SELECT template_type_code FROM     templates GROUP BY     template_type_code ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT template_type_code FROM     templates GROUP BY     template_type_code ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(*) < 3;
SELECT ref_template_types.template_type_code FROM     ref_template_types LEFT JOIN     templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY     ref_template_types.template_type_code HAVING     COUNT(templates.template_id) < 3;
SELECT MIN(templates.version_number), templates.template_type_code FROM templates GROUP BY templates.template_type_code ORDER BY templates.version_number LIMIT 1;
SELECT templates.version_number, templates.template_type_code FROM templates ORDER BY templates.version_number ASC LIMIT 1;
SELECT templates.template_type_code FROM   documents INNER JOIN templates ON documents.template_id = templates.template_id WHERE   documents.document_name = "Data base";
SELECT templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Data base';
SELECT document_name FROM     documents JOIN     templates ON documents.template_id = templates.template_id WHERE     templates.template_type_code = 'BK';
SELECT documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK';
SELECT ref_template_types.template_type_code, COUNT(DISTINCT documents.document_id) AS count FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code;
SELECT ref_template_types.template_type_code,     COUNT(DISTINCT documents.document_id) AS document_count FROM     ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY     ref_template_types.template_type_code;
SELECT ref_template_types.template_type_code FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1;
SELECT ref_template_types.template_type_code FROM     ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY     ref_template_types.template_type_code ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT ref_template_types.template_type_code FROM ref_template_types WHERE ref_template_types.template_type_code NOT IN (SELECT templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id);
SELECT ref_template_types.template_type_code  FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code WHERE templates.template_id IS NULL;
SELECT ref_template_types.template_type_code, ref_template_types.template_type_description FROM     ref_template_types;
SELECT ref_template_types.template_type_code, ref_template_types.template_type_description FROM     ref_template_types;
SELECT ref_template_types.template_type_description FROM ref_template_types WHERE ref_template_types.template_type_code = 'AD';
SELECT ref_template_types.template_type_description FROM     ref_template_types WHERE     ref_template_types.template_type_code = 'AD';
SELECT ref_template_types.template_type_code FROM   ref_template_types WHERE   ref_template_types.template_type_description = 'Book';
SELECT ref_template_types.template_type_code FROM     ref_template_types WHERE     ref_template_types.template_type_description = 'Book';
SELECT DISTINCT ref_template_types.template_type_description FROM   ref_template_types JOIN   templates ON ref_template_types.template_type_code = templates.template_type_code JOIN   documents ON templates.template_id = documents.template_id;
SELECT DISTINCT ref_template_types.template_type_description FROM ref_template_types INNER JOIN templates ON ref_template_types.template_type_code = templates.template_type_code INNER JOIN documents ON templates.template_id = documents.template_id;
SELECT templates.template_id FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_description = 'Presentation';
SELECT templates.template_id FROM   templates JOIN   ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE   ref_template_types.template_type_description = 'Presentation';
SELECT COUNT(*)  FROM paragraphs;
SELECT COUNT(*) AS paragraph_count FROM paragraphs;
SELECT COUNT(*) FROM paragraphs p INNER JOIN documents d ON p.document_id = d.document_id WHERE d.document_name = 'Summer Show';
SELECT COUNT(*) FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Summer Show';
SELECT other_details FROM paragraphs WHERE paragraph_text = 'Korea';
SELECT documents.other_details FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE paragraphs.paragraph_text LIKE '%Korea %';
SELECT paragraph_id, paragraph_text     FROM      paragraphs     WHERE      document_id IN (SELECT document_id FROM documents WHERE document_name = 'Welcome to NY');
SELECT paragraph_id, paragraph_text FROM     paragraphs JOIN     documents ON paragraphs.document_id = documents.document_id WHERE     documents.document_name = 'Welcome to NY';
SELECT paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Customer reviews';
SELECT paragraph_text  FROM      paragraphs  WHERE      document_id = (         SELECT              document_id          FROM              documents          WHERE              document_name = 'Customer reviews'     );
SELECT documents.document_id, COUNT(paragraphs.paragraph_id)     FROM     documents     INNER JOIN paragraphs ON paragraphs.document_id = documents.document_id     GROUP BY documents.document_id     ORDER BY documents.document_id;
SELECT documents.document_id, COUNT(paragraphs.paragraph_id) AS paragraph_count FROM documents JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id ORDER BY documents.document_id;
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS paragraph_count FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name;
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_text) AS paragraph_count FROM documents JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id, documents.document_name;
SELECT documents.document_id     FROM documents     INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id     GROUP BY documents.document_id     HAVING COUNT(paragraphs.paragraph_id) >= 2;
SELECT documents.document_id FROM     documents JOIN     paragraphs     ON documents.document_id = paragraphs.document_id GROUP BY     documents.document_id HAVING     COUNT(paragraphs.paragraph_id) >= 2;
SELECT documents.document_id, documents.document_name FROM documents JOIN (SELECT document_id, COUNT(*) AS paragraph_count FROM paragraphs GROUP BY document_id) AS doc_paragraph_count ON documents.document_id = doc_paragraph_count.document_id ORDER BY doc_paragraph_count.paragraph_count DESC LIMIT 1;
SELECT documents.document_id, documents.document_name FROM documents JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1;
SELECT documents.document_id FROM documents LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) = (SELECT MIN(paragraph_count) FROM (SELECT COUNT(paragraph_id) AS paragraph_count FROM paragraphs GROUP BY document_id)) LIMIT 1;
SELECT documents.document_id FROM     documents JOIN     paragraphs ON documents.document_id = paragraphs.document_id GROUP BY     documents.document_id ORDER BY     COUNT(paragraphs.paragraph_id) ASC LIMIT 1;
SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_text) >= 1 AND COUNT(paragraphs.paragraph_text) <= 2;
SELECT documents.document_id FROM documents JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) BETWEEN 1 AND 2;
SELECT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  WHERE paragraphs.paragraph_text = 'Brazil'  INTERSECT  SELECT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  WHERE paragraphs.paragraph_text = 'Ireland';
SELECT documents.document_id  FROM documents  JOIN paragraphs ON paragraphs.document_id = documents.document_id  WHERE paragraphs.paragraph_text IN ('Brazil', 'Ireland');
SELECT COUNT(DISTINCT teacher_id) FROM teacher;
SELECT COUNT(*) FROM teacher;
SELECT name FROM teacher ORDER BY age ASC;
SELECT teacher.name FROM     teacher ORDER BY     teacher.age ASC;
SELECT age, hometown FROM teacher;
SELECT teacher.age, teacher.hometown FROM teacher;
SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District';
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District';
SELECT name FROM teacher WHERE age IN (32, 33);
SELECT name FROM     teacher WHERE     age IN (32, 33);
SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1;
SELECT hometown FROM     teacher ORDER BY     age ASC LIMIT 1;
SELECT teacher.hometown, COUNT(teacher.teacher_id) as num_teachers FROM teacher GROUP BY teacher.hometown;
SELECT teacher.hometown,      COUNT(teacher.teacher_id) AS num_teachers     FROM      teacher     GROUP BY      teacher.hometown;
SELECT teacher.hometown FROM     teacher GROUP BY     teacher.hometown ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT teacher.hometown FROM     teacher GROUP BY     teacher.hometown ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT teacher.hometown FROM     teacher GROUP BY     teacher.hometown HAVING     COUNT(DISTINCT teacher.teacher_id) > 1;
SELECT DISTINCT hometown FROM teacher GROUP BY hometown HAVING COUNT(DISTINCT teacher_id) >= 2;
SELECT teacher.name, course.course FROM      teacher JOIN      course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN      course ON course_arrange.course_id = course.course_id;
SELECT teacher.name, course.course FROM      teacher JOIN      course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN      course ON course_arrange.course_id = course.course_id;
SELECT teacher.name, course.course FROM     teacher JOIN     course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN     course ON course_arrange.course_id = course.course_id ORDER BY     teacher.name ASC;
SELECT teacher.name, course.course FROM      teacher JOIN      course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN      course ON course_arrange.course_id = course.course_id ORDER BY      teacher.name ASC;
SELECT teacher.name FROM course JOIN course_arrange ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id WHERE course.course = 'math';
SELECT teacher.name  FROM teacher  INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id  INNER JOIN course ON course_arrange.course_id = course.course_id  WHERE course.course_name = 'math';
SELECT teacher.name, COUNT(course_arrange.course_id) as num_courses FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name;
SELECT teacher.name, COUNT(course_arrange.course_id) FROM     teacher     INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY     teacher.name;
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.teacher_id, teacher.name HAVING COUNT(DISTINCT course_arrange.course_id) >= 2;
SELECT teacher.name FROM     teacher INNER JOIN     course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY     teacher.name HAVING     COUNT(DISTINCT course_arrange.course_id) >= 2;
SELECT teacher.name FROM teacher LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.teacher_id IS NULL;
SELECT teacher.name FROM      teacher LEFT JOIN     course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE     course_arrange.teacher_id IS NULL;
SELECT COUNT(*) FROM visitor WHERE age < 30;
SELECT visitor.name FROM     visitor WHERE     visitor.level_of_membership > 4 ORDER BY     visitor.level_of_membership DESC;
SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4;
SELECT visitor.name, visitor.level_of_membership     FROM visitor     WHERE visitor.level_of_membership > 4     ORDER BY visitor.age DESC;
SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1;
SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009;
SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum';
SELECT m.name FROM museum m WHERE m.num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010);
SELECT visitor.id, visitor.name, visitor.age FROM     visitor JOIN     visit ON visit.visitor_id = visitor.id GROUP BY     visitor.id, visitor.name, visitor.age HAVING     COUNT(DISTINCT visit.museum_id) > 1;
SELECT visitor.id, visitor.name, visitor.level_of_membership  FROM visitor  INNER JOIN visit ON visit.visitor_id = visitor.id  GROUP BY visitor.id, visitor.name, visitor.level_of_membership HAVING SUM(visit.total_spent) = (SELECT MAX(total_spent) FROM visit);
SELECT museum.museum_id, museum.name FROM     museum JOIN     visit ON museum.museum_id = visit.museum_id GROUP BY     museum.museum_id, museum.name ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT museum.name FROM   museum LEFT JOIN   visit ON museum.museum_id = visit.museum_id WHERE   visit.visitor_id IS NULL;
SELECT visitor.name, visitor.age FROM     visit JOIN     visitor ON visit.visitor_id = visitor.id WHERE     visit.num_of_ticket = (         SELECT             MAX(num_of_ticket)         FROM             visit     );
SELECT AVG(num_of_ticket),      MAX(num_of_ticket) FROM visit;
SELECT SUM(total_spent) FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership = 1;
SELECT visitor.name FROM visitor JOIN visit ON visit.visitor_id = visitor.id JOIN museum AS m1 ON visit.museum_id = m1.museum_id JOIN museum AS m2 ON visit.museum_id = m2.museum_id WHERE m1.open_year < 2009 AND m2.open_year > 2011;
SELECT COUNT(DISTINCT visitor_id)  FROM visit  WHERE visitor_id NOT IN (     SELECT DISTINCT visit.visitor_id     FROM visit     JOIN museum ON visit.museum_id = museum.museum_id     WHERE museum.open_year > 2010 )
SELECT COUNT(DISTINCT museum_id) FROM museum WHERE open_year > 2013 OR open_year < 2008;
SELECT COUNT(*)  FROM players;
SELECT COUNT(DISTINCT player_id) AS player_count FROM players;
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) FROM matches;
SELECT players.first_name, players.birth_date             FROM players             WHERE players.player_id IN (                 SELECT winner_id                 FROM matches                 WHERE winner_ioc = 'USA'             )
SELECT players.first_name, players.birth_date FROM players WHERE players.country = 'USA'
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches
SELECT AVG(loser_age) AS avg_loser_age,      AVG(winner_age) AS avg_winner_age     FROM matches
SELECT AVG(winner_rank) FROM matches;
SELECT AVG(winner_rank) FROM matches;
SELECT MAX(loser_rank) FROM matches;
SELECT MIN(loser_rank) FROM matches;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country_code) AS distinct_countries FROM players;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_name) AS num_different_loser_names FROM matches;
SELECT tourney_name     FROM     matches     GROUP BY     tourney_name     HAVING     COUNT(match_num) > 10;
SELECT tourney_name     FROM matches     GROUP BY tourney_name     HAVING COUNT(*) > 10;
SELECT winners.winner_name FROM   (SELECT winner_name    FROM matches    JOIN players ON matches.winner_id = players.player_id    WHERE matches.year = 2013) AS winners JOIN   (SELECT winner_name    FROM matches    JOIN players ON matches.winner_id = players.player_id    WHERE matches.year = 2016) AS winners_2016 ON winners.winner_name = winners_2016.winner_name;
SELECT p.first_name, p.last_name FROM players p INNER JOIN matches m1 ON m1.winner_id = p.player_id AND m1.year = 2013 INNER JOIN matches m2 ON m2.winner_id = p.player_id AND m2.year = 2016;
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT players.country_code, players.first_name  FROM matches  INNER JOIN players ON matches.winner_id = players.player_id  WHERE matches.tourney_name = 'WTA Championships'  INTERSECT  SELECT  players.country_code, players.first_name  FROM matches  INNER JOIN players ON matches.winner_id = players.player_id  WHERE matches.tourney_name = 'Australian Open';
SELECT players.country_code, players.first_name  FROM players  WHERE players.player_id IN      (SELECT matches.winner_id       FROM matches       WHERE matches.tourney_name = 'WTA Championships')  AND players.player_id IN      (SELECT matches.winner_id       FROM matches       WHERE matches.tourney_name = 'Australian Open');
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.ranking_date ASC LIMIT 1;
SELECT players.first_name, players.country_code  FROM players  INNER JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.ranking_date ASC  LIMIT 1;
SELECT players.first_name, players.last_name  FROM players  ORDER BY players.birth_date;
SELECT players.first_name || ' ' || players.last_name AS full_name              FROM players              ORDER BY players.birth_date ASC;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date ASC;
SELECT players.first_name, players.last_name  FROM players  WHERE players.hand = 'left'  ORDER BY players.birth_date;
SELECT players.first_name, players.country_code  FROM players  INNER JOIN (     SELECT player_id, COUNT(tours) as num_tours      FROM rankings      GROUP BY player_id      ORDER BY num_tours DESC      LIMIT 1 ) as max_tours ON players.player_id = max_tours.player_id;
SELECT players.first_name, players.country_code  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.player_id  ORDER BY SUM(rankings.tours) DESC  LIMIT 1;
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT year     FROM      matches     GROUP BY      year     ORDER BY      COUNT(*) DESC     LIMIT 1;
SELECT matches.winner_name, matches.winner_rank_points FROM matches GROUP BY matches.winner_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT players.first_name || ' ' || players.last_name AS winner_name,              rankings.ranking_points AS winner_rank_points             FROM players             JOIN matches ON players.player_id = matches.winner_id             JOIN rankings ON players.player_id = rankings.player_id             GROUP BY matches.winner_id             ORDER BY COUNT(*) DESC, rankings.ranking_points DESC             LIMIT 1;
SELECT matches.winner_name FROM      matches JOIN players ON matches.winner_id = players.player_id WHERE      matches.tourney_name = 'Australian Open' ORDER BY      matches.winner_rank_points DESC LIMIT 1;
SELECT matches.winner_name FROM     matches WHERE     tourney_name = 'Australian Open' ORDER BY     winner_rank_points DESC LIMIT 1;
SELECT matches.winner_name, matches.loser_name FROM matches ORDER BY minutes DESC LIMIT 1;
SELECT matches.winner_name, matches.loser_name     FROM         matches     WHERE         minutes = (SELECT MAX(minutes) FROM matches);
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON rankings.player_id = players.player_id GROUP BY players.first_name
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking             FROM players             JOIN matches ON matches.winner_id = players.player_id             JOIN rankings ON rankings.player_id = players.player_id             GROUP BY players.first_name
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points             FROM players             JOIN rankings ON players.player_id = rankings.player_id             GROUP BY players.player_id, players.first_name;
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT COUNT(player_id) AS player_count, country_code FROM players GROUP BY country_code;
SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code;
SELECT players.country_code FROM     players GROUP BY     players.country_code ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT country_code FROM     players GROUP BY     country_code ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT players.country_code FROM players GROUP BY players.country_code HAVING COUNT(DISTINCT players.player_id) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date;
SELECT COUNT(DISTINCT tours) AS total_tours, ranking_date FROM rankings GROUP BY ranking_date;
SELECT COUNT(*) AS count, year FROM matches GROUP BY year;
SELECT COUNT(*) AS match_count, strftime('%Y', tourney_date) AS year FROM matches GROUP BY year;
SELECT players.first_name, players.last_name, matches.winner_rank  FROM players  JOIN matches ON matches.winner_id = players.player_id  ORDER BY matches.winner_age ASC  LIMIT 3;
SELECT players.first_name, players.last_name, matches.winner_rank FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.winner_age IN (     SELECT DISTINCT winner_age     FROM matches     ORDER BY winner_age ASC     LIMIT 3 ) ORDER BY matches.winner_age ASC;
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L';
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON matches.winner_id = players.player_id ORDER BY matches.winner_rank_points DESC LIMIT 1;
SELECT COUNT(*) as player_count, hand FROM players GROUP BY hand;
SELECT COUNT(*) as 'count ( * )', hand FROM players GROUP BY hand;
SELECT COUNT(*)  FROM ship WHERE disposition_of_ship = 'Captured';
SELECT ship.name, ship.tonnage FROM ship ORDER BY ship.name DESC;
SELECT name, date, result             FROM              battle;
SELECT MAX(killed) AS "max ( killed )", MIN(killed) AS "min ( killed )" FROM death;
SELECT AVG(injured) FROM death;
SELECT death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';
SELECT battle.name, battle.result FROM battle WHERE battle.bulgarian_commander != 'Boril';
SELECT battle.id, battle.name FROM battle INNER JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.ship_type = 'Brig';
SELECT battle.id, battle.name FROM battle JOIN ship ON ship.lost_in_battle = battle.id JOIN death ON death.caused_by_ship_id = ship.id GROUP BY battle.id, battle.name HAVING SUM(death.killed) > 10;
SELECT ship.id, ship.name  FROM ship  JOIN death ON death.caused_by_ship_id = ship.id  GROUP BY ship.id, ship.name  ORDER BY SUM(death.injured) DESC  LIMIT 1;
SELECT DISTINCT battle.name FROM battle JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.commander = 'Kaloyan' AND ship.lost_in_battle IN  (SELECT ship.lost_in_battle FROM ship WHERE ship.commander = 'Baldwin I');
SELECT COUNT(DISTINCT result) FROM battle
SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225');
SELECT battle.name, battle.date     FROM      battle     INNER JOIN      ship ON ship.lost_in_battle = battle.id     WHERE      ship.name = 'Lettice'     INTERSECT     SELECT      battle.name, battle.date     FROM      battle     INNER JOIN      ship ON ship.lost_in_battle = battle.id     WHERE      ship.name = 'HMS Atalanta';
SELECT battle.name, battle.result, battle.bulgarian_commander  FROM battle  WHERE battle.name NOT IN (SELECT ship.lost_in_battle FROM ship WHERE ship.location = 'English Channel');
SELECT death.note FROM death WHERE death.note LIKE '%East%';
SELECT addresses.line_1, addresses.line_2 FROM addresses;
SELECT addresses.line_1, addresses.line_2 FROM addresses;
SELECT COUNT(*) FROM courses;
SELECT COUNT(*) FROM courses;
SELECT courses.course_description FROM     courses WHERE     courses.course_name = 'math';
SELECT course_description FROM     courses WHERE     course_name LIKE '%math%';
SELECT zip_postcode     FROM addresses     WHERE city = 'Port Chelsea';
SELECT zip_postcode     FROM      addresses     WHERE      city = 'Port Chelsea';
SELECT departments.department_name, departments.department_id FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_id, departments.department_name HAVING COUNT(degree_programs.degree_program_id) = (     SELECT COUNT(degree_program_id)     FROM degree_programs     GROUP BY department_id     ORDER BY COUNT(degree_program_id) DESC     LIMIT 1 );
SELECT departments.department_name, departments.department_id FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_id, departments.department_name HAVING COUNT(degree_programs.degree_program_id) = (     SELECT MAX(degree_count)     FROM (         SELECT COUNT(degree_programs.degree_program_id) AS degree_count         FROM departments         JOIN degree_programs ON departments.department_id = degree_programs.department_id         GROUP BY departments.department_id     ) );
SELECT COUNT(DISTINCT department_id) FROM degree_programs;
SELECT COUNT(DISTINCT department_id) FROM degree_programs;
SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs;
SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs;
SELECT COUNT(degree_program_id) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering');
SELECT COUNT(degree_program_id) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering');
SELECT sections.section_name, sections.section_description FROM sections;
SELECT section_name, section_description FROM sections;
SELECT course_name, course_id FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(section_id) <= 2);
SELECT course_name, course_id FROM courses WHERE course_id NOT IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(section_id) >= 2);
SELECT section_name FROM sections ORDER BY section_name DESC;
SELECT section_name FROM     sections ORDER BY     section_name DESC;
SELECT semesters.semester_name, semesters.semester_id  FROM semesters  INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id  GROUP BY semesters.semester_name, semesters.semester_id  ORDER BY COUNT(student_enrolment.student_id) DESC  LIMIT 1;
SELECT semesters.semester_name, semesters.semester_id  FROM semesters  JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id  GROUP BY semesters.semester_id, semesters.semester_name  HAVING COUNT(student_enrolment.student_id) = (     SELECT MAX(student_count)     FROM (         SELECT COUNT(student_id) as student_count         FROM student_enrolment         GROUP BY semester_id     ) );
SELECT department_description FROM     departments WHERE     department_name LIKE '%computer%';
SELECT department_description FROM     departments WHERE     department_name LIKE '%computer%';
SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.first_name, students.middle_name, students.last_name, students.student_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2;
SELECT students.first_name, students.middle_name, students.last_name, students.student_id               FROM students               INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id               WHERE student_enrolment.semester_id = {semester_id}              GROUP BY students.first_name, students.middle_name, students.last_name, students.student_id               HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2;
SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name LIKE 'Bachelor%';
SELECT students.first_name, students.middle_name, students.last_name               FROM students               INNER JOIN degree_programs ON students.degree_program_id = degree_programs.degree_program_id               WHERE degree_programs.degree_summary_name LIKE '%Bachelors%';
SELECT degree_programs.degree_summary_name FROM     degree_programs JOIN     student_enrolment ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY     degree_programs.degree_summary_name ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT degree_summary_name FROM     degree_programs JOIN     student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY     degree_summary_name ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_program_id, degree_programs.degree_summary_name ORDER BY COUNT(student_enrolment.student_enrolment_id) DESC LIMIT 1;
SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id IN ( SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT student_enrolment.student_id, students.first_name, students.middle_name, students.last_name, COUNT(*) as enrollment_count FROM student_enrolment INNER JOIN students ON student_enrolment.student_id = students.student_id GROUP BY student_enrolment.student_id, students.first_name, students.middle_name, students.last_name ORDER BY enrollment_count DESC LIMIT 1;
SELECT students.first_name, students.middle_name, students.last_name, students.student_id, COUNT(student_enrolment.student_enrolment_id) AS num_enrollments FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY num_enrollments DESC LIMIT 1;
SELECT semesters.semester_name FROM   semesters LEFT JOIN   student_enrolment ON   semesters.semester_id = student_enrolment.semester_id WHERE   student_enrolment.semester_id IS NULL;
SELECT semesters.semester_name FROM semesters LEFT JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id WHERE student_enrolment.student_id IS NULL;
SELECT DISTINCT course_name FROM courses WHERE course_id IN (SELECT DISTINCT course_id FROM student_enrolment);
SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_enrolment_courses);
SELECT courses.course_name FROM     student_enrolment_courses JOIN     courses ON student_enrolment_courses.course_id = courses.course_id GROUP BY     courses.course_name ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id JOIN student_enrolment ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id GROUP BY courses.course_name ORDER BY COUNT(DISTINCT student_enrolment.student_id) DESC LIMIT 1;
SELECT students.last_name FROM students  JOIN addresses ON students.current_address_id = addresses.address_id  WHERE addresses.state_province_county = 'North Carolina'  AND students.student_id NOT IN (SELECT student_id FROM student_enrolment);
SELECT last_name FROM students WHERE current_address_id IN (     SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina' ) AND student_id NOT IN (     SELECT student_id FROM student_enrolment )
SELECT transcript_date, transcript_id  FROM transcripts  WHERE transcript_id IN (     SELECT transcript_id      FROM transcript_contents      GROUP BY transcript_id      HAVING COUNT(DISTINCT student_course_id) >= 2 );
SELECT transcripts.transcript_date, transcripts.transcript_id  FROM transcripts  INNER JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id  GROUP BY transcripts.transcript_date, transcripts.transcript_id  HAVING COUNT(DISTINCT transcript_contents.student_course_id) >= 2;
SELECT students.cell_mobile_number FROM     students WHERE     students.first_name = 'Timmothy'     AND students.last_name = 'Ward';
SELECT students.cell_mobile_number FROM students WHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward';
SELECT students.first_name, students.middle_name, students.last_name FROM students ORDER BY students.date_first_registered ASC LIMIT 1;
SELECT students.first_name, students.middle_name, students.last_name FROM students ORDER BY students.date_first_registered LIMIT 1;
SELECT students.first_name, students.middle_name, students.last_name FROM students ORDER BY students.date_first_registered LIMIT 1;
SELECT first_name, middle_name, last_name              FROM students              ORDER BY graduation_date ASC              LIMIT 1;
SELECT students.first_name FROM students INNER JOIN addresses AS permanent_address ON students.permanent_address_id = permanent_address.address_id INNER JOIN addresses AS current_address ON students.current_address_id = current_address.address_id WHERE permanent_address.line_1 <> current_address.line_1;
SELECT students.first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE students.permanent_address_id <> students.current_address_id;
SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM students JOIN addresses ON students.current_address_id = addresses.address_id GROUP BY addresses.address_id, addresses.line_1, addresses.line_2 HAVING COUNT(*) = (     SELECT MAX(student_count)     FROM (         SELECT COUNT(*) as student_count         FROM students         GROUP BY current_address_id     ) );
SELECT addresses.address_id, addresses.line_1, addresses.line_2  FROM addresses  JOIN students ON students.permanent_address_id = addresses.address_id  GROUP BY addresses.address_id  ORDER BY COUNT(students.student_id) DESC  LIMIT 1;
SELECT AVG(transcript_date) AS average_print_date FROM transcripts;
SELECT AVG(transcript_date) FROM   transcripts;
SELECT transcript_date, other_details     FROM transcripts     ORDER BY transcript_date     LIMIT 1;
SELECT MIN(transcript_date) AS earliest_date, other_details FROM transcripts GROUP BY transcript_date ORDER BY transcript_date ASC LIMIT 1;
SELECT COUNT(DISTINCT transcript_id)  FROM transcripts;
SELECT COUNT(*) FROM transcripts;
SELECT transcripts.transcript_date FROM     transcripts ORDER BY     transcripts.transcript_date DESC LIMIT 1;
SELECT transcripts.transcript_date FROM     transcripts ORDER BY     transcripts.transcript_date DESC LIMIT 1;
SELECT COUNT(*) AS max_enrollment_count, student_course_id FROM transcript_contents GROUP BY student_course_id HAVING max_enrollment_count = (     SELECT MAX(enrollment_count)     FROM (         SELECT COUNT(*) AS enrollment_count         FROM transcript_contents         GROUP BY student_course_id     ) );
SELECT COUNT(*) as count_course, student_course_id FROM transcript_contents GROUP BY student_course_id ORDER BY count_course DESC LIMIT 1;
SELECT transcripts.transcript_date, transcripts.transcript_id FROM      transcripts JOIN      transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY      transcripts.transcript_date, transcripts.transcript_id ORDER BY      COUNT(*) ASC LIMIT 1;
SELECT transcript_date, transcript_id  FROM transcripts GROUP BY transcript_date, transcript_id HAVING COUNT(*) = (     SELECT MIN(count_results)     FROM (         SELECT COUNT(*) as count_results         FROM transcripts         GROUP BY transcript_date, transcript_id     ) AS result_counts )
SELECT semester_id             FROM              semesters             WHERE              semester_id IN (              SELECT               DISTINCT semester_id              FROM               students              INNER JOIN               degree_programs ON students.degree_program_id = degree_programs.degree_program_id              WHERE               degree_summary_name = 'Master'              )              AND semester_id IN (              SELECT               DISTINCT semester_id              FROM               students              INNER JOIN               degree_programs ON students.degree_program_id = degree_programs.degree_program_id              WHERE               degree_summary_name = 'Bachelor'              );
SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (     SELECT degree_program_id     FROM degree_programs     WHERE degree_program_id = 'Masters' OR degree_program_id = 'Bachelors' ) GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2;
SELECT COUNT(DISTINCT current_address_id) FROM students;
SELECT COUNT(DISTINCT current_address_id) FROM students;
SELECT students.last_name FROM students ORDER BY students.last_name DESC;
SELECT students.other_student_details FROM students ORDER BY students.last_name DESC;
SELECT section_description FROM sections WHERE section_name = 'h';
SELECT sections.section_description FROM     sections WHERE     sections.section_name = 'h';
SELECT students.first_name  FROM students  JOIN addresses ON students.permanent_address_id = addresses.address_id  WHERE addresses.country = 'Haiti'      OR students.cell_mobile_number = '09700166582';
SELECT DISTINCT students.first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = 'Haiti' OR students.cell_mobile_number = '09700166582';
SELECT title FROM     cartoon ORDER BY     title ASC;
SELECT title      FROM cartoon      ORDER BY title ASC;
SELECT cartoon.title FROM     cartoon WHERE     cartoon.directed_by = "Ben Jones";
SELECT cartoon.title FROM     cartoon WHERE     cartoon.directed_by = 'Ben Jones';
SELECT COUNT(*)  FROM cartoon  WHERE written_by = 'Joseph Kuhr';
SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr';
SELECT cartoon.title, cartoon.directed_by FROM     cartoon JOIN     tv_channel ON cartoon.channel = tv_channel.id ORDER BY     cartoon.original_air_date;
SELECT cartoon.title, cartoon.directed_by FROM     cartoon JOIN     tv_channel ON cartoon.channel = tv_channel.id ORDER BY     cartoon.original_air_date;
SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti';
SELECT cartoon.title FROM     cartoon WHERE     cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Brandon Vietti';
SELECT tv_channel.country, COUNT(tv_channel.id) AS num_channels     FROM tv_channel     GROUP BY tv_channel.country     ORDER BY num_channels DESC     LIMIT 1;
SELECT tv_channel.country,      COUNT(tv_channel.id) AS channel_count FROM      tv_channel GROUP BY      tv_channel.country ORDER BY      channel_count DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;
SELECT content FROM     tv_channel WHERE     series_name = 'Sky Radio';
SELECT content FROM   tv_channel WHERE   series_name = 'Sky Radio';
SELECT tv_channel.package_option              FROM              tv_channel              JOIN              tv_series              ON              tv_series.channel = tv_channel.id              WHERE              tv_channel.series_name = "Sky Radio";
SELECT tv_channel.package_option FROM tv_channel WHERE tv_channel.series_name = 'Sky Radio';
SELECT COUNT(*) FROM     tv_channel WHERE     language = 'English';
SELECT COUNT(DISTINCT id) FROM tv_channel WHERE language = 'English';
SELECT language, COUNT(*) as num_tv_channels FROM tv_channel GROUP BY language ORDER BY num_tv_channels ASC LIMIT 1;
SELECT tv_channel.language, COUNT(tv_channel.id) AS channel_count     FROM      tv_channel     GROUP BY      tv_channel.language     HAVING      COUNT(tv_channel.id) = (        SELECT          MIN(channel_count)        FROM          (SELECT            COUNT(tv_channel.id) AS channel_count          FROM            tv_channel          GROUP BY            tv_channel.language) AS subquery      );
SELECT tv_channel.language,      COUNT(tv_channel.id) AS channel_count     FROM      tv_channel     GROUP BY      tv_channel.language;
SELECT language,      COUNT(DISTINCT id) AS num_tv_channels FROM      tv_channel GROUP BY      language;
SELECT tv_channel.series_name FROM tv_channel JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.title = "The Rise of the Blue Beetle!";
SELECT tv_channel.series_name  FROM tv_channel  JOIN cartoon ON cartoon.channel = tv_channel.id  WHERE cartoon.title = 'The Rise of the Blue Beetle';
SELECT cartoon.title  FROM cartoon  JOIN tv_channel ON cartoon.channel = tv_channel.id  JOIN tv_series ON cartoon.channel = tv_series.channel  WHERE tv_channel.series_name = 'Sky Radio';
SELECT cartoon.title  FROM      cartoon  JOIN      tv_channel ON cartoon.channel = tv_channel.id  WHERE      tv_channel.series_name = "Sky Radio";
SELECT episode  FROM tv_series  ORDER BY rating DESC;
SELECT episode FROM tv_series ORDER BY rating DESC;
SELECT episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3;
SELECT tv_series.episode, tv_series.rating FROM     tv_series ORDER BY     rating DESC LIMIT 3;
SELECT MIN(share) AS "min (share)", MAX(share) AS "max (share)" FROM tv_series;
SELECT MAX(share), MIN(share) FROM tv_series;
SELECT tv_series.air_date FROM tv_series WHERE tv_series.episode = "A Love of a Lifetime";
SELECT tv_series.air_date FROM     tv_series WHERE     tv_series.episode = "A Love of a Lifetime";
SELECT tv_series.weekly_rank FROM tv_series WHERE tv_series.episode = "A Love of a Lifetime";
SELECT weekly_rank FROM     tv_series WHERE     episode = "A Love of a Lifetime";
SELECT tv_channel.series_name FROM   tv_channel JOIN   tv_series ON tv_channel.id = tv_series.channel WHERE   tv_series.episode = 'A Love of a Lifetime';
SELECT tv_series.series_name             FROM              tv_series             JOIN              tv_channel ON tv_series.channel = tv_channel.id             WHERE              tv_series.episode = 'A Love of a Lifetime';
SELECT tv_series.episode FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio';
SELECT tv_series.episode  FROM tv_series  JOIN tv_channel ON tv_series.channel = tv_channel.id  WHERE tv_channel.series_name = "Sky Radio"
SELECT COUNT(*) AS count, directed_by FROM cartoon GROUP BY directed_by;
SELECT COUNT(*) as cartoon_count, directed_by  FROM cartoon  GROUP BY directed_by;
SELECT production_code, channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1;
SELECT cartoon.production_code, cartoon.channel FROM     cartoon INNER JOIN     tv_channel ON cartoon.channel = tv_channel.id ORDER BY     cartoon.original_air_date DESC LIMIT 1;
SELECT tv_channel.package_option AS package_option, tv_series.channel AS channel, tv_series.title AS series_name   FROM tv_channel   JOIN tv_series ON tv_channel.id = tv_series.channel   WHERE tv_channel.high_definition_tv = 1;
SELECT tv_channel.package_option, tv_channel.series_name  FROM tv_channel  WHERE tv_channel.hight_definition_tv = 1;
SELECT tv_channel.country FROM     cartoon JOIN     tv_channel ON cartoon.channel = tv_channel.id WHERE     cartoon.written_by = 'Todd Casey';
SELECT tv_channel.country FROM     cartoon JOIN     tv_channel ON cartoon.channel = tv_channel.id WHERE     cartoon.written_by = 'Todd Casey';
SELECT tv_channel.country  FROM tv_channel  WHERE tv_channel.id NOT IN (     SELECT cartoon.channel      FROM cartoon      WHERE cartoon.written_by = 'Todd Casey' );
SELECT tv_channel.country FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.written_by = 'Todd Casey' ) AND tv_channel.id IN ( SELECT cartoon.channel FROM cartoon );
SELECT tv_channel.series_name, tv_channel.country  FROM cartoon  JOIN tv_channel ON cartoon.channel = tv_channel.id  WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang') GROUP BY tv_channel.series_name, tv_channel.country;
SELECT tv_channel.series_name, tv_channel.country FROM tv_channel WHERE tv_channel.id IN (     SELECT cartoon.channel     FROM cartoon     WHERE cartoon.directed_by = 'Ben Jones' ) AND tv_channel.id IN (     SELECT cartoon.channel     FROM cartoon     WHERE cartoon.directed_by = 'Michael Chang' );
SELECT tv_channel.pixel_aspect_ratio_par,  tv_channel.nation   FROM tv_channel   WHERE tv_channel.language != 'English';
SELECT tv_channel.pixel_aspect_ratio_par, tv_channel.country FROM tv_channel WHERE tv_channel.language != 'English';
SELECT tv_channel.id  FROM tv_channel  WHERE country IN (     SELECT country      FROM tv_channel      GROUP BY country      HAVING COUNT(id) > 2 );
SELECT tv_channel.id  FROM tv_channel  GROUP BY tv_channel.id  HAVING COUNT(*) > 2;
SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by = 'Ben Jones' );
SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by = 'Ben Jones' );
SELECT tv_channel.package_option FROM     tv_channel WHERE     tv_channel.id NOT IN (         SELECT             cartoon.channel         FROM             cartoon         WHERE             cartoon.directed_by = 'Ben Jones'     );
SELECT package_option FROM   tv_channel WHERE   id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');
SELECT COUNT(*) FROM poker_player;
SELECT COUNT(poker_player_id) AS total_players FROM poker_player;
SELECT poker_player.earnings FROM     poker_player ORDER BY     poker_player.earnings DESC;
SELECT earnings FROM     poker_player ORDER BY     earnings DESC;
SELECT final_table_made, best_finish FROM     poker_player;
SELECT final_table_made, best_finish FROM      poker_player;
SELECT AVG(earnings) FROM poker_player;
SELECT AVG(earnings) FROM poker_player;
SELECT poker_player.money_rank FROM     poker_player WHERE     poker_player.earnings = (         SELECT             MAX(earnings)         FROM             poker_player     );
SELECT poker_player.money_rank FROM     poker_player WHERE     poker_player.earnings = (         SELECT             MAX(earnings)         FROM             poker_player     );
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;
SELECT people.name FROM     people JOIN     poker_player ON     people.people_id = poker_player.people_id;
SELECT people.name FROM     poker_player JOIN     people ON poker_player.people_id = people.people_id;
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000;
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000;
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made ASC;
SELECT people.name  FROM poker_player  JOIN people ON poker_player.people_id = people.people_id  ORDER BY final_table_made ASC;
SELECT people.birth_date FROM     poker_player     INNER JOIN people ON poker_player.people_id = people.people_id ORDER BY     poker_player.earnings ASC LIMIT 1;
SELECT birth_date FROM     poker_player JOIN     people ON poker_player.people_id = people.people_id ORDER BY     earnings ASC LIMIT 1;
SELECT poker_player.money_rank FROM     poker_player JOIN     people ON poker_player.people_id = people.people_id ORDER BY     people.height DESC LIMIT 1;
SELECT poker_player.money_rank FROM     poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY     people.height DESC LIMIT 1;
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200;
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200;
SELECT people.name FROM     poker_player     INNER JOIN people ON poker_player.people_id = people.people_id ORDER BY     poker_player.earnings DESC;
SELECT people.name FROM      poker_player JOIN      people ON poker_player.people_id = people.people_id ORDER BY      poker_player.earnings DESC;
SELECT people.nationality,      COUNT(people.people_id) as count     FROM      people     GROUP BY      people.nationality;
SELECT nationality,     COUNT(*) as count FROM     people GROUP BY     nationality;
SELECT nationality FROM  people GROUP BY  nationality ORDER BY  COUNT(*) DESC LIMIT 1;
SELECT nationality FROM     people GROUP BY     nationality ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT DISTINCT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;
SELECT people.name, people.birth_date     FROM people     ORDER BY people.name ASC;
SELECT people.name, people.birth_date FROM people ORDER BY people.name ASC;
SELECT name FROM     people WHERE     nationality <> 'Russia';
SELECT people.name FROM   people WHERE   people.nationality != 'Russia';
SELECT people.name FROM   people WHERE   people.people_id NOT IN (     SELECT       poker_player.people_id     FROM       poker_player   );
SELECT people.name FROM people LEFT JOIN poker_player ON people.people_id = poker_player.people_id WHERE poker_player.people_id IS NULL;
SELECT COUNT(DISTINCT nationality) FROM people;
SELECT COUNT(DISTINCT nationality) AS num_nationalities FROM people;
SELECT COUNT(*) AS state_count FROM area_code_state;
SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC;
SELECT vote_id, phone_number, state FROM votes;
SELECT MAX(area_code), MIN(area_code) FROM area_code_state;
SELECT MAX(created) FROM votes JOIN area_code_state ON votes.state = area_code_state.state WHERE area_code_state.state = 'CA';
SELECT contestant_name     FROM     contestants     WHERE     contestant_name != 'Jessie Alloway';
SELECT votes.state, votes.created FROM votes
SELECT contestants.contestant_number, contestants.contestant_name FROM     contestants WHERE     contestants.contestant_number IN (         SELECT             contestant_number         FROM             votes         GROUP BY             contestant_number         HAVING             COUNT(*) >= 2     );
SELECT contestants.contestant_number, contestants.contestant_name FROM contestants JOIN votes ON votes.contestant_number = contestants.contestant_number GROUP BY contestants.contestant_number, contestants.contestant_name ORDER BY COUNT(votes.vote_id) ASC LIMIT 1;
SELECT count(*)  FROM votes  WHERE state = 'NY' OR state = 'CA';
SELECT COUNT(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes);
SELECT area_code_state.area_code FROM     area_code_state JOIN     votes ON votes.state = area_code_state.state GROUP BY     area_code_state.area_code ORDER BY     COUNT(votes.phone_number) DESC LIMIT 1;
SELECT votes.created, votes.state, votes.phone_number FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number WHERE contestants.contestant_name = 'Tabatha Gehling';
###
SELECT contestant_name FROM     contestants WHERE     contestant_name LIKE '%Al%';
SELECT country.name FROM country WHERE country.indepyear > 1950;
SELECT name     FROM      country     WHERE      indepyear > 1950;
SELECT COUNT(DISTINCT name)  FROM country  WHERE governmentform = 'Republic';
SELECT COUNT(*) FROM     country WHERE     governmentform = 'Republic';
SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean';
SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean';
SELECT continent FROM     country WHERE     name = 'Anguilla';
SELECT continent     FROM country     WHERE name = 'Anguilla';
SELECT country.region FROM     city JOIN     country ON city.countrycode = country.code WHERE     city.name = 'Kabul';
SELECT district  FROM city  WHERE name = 'Kabul';
SELECT language     FROM     countrylanguage     WHERE     countrycode = 'ABW'     ORDER BY     percentage DESC     LIMIT 1;
SELECT countrylanguage.language FROM     countrylanguage JOIN     country ON countrylanguage.countrycode = country.code WHERE     country.name = 'Aruba'     AND     countrylanguage.percentage = (         SELECT             MAX(percentage)         FROM             countrylanguage         JOIN             country ON countrylanguage.countrycode = country.code         WHERE             country.name = 'Aruba'     );
SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';
SELECT population, lifeexpectancy FROM     country WHERE     name = 'Brazil';
SELECT region, population FROM country WHERE name = 'Angola';
SELECT country.region, country.population  FROM country  WHERE country.name = 'Angola';
SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa';
SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND name = 'Central African Republic';
SELECT country.name FROM     country WHERE     country.continent = 'Asia' ORDER BY     country.lifeexpectancy ASC LIMIT 1;
SELECT country.name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1;
SELECT SUM(population) AS total_population, MAX(GNP) AS max_GNP FROM country WHERE continent = 'Asia';
SELECT SUM(population) AS total_population, MAX(gnp) AS largest_gnp FROM country WHERE continent = 'Asia';
SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic';
SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic';
SELECT SUM(surfacearea)  FROM      country  WHERE      continent IN ('Asia', 'Europe');
SELECT SUM(surfacearea)  FROM      country  WHERE      continent = 'Asia' OR continent = 'Europe';
SELECT SUM(population) FROM     city WHERE     district = 'Gelderland';
SELECT SUM(population)  FROM city  WHERE district = 'Gelderland';
SELECT AVG(gnp) as "avg ( gnp )", SUM(population) as "sum ( population )" FROM country WHERE governmentform = 'US territory';
SELECT AVG(gnp) AS average_gnp, SUM(population) AS total_population FROM country WHERE governmentform LIKE '%US territory%';
SELECT COUNT(DISTINCT language) FROM countrylanguage;
SELECT COUNT(DISTINCT language) FROM countrylanguage;
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';
SELECT COUNT(DISTINCT language) FROM     countrylanguage JOIN     country ON     countrylanguage.countrycode = country.code WHERE     country.name = 'Aruba';
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW';
SELECT COUNT(language) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T';
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T';
SELECT country.name FROM     country INNER JOIN     countrylanguage ON country.code = countrylanguage.countrycode GROUP BY     country.name ORDER BY     COUNT(DISTINCT countrylanguage.language) DESC LIMIT 1;
SELECT country.name FROM     country JOIN     countrylanguage ON country.code = countrylanguage.countrycode GROUP BY     country.name ORDER BY     COUNT(DISTINCT countrylanguage.language) DESC LIMIT 1;
SELECT continent             FROM countrylanguage             INNER JOIN country ON countrylanguage.countrycode = country.code             GROUP BY country.continent             HAVING COUNT(DISTINCT countrylanguage.language) = (                 SELECT MAX(language_count)                 FROM (                     SELECT COUNT(DISTINCT language) AS language_count                     FROM countrylanguage                     INNER JOIN country ON countrylanguage.countrycode = country.code                     GROUP BY country.continent                 )             );
SELECT continent FROM (     SELECT continent, COUNT(DISTINCT language) AS num_languages     FROM country     INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode     GROUP BY continent ) AS subquery WHERE num_languages = (     SELECT MAX(num_languages)     FROM (         SELECT COUNT(DISTINCT language) AS num_languages         FROM country         INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode         GROUP BY continent     ) AS subquery2 );
SELECT COUNT(*) FROM (     SELECT country.code     FROM countrylanguage     INNER JOIN country ON countrylanguage.countrycode = country.code     WHERE countrylanguage.language IN ('English', 'Dutch')     GROUP BY country.code     HAVING COUNT(DISTINCT countrylanguage.language) = 2 ) AS subquery;
SELECT COUNT(*) FROM (     SELECT country.code     FROM country     JOIN countrylanguage ON country.code = countrylanguage.countrycode     WHERE countrylanguage.language IN ('English', 'Dutch')     GROUP BY country.code     HAVING COUNT(DISTINCT countrylanguage.language) = 2 ) AS subquery;
SELECT c.name  FROM country c  WHERE c.code IN (     SELECT cl.countrycode      FROM countrylanguage cl      WHERE cl.language = 'English'      INTERSECT      SELECT cl.countrycode      FROM countrylanguage cl      WHERE cl.language = 'French' );
SELECT country.name  FROM country WHERE country.code IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English'     AND isofficial = 'T' ) AND country.code IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'French'     AND isofficial = 'T' );
SELECT country.name FROM   country WHERE   country.code IN (     SELECT       countrycode     FROM       countrylanguage     WHERE       language = 'English' AND isofficial = 'T'   )   AND country.code IN (     SELECT       countrycode     FROM       countrylanguage     WHERE       language = 'French' AND isofficial = 'T'   );
SELECT country.name FROM     country WHERE     (SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrylanguage.countrycode = country.code AND (language = 'English' OR language = 'French') AND isofficial = 'T') = 2;
SELECT COUNT(DISTINCT continent) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language = 'Chinese';
SELECT COUNT(DISTINCT continent) FROM country WHERE code IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'Chinese' );
SELECT DISTINCT country.region FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'Dutch');
SELECT DISTINCT country.region FROM      country  JOIN      countrylanguage ON country.code = countrylanguage.countrycode WHERE      countrylanguage.language IN ('Dutch', 'English');
SELECT DISTINCT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE (countrylanguage.language = 'English' AND countrylanguage.isofficial = 'T')  OR (countrylanguage.language = 'Dutch' AND countrylanguage.isofficial = 'T');
SELECT DISTINCT country.name  FROM country  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language IN ('English', 'Dutch')  AND countrylanguage.isofficial = 'T';
SELECT language  FROM countrylanguage  WHERE countrycode IN (     SELECT code      FROM country      WHERE continent = 'Asia' ) ORDER BY percentage DESC  LIMIT 1;
SELECT language FROM     countrylanguage WHERE     countrycode IN (         SELECT             code         FROM             country         WHERE             continent = 'Asia'     ) GROUP BY     language ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT language FROM     countrylanguage WHERE     countrycode IN (         SELECT             code         FROM             country         WHERE             governmentform = 'Republic'     ) GROUP BY     language HAVING     COUNT(DISTINCT countrycode) = 1;
SELECT language FROM     countrylanguage WHERE     countrycode IN (         SELECT             code         FROM             country         WHERE             governmentform = 'Republic'     ) GROUP BY     language HAVING     COUNT(*) = 1;
SELECT city.name, city.population  FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE countrylanguage.language = 'English'  ORDER BY city.population DESC  LIMIT 1;
SELECT city.name, city.population FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1;
SELECT country.name, country.population, country.lifeexpectancy FROM    country WHERE    country.continent = 'Asia' ORDER BY    country.surfacearea DESC LIMIT 1;
SELECT country.name, country.population, country.lifeexpectancy FROM country WHERE country.continent = 'Asia' ORDER BY country.surfacearea DESC LIMIT 1;
SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English'     AND isofficial = 'T' )
SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English'     AND isofficial = 'T' );
SELECT SUM(country.population)  FROM     country WHERE     country.code NOT IN (         SELECT             countrycode         FROM             countrylanguage         WHERE             language = 'English'     );
SELECT SUM(population) FROM country WHERE code NOT IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' )
SELECT DISTINCT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.headofstate = 'Beatrix' AND countrylanguage.isofficial = 1;
SELECT countrylanguage.language FROM   countrylanguage JOIN   country ON country.code = countrylanguage.countrycode WHERE   country.headofstate = 'Beatrix'   AND countrylanguage.isofficial = 'T';
SELECT COUNT(DISTINCT language) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.indepyear < 1930 AND countrylanguage.isofficial = 'T';
SELECT COUNT(DISTINCT countrylanguage.language) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.indepyear < 1930 AND countrylanguage.isofficial = 1;
SELECT country.name  FROM country  WHERE country.surfacearea > (     SELECT MAX(surfacearea)      FROM country      WHERE continent = 'Europe' );
SELECT country.name FROM country WHERE country.surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe');
SELECT country.name  FROM country  WHERE country.continent = 'Africa'  AND country.population < (SELECT MIN(population) FROM country WHERE continent = 'Asia');
SELECT country.name FROM     country WHERE     country.continent = 'Africa' AND     country.population < (         SELECT             MIN(population)         FROM             country         WHERE             continent = 'Asia'     );
SELECT country.name FROM     country WHERE     country.continent = 'Asia'     AND country.population > (         SELECT             MAX(population)         FROM             country         WHERE             continent = 'Africa'     );
SELECT c1.name FROM country c1 WHERE c1.continent = 'Asia'  AND c1.population > (SELECT MAX(c2.population) FROM country c2 WHERE c2.continent = 'Africa');
SELECT country.code  FROM country WHERE country.code NOT IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' );
SELECT country.code  FROM country  WHERE country.code NOT IN (     SELECT countrylanguage.countrycode      FROM countrylanguage      WHERE countrylanguage.language = 'English'     AND countrylanguage.isofficial = 'T' );
SELECT country.code  FROM country  WHERE country.code NOT IN (      SELECT countrycode      FROM countrylanguage      WHERE language = 'English' ) ;
SELECT country.code FROM     country WHERE     country.code IN (         SELECT             countrycode         FROM             countrylanguage         WHERE             language <> 'English'     );
SELECT country.code FROM     country WHERE     country.code NOT IN (         SELECT             countrylanguage.countrycode         FROM             countrylanguage         WHERE             language = 'English'     )     AND governmentform <> 'Republic';
SELECT country.code FROM     country WHERE     country.code NOT IN (         SELECT             countrylanguage.countrycode         FROM             countrylanguage         WHERE             countrylanguage.language = 'English'     )     AND country.governmentform != 'Republic';
SELECT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Europe'  AND countrylanguage.language = 'English'  AND countrylanguage.isofficial = 'F';
SELECT name FROM city WHERE countrycode IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'F') AND district = 'Europe';
SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 'T';
SELECT DISTINCT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 'T';
SELECT country.name, country.indepyear, country.surfacearea  FROM country  WHERE country.population = (SELECT MIN(population) FROM country)  LIMIT 1;
SELECT country.name, country.indepyear, country.surfacearea  FROM country  WHERE country.population = (SELECT MIN(population) FROM country);
SELECT country.name, country.population, country.headofstate  FROM country  WHERE country.surfacearea = (     SELECT MAX(surfacearea)      FROM country );
SELECT name, population, headofstate      FROM       country      ORDER BY       surfacearea DESC      LIMIT 1;
SELECT COUNT(countrylanguage.language) AS language_count, country.name FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING language_count >= 3;
SELECT COUNT(countrylanguage.language) as num_languages, country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  GROUP BY country.name  HAVING num_languages > 2;
SELECT COUNT(*) as city_count, district FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;
SELECT COUNT(*) as count, district  FROM city  WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;
SELECT country.governmentform AS government_form, SUM(country.population) AS total_population  FROM country  WHERE country.governmentform IN (     SELECT governmentform      FROM country      WHERE lifeexpectancy > 72      GROUP BY governmentform ) GROUP BY country.governmentform;
SELECT SUM(country.population) AS total_population, country.governmentform FROM country WHERE country.governmentform IN (     SELECT governmentform     FROM country     GROUP BY governmentform     HAVING AVG(lifeexpectancy) > 72 ) GROUP BY country.governmentform;
SELECT continent,              AVG(lifeexpectancy),              SUM(population)             FROM country             WHERE continent IN              (SELECT continent FROM country WHERE lifeexpectancy < 72)             GROUP BY continent;
SELECT continent, SUM(population) as total_population, AVG(lifeexpectancy) as average_life_expectancy FROM country GROUP BY continent HAVING average_life_expectancy < 72;
SELECT country.name, country.surfacearea     FROM country     ORDER BY country.surfacearea DESC     LIMIT 5;
SELECT country.name, country.surfacearea FROM country ORDER BY country.surfacearea DESC LIMIT 5;
SELECT country.name FROM     country ORDER BY     country.population DESC LIMIT 3;
SELECT country.name FROM     country ORDER BY     country.population DESC LIMIT 3;
SELECT country.name FROM    country ORDER BY    country.population ASC LIMIT 3;
SELECT country.name FROM     country ORDER BY     population LIMIT 3;
SELECT COUNT(*)  FROM country  WHERE continent = 'Asia';
SELECT COUNT(*) FROM country WHERE continent = 'Asia';
SELECT country.name FROM     country WHERE     country.continent = 'Europe' AND country.population = 80000;
SELECT country.name FROM   country WHERE   continent = 'Europe'   AND population = 80000;
SELECT SUM(population) AS "sum ( population )", AVG(surfacearea) AS "avg ( surfacearea )" FROM country WHERE continent = 'North America' AND surfacearea > 3000;
SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000;
SELECT city.name FROM city WHERE city.population BETWEEN 160000 AND 900000;
SELECT city.name FROM city WHERE city.population BETWEEN 160000 AND 900000;
SELECT language FROM     countrylanguage GROUP BY     language ORDER BY     COUNT(DISTINCT countrycode) DESC LIMIT 1;
SELECT language     FROM      countrylanguage     GROUP BY      language     ORDER BY      COUNT(DISTINCT countrycode) DESC     LIMIT 1;
SELECT countrylanguage.language, countrylanguage.countrycode, MAX(countrylanguage.percentage) FROM     countrylanguage INNER JOIN     (     SELECT         countrycode,         MAX(percentage) AS max_percentage     FROM         countrylanguage     GROUP BY         countrycode     ) AS max_lang ON     countrylanguage.countrycode = max_lang.countrycode     AND countrylanguage.percentage = max_lang.max_percentage GROUP BY     countrylanguage.countrycode;
SELECT country.code, countrylanguage.language, MAX(countrylanguage.percentage) FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code;
SELECT COUNT(*) FROM (SELECT countrylanguage.language, MAX(countrylanguage.percentage) AS max_percentage FROM countrylanguage WHERE countrylanguage.language = 'Spanish' GROUP BY countrylanguage.language) AS subquery;
SELECT COUNT(DISTINCT countrylanguage.countrycode) FROM countrylanguage WHERE countrylanguage.language = 'Spanish' AND countrylanguage.isofficial = 'T' AND countrylanguage.percentage > 50;
SELECT countrylanguage.countrycode, MAX(countrylanguage.percentage) FROM countrylanguage WHERE countrylanguage.language = 'Spanish' GROUP BY countrylanguage.countrycode ORDER BY MAX(countrylanguage.percentage) DESC LIMIT 1;
SELECT country.code, MAX(countrylanguage.percentage) FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish' AND countrylanguage.isofficial = 'T' GROUP BY country.code;
SELECT COUNT(*) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT conductor.name FROM conductor ORDER BY conductor.age ASC;
SELECT conductor.name FROM    conductor ORDER BY    conductor.age;
SELECT conductor.name FROM   conductor WHERE   conductor.nationality <> 'USA';
SELECT name FROM conductor WHERE nationality <> 'USA';
SELECT record_company     FROM      orchestra     ORDER BY      year_of_founded DESC;
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;
SELECT AVG(attendance) FROM show;
SELECT AVG(attendance) FROM show;
SELECT MAX(share) AS max_share, MIN(share) AS min_share FROM performance WHERE type <> 'Live final';
SELECT MAX(share) AS max_share, MIN(share) AS min_share FROM performance WHERE type != 'Live final'
SELECT COUNT(DISTINCT nationality) FROM conductor;
SELECT COUNT(DISTINCT nationality) FROM conductor;
SELECT conductor.name FROM     conductor ORDER BY     conductor.year_of_work DESC;
SELECT conductor.name FROM     conductor ORDER BY     conductor.year_of_work DESC;
SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1;
SELECT conductor.name FROM conductor GROUP BY conductor.name ORDER BY conductor.year_of_work DESC LIMIT 1;
SELECT conductor.name, orchestra.orchestra FROM conductor INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;
SELECT conductor.name, orchestra.orchestra     FROM conductor     INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;
SELECT name FROM conductor GROUP BY name HAVING COUNT(DISTINCT conductor_id) > 1;
SELECT conductor.name FROM     conductor JOIN     orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY     conductor.name HAVING     COUNT(DISTINCT orchestra.orchestra_id) > 1;
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY COUNT(orchestra.orchestra) DESC LIMIT 1;
SELECT conductor.name FROM     conductor JOIN     orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY     conductor.conductor_id ORDER BY     COUNT(orchestra.orchestra_id) DESC LIMIT 1;
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008;
SELECT conductor.name FROM     conductor JOIN     orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE     orchestra.year_of_founded > 2008;
SELECT record_company,      COUNT(orchestra) AS num_orchestras     FROM      orchestra     GROUP BY      record_company;
SELECT record_company, COUNT(orchestra) as num_orchestras     FROM orchestra     GROUP BY record_company;
SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT(*) ASC;
SELECT orchestra.major_record_format  FROM orchestra  JOIN performance ON orchestra.orchestra_id = performance.orchestra_id  GROUP BY orchestra.major_record_format  ORDER BY COUNT(*) DESC;
SELECT orchestra.record_company FROM   orchestra GROUP BY   orchestra.record_company ORDER BY   COUNT(orchestra.orchestra_id) DESC LIMIT 1;
SELECT record_company FROM     orchestra GROUP BY     record_company ORDER BY     COUNT(orchestra) DESC LIMIT 1;
SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance);
SELECT orchestra.orchestra FROM orchestra LEFT JOIN performance ON orchestra.orchestra_id = performance.orchestra_id WHERE performance.performance_id IS NULL;
SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded > 2003;
SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded > 2003;
SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format IN ('CD', 'DVD');
SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format IN ('CD', 'DVD');
SELECT year_of_founded FROM orchestra WHERE orchestra_id IN ( SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1 );
SELECT year_of_founded FROM     orchestra WHERE     orchestra_id IN (         SELECT             orchestra_id         FROM             performance         GROUP BY             orchestra_id         HAVING             COUNT(*) > 1     );
SELECT COUNT(DISTINCT id) FROM highschooler;
SELECT COUNT(*) FROM highschooler;
SELECT name, grade FROM highschooler;
SELECT name, grade FROM highschooler
SELECT grade FROM    highschooler;
SELECT grade FROM highschooler;
SELECT grade FROM   highschooler WHERE   name = 'Kyle';
SELECT grade FROM highschooler WHERE name = 'Kyle';
SELECT name FROM highschooler WHERE grade = 10;
SELECT name     FROM      highschooler     WHERE      grade = 10;
SELECT id FROM highschooler WHERE name = 'Kyle';
SELECT id  FROM highschooler  WHERE name = 'Kyle';
SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);
SELECT grade, COUNT(*) FROM highschooler GROUP BY grade;
SELECT grade, COUNT(*) AS count     FROM highschooler     GROUP BY grade;
SELECT grade FROM     highschooler GROUP BY     grade ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT grade FROM    highschooler GROUP BY    grade ORDER BY    COUNT(*) DESC LIMIT 1;
SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT friend.student_id, COUNT(friend.friend_id) AS num_friends FROM friend GROUP BY friend.student_id;
SELECT friend.student_id, COUNT(*) AS num_friends  FROM friend  GROUP BY friend.student_id;
SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends  FROM highschooler  LEFT JOIN friend ON friend.student_id = highschooler.id  GROUP BY highschooler.name;
SELECT highschooler.name, COUNT(friend.friend_id) AS friend_count  FROM highschooler  LEFT JOIN friend ON highschooler.id = friend.student_id  GROUP BY highschooler.name;
SELECT name FROM     highschooler WHERE     id IN (         SELECT             student_id         FROM             friend         GROUP BY             student_id         ORDER BY             COUNT(friend_id) DESC         LIMIT 1     );
SELECT name FROM     highschooler WHERE     id IN (         SELECT             student_id         FROM             friend         GROUP BY             student_id         ORDER BY             COUNT(friend_id) DESC         LIMIT 1     );
SELECT name FROM highschooler WHERE id IN (     SELECT student_id     FROM friend     GROUP BY student_id     HAVING COUNT(friend_id) >= 3 )
SELECT highschooler.name FROM highschooler JOIN friend ON friend.student_id = highschooler.id GROUP BY highschooler.name HAVING COUNT(friend.friend_id) >= 3;
SELECT h2.name  FROM highschooler h1, highschooler h2, friend  WHERE h1.name = 'Kyle'      AND h1.id = friend.student_id      AND h2.id = friend.friend_id;
SELECT highschooler.name FROM highschooler JOIN friend ON friend.friend_id = highschooler.id JOIN highschooler AS kyle ON kyle.id = friend.student_id WHERE kyle.name = 'Kyle';
SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM     friend WHERE     student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT highschooler.id FROM highschooler WHERE highschooler.id NOT IN ( SELECT friend.student_id FROM friend )
SELECT highschooler.id FROM highschooler WHERE highschooler.id NOT IN (SELECT student_id FROM friend)
SELECT name FROM     highschooler WHERE     id NOT IN (         SELECT DISTINCT             student_id         FROM             friend     );
SELECT name FROM highschooler WHERE id NOT IN (SELECT DISTINCT student_id FROM friend)
SELECT DISTINCT friend.student_id FROM friend  JOIN likes ON friend.friend_id = likes.liked_id WHERE friend.student_id IN      (SELECT student_id FROM friend) ORDER BY friend.student_id;
SELECT DISTINCT student_id FROM friend INTERSECT SELECT DISTINCT student_id FROM likes;
SELECT name  FROM highschooler  WHERE id IN (     SELECT student_id      FROM friend      WHERE student_id = highschooler.id      INTERSECT      SELECT liked_id      FROM likes      WHERE liked_id = highschooler.id )
SELECT name  FROM highschooler  WHERE id IN (SELECT student_id FROM friend)  AND id IN (SELECT liked_id FROM likes);
SELECT student_id, COUNT(*) AS num_likes FROM likes GROUP BY student_id;
SELECT student_id,      COUNT(*) AS likes_count     FROM likes     GROUP BY student_id;
SELECT highschooler.name, COUNT(likes.liked_id) AS number_of_likes FROM highschooler INNER JOIN likes ON likes.student_id = highschooler.id GROUP BY highschooler.name;
SELECT highschooler.name, COUNT(*)  FROM highschooler  INNER JOIN likes ON highschooler.id = likes.student_id  GROUP BY highschooler.name;
SELECT name FROM     highschooler WHERE     id = (         SELECT             student_id         FROM             likes         GROUP BY             student_id         ORDER BY             COUNT(*) DESC         LIMIT 1     );
SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id, highschooler.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.student_id) >= 2;
SELECT highschooler.name FROM highschooler WHERE highschooler.id IN (     SELECT         likes.student_id     FROM         likes     GROUP BY         likes.student_id     HAVING         COUNT(likes.student_id) >= 2 );
SELECT h.name  FROM highschooler h JOIN friend f ON f.student_id = h.id GROUP BY h.name HAVING h.grade > 5 AND COUNT(DISTINCT f.friend_id) >= 2;
SELECT name FROM     highschooler WHERE     grade > 5     AND id IN (         SELECT             student_id         FROM             friend         GROUP BY             student_id         HAVING             COUNT(friend_id) >= 2     );
SELECT COUNT(*) FROM likes WHERE student_id = (     SELECT id     FROM highschooler     WHERE name = 'Kyle' );
SELECT count(*) FROM   likes WHERE   student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend) OR id IN (SELECT friend_id FROM friend);
SELECT AVG(grade) FROM highschooler WHERE EXISTS (     SELECT 1     FROM friend     WHERE friend.student_id = highschooler.id )
SELECT MIN(grade)  FROM highschooler  WHERE id NOT IN (     SELECT DISTINCT student_id      FROM friend )
SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)
SELECT state FROM owners WHERE state IN (SELECT state FROM professionals)  INTERSECT  SELECT state FROM professionals WHERE state IN (SELECT state FROM owners);
SELECT owners.state FROM owners WHERE owners.state IN (     SELECT professionals.state     FROM professionals )
SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)
SELECT AVG(age) FROM dogs WHERE dog_id IN (     SELECT dog_id     FROM treatments )
SELECT professionals.professional_id, professionals.last_name, professionals.cell_number FROM professionals WHERE professionals.state = 'Indiana' OR professionals.professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2 );
SELECT professionals.professional_id, professionals.last_name, professionals.cell_number FROM professionals WHERE professionals.state = 'Indiana' OR     (SELECT COUNT(*) FROM treatments WHERE treatments.professional_id = professionals.professional_id) > 2;
SELECT dogs.name  FROM dogs  LEFT JOIN treatments ON dogs.dog_id = treatments.dog_id  GROUP BY dogs.dog_id  HAVING SUM(treatments.cost_of_treatment) <= 1000;
SELECT dogs.name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id LEFT JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.name HAVING COALESCE(SUM(treatments.cost_of_treatment), 0) <= 1000;
SELECT DISTINCT first_name  FROM (     SELECT first_name FROM professionals     UNION     SELECT first_name FROM owners ) AS names WHERE first_name NOT IN (     SELECT DISTINCT first_name FROM dogs )
SELECT first_name FROM professionals WHERE first_name NOT IN (     SELECT first_name     FROM owners     UNION     SELECT name     FROM dogs )
SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals LEFT JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.treatment_id IS NULL;
SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals WHERE professionals.professional_id NOT IN (     SELECT professional_id FROM treatments )
SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id, owners.first_name, owners.last_name ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;
SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(dogs.owner_id) DESC LIMIT 1;
SELECT professionals.professional_id, professionals.role_code, professionals.first_name FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY professionals.professional_id, professionals.role_code, professionals.first_name HAVING COUNT(treatments.professional_id) >= 2;
SELECT professionals.professional_id, professionals.role_code, professionals.first_name FROM professionals INNER JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id HAVING COUNT(treatments.treatment_id) >= 2;
SELECT breeds.breed_name FROM     breeds JOIN     dogs ON breeds.breed_code = dogs.breed_code GROUP BY     breeds.breed_name ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT breeds.breed_name FROM     breeds JOIN     dogs ON breeds.breed_code = dogs.breed_code GROUP BY     breeds.breed_name ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT owners.owner_id, owners.last_name     FROM      owners     JOIN dogs ON dogs.owner_id = owners.owner_id     JOIN treatments ON treatments.dog_id = dogs.dog_id     GROUP BY      owners.owner_id, owners.last_name     ORDER BY      COUNT(treatments.dog_id) DESC     LIMIT 1;
SELECT owners.owner_id, owners.last_name FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  JOIN treatments ON dogs.dog_id = treatments.dog_id  GROUP BY owners.owner_id, owners.last_name  ORDER BY SUM(treatments.cost_of_treatment) DESC  LIMIT 1;
SELECT treatment_types.treatment_type_description  FROM      treatment_types  JOIN      treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code  GROUP BY      treatment_types.treatment_type_description  ORDER BY      SUM(treatments.cost_of_treatment) ASC  LIMIT 1;
SELECT treatment_types.treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatment_types.treatment_type_description ORDER BY SUM(treatments.cost_of_treatment) LIMIT 1;
SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(COALESCE(dogs.amount_paid, 0)) DESC LIMIT 1;
SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;
SELECT professionals.professional_id, professionals.cell_number FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id, professionals.cell_number HAVING COUNT(DISTINCT treatments.treatment_type_code) >= 2;
SELECT professionals.professional_id, professionals.cell_number FROM professionals INNER JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id, professionals.cell_number HAVING COUNT(DISTINCT treatments.treatment_type_code) >= 2;
SELECT professionals.first_name, professionals.last_name  FROM professionals  INNER JOIN treatments ON professionals.professional_id = treatments.professional_id  WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments) GROUP BY professionals.first_name, professionals.last_name;
SELECT professionals.first_name, professionals.last_name  FROM professionals  WHERE professionals.professional_id IN (          SELECT professional_id      FROM treatments      WHERE cost_of_treatment < (                      SELECT AVG(cost_of_treatment)          FROM treatments     ) );
SELECT treatments.date_of_treatment,      professionals.first_name     FROM      treatments      INNER JOIN professionals ON treatments.professional_id = professionals.professional_id;
SELECT treatments.date_of_treatment, professionals.first_name FROM treatments INNER JOIN professionals ON treatments.professional_id = professionals.professional_id
SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description FROM treatments INNER JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT owners.first_name, owners.last_name, dogs.size_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id;
SELECT owners.first_name, owners.last_name, sizes.size_code FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id INNER JOIN sizes ON dogs.size_code = sizes.size_code;
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id;
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id;
SELECT dogs.name, treatments.date_of_treatment  FROM dogs  JOIN breeds ON dogs.breed_code = breeds.breed_code  JOIN treatments ON dogs.dog_id = treatments.dog_id  WHERE breeds.breed_name = (     SELECT breed_name      FROM breeds      GROUP BY breed_name      HAVING COUNT(*) = (         SELECT MIN(count)          FROM (SELECT COUNT(*) as count FROM breeds GROUP BY breed_name) AS subquery     ) ) ORDER BY dogs.name;
SELECT dogs.name, treatments.date_of_treatment  FROM dogs  JOIN breeds ON dogs.breed_code = breeds.breed_code  JOIN treatments ON treatments.dog_id = dogs.dog_id  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code  WHERE breeds.breed_code = (SELECT breed_code                             FROM breeds                             GROUP BY breed_code                             ORDER BY COUNT(*) ASC                             LIMIT 1)
SELECT owners.first_name, dogs.name             FROM owners             JOIN dogs ON owners.owner_id = dogs.owner_id             WHERE owners.owner_id IN (                 SELECT owner_id                 FROM addresses                 WHERE state = 'Virginia'             );
SELECT owners.first_name, dogs.name             FROM owners             JOIN dogs ON dogs.owner_id = owners.owner_id             WHERE owners.location = 'Virginia';
SELECT dogs.date_arrived, dogs.date_departed FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id
SELECT dogs.date_arrived, dogs.date_departed  FROM dogs  INNER JOIN treatments ON dogs.dog_id = treatments.dog_id;
SELECT owners.last_name FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.date_of_birth = (SELECT MIN(date_of_birth) FROM dogs)
SELECT owners.last_name  FROM dogs  JOIN owners ON dogs.owner_id = owners.owner_id  WHERE dogs.age = (SELECT MIN(age) FROM dogs)  ORDER BY owners.last_name  LIMIT 1;
SELECT email_address     FROM professionals     WHERE state = 'Hawaii' OR state = 'Wisconsin';
SELECT professionals.email_address FROM    professionals WHERE    professionals.state IN ('Hawaii', 'Wisconsin');
SELECT dogs.date_arrived, dogs.date_departed FROM dogs;
SELECT dogs.date_arrived, dogs.date_departed FROM dogs;
SELECT COUNT(DISTINCT dog_id) FROM treatments;
SELECT COUNT(DISTINCT dogs.dog_id) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id;
SELECT COUNT(DISTINCT professional_id) FROM treatments;
SELECT COUNT(DISTINCT professional_id) FROM treatments;
SELECT professionals.role_code, professionals.street, professionals.city, professionals.state FROM professionals WHERE professionals.city LIKE '%West%';
SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%';
SELECT owners.first_name, owners.last_name, owners.email_address FROM owners WHERE owners.state LIKE '%North%';
SELECT owners.first_name, owners.last_name, owners.email_address FROM owners WHERE owners.state LIKE '%North%';
SELECT COUNT(*)  FROM dogs  WHERE age < (SELECT AVG(age) FROM dogs);
SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs);
SELECT MAX(cost_of_treatment) FROM treatments;
SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments);
SELECT COUNT(DISTINCT dogs.owner_id) FROM dogs LEFT JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.dog_id IS NULL;
SELECT COUNT(DISTINCT owners.owner_id) FROM owners LEFT JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.owner_id IS NULL;
SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs WHERE date_adopted IS NOT NULL);
SELECT COUNT(DISTINCT professional_id) FROM professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM treatments)
SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments);
SELECT dogs.name, dogs.age, dogs.weight     FROM      dogs      WHERE      dogs.abandoned_yn = 1;
SELECT dogs.name, dogs.age, dogs.weight FROM dogs WHERE dogs.abandoned_yn = 1;
SELECT AVG(age) AS average_age FROM dogs;
SELECT AVG(age) AS average_age FROM dogs;
SELECT MAX(age) FROM dogs;
SELECT MAX(age) AS oldest_age FROM dogs;
SELECT charge_type, charge_amount FROM charges;
SELECT charge_type, charge_amount FROM charges;
SELECT MAX(charge_amount)  FROM charges;
SELECT MAX(charge_amount)  FROM charges;
SELECT email_address, cell_number, home_phone  FROM      professionals;
SELECT professionals.email_address, professionals.cell_number, professionals.home_phone FROM professionals;
SELECT breed_code, size_code FROM dogs;
SELECT distinct dogs.breed_code, dogs.size_code FROM dogs;
SELECT professionals.first_name, treatment_types.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT professionals.first_name, treatments.description FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT name FROM singer ORDER BY net_worth_millions ASC;
SELECT name FROM     singer ORDER BY     net_worth_millions ASC;
SELECT birth_year, citizenship FROM singer;
SELECT birth_year, citizenship FROM singer;
SELECT singer.name FROM   singer WHERE   singer.citizenship <> 'France';
SELECT name FROM singer WHERE citizenship <> 'French';
SELECT singer.name FROM singer WHERE singer.birth_year = 1948 OR singer.birth_year = 1949;
SELECT name FROM   singer WHERE   birth_year = 1948 OR birth_year = 1949;
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;
SELECT citizenship, COUNT(DISTINCT singer_id) FROM singer GROUP BY citizenship;
SELECT citizenship,      COUNT(DISTINCT singer_id) AS singer_count     FROM singer     GROUP BY citizenship;
SELECT citizenship FROM     singer GROUP BY     citizenship ORDER BY     COUNT(*) DESC LIMIT 1;
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT citizenship,      MAX(net_worth_millions) AS max_net_worth FROM      singer GROUP BY      citizenship;
SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship;
SELECT song.title, singer.name FROM     song JOIN     singer ON song.singer_id = singer.singer_id;
SELECT song.title, singer.name FROM     song JOIN     singer ON song.singer_id = singer.singer_id;
SELECT DISTINCT singer.name FROM     song     INNER JOIN singer ON song.singer_id = singer.singer_id WHERE     song.sales > 300000;
SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000;
SELECT name FROM singer WHERE singer_id IN (     SELECT singer_id     FROM song     GROUP BY singer_id     HAVING COUNT(song_id) > 1 );
SELECT name FROM singer WHERE singer_id IN (     SELECT singer_id     FROM song     GROUP BY singer_id     HAVING COUNT(*) > 1 );
SELECT singer.name, SUM(song.sales) AS total_sales FROM singer JOIN song ON song.singer_id = singer.singer_id GROUP BY singer.name;
SELECT singer.name, SUM(song.sales) AS total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name;
SELECT singer.name FROM     singer WHERE     singer.singer_id NOT IN (         SELECT singer_id         FROM song     );
SELECT singer.name FROM   singer WHERE   singer.singer_id NOT IN (     SELECT       singer_id     FROM       song   );
SELECT s.citizenship  FROM singer s WHERE s.birth_year < 1945  INTERSECT SELECT s.citizenship  FROM singer s WHERE s.birth_year > 1955;
SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 INTERSECT SELECT DISTINCT citizenship FROM singer WHERE birth_year > 1955;
SELECT COUNT(*) FROM other_available_features;
SELECT ref_feature_types.feature_type_name  FROM      other_available_features  JOIN      ref_feature_types  ON      other_available_features.feature_type_code = ref_feature_types.feature_type_code  WHERE      other_available_features.feature_name = 'AirCon';
SELECT DISTINCT ref_property_types.property_type_description FROM properties JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code WHERE properties.property_type_code = [code];
SELECT properties.property_name FROM properties JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code WHERE (ref_property_types.property_type_code = 'house' OR ref_property_types.property_type_code = 'apartment') AND properties.room_count > 1;
