[
    {
        "index": 6,
        "db_id": "concert_singer",
        "db_info": "# singer ( name, song_release_year, age )\n# concert ( stadium_id )\n# singer_in_concert ( concert_id, singer_id )\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id",
        "question": "Show the name and the release year of the song by the youngest singer.",
        "predicted_sql": "SELECT singer.name,\n       singer.song_release_year\nFROM singer\nWHERE singer.age =\n    (SELECT MIN(age)\n     FROM singer);",
        "ground_truth": "SELECT song_name,\n       song_release_year\nFROM singer\nORDER BY age ASC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 16,
        "db_id": "concert_singer",
        "db_info": "# stadium ( capacity, highest, average, stadium_id, location, name, lowest )\n# concert ( stadium_id, concert_id, concert_name, theme, year )\n# singer_in_concert ( concert_id, singer_id )\n# singer ( song_release_year, singer_id, name, country, song_name, age, is_male )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id",
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "predicted_sql": "SELECT MAX(capacity) AS max_capacity,\n       AVG(capacity) AS average_capacity\nFROM stadium;",
        "ground_truth": "SELECT MAX (capacity) , average\nFROM stadium",
        "similarity": 0.0
    },
    {
        "index": 23,
        "db_id": "concert_singer",
        "db_info": "# stadium ( stadium_id, location, name, capacity, highest, lowest, average )\n# concert ( concert_id, concert_name, theme, stadium_id, year )\n# singer_in_concert ( concert_id, singer_id )\n# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id",
        "question": "For each stadium, how many concerts play there?",
        "predicted_sql": "SELECT stadium.name,\n       COUNT(concert.concert_id)\nFROM stadium\nLEFT JOIN concert ON stadium.stadium_id = concert.stadium_id\nGROUP BY stadium.name;",
        "ground_truth": "SELECT stadium.name,\n       COUNT (*)\nFROM concert\nJOIN stadium ON concert.stadium_id = stadium.stadium_id\nGROUP BY concert.stadium_id",
        "similarity": 0.6170212765957447
    },
    {
        "index": 24,
        "db_id": "concert_singer",
        "db_info": "# concert ( stadium_id, concert_name, theme, concert_id, year )\n# stadium ( stadium_id, name, capacity, location, highest, lowest, average )\n# singer_in_concert ( concert_id, singer_id )\n# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id",
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "predicted_sql": "SELECT stadium.name,\n       stadium.capacity\nFROM stadium\nINNER JOIN concert ON concert.stadium_id = stadium.stadium_id\nWHERE concert.year >= 2014\nGROUP BY stadium.name,\n         stadium.capacity\nORDER BY COUNT(concert.concert_id) DESC\nLIMIT 1;",
        "ground_truth": "SELECT stadium.name,\n       stadium.capacity\nFROM concert\nJOIN stadium ON concert.stadium_id = stadium.stadium_id\nWHERE concert.year >= 2014\nGROUP BY stadium.stadium_id\nORDER BY COUNT (*) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 25,
        "db_id": "concert_singer",
        "db_info": "# concert ( stadium_id )\n# stadium ( name, capacity )\n# concert.stadium_id = stadium.stadium_id",
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "predicted_sql": "SELECT stadium.name,\n       stadium.capacity\nFROM stadium\nJOIN concert ON concert.stadium_id = stadium.stadium_id\nWHERE concert.year > 2013\nGROUP BY stadium.name,\n         stadium.capacity\nORDER BY COUNT(concert.stadium_id) DESC\nLIMIT 1;",
        "ground_truth": "SELECT stadium.name,\n       stadium.capacity\nFROM concert\nJOIN stadium ON concert.stadium_id = stadium.stadium_id\nWHERE concert.year > 2013\nGROUP BY stadium.stadium_id\nORDER BY COUNT (*) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 35,
        "db_id": "concert_singer",
        "db_info": "# singer ( name, country )\n# singer_in_concert ( concert_id, singer_id )\n# concert ( concert_id, concert_name, stadium_id )\n# stadium ( stadium_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id",
        "question": "List singer names and number of concerts for each singer.",
        "predicted_sql": "SELECT singer.name,\n       COUNT(concert.concert_id)\nFROM singer\nJOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id\nJOIN concert ON singer_in_concert.concert_id = concert.concert_id\nGROUP BY singer.name;",
        "ground_truth": "SELECT singer.name,\n       COUNT (*)\nFROM singer_in_concert\nJOIN singer ON singer_in_concert.singer_id = singer.singer_id\nGROUP BY singer.singer_id",
        "similarity": 0.47058823529411764
    },
    {
        "index": 54,
        "db_id": "pets_1",
        "db_info": "# student ( sex, stuid, lname, fname, age, major, advisor, city_code )\n# has_pet ( stuid, petid )\n# pets ( pettype, petid, pet_age, weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid",
        "question": "How many dog pets are raised by female students?",
        "predicted_sql": "SELECT COUNT(*)\nFROM student\nJOIN has_pet ON student.stuid = has_pet.stuid\nJOIN pets ON has_pet.petid = pets.petid\nWHERE student.sex = 'Female'\n  AND pets.pettype = 'Dog';",
        "ground_truth": "SELECT COUNT (*)\nFROM student\nJOIN has_pet ON student.stuid = has_pet.stuid\nJOIN pets ON has_pet.petid = pets.petid\nWHERE student.sex = 'F'\n  AND pets.pettype = 'dog'",
        "similarity": 0.0
    },
    {
        "index": 83,
        "db_id": "pets_1",
        "db_info": "# student ( lname, stuid, fname, age, sex, major, advisor, city_code )\n# pets ( petid, pettype, pet_age, weight )",
        "question": "Find the last name of the student who has a cat that is age 3.",
        "predicted_sql": "SELECT student.lname\nFROM student\nINNER JOIN pets ON student.stuid = pets.petid\nWHERE pets.pettype = 'cat'\n  AND pets.pet_age = 3;",
        "ground_truth": "SELECT student.lname\nFROM student\nJOIN has_pet ON student.stuid = has_pet.stuid\nJOIN pets ON pets.petid = has_pet.petid\nWHERE pets.pet_age = 3\n  AND pets.pettype = 'cat'",
        "similarity": 0.0
    },
    {
        "index": 84,
        "db_id": "pets_1",
        "db_info": "# student ( lname, stuid, fname, age, sex, major, advisor, city_code )\n# has_pet ( stuid, petid )\n# pets ( petid, pettype, pet_age, weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid",
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "predicted_sql": "SELECT student.lname\nFROM student\nINNER JOIN has_pet ON student.stuid = has_pet.stuid\nINNER JOIN pets ON has_pet.petid = pets.petid\nWHERE pets.pettype = 'cat'\n  AND pets.pet_age = 3\nLIMIT 1;",
        "ground_truth": "SELECT student.lname\nFROM student\nJOIN has_pet ON student.stuid = has_pet.stuid\nJOIN pets ON pets.petid = has_pet.petid\nWHERE pets.pet_age = 3\n  AND pets.pettype = 'cat'",
        "similarity": 0.3333333333333333
    },
    {
        "index": 99,
        "db_id": "car_1",
        "db_info": "# car_makers ( maker, fullname, country, id )\n# cars_data ( year, mpg, cylinders, edispl, horsepower, weight, accelerate, id )\n# model_list ( maker, model, modelid )\n# car_names ( model, makeid, make )\n# countries ( countryname, countryid )\n# continents ( continent, contid )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "predicted_sql": "SELECT DISTINCT car_makers.fullname\nFROM car_makers\nJOIN model_list ON car_makers.id = model_list.maker\nJOIN car_names ON model_list.model = car_names.model\nJOIN cars_data ON car_names.makeid = cars_data.id\nWHERE cars_data.year = 1970;",
        "ground_truth": "SELECT DISTINCT car_makers.maker\nFROM car_makers\nJOIN model_list ON car_makers.id = model_list.maker\nJOIN car_names ON model_list.model = car_names.model\nJOIN cars_data ON car_names.makeid = cars_data.id\nWHERE cars_data.year = '1970'",
        "similarity": 0.0
    },
    {
        "index": 100,
        "db_id": "car_1",
        "db_info": "# cars_data ( year, id, mpg, cylinders, edispl, horsepower, weight, accelerate )\n# car_makers ( maker, id, fullname, country )\n# model_list ( modelid, maker, model )\n# car_names ( makeid, model, make )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "predicted_sql": "SELECT DISTINCT car_makers.maker\nFROM car_makers\nJOIN model_list ON car_makers.id = model_list.maker\nJOIN car_names ON model_list.modelid = car_names.makeid\nJOIN cars_data ON car_names.makeid = cars_data.id\nWHERE cars_data.year = 1970;",
        "ground_truth": "SELECT DISTINCT car_makers.maker\nFROM car_makers\nJOIN model_list ON car_makers.id = model_list.maker\nJOIN car_names ON model_list.model = car_names.model\nJOIN cars_data ON car_names.makeid = cars_data.id\nWHERE cars_data.year = '1970'",
        "similarity": 0.0
    },
    {
        "index": 102,
        "db_id": "car_1",
        "db_info": "# car_makers ( maker, country, fullname, id )\n# cars_data ( year, horsepower, mpg, cylinders, edispl, weight, accelerate, id )\n# car_names ( make, model, makeid )\n# model_list ( model, maker, modelid )\n# countries ( countryname, continent, countryid )\n# continents ( continent )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "predicted_sql": "SELECT car_makers.maker,\n       MIN(cars_data.year)\nFROM car_makers\nJOIN model_list ON car_makers.id = model_list.maker\nJOIN car_names ON model_list.model = car_names.model\nJOIN cars_data ON car_names.makeid = cars_data.id\nGROUP BY car_makers.maker\nORDER BY MIN(cars_data.year) ASC\nLIMIT 1;",
        "ground_truth": "SELECT car_names.make,\n       cars_data.year\nFROM cars_data\nJOIN car_names ON cars_data.id = car_names.makeid\nWHERE cars_data.year =\n    (SELECT MIN (YEAR)\n     FROM cars_data)",
        "similarity": 0.0
    },
    {
        "index": 105,
        "db_id": "car_1",
        "db_info": "# continents ( contid )\n# countries ( countryname, continent )\n# car_makers ( id, maker, fullname, country )\n# model_list ( modelid, maker, model )\n# car_names ( makeid, model, make )\n# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "predicted_sql": "SELECT continents.contid AS continent,\n       COUNT(DISTINCT car_makers.id) AS COUNT\nFROM continents\nJOIN countries ON continents.contid = countries.continent\nJOIN car_makers ON countries.countryname = car_makers.country\nGROUP BY continents.contid;",
        "ground_truth": "SELECT continents.continent,\n       COUNT (*)\nFROM continents\nJOIN countries ON continents.contid = countries.continent\nJOIN car_makers ON countries.countryid = car_makers.country\nGROUP BY continents.continent",
        "similarity": 0.0
    },
    {
        "index": 106,
        "db_id": "car_1",
        "db_info": "# continents ( continent )\n# countries ( continent, countryname )\n# car_makers ( country, maker, fullname )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid",
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "predicted_sql": "SELECT continents.continent,\n       COUNT(DISTINCT car_makers.maker) AS car_makers_count\nFROM continents\nLEFT JOIN countries ON continents.continent = countries.continent\nLEFT JOIN car_makers ON countries.countryname = car_makers.country\nGROUP BY continents.continent;",
        "ground_truth": "SELECT continents.continent,\n       COUNT (*)\nFROM continents\nJOIN countries ON continents.contid = countries.continent\nJOIN car_makers ON countries.countryid = car_makers.country\nGROUP BY continents.continent",
        "similarity": 0.04
    },
    {
        "index": 107,
        "db_id": "car_1",
        "db_info": "# countries ( countryname, countryid, continent )\n# car_makers ( maker, fullname, country )\n# continents ( continent, contid )\n# model_list ( modelid, maker, model )\n# car_names ( makeid, model, make )\n# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
        "question": "Which of the countries has the most car makers? List the country name.",
        "predicted_sql": "SELECT countries.countryname\nFROM countries\nJOIN car_makers ON countries.countryid = car_makers.country\nGROUP BY countries.countryname\nORDER BY COUNT(DISTINCT car_makers.maker) DESC\nLIMIT 1;",
        "ground_truth": "SELECT countries.countryname\nFROM car_makers\nJOIN countries ON car_makers.country = countries.countryid\nGROUP BY car_makers.country\nORDER BY COUNT (*) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 108,
        "db_id": "car_1",
        "db_info": "# car_makers ( country, maker )\n# countries ( countryname, countryid )\n# continents ( continent )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid",
        "question": "What is the name of the country with the most car makers?",
        "predicted_sql": "SELECT countries.countryname\nFROM countries\nJOIN car_makers ON car_makers.country = countries.countryid\nGROUP BY countries.countryname\nORDER BY COUNT(car_makers.maker) DESC\nLIMIT 1;",
        "ground_truth": "SELECT countries.countryname\nFROM car_makers\nJOIN countries ON car_makers.country = countries.countryid\nGROUP BY car_makers.country\nORDER BY COUNT (*) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 109,
        "db_id": "car_1",
        "db_info": "# car_makers ( id, maker, fullname, country )\n# model_list ( modelid, maker, model )\n# car_names ( makeid, model, make )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model",
        "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "predicted_sql": "SELECT car_makers.fullname,\n       COUNT(model_list.modelid)\nFROM model_list\nJOIN car_makers ON model_list.maker = car_makers.id\nGROUP BY car_makers.fullname;",
        "ground_truth": "SELECT COUNT (*) , car_makers.fullname\nFROM model_list\nJOIN car_makers ON model_list.maker = car_makers.id\nGROUP BY car_makers.id",
        "similarity": 0.0
    },
    {
        "index": 121,
        "db_id": "car_1",
        "db_info": "# car_makers ( maker, id, fullname, country )\n# model_list ( modelid, maker, model )\n# car_names ( makeid, model, make )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model",
        "question": "What are all the makers and models?",
        "predicted_sql": "SELECT car_makers.maker,\n       model_list.model\nFROM car_makers\nJOIN model_list ON car_makers.id = model_list.maker;",
        "ground_truth": "SELECT maker,\n       model\nFROM model_list",
        "similarity": 0.0
    },
    {
        "index": 122,
        "db_id": "car_1",
        "db_info": "# continents ( contid, continent )\n# countries ( countryname, countryid, continent )\n# car_makers ( id, maker, country )\n# model_list ( modelid, maker, model )\n# car_names ( makeid, model, make )\n# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
        "question": "What are the makers and models?",
        "predicted_sql": "SELECT cm.maker,\n       ml.model\nFROM car_makers cm\nJOIN model_list ml ON cm.id = ml.maker",
        "ground_truth": "SELECT maker,\n       model\nFROM model_list",
        "similarity": 0.0
    },
    {
        "index": 131,
        "db_id": "car_1",
        "db_info": "# cars_data ( horsepower )\n# model_list ( modelid, maker )\n# car_makers ( id, maker )\n# car_names ( makeid, model, make )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "predicted_sql": "SELECT MAX(cars_data.horsepower),\n       car_makers.maker\nFROM cars_data\nJOIN car_names ON cars_data.id = car_names.makeid\nJOIN model_list ON car_names.model = model_list.modelid\nJOIN car_makers ON model_list.maker = car_makers.id\nWHERE cars_data.cylinders = 3;",
        "ground_truth": "SELECT cars_data.horsepower,\n       car_names.make\nFROM car_names\nJOIN cars_data ON car_names.makeid = cars_data.id\nWHERE cars_data.cylinders = 3\nORDER BY cars_data.horsepower DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 132,
        "db_id": "car_1",
        "db_info": "# cars_data ( horsepower, cylinders, id )\n# model_list ( maker, modelid, model )\n# car_makers ( maker, id, fullname, country )\n# model_list.maker = car_makers.id",
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "predicted_sql": "SELECT MAX(cars_data.horsepower) AS max_horsepower,\n       car_makers.fullname AS make\nFROM cars_data\nJOIN model_list ON cars_data.id = model_list.modelid\nJOIN car_makers ON model_list.maker = car_makers.id\nWHERE cars_data.cylinders = 3\nGROUP BY car_makers.fullname\nORDER BY max_horsepower DESC\nLIMIT 1;",
        "ground_truth": "SELECT cars_data.horsepower,\n       car_names.make\nFROM car_names\nJOIN cars_data ON car_names.makeid = cars_data.id\nWHERE cars_data.cylinders = 3\nORDER BY cars_data.horsepower DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 137,
        "db_id": "car_1",
        "db_info": "# model_list ( modelid, maker, model )\n# car_names ( makeid, model, make )\n# car_makers ( id, maker, fullname, country )\n# cars_data ( id, edispl, mpg, cylinders, horsepower, weight, accelerate, year )\n# countries ( countryid, countryname, continent )\n# continents ( contid, continent )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
        "question": "What is the average edispl of the cars of model volvo?",
        "predicted_sql": "SELECT AVG(edispl)\nFROM cars_data\nJOIN car_names ON cars_data.id = car_names.makeid\nJOIN model_list ON car_names.model = model_list.model\nJOIN car_makers ON model_list.maker = car_makers.id\nWHERE car_makers.maker = 'volvo';",
        "ground_truth": "SELECT AVG (cars_data.edispl)\nFROM car_names\nJOIN cars_data ON car_names.makeid = cars_data.id\nWHERE car_names.model = 'volvo'",
        "similarity": 0.0
    },
    {
        "index": 138,
        "db_id": "car_1",
        "db_info": "# car_makers ( maker )\n# model_list ( maker )\n# car_names ( model )\n# cars_data ( edispl, id )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
        "question": "What is the average edispl for all volvos?",
        "predicted_sql": "SELECT AVG(cars_data.edispl)\nFROM cars_data\nJOIN car_names ON cars_data.id = car_names.makeid\nJOIN model_list ON car_names.model = model_list.model\nJOIN car_makers ON model_list.maker = car_makers.id\nWHERE car_makers.maker = 'volvo';",
        "ground_truth": "SELECT AVG (cars_data.edispl)\nFROM car_names\nJOIN cars_data ON car_names.makeid = cars_data.id\nWHERE car_names.model = 'volvo'",
        "similarity": 0.0
    },
    {
        "index": 141,
        "db_id": "car_1",
        "db_info": "# model_list ( modelid, model )\n# car_makers ( id, maker )\n# car_names ( makeid, model )\n# countries ( countryid, countryname )\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model",
        "question": "Which model has the most version(make) of cars?",
        "predicted_sql": "SELECT model_list.model\nFROM model_list\nJOIN car_names ON model_list.modelid = car_names.model\nGROUP BY model_list.model\nHAVING COUNT(DISTINCT car_names.makeid) =\n  (SELECT MAX(make_count)\n   FROM\n     (SELECT COUNT(DISTINCT makeid) AS make_count\n      FROM car_names\n      GROUP BY model));",
        "ground_truth": "SELECT model\nFROM car_names\nGROUP BY model\nORDER BY COUNT (*) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 142,
        "db_id": "car_1",
        "db_info": "# model_list ( modelid, maker, model )\n# car_names ( model, makeid, make )\n# car_makers ( country, id, maker, fullname )\n# countries ( continent, countryid, countryname )\n# continents ( continent, contid )\n# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
        "question": "What model has the most different versions?",
        "predicted_sql": "SELECT model\nFROM model_list\nGROUP BY model\nORDER BY COUNT(DISTINCT modelid) DESC\nLIMIT 1;",
        "ground_truth": "SELECT model\nFROM car_names\nGROUP BY model\nORDER BY COUNT (*) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 151,
        "db_id": "car_1",
        "db_info": "# car_makers ( maker, fullname, country )\n# model_list ( maker, model )\n# cars_data ( weight, id )\n# car_names ( makeid, model, make )\n# countries ( countryid, countryname, continent )\n# continents ( contid, continent )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "predicted_sql": "SELECT DISTINCT model_list.model\nFROM car_makers\nJOIN model_list ON car_makers.maker = model_list.maker\nJOIN car_names ON model_list.model = car_names.model\nJOIN cars_data ON car_names.makeid = cars_data.id\nWHERE car_makers.fullname = 'General Motors'\n  OR cars_data.weight > 3500;",
        "ground_truth": "SELECT DISTINCT model_list.model\nFROM car_names\nJOIN model_list ON car_names.model = model_list.model\nJOIN car_makers ON model_list.maker = car_makers.id\nJOIN cars_data ON car_names.makeid = cars_data.id\nWHERE car_makers.fullname = 'General Motors'\n  OR cars_data.weight > 3500",
        "similarity": 0.4722222222222222
    },
    {
        "index": 152,
        "db_id": "car_1",
        "db_info": "# car_makers ( maker, fullname, country, id )\n# model_list ( maker, model, modelid )\n# cars_data ( weight, id, mpg, cylinders, edispl, horsepower, accelerate, year )\n# model_list.maker = car_makers.id",
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "predicted_sql": "SELECT DISTINCT model_list.model\nFROM model_list\nJOIN car_makers ON model_list.maker = car_makers.id\nLEFT JOIN cars_data ON model_list.modelid = cars_data.id\nWHERE car_makers.fullname = 'General Motors'\n  OR cars_data.weight > 3500;",
        "ground_truth": "SELECT DISTINCT model_list.model\nFROM car_names\nJOIN model_list ON car_names.model = model_list.model\nJOIN car_makers ON model_list.maker = car_makers.id\nJOIN cars_data ON car_names.makeid = cars_data.id\nWHERE car_makers.fullname = 'General Motors'\n  OR cars_data.weight > 3500",
        "similarity": 0.0
    },
    {
        "index": 158,
        "db_id": "car_1",
        "db_info": "# model_list ( modelid )\n# car_makers ( id, maker )\n# car_names ( makeid, model )\n# cars_data ( id, accelerate, cylinders )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "predicted_sql": "SELECT cars_data.cylinders\nFROM car_makers\nJOIN model_list ON car_makers.id = model_list.maker\nJOIN car_names ON model_list.modelid = car_names.makeid\nJOIN cars_data ON car_names.makeid = cars_data.id\nWHERE car_makers.maker = 'volvo'\nORDER BY cars_data.accelerate ASC\nLIMIT 1;",
        "ground_truth": "SELECT cars_data.cylinders\nFROM cars_data\nJOIN car_names ON cars_data.id = car_names.makeid\nWHERE car_names.model = 'volvo'\nORDER BY cars_data.accelerate ASC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 160,
        "db_id": "car_1",
        "db_info": "# cars_data ( accelerate, horsepower, id, mpg, cylinders, edispl, weight, year )\n# car_names ( makeid, model, make )\n# model_list ( modelid, maker, model )\n# car_makers ( id, maker, fullname, country )\n# countries ( countryid, countryname, continent )\n# continents ( contid, continent )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "predicted_sql": "SELECT COUNT(*)\nFROM cars_data\nWHERE accelerate >\n    (SELECT horsepower\n     FROM cars_data\n     ORDER BY horsepower DESC\n     LIMIT 1)",
        "ground_truth": "SELECT COUNT (*)\nFROM cars_data\nWHERE accelerate >\n    (SELECT accelerate\n     FROM cars_data\n     ORDER BY horsepower DESC\n     LIMIT 1)",
        "similarity": 0.0
    },
    {
        "index": 161,
        "db_id": "car_1",
        "db_info": "# countries ( countryname, continent )\n# car_makers ( country )\n# car_makers.country = countries.countryid",
        "question": "How many countries has more than 2 car makers ?",
        "predicted_sql": "SELECT COUNT(countries.countryname)\nFROM countries\nINNER JOIN car_makers ON countries.countryname = car_makers.country\nGROUP BY countries.countryname\nHAVING COUNT(car_makers.country) > 2;",
        "ground_truth": "SELECT COUNT (*)\nFROM countries\nJOIN car_makers ON countries.countryid = car_makers.country\nGROUP BY countries.countryid\nHAVING COUNT (*) > 2",
        "similarity": 0.11764705882352941
    },
    {
        "index": 162,
        "db_id": "car_1",
        "db_info": "# countries ( countryid, countryname, continent )\n# car_makers ( id, maker, fullname, country )\n# car_makers.country = countries.countryid",
        "question": "What is the number of countries with more than 2 car makers ?",
        "predicted_sql": "SELECT COUNT(*)\nFROM\n  (SELECT countries.countryid\n   FROM countries\n   JOIN car_makers ON car_makers.country = countries.countryid\n   GROUP BY countries.countryid\n   HAVING COUNT(car_makers.id) > 2) AS countries_with_more_than_2_car_makers;",
        "ground_truth": "SELECT COUNT (*)\nFROM countries\nJOIN car_makers ON countries.countryid = car_makers.country\nGROUP BY countries.countryid\nHAVING COUNT (*) > 2",
        "similarity": 0.0
    },
    {
        "index": 166,
        "db_id": "car_1",
        "db_info": "# cars_data ( horsepower, cylinders )\n# model_list ( model, maker )\n# car_makers ( maker, country )\n# model_list.maker = car_makers.id",
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "predicted_sql": "SELECT model_list.model\nFROM cars_data\nJOIN model_list ON cars_data.horsepower = model_list.model\nJOIN car_makers ON model_list.maker = car_makers.maker\nWHERE cars_data.cylinders = 4\nGROUP BY model_list.model\nORDER BY cars_data.horsepower DESC\nLIMIT 1",
        "ground_truth": "SELECT car_names.model\nFROM car_names\nJOIN cars_data ON car_names.makeid = cars_data.id\nWHERE cars_data.cylinders = 4\nORDER BY cars_data.horsepower DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 169,
        "db_id": "car_1",
        "db_info": "# cars_data ( mpg, cylinders, year, id, edispl, horsepower, weight, accelerate )\n# model_list ( maker, modelid, model )",
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "predicted_sql": "SELECT MAX(mpg)\nFROM cars_data\nWHERE cylinders = 8\n  AND YEAR < 1980;",
        "ground_truth": "SELECT MAX (mpg)\nFROM cars_data\nWHERE cylinders = 8\n  OR YEAR < 1980",
        "similarity": 0.0
    },
    {
        "index": 172,
        "db_id": "car_1",
        "db_info": "# cars_data ( weight, id, mpg, cylinders, edispl, horsepower, accelerate, year )\n# car_makers ( id, maker, fullname, country )\n# model_list ( modelid, maker, model )\n# model_list.maker = car_makers.id",
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "predicted_sql": "SELECT model_list.model\nFROM model_list\nJOIN cars_data ON model_list.modelid = cars_data.id\nJOIN car_makers ON model_list.maker = car_makers.id\nWHERE cars_data.weight < 3500\n  AND car_makers.maker != 'Ford Motor Company';",
        "ground_truth": "SELECT DISTINCT model_list.model\nFROM model_list\nJOIN car_names ON model_list.model = car_names.model\nJOIN cars_data ON car_names.makeid = cars_data.id\nJOIN car_makers ON model_list.maker = car_makers.id\nWHERE cars_data.weight < 3500\n  AND car_makers.fullname != 'Ford Motor Company'",
        "similarity": 0.04081632653061224
    },
    {
        "index": 178,
        "db_id": "car_1",
        "db_info": "# countries ( countryid, countryname )\n# car_makers ( id, maker, country )\n# model_list ( modelid, maker, model )\n# car_names ( makeid, model, make )\n# cars_data ( id )\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "predicted_sql": "SELECT countries.countryid,\n       countries.countryname\nFROM countries\nWHERE countries.countryid IN\n    (SELECT car_makers.country\n     FROM car_makers\n     GROUP BY car_makers.country\n     HAVING COUNT(car_makers.id) > 3)\n  OR countries.countryid IN\n    (SELECT car_makers.country\n     FROM car_makers\n     JOIN model_list ON model_list.maker = car_makers.id\n     JOIN car_names ON car_names.model = model_list.modelid\n     WHERE car_names.make = 'fiat')",
        "ground_truth": "SELECT countries.countryid,\n       countries.countryname\nFROM countries\nJOIN car_makers ON countries.countryid = car_makers.country\nGROUP BY countries.countryid\nHAVING COUNT (*) > 3\nUNION\nSELECT countries.countryid,\n       countries.countryname\nFROM countries\nJOIN car_makers ON countries.countryid = car_makers.country\nJOIN model_list ON car_makers.id = model_list.maker\nWHERE model_list.model = 'fiat'",
        "similarity": 0.75
    },
    {
        "index": 187,
        "db_id": "flight_2",
        "db_info": "# airlines ( airline, uid, abbreviation, country )\n# flights ( airline, flightno, sourceairport, destairport )",
        "question": "How many airlines do we have?",
        "predicted_sql": "SELECT COUNT(DISTINCT airline)\nFROM airlines;",
        "ground_truth": "SELECT COUNT (*)\nFROM airlines",
        "similarity": 0.0
    },
    {
        "index": 188,
        "db_id": "flight_2",
        "db_info": "# airlines ( airline, uid )\n# flights ( airline, flightno, sourceairport, destairport )\n# airports ( airportname, airportcode, city, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
        "question": "What is the total number of airlines?",
        "predicted_sql": "SELECT COUNT(DISTINCT airline)\nFROM airlines;",
        "ground_truth": "SELECT COUNT (*)\nFROM airlines",
        "similarity": 0.0
    },
    {
        "index": 210,
        "db_id": "flight_2",
        "db_info": "# flights ( destairport, flightno, airline, sourceairport )\n# airports ( airportcode, airportname, city, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
        "question": "Return the number of flights arriving in Aberdeen.",
        "predicted_sql": "SELECT COUNT(*)\nFROM flights\nWHERE destairport = 'Aberdeen';",
        "ground_truth": "SELECT COUNT (*)\nFROM flights\nJOIN airports ON flights.destairport = airports.airportcode\nWHERE airports.city = 'Aberdeen'",
        "similarity": 0.0
    },
    {
        "index": 213,
        "db_id": "flight_2",
        "db_info": "# airlines ( airline, abbreviation, country, uid )\n# flights ( airline, flightno, sourceairport, destairport )",
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "predicted_sql": "SELECT COUNT(*) AS COUNT\nFROM flights\nWHERE airline = 'JetBlue Airways';",
        "ground_truth": "SELECT COUNT (*)\nFROM flights\nJOIN airlines ON flights.airline = airlines.uid\nWHERE airlines.airline = 'JetBlue Airways'",
        "similarity": 0.0
    },
    {
        "index": 214,
        "db_id": "flight_2",
        "db_info": "# flights ( airline, flightno, sourceairport, destairport )\n# airlines ( airline, abbreviation, country, uid )\n# airports ( airportcode, city, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
        "question": "Give the number of Jetblue Airways flights.",
        "predicted_sql": "SELECT COUNT(*)\nFROM flights\nJOIN airlines ON flights.airline = airlines.uid\nWHERE airlines.airline = 'Jetblue Airways';",
        "ground_truth": "SELECT COUNT (*)\nFROM flights\nJOIN airlines ON flights.airline = airlines.uid\nWHERE airlines.airline = 'JetBlue Airways'",
        "similarity": 0.0
    },
    {
        "index": 219,
        "db_id": "flight_2",
        "db_info": "# airlines ( airline, abbreviation, country )\n# flights ( airline, flightno, sourceairport, destairport )\n# airports ( city, airportcode, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "predicted_sql": "SELECT COUNT(*)\nFROM flights\nJOIN airlines ON flights.airline = airlines.abbreviation\nJOIN airports ON flights.destairport = airports.airportcode\nWHERE airlines.airline = 'United Airlines'\n  AND airports.city = 'Aberdeen';",
        "ground_truth": "SELECT COUNT (*)\nFROM flights\nJOIN airports ON flights.destairport = airports.airportcode\nJOIN airlines ON airlines.uid = flights.airline\nWHERE airports.city = 'Aberdeen'\n  AND airlines.airline = 'United Airlines'",
        "similarity": 0.0
    },
    {
        "index": 226,
        "db_id": "flight_2",
        "db_info": "# flights ( destairport, sourceairport, airline )\n# airports ( airportcode, airportname, city, country )\n# airlines ( airline, abbreviation, country )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
        "question": "What is the airport code of the airport with the most flights?",
        "predicted_sql": "SELECT flights.destairport AS airportcode\nFROM flights\nGROUP BY flights.destairport\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "ground_truth": "SELECT airports.airportcode\nFROM airports\nJOIN flights ON airports.airportcode = flights.destairport\nOR airports.airportcode = flights.sourceairport\nGROUP BY airports.airportcode\nORDER BY COUNT (*) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 229,
        "db_id": "flight_2",
        "db_info": "# flights ( airline, flightno, sourceairport, destairport )\n# airlines ( airline, uid, abbreviation, country )\n# airports ( airportname, airportcode, city, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
        "question": "Which airline has most number of flights?",
        "predicted_sql": "SELECT flights.airline,\n       COUNT(*)\nFROM flights\nGROUP BY flights.airline\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "ground_truth": "SELECT airlines.airline\nFROM airlines\nJOIN flights ON airlines.uid = flights.airline\nGROUP BY airlines.airline\nORDER BY COUNT (*) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 230,
        "db_id": "flight_2",
        "db_info": "# flights ( airline, flightno, sourceairport, destairport )\n# airlines ( airline, uid, abbreviation, country )",
        "question": "What airline serves the most flights?",
        "predicted_sql": "SELECT airline\nFROM flights\nGROUP BY airline\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "ground_truth": "SELECT airlines.airline\nFROM airlines\nJOIN flights ON airlines.uid = flights.airline\nGROUP BY airlines.airline\nORDER BY COUNT (*) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 233,
        "db_id": "flight_2",
        "db_info": "# flights ( sourceairport, airline, flightno )\n# airports ( airportcode, airportname, city )\n# airlines ( airline, uid, abbreviation )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "predicted_sql": "SELECT airlines.airline\nFROM flights\nJOIN airports ON flights.sourceairport = airports.airportcode\nJOIN airlines ON flights.airline = airlines.airline\nWHERE airports.airportcode = 'AHD';",
        "ground_truth": "SELECT airlines.airline\nFROM airlines\nJOIN flights ON airlines.uid = flights.airline\nWHERE flights.sourceairport = 'AHD'",
        "similarity": 0.0
    },
    {
        "index": 234,
        "db_id": "flight_2",
        "db_info": "# flights ( sourceairport, airline, flightno, destairport )\n# airports ( airportcode, city, airportname, country, countryabbrev )\n# airlines ( airline, uid, abbreviation, country )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
        "question": "Which airlines have a flight with source airport AHD?",
        "predicted_sql": "SELECT airlines.airline\nFROM flights\nJOIN airlines ON flights.airline = airlines.airline\nWHERE flights.sourceairport = 'AHD';",
        "ground_truth": "SELECT airlines.airline\nFROM airlines\nJOIN flights ON airlines.uid = flights.airline\nWHERE flights.sourceairport = 'AHD'",
        "similarity": 0.0
    },
    {
        "index": 235,
        "db_id": "flight_2",
        "db_info": "# airports ( airportcode, airportname, city, country, countryabbrev )\n# flights ( airline, flightno, sourceairport, destairport )\n# airlines ( airline, abbreviation, country, uid )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "predicted_sql": "SELECT airlines.airline\nFROM airlines\nJOIN flights ON airlines.airline = flights.airline\nJOIN airports ON flights.destairport = airports.airportcode\nWHERE airports.airportcode = 'AHD';",
        "ground_truth": "SELECT airlines.airline\nFROM airlines\nJOIN flights ON airlines.uid = flights.airline\nWHERE flights.destairport = 'AHD'",
        "similarity": 0.0
    },
    {
        "index": 236,
        "db_id": "flight_2",
        "db_info": "# flights ( destairport, airline, flightno, sourceairport )\n# airlines ( airline, uid, abbreviation, country )",
        "question": "Which airlines have a flight with destination airport AHD?",
        "predicted_sql": "SELECT airline\nFROM airlines\nWHERE airline IN\n    (SELECT airline\n     FROM flights\n     WHERE destairport = 'AHD' );",
        "ground_truth": "SELECT airlines.airline\nFROM airlines\nJOIN flights ON airlines.uid = flights.airline\nWHERE flights.destairport = 'AHD'",
        "similarity": 0.0
    },
    {
        "index": 239,
        "db_id": "flight_2",
        "db_info": "# airlines ( airline, abbreviation, country )\n# flights ( airline, flightno, sourceairport, destairport )\n# airports ( city, airportcode, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "predicted_sql": "SELECT airlines.airline\nFROM airlines\nJOIN flights ON airlines.airline = flights.airline\nJOIN airports ON flights.destairport = airports.airportcode\nWHERE airports.airportcode = 'CVO'\nEXCEPT\nSELECT airlines.airline\nFROM airlines\nJOIN flights ON airlines.airline = flights.airline\nJOIN airports ON flights.destairport = airports.airportcode\nWHERE airports.airportcode = 'APG';",
        "ground_truth": "SELECT airlines.airline\nFROM airlines\nJOIN flights ON airlines.uid = flights.airline\nWHERE flights.sourceairport = 'CVO'\nEXCEPT\nSELECT airlines.airline\nFROM airlines\nJOIN flights ON airlines.uid = flights.airline\nWHERE flights.sourceairport = 'APG'",
        "similarity": 0.0
    },
    {
        "index": 240,
        "db_id": "flight_2",
        "db_info": "# flights ( airline, flightno, sourceairport, destairport )\n# airlines ( uid, airline, abbreviation, country )\n# airports ( city, airportcode, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "predicted_sql": "SELECT airlines.airline\nFROM airlines\nWHERE airline IN\n    (SELECT airline\n     FROM flights\n     JOIN airports ON flights.sourceairport = airports.airportcode\n     WHERE airports.city = 'CVO' )\n  AND airline NOT IN\n    (SELECT airline\n     FROM flights\n     JOIN airports ON flights.sourceairport = airports.airportcode\n     WHERE airports.city = 'APG' )",
        "ground_truth": "SELECT airlines.airline\nFROM airlines\nJOIN flights ON airlines.uid = flights.airline\nWHERE flights.sourceairport = 'CVO'\nEXCEPT\nSELECT airlines.airline\nFROM airlines\nJOIN flights ON airlines.uid = flights.airline\nWHERE flights.sourceairport = 'APG'",
        "similarity": 0.0
    },
    {
        "index": 241,
        "db_id": "flight_2",
        "db_info": "# airlines ( airline, uid, abbreviation, country )\n# flights ( airline, flightno, sourceairport, destairport )\n# airports ( city, airportcode, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
        "question": "Find all airlines that have at least 10 flights.",
        "predicted_sql": "SELECT airline\nFROM\n  (SELECT airline\n   FROM flights\n   GROUP BY airline\n   HAVING COUNT(*) >= 10) AS flight_counts;",
        "ground_truth": "SELECT airlines.airline\nFROM airlines\nJOIN flights ON airlines.uid = flights.airline\nGROUP BY airlines.airline\nHAVING COUNT (*) > 10",
        "similarity": 0.0
    },
    {
        "index": 242,
        "db_id": "flight_2",
        "db_info": "# airlines ( airline, abbreviation, country )\n# flights ( airline, flightno, sourceairport, destairport )",
        "question": "Which airlines have at least 10 flights?",
        "predicted_sql": "SELECT airline\nFROM flights\nGROUP BY airline\nHAVING COUNT(flightno) >= 10;",
        "ground_truth": "SELECT airlines.airline\nFROM airlines\nJOIN flights ON airlines.uid = flights.airline\nGROUP BY airlines.airline\nHAVING COUNT (*) > 10",
        "similarity": 0.0
    },
    {
        "index": 244,
        "db_id": "flight_2",
        "db_info": "# flights ( airline, flightno )\n# airlines ( uid, airline, abbreviation )\n# airports ( airportcode, airportname, country, countryabbrev, city )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
        "question": "Which airlines have less than 200 flights?",
        "predicted_sql": "SELECT airline\nFROM airlines\nWHERE airline IN\n    (SELECT airline\n     FROM flights\n     GROUP BY airline\n     HAVING COUNT(*) < 200);",
        "ground_truth": "SELECT airlines.airline\nFROM airlines\nJOIN flights ON airlines.uid = flights.airline\nGROUP BY airlines.airline\nHAVING COUNT (*) < 200",
        "similarity": 0.125
    },
    {
        "index": 256,
        "db_id": "flight_2",
        "db_info": "# flights ( destairport, sourceairport, airline, flightno )\n# airports ( airportcode, city, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
        "question": "How many flights land in Aberdeen or Abilene?",
        "predicted_sql": "SELECT COUNT(*)\nFROM flights\nWHERE destairport IN ('Aberdeen',\n                      'Abilene');",
        "ground_truth": "SELECT COUNT (*)\nFROM flights\nJOIN airports ON flights.destairport = airports.airportcode\nWHERE airports.city = 'Aberdeen'\n  OR airports.city = 'Abilene'",
        "similarity": 0.0
    },
    {
        "index": 277,
        "db_id": "employee_hire_evaluation",
        "db_info": "# evaluation ( employee_id, year_awarded, bonus )\n# employee ( employee_id, name, age, city )\n# hiring ( employee_id, shop_id, start_from, is_full_time )\n# shop ( shop_id, name, location, district, number_products, manager_name )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id",
        "question": "find the name of employee who was awarded the most times in the evaluation.",
        "predicted_sql": "SELECT employee.name\nFROM evaluation\nJOIN employee ON evaluation.employee_id = employee.employee_id\nGROUP BY employee.name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "ground_truth": "SELECT employee.name\nFROM employee\nJOIN evaluation ON employee.employee_id = evaluation.employee_id\nGROUP BY evaluation.employee_id\nORDER BY COUNT (*) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 287,
        "db_id": "employee_hire_evaluation",
        "db_info": "# shop ( shop_id, name, number_products, location, district, manager_name )\n# hiring ( shop_id, employee_id, start_from, is_full_time )\n# employee ( employee_id, name, age, city )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id",
        "question": "Find the number of employees hired in each shop; show the shop name as well.",
        "predicted_sql": "SELECT shop.name,\n       COUNT(hiring.employee_id)\nFROM shop\nLEFT JOIN hiring ON shop.shop_id = hiring.shop_id\nGROUP BY shop.name;",
        "ground_truth": "SELECT COUNT (*) , shop.name\nFROM hiring\nJOIN shop ON hiring.shop_id = shop.shop_id\nGROUP BY shop.name",
        "similarity": 0.0
    },
    {
        "index": 294,
        "db_id": "employee_hire_evaluation",
        "db_info": "# shop ( number_products, location )",
        "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "predicted_sql": "SELECT shop.location\nFROM shop\nWHERE shop.number_products < 3000\n  AND shop.location IN\n    (SELECT shop.location\n     FROM shop\n     WHERE shop.number_products > 10000 );",
        "ground_truth": "SELECT district\nFROM shop\nWHERE number_products < 3000 INTERSECT\n  SELECT district\n  FROM shop WHERE number_products > 10000",
        "similarity": 0.5714285714285714
    },
    {
        "index": 336,
        "db_id": "cre_Doc_Template_Mgt",
        "db_info": "# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )\n# ref_template_types ( template_type_code, template_type_description )\n# documents ( document_id, template_id, document_name, document_description, other_details )\n# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id",
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "predicted_sql": "SELECT template_type_code,\n       MIN(version_number) AS \"min_version_number\"\nFROM templates\nGROUP BY template_type_code;",
        "ground_truth": "SELECT MIN (version_number) , template_type_code\nFROM templates",
        "similarity": 0.0
    },
    {
        "index": 359,
        "db_id": "cre_Doc_Template_Mgt",
        "db_info": "# documents ( document_name, document_id, template_id, document_description, other_details )\n# paragraphs ( paragraph_text, paragraph_id, document_id, other_details )\n# paragraphs.document_id = documents.document_id",
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "predicted_sql": "SELECT COUNT(paragraph_id)\nFROM paragraphs\nWHERE document_id =\n    (SELECT document_id\n     FROM documents\n     WHERE document_name = 'Summer Show' );",
        "ground_truth": "SELECT COUNT (*)\nFROM paragraphs\nJOIN documents ON paragraphs.document_id = documents.document_id\nWHERE documents.document_name = 'Summer Show'",
        "similarity": 0.0
    },
    {
        "index": 360,
        "db_id": "cre_Doc_Template_Mgt",
        "db_info": "# documents ( document_name, document_id, template_id, document_description, other_details )\n# paragraphs ( paragraph_text, paragraph_id, document_id, other_details )\n# paragraphs.document_id = documents.document_id",
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "predicted_sql": "SELECT COUNT(*)\nFROM paragraphs\nWHERE document_id =\n    (SELECT document_id\n     FROM documents\n     WHERE document_name = 'Summer Show');",
        "ground_truth": "SELECT COUNT (*)\nFROM paragraphs\nJOIN documents ON paragraphs.document_id = documents.document_id\nWHERE documents.document_name = 'Summer Show'",
        "similarity": 0.0
    },
    {
        "index": 363,
        "db_id": "cre_Doc_Template_Mgt",
        "db_info": "# documents ( document_id, template_id, document_name, document_description, other_details )\n# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )\n# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )\n# ref_template_types ( template_type_code, template_type_description )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id",
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "predicted_sql": "SELECT paragraph_id,\n       paragraph_text\nFROM paragraphs\nWHERE document_id =\n    (SELECT document_id\n     FROM documents\n     WHERE document_name = 'Welcome to NY' );",
        "ground_truth": "SELECT paragraphs.paragraph_id,\n       paragraphs.paragraph_text\nFROM paragraphs\nJOIN documents ON paragraphs.document_id = documents.document_id\nWHERE documents.document_name = 'Welcome to NY'",
        "similarity": 0.125
    },
    {
        "index": 366,
        "db_id": "cre_Doc_Template_Mgt",
        "db_info": "# documents ( document_name, document_id, template_id )\n# paragraphs ( paragraph_text, document_id, paragraph_id )\n# ref_template_types ( template_type_code, template_type_description )\n# templates ( template_id, template_type_code, template_details, version_number, date_effective_from, date_effective_to )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id",
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "predicted_sql": "SELECT paragraph_text\nFROM paragraphs\nWHERE document_id =\n    (SELECT document_id\n     FROM documents\n     WHERE document_name = 'Customer reviews' );",
        "ground_truth": "SELECT paragraphs.paragraph_text\nFROM paragraphs\nJOIN documents ON paragraphs.document_id = documents.document_id\nWHERE documents.document_name = 'Customer reviews'",
        "similarity": 0.25
    },
    {
        "index": 373,
        "db_id": "cre_Doc_Template_Mgt",
        "db_info": "# paragraphs ( document_id, paragraph_id, paragraph_text, other_details )\n# documents ( document_id, document_name, template_id, document_description, other_details )\n# paragraphs.document_id = documents.document_id",
        "question": "What is the document id and name with greatest number of paragraphs?",
        "predicted_sql": "SELECT documents.document_id,\n       documents.document_name\nFROM documents\nJOIN\n  (SELECT document_id,\n          COUNT(*) AS paragraph_count\n   FROM paragraphs\n   GROUP BY document_id) AS paragraph_counts ON documents.document_id = paragraph_counts.document_id\nORDER BY paragraph_counts.paragraph_count DESC\nLIMIT 1;",
        "ground_truth": "SELECT paragraphs.document_id,\n       documents.document_name\nFROM paragraphs\nJOIN documents ON paragraphs.document_id = documents.document_id\nGROUP BY paragraphs.document_id\nORDER BY COUNT (*) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 374,
        "db_id": "cre_Doc_Template_Mgt",
        "db_info": "# documents ( document_id, document_name )\n# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )\n# paragraphs.document_id = documents.document_id",
        "question": "Return the id and name of the document with the most paragraphs.",
        "predicted_sql": "SELECT documents.document_id,\n       documents.document_name\nFROM documents\nJOIN paragraphs ON paragraphs.document_id = documents.document_id\nGROUP BY documents.document_id,\n         documents.document_name\nORDER BY COUNT(paragraphs.paragraph_id) DESC\nLIMIT 1;",
        "ground_truth": "SELECT paragraphs.document_id,\n       documents.document_name\nFROM paragraphs\nJOIN documents ON paragraphs.document_id = documents.document_id\nGROUP BY paragraphs.document_id\nORDER BY COUNT (*) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 376,
        "db_id": "cre_Doc_Template_Mgt",
        "db_info": "# paragraphs ( document_id, paragraph_id, paragraph_text, other_details )\n# documents ( document_id, template_id, document_name, document_description, other_details )\n# templates ( template_id, template_type_code, version_number, date_effective_from, date_effective_to, template_details )\n# ref_template_types ( template_type_code, template_type_description )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id",
        "question": "Return the id of the document with the fewest paragraphs.",
        "predicted_sql": "SELECT documents.document_id\nFROM documents\nLEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id\nGROUP BY documents.document_id\nORDER BY COUNT(paragraphs.paragraph_id) ASC\nLIMIT 1;",
        "ground_truth": "SELECT document_id\nFROM paragraphs\nGROUP BY document_id\nORDER BY COUNT (*) ASC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 417,
        "db_id": "museum_visit",
        "db_info": "# museum ( name, open_year, museum_id, num_of_staff )\n# visit ( museum_id, num_of_ticket, total_spent, visitor_id )\n# visit.museum_id = museum.museum_id",
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "predicted_sql": "SELECT m.open_year,\n       m.num_of_staff\nFROM museum m\nWHERE m.name = 'Plaza Museum';",
        "ground_truth": "SELECT num_of_staff,\n       open_year\nFROM museum\nWHERE name = 'Plaza Museum'",
        "similarity": 0.0
    },
    {
        "index": 420,
        "db_id": "museum_visit",
        "db_info": "# visit ( total_spent, museum_id, visitor_id, num_of_ticket )\n# visitor ( id, name, level_of_membership, age )\n# visit.visitor_id = visitor.id",
        "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "predicted_sql": "SELECT visitor.id,\n       visitor.name,\n       visitor.level_of_membership\nFROM visitor\nWHERE visitor.id IN\n    (SELECT visitor_id\n     FROM visit\n     GROUP BY visitor_id\n     ORDER BY SUM(total_spent) DESC\n     LIMIT 1);",
        "ground_truth": "SELECT visit.visitor_id,\n       visitor.name,\n       visitor.level_of_membership\nFROM visitor\nJOIN visit ON visitor.id = visit.visitor_id\nGROUP BY visit.visitor_id\nORDER BY SUM (visit.total_spent) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 433,
        "db_id": "wta_1",
        "db_info": "# players ( first_name, birth_date, player_id )\n# matches ( winner_name, winner_id, winner_ioc, winner_age )\n# rankings ( ranking_date, player_id )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id",
        "question": "List the first name and birth date of all players from the country with code USA.",
        "predicted_sql": "SELECT first_name,\n       birth_date\nFROM players\nJOIN matches ON players.player_id = matches.winner_id\nWHERE matches.winner_ioc = 'USA'",
        "ground_truth": "SELECT first_name,\n       birth_date\nFROM players\nWHERE country_code = 'USA'",
        "similarity": 0.25
    },
    {
        "index": 448,
        "db_id": "wta_1",
        "db_info": "# players ( player_id, first_name, last_name )\n# matches ( winner_name, winner_id, year )\n# rankings ( ranking_date, ranking, player_id, ranking_points, tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id",
        "question": "What are the names of players who won in both 2013 and 2016?",
        "predicted_sql": "SELECT p.first_name,\n       p.last_name\nFROM players p\nJOIN matches m1 ON p.player_id = m1.winner_id\nJOIN matches m2 ON p.player_id = m2.winner_id\nWHERE m1.year = 2013\n  AND m2.year = 2016;",
        "ground_truth": "SELECT winner_name\nFROM matches\nWHERE YEAR = 2013 INTERSECT\n  SELECT winner_name\n  FROM matches WHERE YEAR = 2016",
        "similarity": 0.0
    },
    {
        "index": 452,
        "db_id": "wta_1",
        "db_info": "# matches ( winner_name, winner_ioc, tourney_name, tourney_id )\n# players ( player_id, first_name, country_code )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id",
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "predicted_sql": "SELECT players.first_name,\n       players.country_code\nFROM players\nWHERE players.player_id IN\n    (SELECT matches.winner_id\n     FROM matches\n     WHERE matches.tourney_name = 'WTA Championships' )\n  AND players.player_id IN\n    (SELECT matches.winner_id\n     FROM matches\n     WHERE matches.tourney_name = 'Australian Open' );",
        "ground_truth": "SELECT players.country_code,\n       players.first_name\nFROM players\nJOIN matches ON players.player_id = matches.winner_id\nWHERE matches.tourney_name = 'WTA Championships' INTERSECT\n  SELECT players.country_code,\n         players.first_name\n  FROM players\n  JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open'",
        "similarity": 0.0
    },
    {
        "index": 453,
        "db_id": "wta_1",
        "db_info": "# players ( first_name, country_code, player_id )\n# rankings ( player_id, ranking_date, ranking_points, ranking, tours )\n# rankings.player_id = players.player_id",
        "question": "Find the first name and country code of the oldest player.",
        "predicted_sql": "SELECT players.first_name,\n       players.country_code\nFROM players\nORDER BY players.player_id DESC\nLIMIT 1;",
        "ground_truth": "SELECT first_name,\n       country_code\nFROM players\nORDER BY birth_date ASC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 454,
        "db_id": "wta_1",
        "db_info": "# players ( first_name, country_code, player_id )\n# rankings ( ranking_date, player_id, ranking_points, tours, ranking )\n# rankings.player_id = players.player_id",
        "question": "What is the first name and country code of the oldest player?",
        "predicted_sql": "SELECT players.first_name,\n       players.country_code\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nORDER BY rankings.ranking_date DESC\nLIMIT 1;",
        "ground_truth": "SELECT first_name,\n       country_code\nFROM players\nORDER BY birth_date ASC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 459,
        "db_id": "wta_1",
        "db_info": "# rankings ( player_id, ranking_date, ranking, ranking_points, tours )\n# players ( player_id, first_name, country_code, last_name )\n# matches ( winner_id, loser_id, tourney_id, tourney_name, tourney_date )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id",
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "predicted_sql": "SELECT players.first_name,\n       players.country_code\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nGROUP BY players.player_id\nORDER BY SUM(rankings.tours) DESC\nLIMIT 1;",
        "ground_truth": "SELECT players.country_code,\n       players.first_name\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nORDER BY rankings.tours DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 460,
        "db_id": "wta_1",
        "db_info": "# players ( player_id, first_name, last_name, birth_date, country_code, hand )\n# rankings ( ranking_date, ranking, player_id, ranking_points, tours )\n# rankings.player_id = players.player_id",
        "question": "What is the first name and country code of the player with the most tours?",
        "predicted_sql": "SELECT players.first_name,\n       players.country_code\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nGROUP BY players.player_id\nORDER BY SUM(rankings.tours) DESC\nLIMIT 1;",
        "ground_truth": "SELECT players.country_code,\n       players.first_name\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nORDER BY rankings.tours DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 463,
        "db_id": "wta_1",
        "db_info": "# matches ( winner_name, winner_rank_points, winner_id )\n# players ( player_id )\n# rankings ( ranking_date, ranking, ranking_points, player_id )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id",
        "question": "Find the name and rank points of the winner who won the most times.",
        "predicted_sql": "SELECT matches.winner_name,\n       matches.winner_rank_points\nFROM matches\nGROUP BY matches.winner_name,\n         matches.winner_rank_points\nORDER BY COUNT(*) DESC, matches.winner_rank_points DESC\nLIMIT 1;",
        "ground_truth": "SELECT winner_name,\n       winner_rank_points\nFROM matches\nGROUP BY winner_name\nORDER BY COUNT (*) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 469,
        "db_id": "wta_1",
        "db_info": "# players ( player_id, first_name, last_name, hand, birth_date, country_code )\n# rankings ( ranking_date, ranking, player_id, ranking_points, tours )\n# rankings.player_id = players.player_id",
        "question": "Find the average ranking for each player and their first name.",
        "predicted_sql": "SELECT players.first_name,\n       AVG(rankings.ranking) AS Average_Ranking\nFROM players\nINNER JOIN rankings ON players.player_id = rankings.player_id\nGROUP BY players.player_id,\n         players.first_name;",
        "ground_truth": "SELECT AVG (ranking) , players.first_name\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nGROUP BY players.first_name",
        "similarity": 0.0
    },
    {
        "index": 470,
        "db_id": "wta_1",
        "db_info": "# players ( first_name )\n# matches ( winner_id, winner_rank, loser_id, loser_rank, winner_name, loser_name )\n# rankings ( player_id, ranking, ranking_points, tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id",
        "question": "What are the first names of all players, and their average rankings?",
        "predicted_sql": "SELECT players.first_name,\n       AVG(rankings.ranking)\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nGROUP BY players.first_name;",
        "ground_truth": "SELECT AVG (ranking) , players.first_name\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nGROUP BY players.first_name",
        "similarity": 0.0
    },
    {
        "index": 471,
        "db_id": "wta_1",
        "db_info": "# players ( player_id, first_name, last_name, hand, birth_date, country_code )\n# rankings ( ranking_date, ranking, player_id, ranking_points, tours )\n# rankings.player_id = players.player_id",
        "question": "Find the total ranking points for each player and their first name.",
        "predicted_sql": "SELECT players.first_name,\n       SUM(rankings.ranking_points) AS total_ranking_points\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nGROUP BY players.player_id,\n         players.first_name;",
        "ground_truth": "SELECT SUM (ranking_points) , players.first_name\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nGROUP BY players.first_name",
        "similarity": 0.0
    },
    {
        "index": 472,
        "db_id": "wta_1",
        "db_info": "# players ( first_name, player_id, last_name, hand, birth_date, country_code )\n# rankings ( player_id, ranking_date, ranking, ranking_points, tours )\n# rankings.player_id = players.player_id",
        "question": "What are the first names of all players, and their total ranking points?",
        "predicted_sql": "SELECT players.first_name,\n       SUM(rankings.ranking_points) AS total_ranking_points\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nGROUP BY players.first_name,\n         players.player_id;",
        "ground_truth": "SELECT SUM (ranking_points) , players.first_name\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nGROUP BY players.first_name",
        "similarity": 0.0
    },
    {
        "index": 479,
        "db_id": "wta_1",
        "db_info": "# rankings ( ranking_date, ranking, player_id, ranking_points, tours )\n# players ( player_id, first_name, last_name, hand, birth_date, country_code )\n# rankings.player_id = players.player_id",
        "question": "Find the total number of tours for each ranking date.",
        "predicted_sql": "SELECT ranking_date,\n       SUM(tours) AS total_tours\nFROM rankings\nGROUP BY ranking_date;",
        "ground_truth": "SELECT SUM (tours) , ranking_date\nFROM rankings\nGROUP BY ranking_date",
        "similarity": 0.0
    },
    {
        "index": 480,
        "db_id": "wta_1",
        "db_info": "# rankings ( ranking_date, tours )\n# players ( player_id )\n# matches ( tourney_date )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id",
        "question": "How many total tours were there for each ranking date?",
        "predicted_sql": "SELECT ranking_date,\n       COUNT(DISTINCT tours)\nFROM rankings\nGROUP BY ranking_date;",
        "ground_truth": "SELECT SUM (tours) , ranking_date\nFROM rankings\nGROUP BY ranking_date",
        "similarity": 0.0
    },
    {
        "index": 482,
        "db_id": "wta_1",
        "db_info": "# matches ( winner_id, loser_id, tourney_date, match_num, best_of, draw_size, round, score, surface, tourney_id, tourney_level, tourney_name, minutes )\n# players ( player_id, first_name, last_name, hand, birth_date, country_code )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id",
        "question": "How many matches were played in each year?",
        "predicted_sql": "SELECT COUNT(*) AS num_matches,\n       STRFTIME('%Y', tourney_date) AS YEAR\nFROM matches\nGROUP BY STRFTIME('%Y', tourney_date);",
        "ground_truth": "SELECT COUNT (*) , YEAR\nFROM matches\nGROUP BY YEAR",
        "similarity": 0.0
    },
    {
        "index": 483,
        "db_id": "wta_1",
        "db_info": "# players ( first_name, last_name, player_id )\n# matches ( winner_name, winner_rank, winner_age )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id",
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "predicted_sql": "SELECT players.first_name,\n       players.last_name,\n       matches.winner_rank\nFROM players\nJOIN matches ON matches.winner_id = players.player_id\nORDER BY matches.winner_age ASC\nLIMIT 3;",
        "ground_truth": "SELECT DISTINCT winner_name,\n                winner_rank\nFROM matches\nORDER BY winner_age ASC\nLIMIT 3",
        "similarity": 0.0
    },
    {
        "index": 487,
        "db_id": "wta_1",
        "db_info": "# matches ( winner_name, winner_ioc, winner_age, winner_rank_points )\n# players ( first_name, country_code, birth_date )\n# rankings ( ranking_points, player_id )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id",
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "predicted_sql": "SELECT players.first_name,\n       players.country_code,\n       players.birth_date\nFROM matches\nJOIN players ON matches.winner_id = players.player_id\nJOIN rankings ON players.player_id = rankings.player_id\nORDER BY matches.winner_rank_points DESC\nLIMIT 1;",
        "ground_truth": "SELECT players.first_name,\n       players.country_code,\n       players.birth_date\nFROM players\nJOIN matches ON players.player_id = matches.winner_id\nORDER BY matches.winner_rank_points DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 493,
        "db_id": "battle_death",
        "db_info": "# battle ( name, date, result )\n# ship ( id )\n# death ( caused_by_ship_id )\n# ship.lost_in_battle = battle.id\n# death.caused_by_ship_id = ship.id",
        "question": "List the name, date and result of each battle.",
        "predicted_sql": "SELECT name, date, RESULT\nFROM battle;",
        "ground_truth": "SELECT name , date\nFROM battle",
        "similarity": 0.0
    },
    {
        "index": 500,
        "db_id": "battle_death",
        "db_info": "# death ( injured, caused_by_ship_id, id, note, killed )\n# ship ( id, name, tonnage, ship_type, location, disposition_of_ship, lost_in_battle )\n# death.caused_by_ship_id = ship.id",
        "question": "What is the ship id and name that caused most total injuries?",
        "predicted_sql": "SELECT ship.id,\n       ship.name\nFROM ship\nJOIN death ON ship.id = death.caused_by_ship_id\nGROUP BY ship.id,\n         ship.name\nORDER BY SUM(death.injured) DESC\nLIMIT 1;",
        "ground_truth": "SELECT ship.id,\n       ship.name\nFROM death\nJOIN ship ON death.caused_by_ship_id = ship.id\nGROUP BY ship.id\nORDER BY COUNT (*) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 529,
        "db_id": "student_transcripts_tracking",
        "db_info": "# semesters ( semester_id, semester_name, semester_description, other_details )\n# student_enrolment ( semester_id, student_enrolment_id, degree_program_id, student_id, other_details )\n# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id",
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "predicted_sql": "SELECT semesters.semester_name,\n       semesters.semester_id\nFROM semesters\nJOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id\nGROUP BY semesters.semester_id,\n         semesters.semester_name\nORDER BY COUNT(student_enrolment.student_id) DESC\nLIMIT 1;",
        "ground_truth": "SELECT semesters.semester_name,\n       semesters.semester_id\nFROM semesters\nJOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id\nGROUP BY semesters.semester_id\nORDER BY COUNT (*) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 534,
        "db_id": "student_transcripts_tracking",
        "db_info": "# students ( student_id, first_name, middle_name, last_name, current_address_id, permanent_address_id, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )\n# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )\n# student_enrolment.student_id = students.student_id",
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "predicted_sql": "SELECT students.first_name,\n       students.middle_name,\n       students.last_name,\n       students.student_id\nFROM students\nJOIN student_enrolment ON students.student_id = student_enrolment.student_id\nGROUP BY students.student_id,\n         student_enrolment.semester_id\nHAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2;",
        "ground_truth": "SELECT students.first_name,\n       students.middle_name,\n       students.last_name,\n       students.student_id\nFROM students\nJOIN student_enrolment ON students.student_id = student_enrolment.student_id\nGROUP BY students.student_id\nHAVING COUNT (*) = 2",
        "similarity": 0.0
    },
    {
        "index": 539,
        "db_id": "student_transcripts_tracking",
        "db_info": "# student_enrolment ( degree_program_id, student_enrolment_id )\n# degree_programs ( degree_program_id, degree_summary_name, degree_summary_description )\n# students ( student_id )\n# student_enrolment_courses ( student_enrolment_id, course_id )\n# courses ( course_id )\n# semesters ( semester_id )\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id",
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "predicted_sql": "SELECT degree_programs.degree_program_id,\n       degree_programs.degree_summary_name\nFROM degree_programs\nJOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id\nGROUP BY degree_programs.degree_program_id,\n         degree_programs.degree_summary_name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "ground_truth": "SELECT degree_programs.degree_program_id,\n       degree_programs.degree_summary_name\nFROM degree_programs\nJOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id\nGROUP BY degree_programs.degree_program_id\nORDER BY COUNT (*) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 541,
        "db_id": "student_transcripts_tracking",
        "db_info": "# student_enrolment ( student_id, degree_program_id )\n# students ( first_name, middle_name, last_name )\n# student_enrolment.student_id = students.student_id",
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "predicted_sql": "SELECT students.student_id,\n       students.first_name,\n       students.middle_name,\n       students.last_name,\n       COUNT(*) AS enrollments\nFROM student_enrolment\nJOIN students ON student_enrolment.student_id = students.student_id\nGROUP BY students.student_id,\n         students.first_name,\n         students.middle_name,\n         students.last_name\nORDER BY enrollments DESC\nLIMIT 1;",
        "ground_truth": "SELECT students.student_id,\n       students.first_name,\n       students.middle_name,\n       students.last_name,\n       COUNT (*) , students.student_id\nFROM students\nJOIN student_enrolment ON students.student_id = student_enrolment.student_id\nGROUP BY students.student_id\nORDER BY COUNT (*) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 542,
        "db_id": "student_transcripts_tracking",
        "db_info": "# students ( student_id, first_name, middle_name, last_name )\n# student_enrolment ( student_id, student_enrolment_id )\n# degree_programs ( degree_program_id )\n# departments ( department_id )\n# transcripts ( transcript_id )\n# transcript_contents ( student_course_id )\n# degree_programs.department_id = departments.department_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# transcript_contents.transcript_id = transcripts.transcript_id",
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "predicted_sql": "SELECT students.first_name,\n       students.middle_name,\n       students.last_name,\n       students.student_id,\n       COUNT(student_enrolment.student_enrolment_id) AS enrollments\nFROM students\nINNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id\nGROUP BY students.student_id\nORDER BY enrollments DESC\nLIMIT 1;",
        "ground_truth": "SELECT students.student_id,\n       students.first_name,\n       students.middle_name,\n       students.last_name,\n       COUNT (*) , students.student_id\nFROM students\nJOIN student_enrolment ON students.student_id = student_enrolment.student_id\nGROUP BY students.student_id\nORDER BY COUNT (*) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 557,
        "db_id": "student_transcripts_tracking",
        "db_info": "# transcripts ( transcript_date, other_details )\n# students ( first_name, middle_name, last_name, date_first_registered )",
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "predicted_sql": "SELECT students.first_name,\n       students.middle_name,\n       students.last_name\nFROM students\nORDER BY students.date_first_registered ASC\nLIMIT 1;",
        "ground_truth": "SELECT first_name,\n       middle_name,\n       last_name\nFROM students\nORDER BY date_left ASC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 560,
        "db_id": "student_transcripts_tracking",
        "db_info": "# students ( first_name, permanent_address_id, current_address_id )\n# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country )\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id",
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "predicted_sql": "SELECT students.first_name\nFROM students\nJOIN addresses AS permanent ON students.permanent_address_id = permanent.address_id\nJOIN addresses AS CURRENT ON students.current_address_id = current.address_id\nWHERE permanent.line_1 <> current.line_1;",
        "ground_truth": "SELECT first_name\nFROM students\nWHERE current_address_id != permanent_address_id",
        "similarity": 0.5714285714285714
    },
    {
        "index": 574,
        "db_id": "student_transcripts_tracking",
        "db_info": "# transcripts ( transcript_date, transcript_id )\n# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )\n# courses ( course_id, course_name, course_description, other_details )\n# departments ( department_id, department_name, department_description, other_details )\n# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )\n# sections ( section_id, course_id, section_name, section_description, other_details )\n# semesters ( semester_id, semester_name, semester_description, other_details )\n# students ( student_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id",
        "question": "What is the date and id of the transcript with the least number of results?",
        "predicted_sql": "SELECT transcript_date,\n       transcript_id\nFROM transcripts\nGROUP BY transcript_date,\n         transcript_id\nHAVING COUNT(*) =\n  (SELECT MIN(count_results)\n   FROM\n     (SELECT COUNT(*) AS count_results\n      FROM transcripts\n      GROUP BY transcript_date,\n               transcript_id))\nLIMIT 1;",
        "ground_truth": "SELECT transcripts.transcript_date,\n       transcript_contents.transcript_id\nFROM transcript_contents\nJOIN transcripts ON transcript_contents.transcript_id = transcripts.transcript_id\nGROUP BY transcript_contents.transcript_id\nORDER BY COUNT (*) ASC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 610,
        "db_id": "tvshow",
        "db_info": "# cartoon ( title, channel, directed_by, written_by, original_air_date, production_code )\n# tv_channel ( series_name, id, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )\n# tv_series ( channel, id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id",
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "predicted_sql": "SELECT tv_channel.series_name\nFROM cartoon\nJOIN tv_channel ON cartoon.channel = tv_channel.id\nWHERE cartoon.title = 'The Rise of the Blue Beetle';",
        "ground_truth": "SELECT tv_channel.series_name\nFROM tv_channel\nJOIN cartoon ON tv_channel.id = cartoon.channel\nWHERE cartoon.title = 'The Rise of the Blue Beetle!'",
        "similarity": 0.041666666666666664
    },
    {
        "index": 628,
        "db_id": "tvshow",
        "db_info": "# cartoon ( directed_by, id, title, channel )\n# tv_channel ( id, series_name, content )\n# cartoon.channel = tv_channel.id",
        "question": "How many cartoons did each director create?",
        "predicted_sql": "SELECT cartoon.directed_by,\n       COUNT(cartoon.id)\nFROM cartoon\nGROUP BY cartoon.directed_by;",
        "ground_truth": "SELECT COUNT (*) , directed_by\nFROM cartoon\nGROUP BY directed_by",
        "similarity": 0.0
    },
    {
        "index": 631,
        "db_id": "tvshow",
        "db_info": "# tv_channel ( hight_definition_tv, package_option, id )\n# tv_series ( channel )\n# cartoon ( channel, title )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id",
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "predicted_sql": "SELECT tv_channel.package_option,\n       cartoon.title AS series_name\nFROM tv_channel\nJOIN cartoon ON tv_channel.id = cartoon.channel\nWHERE tv_channel.hight_definition_tv = 1;",
        "ground_truth": "SELECT package_option,\n       series_name\nFROM tv_channel\nWHERE hight_definition_tv = 'yes'",
        "similarity": 0.0
    },
    {
        "index": 642,
        "db_id": "tvshow",
        "db_info": "# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, pay_per_view_ppv, package_option )\n# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )\n# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id",
        "question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "predicted_sql": "SELECT id\nFROM tv_channel\nWHERE id IN\n    (SELECT channel\n     FROM\n       (SELECT channel,\n               COUNT(*) AS num_channels\n        FROM\n          (SELECT channel\n           FROM tv_series\n           UNION ALL SELECT channel\n           FROM cartoon) AS channels\n        GROUP BY channel\n        HAVING num_channels > 2));",
        "ground_truth": "SELECT id\nFROM tv_channel\nGROUP BY country\nHAVING COUNT (*) > 2",
        "similarity": 0.0
    },
    {
        "index": 687,
        "db_id": "voter_1",
        "db_info": "# area_code_state ( state, area_code )\n# votes ( state, vote_id, phone_number, contestant_number, created )\n# contestants ( contestant_number, contestant_name )\n# votes.contestant_number = contestants.contestant_number\n# votes.state = area_code_state.state",
        "question": "How many states are there?",
        "predicted_sql": "SELECT COUNT(DISTINCT state)\nFROM area_code_state;",
        "ground_truth": "SELECT COUNT (*)\nFROM area_code_state",
        "similarity": 0.0
    },
    {
        "index": 711,
        "db_id": "world_1",
        "db_info": "# city ( name, district, id, countrycode, population )",
        "question": "What region is Kabul in?",
        "predicted_sql": "SELECT district AS region\nFROM city\nWHERE name = 'Kabul';",
        "ground_truth": "SELECT region\nFROM country\nJOIN city ON country.code = city.countrycode\nWHERE city.name = 'Kabul'",
        "similarity": 0.0
    },
    {
        "index": 716,
        "db_id": "world_1",
        "db_info": "# country ( region, population, code, name, continent, surfacearea, indepyear, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# city ( population, name, countrycode, district, id )\n# countrylanguage ( percentage, language, isofficial, countrycode )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code",
        "question": "What are the region and population of Angola?",
        "predicted_sql": "SELECT region,\n       population\nFROM country\nWHERE name = 'Angola';",
        "ground_truth": "SELECT population,\n       region\nFROM country\nWHERE name = 'Angola'",
        "similarity": 0.0
    },
    {
        "index": 717,
        "db_id": "world_1",
        "db_info": "# country ( region, population, name )\n# city ( countrycode, population, name )\n# city.countrycode = country.code",
        "question": "What region does Angola belong to and what is its population?",
        "predicted_sql": "SELECT region,\n       population\nFROM country\nWHERE name = 'Angola';",
        "ground_truth": "SELECT population,\n       region\nFROM country\nWHERE name = 'Angola'",
        "similarity": 0.0
    },
    {
        "index": 736,
        "db_id": "world_1",
        "db_info": "# countrylanguage ( language, isofficial, percentage )\n# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# countrylanguage.countrycode = country.code",
        "question": "What is the total number of languages used in Aruba?",
        "predicted_sql": "SELECT COUNT(DISTINCT LANGUAGE)\nFROM countrylanguage\nWHERE countrycode = 'ABW';",
        "ground_truth": "SELECT COUNT (countrylanguage.language)\nFROM country\nJOIN countrylanguage ON country.code = countrylanguage.countrycode\nWHERE country.name = 'Aruba'",
        "similarity": 0.0
    },
    {
        "index": 737,
        "db_id": "world_1",
        "db_info": "# country ( name, code )\n# countrylanguage ( countrycode, language )\n# countrylanguage.countrycode = country.code",
        "question": "How many languages are spoken in Aruba?",
        "predicted_sql": "SELECT COUNT(DISTINCT LANGUAGE)\nFROM countrylanguage\nWHERE countrycode =\n    (SELECT code\n     FROM country\n     WHERE name = 'Aruba');",
        "ground_truth": "SELECT COUNT (countrylanguage.language)\nFROM country\nJOIN countrylanguage ON country.code = countrylanguage.countrycode\nWHERE country.name = 'Aruba'",
        "similarity": 0.0
    },
    {
        "index": 741,
        "db_id": "world_1",
        "db_info": "# country ( name )\n# countrylanguage ( countrycode, language )\n# countrylanguage.countrycode = country.code",
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "predicted_sql": "SELECT country.name\nFROM country\nJOIN countrylanguage ON country.name = countrylanguage.countrycode\nGROUP BY country.name\nORDER BY COUNT(DISTINCT countrylanguage.language) DESC\nLIMIT 1;",
        "ground_truth": "SELECT country.name\nFROM country\nJOIN countrylanguage ON country.code = countrylanguage.countrycode\nGROUP BY country.name\nORDER BY COUNT (*) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 746,
        "db_id": "world_1",
        "db_info": "# country ( name, code, population, governmentform )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
        "question": "What are the names of nations speak both English and French?",
        "predicted_sql": "SELECT country.name\nFROM country\nJOIN countrylanguage AS cl1 ON country.code = cl1.countrycode\nJOIN countrylanguage AS cl2 ON country.code = cl2.countrycode\nWHERE cl1.language = 'English'\n  AND cl2.language = 'French';",
        "ground_truth": "SELECT country.name\nFROM country\nJOIN countrylanguage ON country.code = countrylanguage.countrycode\nWHERE countrylanguage.language = 'English' INTERSECT\n  SELECT country.name\n  FROM country\n  JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'French'",
        "similarity": 0.5
    },
    {
        "index": 755,
        "db_id": "world_1",
        "db_info": "# country ( name, governmentform, code, population, continent, indepyear, capital, region, surfacearea, lifeexpectancy, gnp, gnpold, localname, headofstate, code2 )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
        "question": "Which countries have either English or Dutch as an official language?",
        "predicted_sql": "SELECT DISTINCT country.name\nFROM country\nINNER JOIN countrylanguage ON country.code = countrylanguage.countrycode\nWHERE countrylanguage.isofficial = 'T'\n  AND (countrylanguage.language = 'English'\n       OR countrylanguage.language = 'Dutch');",
        "ground_truth": "SELECT *\nFROM country\nJOIN countrylanguage ON country.code = countrylanguage.countrycode\nWHERE countrylanguage.language = 'English'\n  AND isofficial = 'T'\nUNION\nSELECT *\nFROM country\nJOIN countrylanguage ON country.code = countrylanguage.countrycode\nWHERE countrylanguage.language = 'Dutch'\n  AND isofficial = 'T'",
        "similarity": 0.0
    },
    {
        "index": 756,
        "db_id": "world_1",
        "db_info": "# country ( continent )\n# countrylanguage ( language, percentage, countrycode )\n# city ( countrycode )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code",
        "question": "Which language is the most popular on the Asian continent?",
        "predicted_sql": "SELECT LANGUAGE\nFROM countrylanguage\nWHERE countrycode IN\n    (SELECT code\n     FROM country\n     WHERE continent = 'Asia' )\nGROUP BY LANGUAGE\nORDER BY MAX(percentage) DESC\nLIMIT 1;",
        "ground_truth": "SELECT countrylanguage.language\nFROM country\nJOIN countrylanguage ON country.code = countrylanguage.countrycode\nWHERE country.continent = 'Asia'\nGROUP BY countrylanguage.language\nORDER BY COUNT (*) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 766,
        "db_id": "world_1",
        "db_info": "# city ( population )\n# country ( population, code )\n# countrylanguage ( percentage, countrycode )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code",
        "question": "What is the total number of people living in the nations that do not use English?",
        "predicted_sql": "SELECT SUM(country.population)\nFROM country\nWHERE country.code NOT IN\n    (SELECT countrylanguage.countrycode\n     FROM countrylanguage\n     WHERE countrylanguage.language = 'English' );",
        "ground_truth": "SELECT SUM (population)\nFROM country\nWHERE name NOT IN\n    (SELECT country.name\n     FROM country\n     JOIN countrylanguage ON country.code = countrylanguage.countrycode\n     WHERE countrylanguage.language = 'English' )",
        "similarity": 0.0
    },
    {
        "index": 767,
        "db_id": "world_1",
        "db_info": "# country ( population, code, name, continent, surfacearea, indepyear, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
        "question": "How many people live in countries that do not speak English?",
        "predicted_sql": "SELECT SUM(country.population)\nFROM country\nWHERE country.code NOT IN\n    (SELECT countrycode\n     FROM countrylanguage\n     WHERE LANGUAGE = 'English' );",
        "ground_truth": "SELECT SUM (population)\nFROM country\nWHERE name NOT IN\n    (SELECT country.name\n     FROM country\n     JOIN countrylanguage ON country.code = countrylanguage.countrycode\n     WHERE countrylanguage.language = 'English' )",
        "similarity": 0.0
    },
    {
        "index": 772,
        "db_id": "world_1",
        "db_info": "# country ( name, surfacearea, continent, code )\n# city ( countrycode, name )\n# city.countrycode = country.code",
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "predicted_sql": "SELECT country.name\nFROM country\nWHERE country.surfacearea >\n    (SELECT MAX(surfacearea)\n     FROM country\n     WHERE continent = 'Europe' );",
        "ground_truth": "SELECT name\nFROM country\nWHERE surfacearea >\n    (SELECT MIN (surfacearea)\n     FROM country\n     WHERE continent = 'Europe' )",
        "similarity": 0.04905660377358491
    },
    {
        "index": 773,
        "db_id": "world_1",
        "db_info": "# country ( surfacearea, name, continent, code, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# city ( countrycode, id, name, district, population )\n# city.countrycode = country.code",
        "question": "Which countries have greater area than that of any country in Europe?",
        "predicted_sql": "SELECT country.name\nFROM country\nWHERE country.surfacearea >\n    (SELECT MAX(surfacearea)\n     FROM country\n     WHERE continent = 'Europe');",
        "ground_truth": "SELECT name\nFROM country\nWHERE surfacearea >\n    (SELECT MIN (surfacearea)\n     FROM country\n     WHERE continent = 'Europe' )",
        "similarity": 0.04905660377358491
    },
    {
        "index": 774,
        "db_id": "world_1",
        "db_info": "# country ( name, continent, population, region )\n# city ( countrycode, population )\n# city.countrycode = country.code",
        "question": "What are the African countries that have a  population less than any country in Asia?",
        "predicted_sql": "SELECT c1.name\nFROM country c1\nWHERE c1.continent = 'Africa'\n  AND c1.population <\n    (SELECT MIN(c2.population)\n     FROM country c2\n     WHERE c2.continent = 'Asia' );",
        "ground_truth": "SELECT name\nFROM country\nWHERE continent = 'Africa'\n  AND population <\n    (SELECT MAX (population)\n     FROM country\n     WHERE continent = 'Asia' )",
        "similarity": 0.16666666666666666
    },
    {
        "index": 777,
        "db_id": "world_1",
        "db_info": "# country ( name, continent, population, region, surfacearea, indepyear, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code, code2 )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "predicted_sql": "SELECT c1.name\nFROM country c1\nWHERE c1.continent = 'Asia'\n  AND c1.population >\n    (SELECT MAX(c2.population)\n     FROM country c2\n     WHERE c2.continent = 'Africa');",
        "ground_truth": "SELECT name\nFROM country\nWHERE continent = 'Asia'\n  AND population >\n    (SELECT MIN (population)\n     FROM country\n     WHERE continent = 'Africa' )",
        "similarity": 0.25
    },
    {
        "index": 785,
        "db_id": "world_1",
        "db_info": "# city ( name, countrycode, district, population, id )\n# countrylanguage ( countrycode, language, isofficial, percentage )",
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "predicted_sql": "SELECT city.name\nFROM city\nJOIN countrylanguage ON city.countrycode = countrylanguage.countrycode\nWHERE city.countrycode IN\n    (SELECT countrycode\n     FROM countrylanguage\n     WHERE LANGUAGE = 'English'\n       AND isofficial = 'F' )\n  AND city.district = 'Europe';",
        "ground_truth": "SELECT DISTINCT city.name\nFROM country\nJOIN city ON city.countrycode = country.code\nWHERE country.continent = 'Europe'\n  AND country.name NOT IN\n    (SELECT country.name\n     FROM country\n     JOIN countrylanguage ON country.code = countrylanguage.countrycode\n     WHERE countrylanguage.isofficial = 'T'\n       AND countrylanguage.language = 'English' )",
        "similarity": 0.0
    },
    {
        "index": 788,
        "db_id": "world_1",
        "db_info": "# country ( population, name, indepyear, surfacearea )\n# city ( population, name, countrycode, district )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code",
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "predicted_sql": "SELECT name,\n       indepyear,\n       surfacearea\nFROM country\nORDER BY population ASC\nLIMIT 1;",
        "ground_truth": "SELECT name,\n       surfacearea,\n       indepyear\nFROM country\nORDER BY population ASC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 789,
        "db_id": "world_1",
        "db_info": "# country ( population, name, indepyear, surfacearea, code )\n# city ( population, countrycode, name, district )\n# city.countrycode = country.code",
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "predicted_sql": "SELECT country.name,\n       country.indepyear,\n       country.surfacearea\nFROM country\nWHERE country.population =\n    (SELECT MIN(population)\n     FROM country\n     WHERE population > 0);",
        "ground_truth": "SELECT name,\n       surfacearea,\n       indepyear\nFROM country\nORDER BY population ASC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 794,
        "db_id": "world_1",
        "db_info": "# city ( district, population )",
        "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "predicted_sql": "SELECT district,\n       COUNT(*) AS COUNT\nFROM city\nWHERE population >\n    (SELECT AVG(population)\n     FROM city)\nGROUP BY district;",
        "ground_truth": "SELECT COUNT (*) , district\nFROM city\nWHERE population >\n    (SELECT AVG (population)\n     FROM city)\nGROUP BY district",
        "similarity": 0.0
    },
    {
        "index": 796,
        "db_id": "world_1",
        "db_info": "# country ( governmentform, population, lifeexpectancy, code, name, continent, region, surfacearea, indepyear, gnp, gnpold, localname, headofstate, capital, code2 )\n# city ( countrycode, population, id, name, district )\n# city.countrycode = country.code",
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "predicted_sql": "SELECT governmentform,\n       SUM(population)\nFROM country\nWHERE governmentform IN\n    (SELECT governmentform\n     FROM country\n     GROUP BY governmentform\n     HAVING AVG(lifeexpectancy) > 72)\nGROUP BY governmentform;",
        "ground_truth": "SELECT SUM (population) , governmentform\nFROM country\nGROUP BY governmentform\nHAVING AVG (lifeexpectancy) > 72",
        "similarity": 0.0
    },
    {
        "index": 797,
        "db_id": "world_1",
        "db_info": "# country ( governmentform, population, lifeexpectancy )\n# countrylanguage ( countrycode )\n# city ( countrycode, population )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code",
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "predicted_sql": "SELECT country.governmentform,\n       SUM(country.population) AS total_population\nFROM country\nWHERE country.governmentform IN\n    (SELECT governmentform\n     FROM country\n     WHERE lifeexpectancy > 72\n     GROUP BY governmentform)\nGROUP BY country.governmentform\nHAVING AVG(lifeexpectancy) > 72;",
        "ground_truth": "SELECT SUM (population) , governmentform\nFROM country\nGROUP BY governmentform\nHAVING AVG (lifeexpectancy) > 72",
        "similarity": 0.0
    },
    {
        "index": 799,
        "db_id": "world_1",
        "db_info": "# country ( continent, population, lifeexpectancy, name )\n# city ( countrycode, population, district )\n# city.countrycode = country.code",
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "predicted_sql": "SELECT continent,\n       SUM(population) AS total_population,\n       AVG(lifeexpectancy) AS average_life_expectancy\nFROM country\nGROUP BY continent\nHAVING AVG(lifeexpectancy) < 72;",
        "ground_truth": "SELECT SUM (population) , AVG (lifeexpectancy) , continent\nFROM country\nGROUP BY continent\nHAVING AVG (lifeexpectancy) < 72",
        "similarity": 0.0
    },
    {
        "index": 810,
        "db_id": "world_1",
        "db_info": "# country ( continent, population, surfacearea, name, indepyear, code, region, indepyear, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# city ( population, name, countrycode, district, id )\n# city.countrycode = country.code",
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "predicted_sql": "SELECT SUM(country.population) AS \"sum (population)\",\n       AVG(country.surfacearea) AS \"avg (surfacearea)\"\nFROM country\nWHERE continent = 'North America'\n  AND surfacearea > 3000;",
        "ground_truth": "SELECT SUM (population) , AVG (surfacearea)\nFROM country\nWHERE continent = 'north america'\n  AND surfacearea > 3000",
        "similarity": 0.0
    },
    {
        "index": 811,
        "db_id": "world_1",
        "db_info": "# country ( name, continent, surfacearea, population, region )\n# city ( countrycode, population, district, name )\n# city.countrycode = country.code",
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "predicted_sql": "SELECT SUM(population) AS total_population,\n       AVG(surfacearea) AS average_surface_area\nFROM country\nWHERE continent = 'North America'\n  AND surfacearea > 3000;",
        "ground_truth": "SELECT SUM (population) , AVG (surfacearea)\nFROM country\nWHERE continent = 'north america'\n  AND surfacearea > 3000",
        "similarity": 0.0
    },
    {
        "index": 818,
        "db_id": "world_1",
        "db_info": "# countrylanguage ( language, isofficial, percentage )\n# country ( population, name, code )\n# countrylanguage.countrycode = country.code",
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "predicted_sql": "SELECT COUNT(DISTINCT country.code)\nFROM country\nJOIN countrylanguage ON country.code = countrylanguage.countrycode\nWHERE countrylanguage.language = 'Spanish'\n  AND countrylanguage.percentage =\n    (SELECT MAX(countrylanguage.percentage)\n     FROM countrylanguage\n     WHERE countrylanguage.countrycode=country.code );",
        "ground_truth": "SELECT COUNT (*) , MAX (percentage)\nFROM countrylanguage\nWHERE LANGUAGE = 'Spanish'\nGROUP BY countrycode",
        "similarity": 0.0
    },
    {
        "index": 819,
        "db_id": "world_1",
        "db_info": "# countrylanguage ( language, isofficial, percentage, countrycode )\n# country ( name, code, population )\n# city ( countrycode )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code",
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "predicted_sql": "SELECT COUNT(DISTINCT countrycode)\nFROM countrylanguage\nWHERE LANGUAGE = 'Spanish'\n  AND isofficial = 'T'\n  AND percentage > 50;",
        "ground_truth": "SELECT COUNT (*) , MAX (percentage)\nFROM countrylanguage\nWHERE LANGUAGE = 'Spanish'\nGROUP BY countrycode",
        "similarity": 0.0
    },
    {
        "index": 820,
        "db_id": "world_1",
        "db_info": "# country ( code, name, population, region, surfacearea, continent, indepyear, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "predicted_sql": "SELECT country.code\nFROM country\nJOIN countrylanguage ON country.code = countrylanguage.countrycode\nWHERE countrylanguage.language = 'Spanish'\nORDER BY countrylanguage.percentage DESC\nLIMIT 1;",
        "ground_truth": "SELECT countrycode,\n       MAX (percentage)\nFROM countrylanguage\nWHERE LANGUAGE = 'Spanish'\nGROUP BY countrycode",
        "similarity": 0.0
    },
    {
        "index": 821,
        "db_id": "world_1",
        "db_info": "# countrylanguage ( language, isofficial, percentage )\n# country ( code, name, continent, region )\n# countrylanguage.countrycode = country.code",
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "predicted_sql": "SELECT countrylanguage.countrycode\nFROM countrylanguage\nWHERE countrylanguage.language = 'Spanish'\n  AND countrylanguage.percentage > 50;",
        "ground_truth": "SELECT countrycode,\n       MAX (percentage)\nFROM countrylanguage\nWHERE LANGUAGE = 'Spanish'\nGROUP BY countrycode",
        "similarity": 0.0
    },
    {
        "index": 844,
        "db_id": "orchestra",
        "db_info": "# conductor ( name, age, nationality, year_of_work )\n# orchestra ( conductor_id, orchestra, record_company, year_of_founded, major_record_format )\n# orchestra.conductor_id = conductor.conductor_id",
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "predicted_sql": "SELECT conductor.name\nFROM conductor\nJOIN orchestra ON conductor.conductor_id = orchestra.conductor_id\nGROUP BY conductor.name\nORDER BY COUNT(orchestra.orchestra) DESC\nLIMIT 1;",
        "ground_truth": "SELECT conductor.name\nFROM conductor\nJOIN orchestra ON conductor.conductor_id = orchestra.conductor_id\nGROUP BY orchestra.conductor_id\nORDER BY COUNT (*) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 845,
        "db_id": "orchestra",
        "db_info": "# conductor ( conductor_id, name, age, nationality, year_of_work )\n# orchestra ( orchestra_id, conductor_id, orchestra, record_company, year_of_founded, major_record_format )\n# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )\n# show ( show_id, performance_id, if_first_show, result, attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id",
        "question": "What is the name of the conductor who has conducted the most orchestras?",
        "predicted_sql": "SELECT conductor.name\nFROM conductor\nJOIN orchestra ON conductor.conductor_id = orchestra.conductor_id\nGROUP BY conductor.name\nORDER BY COUNT(DISTINCT orchestra.orchestra_id) DESC\nLIMIT 1;",
        "ground_truth": "SELECT conductor.name\nFROM conductor\nJOIN orchestra ON conductor.conductor_id = orchestra.conductor_id\nGROUP BY orchestra.conductor_id\nORDER BY COUNT (*) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 851,
        "db_id": "orchestra",
        "db_info": "# orchestra ( major_record_format )\n# performance ( orchestra_id )\n# performance.orchestra_id = orchestra.orchestra_id",
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "predicted_sql": "SELECT orchestra.major_record_format,\n       COUNT(*) AS frequency\nFROM orchestra\nJOIN performance ON orchestra.orchestra_id = performance.orchestra_id\nGROUP BY orchestra.major_record_format\nORDER BY frequency DESC;",
        "ground_truth": "SELECT major_record_format\nFROM orchestra\nGROUP BY major_record_format\nORDER BY COUNT (*) ASC",
        "similarity": 0.0
    },
    {
        "index": 897,
        "db_id": "network_1",
        "db_info": "# highschooler ( name, id, grade )\n# friend ( friend_id, student_id )\n# likes ( liked_id, student_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
        "question": "What are the names of students who have no friends?",
        "predicted_sql": "SELECT name\nFROM highschooler\nWHERE id NOT IN\n    (SELECT friend_id\n     FROM friend)\n  AND id NOT IN\n    (SELECT student_id\n     FROM friend)",
        "ground_truth": "SELECT name\nFROM highschooler\nEXCEPT\nSELECT highschooler.name\nFROM friend\nJOIN highschooler ON friend.student_id = highschooler.id",
        "similarity": 0.3333333333333333
    },
    {
        "index": 904,
        "db_id": "network_1",
        "db_info": "# likes ( student_id, liked_id )\n# highschooler ( name, id, grade )\n# friend ( student_id, friend_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "predicted_sql": "SELECT highschooler.name,\n       COUNT(likes.liked_id)\nFROM highschooler\nJOIN likes ON likes.student_id = highschooler.id\nGROUP BY highschooler.name;",
        "ground_truth": "SELECT highschooler.name,\n       COUNT (*)\nFROM likes\nJOIN highschooler ON likes.student_id = highschooler.id\nGROUP BY likes.student_id",
        "similarity": 0.46153846153846156
    },
    {
        "index": 906,
        "db_id": "network_1",
        "db_info": "# highschooler ( name, id, grade )\n# likes ( student_id, liked_id )\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "predicted_sql": "SELECT highschooler.name\nFROM highschooler\nJOIN likes ON highschooler.id = likes.liked_id\nGROUP BY highschooler.name\nORDER BY COUNT(likes.liked_id) DESC\nLIMIT 1;",
        "ground_truth": "SELECT highschooler.name\nFROM likes\nJOIN highschooler ON likes.student_id = highschooler.id\nGROUP BY likes.student_id\nORDER BY COUNT (*) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 907,
        "db_id": "network_1",
        "db_info": "# likes ( student_id, liked_id )\n# highschooler ( id, name, grade )\n# friend ( student_id, friend_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
        "question": "Give the name of the student with the most likes.",
        "predicted_sql": "SELECT h.name\nFROM highschooler h\nJOIN likes l ON h.id = l.liked_id\nGROUP BY h.name\nORDER BY COUNT(l.liked_id) DESC\nLIMIT 1;",
        "ground_truth": "SELECT highschooler.name\nFROM likes\nJOIN highschooler ON likes.student_id = highschooler.id\nGROUP BY likes.student_id\nORDER BY COUNT (*) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 908,
        "db_id": "network_1",
        "db_info": "# likes ( student_id, liked_id )\n# highschooler ( id, name, grade )\n# friend ( student_id, friend_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
        "question": "Show the names of students who have at least 2 likes.",
        "predicted_sql": "SELECT highschooler.name\nFROM highschooler\nJOIN likes ON likes.liked_id = highschooler.id\nGROUP BY highschooler.name\nHAVING COUNT(likes.student_id) >= 2;",
        "ground_truth": "SELECT highschooler.name\nFROM likes\nJOIN highschooler ON likes.student_id = highschooler.id\nGROUP BY likes.student_id\nHAVING COUNT (*) >= 2",
        "similarity": 0.6666666666666666
    },
    {
        "index": 924,
        "db_id": "dog_kennels",
        "db_info": "# dogs ( name, dog_id, owner_id, breed_code, size_code, abandoned_yn, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )\n# treatments ( cost_of_treatment, dog_id, treatment_id, professional_id, treatment_type_code, date_of_treatment )\n# owners ( owner_id, first_name, last_name, email_address )\n# breeds ( breed_code, breed_name )\n# sizes ( size_code, size_description )\n# treatment_types ( treatment_type_code, treatment_type_description )\n# professionals ( professional_id, first_name, last_name )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code",
        "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "predicted_sql": "SELECT dogs.name\nFROM dogs\nLEFT JOIN treatments ON dogs.dog_id = treatments.dog_id\nGROUP BY dogs.name\nHAVING COALESCE(SUM(treatments.cost_of_treatment), 0) <= 1000;",
        "ground_truth": "SELECT name\nFROM dogs\nWHERE dog_id NOT IN\n    (SELECT dog_id\n     FROM treatments\n     GROUP BY dog_id\n     HAVING SUM (cost_of_treatment) > 1000)",
        "similarity": 0.3864734299516908
    },
    {
        "index": 925,
        "db_id": "dog_kennels",
        "db_info": "# dogs ( name, owner_id )\n# owners ( owner_id )\n# treatments ( dog_id, cost_of_treatment )\n# charges ( charge_amount )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# treatments.dog_id = dogs.dog_id",
        "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "predicted_sql": "SELECT dogs.name\nFROM dogs\nLEFT JOIN treatments ON dogs.dog_id = treatments.dog_id\nGROUP BY dogs.name\nHAVING COALESCE(SUM(treatments.cost_of_treatment), 0) <= 1000;",
        "ground_truth": "SELECT name\nFROM dogs\nWHERE dog_id NOT IN\n    (SELECT dog_id\n     FROM treatments\n     GROUP BY dog_id\n     HAVING SUM (cost_of_treatment) > 1000)",
        "similarity": 0.3864734299516908
    },
    {
        "index": 937,
        "db_id": "dog_kennels",
        "db_info": "# treatments ( cost_of_treatment, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment )\n# dogs ( owner_id, dog_id, name, breed_code, size_code )\n# owners ( owner_id, last_name, first_name )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# treatments.dog_id = dogs.dog_id",
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "predicted_sql": "SELECT owners.owner_id,\n       owners.last_name\nFROM owners\nJOIN dogs ON dogs.owner_id = owners.owner_id\nJOIN treatments ON treatments.dog_id = dogs.dog_id\nGROUP BY owners.owner_id,\n         owners.last_name\nHAVING SUM(treatments.cost_of_treatment) =\n  (SELECT MAX(total_cost)\n   FROM\n     (SELECT owners.owner_id,\n             SUM(treatments.cost_of_treatment) AS total_cost\n      FROM owners\n      JOIN dogs ON dogs.owner_id = owners.owner_id\n      JOIN treatments ON treatments.dog_id = dogs.dog_id\n      GROUP BY owners.owner_id,\n               owners.last_name) t);",
        "ground_truth": "SELECT owners.owner_id,\n       owners.last_name\nFROM owners\nJOIN dogs ON owners.owner_id = dogs.owner_id\nJOIN treatments ON dogs.dog_id = treatments.dog_id\nGROUP BY owners.owner_id\nORDER BY COUNT (*) DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 939,
        "db_id": "dog_kennels",
        "db_info": "# treatment_types ( treatment_type_code )\n# treatments ( treatment_type_code, cost_of_treatment )\n# treatments.treatment_type_code = treatment_types.treatment_type_code",
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "predicted_sql": "SELECT treatment_types.treatment_type_code\nFROM treatment_types\nJOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code\nGROUP BY treatment_types.treatment_type_code\nHAVING SUM(treatments.cost_of_treatment) =\n  (SELECT MIN(total_cost)\n   FROM\n     (SELECT SUM(cost_of_treatment) AS total_cost\n      FROM treatments\n      GROUP BY treatment_type_code) AS subquery)\nLIMIT 1;",
        "ground_truth": "SELECT treatment_types.treatment_type_description\nFROM treatment_types\nJOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code\nGROUP BY treatment_types.treatment_type_code\nORDER BY SUM (cost_of_treatment) ASC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 944,
        "db_id": "dog_kennels",
        "db_info": "# professionals ( first_name, last_name )\n# treatments ( professional_id, cost_of_treatment )\n# treatments.professional_id = professionals.professional_id",
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "predicted_sql": "SELECT professionals.first_name,\n       professionals.last_name\nFROM professionals\nJOIN treatments ON professionals.professional_id = treatments.professional_id\nWHERE treatments.cost_of_treatment <\n    (SELECT AVG(cost_of_treatment)\n     FROM treatments);",
        "ground_truth": "SELECT DISTINCT professionals.first_name,\n                professionals.last_name\nFROM professionals\nJOIN treatments\nWHERE cost_of_treatment <\n    (SELECT AVG (cost_of_treatment)\n     FROM treatments)",
        "similarity": 0.2843601895734597
    },
    {
        "index": 945,
        "db_id": "dog_kennels",
        "db_info": "# professionals ( professional_id, role_code, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )\n# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )\n# treatments.professional_id = professionals.professional_id",
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "predicted_sql": "SELECT professionals.first_name,\n       professionals.last_name\nFROM professionals\nINNER JOIN treatments ON treatments.professional_id = professionals.professional_id\nWHERE treatments.cost_of_treatment <\n    (SELECT AVG(cost_of_treatment)\n     FROM treatments)\nGROUP BY professionals.professional_id,\n         professionals.first_name,\n         professionals.last_name;",
        "ground_truth": "SELECT DISTINCT professionals.first_name,\n                professionals.last_name\nFROM professionals\nJOIN treatments\nWHERE cost_of_treatment <\n    (SELECT AVG (cost_of_treatment)\n     FROM treatments)",
        "similarity": 0.2843601895734597
    },
    {
        "index": 960,
        "db_id": "dog_kennels",
        "db_info": "# dogs ( age, owner_id, dog_id, abandoned_yn, breed_code, size_code, name, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )\n# owners ( owner_id, last_name, first_name, street, city, state, zip_code, email_address, home_phone, cell_number )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id",
        "question": "List the last name of the owner owning the youngest dog.",
        "predicted_sql": "SELECT owners.last_name\nFROM owners\nJOIN dogs ON owners.owner_id = dogs.owner_id\nORDER BY dogs.date_of_birth DESC\nLIMIT 1;",
        "ground_truth": "SELECT owners.last_name\nFROM owners\nJOIN dogs ON owners.owner_id = dogs.owner_id\nWHERE dogs.age =\n    (SELECT MAX (age)\n     FROM dogs)",
        "similarity": 0.0
    },
    {
        "index": 961,
        "db_id": "dog_kennels",
        "db_info": "# dogs ( owner_id, date_of_birth, abandoned_yn, breed_code, size_code, name, age, gender, weight, date_arrived, date_adopted, date_departed )\n# owners ( owner_id, last_name, first_name, street, city, state, zip_code, email_address, home_phone, cell_number )\n# breeds ( breed_code, breed_name )\n# sizes ( size_code, size_description )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code",
        "question": "Who owns the youngest dog? Give me his or her last name.",
        "predicted_sql": "SELECT owners.last_name\nFROM owners\nJOIN dogs ON owners.owner_id = dogs.owner_id\nWHERE dogs.date_of_birth =\n    (SELECT MAX(date_of_birth)\n     FROM dogs)\nLIMIT 1;",
        "ground_truth": "SELECT owners.last_name\nFROM owners\nJOIN dogs ON owners.owner_id = dogs.owner_id\nWHERE dogs.age =\n    (SELECT MAX (age)\n     FROM dogs)",
        "similarity": 0.0
    },
    {
        "index": 976,
        "db_id": "dog_kennels",
        "db_info": "# treatments ( cost_of_treatment )\n# dogs ( dog_id )\n# professionals ( professional_id )\n# treatment_types ( treatment_type_code )\n# breeds ( breed_code )\n# sizes ( size_code )\n# owners ( owner_id )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code",
        "question": "How much does the most recent treatment cost?",
        "predicted_sql": "SELECT cost_of_treatment\nFROM treatments\nORDER BY treatment_id DESC\nLIMIT 1;",
        "ground_truth": "SELECT cost_of_treatment\nFROM treatments\nORDER BY date_of_treatment DESC\nLIMIT 1",
        "similarity": 0.0
    },
    {
        "index": 979,
        "db_id": "dog_kennels",
        "db_info": "# dogs ( owner_id )\n# treatments ( dog_id )\n# treatments.dog_id = dogs.dog_id",
        "question": "Tell me the number of dogs that have not received any treatment .",
        "predicted_sql": "SELECT COUNT(*)\nFROM dogs\nWHERE owner_id NOT IN\n    (SELECT dog_id\n     FROM treatments);",
        "ground_truth": "SELECT COUNT (*)\nFROM dogs\nWHERE dog_id NOT IN\n    (SELECT dog_id\n     FROM treatments)",
        "similarity": 0.0
    },
    {
        "index": 980,
        "db_id": "dog_kennels",
        "db_info": "# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )\n# dogs ( dog_id, owner_id, breed_code, size_code, abandoned_yn, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )\n# breeds ( breed_code, breed_name )\n# charges ( charge_id, charge_type, charge_amount )\n# sizes ( size_code, size_description )\n# treatment_types ( treatment_type_code, treatment_type_description )\n# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )\n# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code",
        "question": "How many owners temporarily do not have any dogs?",
        "predicted_sql": "SELECT COUNT(*)\nFROM owners\nWHERE owner_id NOT IN\n    (SELECT DISTINCT owner_id\n     FROM dogs\n     WHERE date_departed IS NOT NULL\n       AND date_adopted IS NULL);",
        "ground_truth": "SELECT COUNT (*)\nFROM owners\nWHERE owner_id NOT IN\n    (SELECT owner_id\n     FROM dogs)",
        "similarity": 0.0
    },
    {
        "index": 981,
        "db_id": "dog_kennels",
        "db_info": "# owners ( owner_id, first_name, last_name, email_address, street, city, state, zip_code, home_phone, cell_number )\n# dogs ( owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id",
        "question": "Find the number of owners who do not own any dogs at this moment.",
        "predicted_sql": "SELECT COUNT(*)\nFROM owners\nWHERE owner_id NOT IN\n    (SELECT DISTINCT owner_id\n     FROM dogs\n     WHERE date_adopted IS NULL\n       AND date_departed IS NOT NULL)",
        "ground_truth": "SELECT COUNT (*)\nFROM owners\nWHERE owner_id NOT IN\n    (SELECT owner_id\n     FROM dogs)",
        "similarity": 0.0
    },
    {
        "index": 996,
        "db_id": "dog_kennels",
        "db_info": "# breeds ( breed_code, breed_name )\n# sizes ( size_code, size_description )\n# dogs ( breed_code, size_code )\n# treatments ( dog_id )\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id",
        "question": "What are all the possible breed type and size type combinations?",
        "predicted_sql": "SELECT breeds.breed_name,\n       sizes.size_description\nFROM breeds\nJOIN dogs ON breeds.breed_code = dogs.breed_code\nJOIN sizes ON dogs.size_code = sizes.size_code\nGROUP BY breeds.breed_name,\n         sizes.size_description;",
        "ground_truth": "SELECT DISTINCT breed_code,\n                size_code\nFROM dogs",
        "similarity": 0.0
    },
    {
        "index": 1007,
        "db_id": "singer",
        "db_info": "# singer ( citizenship, name, birth_year, net_worth_millions, singer_id )\n# song ( singer_id, title, song_id, sales, highest_position )\n# song.singer_id = singer.singer_id",
        "question": "What are the names of the singers who are not French citizens?",
        "predicted_sql": "SELECT name\nFROM singer\nWHERE citizenship != 'French';",
        "ground_truth": "SELECT name\nFROM singer\nWHERE citizenship != 'France'",
        "similarity": 0.5869565217391305
    },
    {
        "index": 1022,
        "db_id": "singer",
        "db_info": "# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )\n# song ( song_id, title, singer_id, sales, highest_position )\n# song.singer_id = singer.singer_id",
        "question": "Show the names of singers that have more than one song.",
        "predicted_sql": "SELECT name\nFROM singer\nWHERE singer_id IN\n    (SELECT singer_id\n     FROM song\n     GROUP BY singer_id\n     HAVING COUNT(song_id) > 1)",
        "ground_truth": "SELECT singer.name\nFROM singer\nJOIN song ON singer.singer_id = song.singer_id\nGROUP BY singer.name\nHAVING COUNT (*) > 1",
        "similarity": 0.75
    }
]