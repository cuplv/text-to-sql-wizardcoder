[
    {
        "index": 16,
        "difficulty": "medium",
        "db_id": "concert_singer",
        "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "pred": "SELECT MAX(capacity) AS maximum_capacity,\n       AVG(capacity) AS average_capacity\nFROM stadium;",
        "gold": "SELECT MAX (capacity) , average\nFROM stadium"
    },
    {
        "index": 32,
        "difficulty": "hard",
        "db_id": "concert_singer",
        "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
        "question": "What are the names of all stadiums that did not have a concert in 2014?",
        "pred": "SELECT s.name\nFROM stadium s\nWHERE NOT EXISTS\n    (SELECT 1\n     FROM concert c\n     WHERE c.stadium_id = s.stadium_id\n       AND c.year = 2014 )\n  AND EXISTS\n    (SELECT 1\n     FROM concert c\n     WHERE c.stadium_id = s.stadium_id );",
        "gold": "SELECT name\nFROM stadium\nEXCEPT\nSELECT stadium.name\nFROM concert\nJOIN stadium ON concert.stadium_id = stadium.stadium_id\nWHERE concert.year = 2014"
    },
    {
        "index": 54,
        "difficulty": "hard",
        "db_id": "pets_1",
        "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
        "question": "How many dog pets are raised by female students?",
        "pred": "SELECT COUNT(*)\nFROM has_pet\nJOIN pets ON has_pet.petid = pets.petid\nJOIN student ON student.stuid = has_pet.stuid\nWHERE student.sex = 'Female'\n  AND pets.pettype = 'dog';",
        "gold": "SELECT COUNT (*)\nFROM student\nJOIN has_pet ON student.stuid = has_pet.stuid\nJOIN pets ON has_pet.petid = pets.petid\nWHERE student.sex = 'F'\n  AND pets.pettype = 'dog'"
    },
    {
        "index": 62,
        "difficulty": "extra",
        "db_id": "pets_1",
        "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "pred": "SELECT s.major,\n       s.age\nFROM student s\nWHERE s.stuid NOT IN\n    (SELECT hp.stuid\n     FROM has_pet hp\n     JOIN pets p ON hp.petid = p.petid\n     WHERE p.pettype = 'Cat' );",
        "gold": "SELECT major,\n       age\nFROM student\nWHERE stuid NOT IN\n    (SELECT student.stuid\n     FROM student\n     JOIN has_pet ON student.stuid = has_pet.stuid\n     JOIN pets ON pets.petid = has_pet.petid\n     WHERE pets.pettype = 'cat' )"
    },
    {
        "index": 63,
        "difficulty": "hard",
        "db_id": "pets_1",
        "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
        "question": "Find the id of students who do not have a cat pet.",
        "pred": "SELECT DISTINCT stuid\nFROM has_pet\nEXCEPT\nSELECT has_pet.stuid\nFROM has_pet\nJOIN pets ON has_pet.petid = pets.petid\nWHERE pets.pettype = 'cat';",
        "gold": "SELECT stuid\nFROM student\nEXCEPT\nSELECT student.stuid\nFROM student\nJOIN has_pet ON student.stuid = has_pet.stuid\nJOIN pets ON pets.petid = has_pet.petid\nWHERE pets.pettype = 'cat'"
    },
    {
        "index": 94,
        "difficulty": "medium",
        "db_id": "car_1",
        "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "pred": "SELECT car_makers.id,\n       car_makers.fullname,\n       COUNT(model_list.model) AS model_count\nFROM car_makers\nJOIN model_list ON car_makers.id = model_list.maker\nGROUP BY car_makers.id,\n         car_makers.fullname;",
        "gold": "SELECT car_makers.fullname,\n       car_makers.id,\n       COUNT (*)\nFROM car_makers\nJOIN model_list ON car_makers.id = model_list.maker\nGROUP BY car_makers.id"
    },
    {
        "index": 97,
        "difficulty": "extra",
        "db_id": "car_1",
        "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
        "question": "Find the model of the car whose weight is below the average weight.",
        "pred": "SELECT ml.model\nFROM cars_data cd\nJOIN car_names cn ON cd.id = cn.makeid\nJOIN model_list ml ON cn.model = ml.model\nWHERE cd.weight <\n    (SELECT AVG(weight)\n     FROM cars_data);",
        "gold": "SELECT car_names.model\nFROM car_names\nJOIN cars_data ON car_names.makeid = cars_data.id\nWHERE cars_data.weight <\n    (SELECT AVG (weight)\n     FROM cars_data)"
    },
    {
        "index": 99,
        "difficulty": "extra",
        "db_id": "car_1",
        "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "pred": "SELECT DISTINCT car_makers.fullname\nFROM car_makers\nJOIN car_names ON car_makers.id = car_names.makeid\nJOIN cars_data ON car_names.makeid = cars_data.id\nWHERE cars_data.year = '1970';",
        "gold": "SELECT DISTINCT car_makers.maker\nFROM car_makers\nJOIN model_list ON car_makers.id = model_list.maker\nJOIN car_names ON model_list.model = car_names.model\nJOIN cars_data ON car_names.makeid = cars_data.id\nWHERE cars_data.year = '1970'"
    },
    {
        "index": 102,
        "difficulty": "extra",
        "db_id": "car_1",
        "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "pred": "SELECT cm.maker,\n       cd.year\nFROM car_makers cm\nJOIN model_list ml ON cm.id = ml.maker\nJOIN car_names cn ON ml.model = cn.model\nJOIN cars_data cd ON cn.makeid = cd.id\nWHERE cd.year =\n    (SELECT MIN(YEAR)\n     FROM cars_data);",
        "gold": "SELECT car_names.make,\n       cars_data.year\nFROM cars_data\nJOIN car_names ON cars_data.id = car_names.makeid\nWHERE cars_data.year =\n    (SELECT MIN (YEAR)\n     FROM cars_data)"
    },
    {
        "index": 109,
        "difficulty": "medium",
        "db_id": "car_1",
        "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
        "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "pred": "SELECT COUNT(DISTINCT model_list.model) AS model_count,\n       car_makers.fullname\nFROM model_list\nJOIN car_makers ON model_list.maker = car_makers.id\nGROUP BY car_makers.fullname;",
        "gold": "SELECT COUNT (*) , car_makers.fullname\nFROM model_list\nJOIN car_makers ON model_list.maker = car_makers.id\nGROUP BY car_makers.id"
    },
    {
        "index": 113,
        "difficulty": "medium",
        "db_id": "car_1",
        "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
        "question": "How many car makers are there in france?",
        "pred": "SELECT COUNT(*)\nFROM car_makers\nJOIN countries ON car_makers.country = countries.countryid\nWHERE countries.countryname = 'France';",
        "gold": "SELECT COUNT (*)\nFROM car_makers\nJOIN countries ON car_makers.country = countries.countryid\nWHERE countries.countryname = 'france'"
    },
    {
        "index": 114,
        "difficulty": "medium",
        "db_id": "car_1",
        "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
        "question": "What is the number of makers of care in France?",
        "pred": "SELECT COUNT(DISTINCT car_makers.id) AS NumberOfMakers\nFROM car_makers\nJOIN countries ON car_makers.country = countries.countryid\nWHERE countries.countryname = 'France';",
        "gold": "SELECT COUNT (*)\nFROM car_makers\nJOIN countries ON car_makers.country = countries.countryid\nWHERE countries.countryname = 'france'"
    },
    {
        "index": 115,
        "difficulty": "hard",
        "db_id": "car_1",
        "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
        "question": "How many car models are produced in the usa?",
        "pred": "SELECT COUNT(DISTINCT model_list.model)\nFROM car_makers\nJOIN countries ON car_makers.country = countries.countryid\nJOIN model_list ON car_makers.id = model_list.maker\nWHERE countries.countryname = 'USA';",
        "gold": "SELECT COUNT (*)\nFROM model_list\nJOIN car_makers ON model_list.maker = car_makers.id\nJOIN countries ON car_makers.country = countries.countryid\nWHERE countries.countryname = 'usa'"
    },
    {
        "index": 116,
        "difficulty": "hard",
        "db_id": "car_1",
        "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
        "question": "What is the count of the car models produced in the United States?",
        "pred": "SELECT COUNT(*)\nFROM car_names\nJOIN model_list ON car_names.model = model_list.model\nJOIN car_makers ON model_list.maker = car_makers.id\nJOIN countries ON car_makers.country = countries.countryid\nWHERE countries.countryname = 'United States';",
        "gold": "SELECT COUNT (*)\nFROM model_list\nJOIN car_makers ON model_list.maker = car_makers.id\nJOIN countries ON car_makers.country = countries.countryid\nWHERE countries.countryname = 'usa'"
    },
    {
        "index": 131,
        "difficulty": "extra",
        "db_id": "car_1",
        "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "pred": "SELECT MAX(cars_data.horsepower) AS max_horsepower,\n       car_names.make\nFROM cars_data\nINNER JOIN car_names ON cars_data.id = car_names.makeid\nWHERE cars_data.cylinders = 3\nGROUP BY car_names.make;",
        "gold": "SELECT cars_data.horsepower,\n       car_names.make\nFROM car_names\nJOIN cars_data ON car_names.makeid = cars_data.id\nWHERE cars_data.cylinders = 3\nORDER BY cars_data.horsepower DESC\nLIMIT 1"
    },
    {
        "index": 132,
        "difficulty": "extra",
        "db_id": "car_1",
        "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "pred": "SELECT MAX(cars_data.horsepower) AS max_horsepower,\n       car_makers.maker AS make\nFROM cars_data\nJOIN car_names ON cars_data.id = car_names.makeid\nJOIN model_list ON car_names.model = model_list.model\nJOIN car_makers ON model_list.maker = car_makers.id\nWHERE cars_data.cylinders = 3\nGROUP BY car_makers.maker\nORDER BY max_horsepower DESC\nLIMIT 1;",
        "gold": "SELECT cars_data.horsepower,\n       car_names.make\nFROM car_names\nJOIN cars_data ON car_names.makeid = cars_data.id\nWHERE cars_data.cylinders = 3\nORDER BY cars_data.horsepower DESC\nLIMIT 1"
    },
    {
        "index": 152,
        "difficulty": "extra",
        "db_id": "car_1",
        "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "pred": "SELECT DISTINCT ml.model\nFROM model_list AS ml\nJOIN car_makers AS cm ON ml.maker = cm.id\nWHERE cm.fullname = 'General Motors'\nUNION\nSELECT DISTINCT ml.model\nFROM cars_data AS cd\nJOIN car_names AS cn ON cd.id = cn.makeid\nJOIN model_list AS ml ON cn.model = ml.model\nWHERE cd.weight > 3500;",
        "gold": "SELECT DISTINCT model_list.model\nFROM car_names\nJOIN model_list ON car_names.model = model_list.model\nJOIN car_makers ON model_list.maker = car_makers.id\nJOIN cars_data ON car_names.makeid = cars_data.id\nWHERE car_makers.fullname = 'General Motors'\n  OR cars_data.weight > 3500"
    },
    {
        "index": 161,
        "difficulty": "medium",
        "db_id": "car_1",
        "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
        "question": "How many countries has more than 2 car makers ?",
        "pred": "SELECT COUNT(*)\nFROM\n  (SELECT countries.countryname\n   FROM countries\n   JOIN car_makers ON countries.countryid = car_makers.country\n   GROUP BY countries.countryname\n   HAVING COUNT(DISTINCT car_makers.id) > 2) AS subquery;",
        "gold": "SELECT COUNT (*)\nFROM countries\nJOIN car_makers ON countries.countryid = car_makers.country\nGROUP BY countries.countryid\nHAVING COUNT (*) > 2"
    },
    {
        "index": 162,
        "difficulty": "medium",
        "db_id": "car_1",
        "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
        "question": "What is the number of countries with more than 2 car makers ?",
        "pred": "SELECT COUNT(*)\nFROM\n  (SELECT countries.countryname\n   FROM car_makers\n   JOIN countries ON car_makers.country = countries.countryid\n   GROUP BY countries.countryname\n   HAVING COUNT(DISTINCT car_makers.id) > 2) AS subquery;",
        "gold": "SELECT COUNT (*)\nFROM countries\nJOIN car_makers ON countries.countryid = car_makers.country\nGROUP BY countries.countryid\nHAVING COUNT (*) > 2"
    },
    {
        "index": 173,
        "difficulty": "hard",
        "db_id": "car_1",
        "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
        "question": "What are the name of the countries where there is not a single car maker?",
        "pred": "SELECT countryname\nFROM countries\nWHERE countryid NOT IN\n    (SELECT country\n     FROM car_makers);",
        "gold": "SELECT countryname\nFROM countries\nEXCEPT\nSELECT countries.countryname\nFROM countries\nJOIN car_makers ON countries.countryid = car_makers.country"
    },
    {
        "index": 196,
        "difficulty": "easy",
        "db_id": "flight_2",
        "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
        "question": "Return the number of airlines in the USA.",
        "pred": "SELECT COUNT(*)\nFROM airlines\nWHERE country = 'United States';",
        "gold": "SELECT COUNT (*)\nFROM airlines\nWHERE country = 'USA'"
    },
    {
        "index": 211,
        "difficulty": "hard",
        "db_id": "flight_2",
        "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "pred": "SELECT COUNT(*)\nFROM flights\nJOIN airports AS source_airports ON flights.sourceairport = source_airports.airportcode\nJOIN airports AS dest_airports ON flights.destairport = dest_airports.airportcode\nWHERE source_airports.city = 'Aberdeen'\n  AND dest_airports.city = 'Ashley';",
        "gold": "SELECT COUNT (*)\nFROM flights\nJOIN airports ON flights.destairport = airports.airportcode\nJOIN airports ON flights.sourceairport = airports.airportcode\nWHERE airports.city = 'Ashley'\n  AND airports.city = 'Aberdeen'"
    },
    {
        "index": 212,
        "difficulty": "hard",
        "db_id": "flight_2",
        "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
        "question": "How many flights fly from Aberdeen to Ashley?",
        "pred": "SELECT COUNT(*)\nFROM flights\nJOIN airports AS source_airports ON flights.sourceairport = source_airports.airportcode\nJOIN airports AS dest_airports ON flights.destairport = dest_airports.airportcode\nWHERE source_airports.city = 'Aberdeen'\n  AND dest_airports.city = 'Ashley';",
        "gold": "SELECT COUNT (*)\nFROM flights\nJOIN airports ON flights.destairport = airports.airportcode\nJOIN airports ON flights.sourceairport = airports.airportcode\nWHERE airports.city = 'Ashley'\n  AND airports.city = 'Aberdeen'"
    },
    {
        "index": 213,
        "difficulty": "medium",
        "db_id": "flight_2",
        "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "pred": "SELECT COUNT(*)\nFROM flights\nWHERE airline = 'JetBlue Airways';",
        "gold": "SELECT COUNT (*)\nFROM flights\nJOIN airlines ON flights.airline = airlines.uid\nWHERE airlines.airline = 'JetBlue Airways'"
    },
    {
        "index": 225,
        "difficulty": "extra",
        "db_id": "flight_2",
        "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
        "question": "What is the code of airport that has the highest number of flights?",
        "pred": "SELECT airport,\n       SUM(flight_count) AS total_flights\nFROM\n  (SELECT sourceairport AS airport,\n          COUNT(*) AS flight_count\n   FROM flights\n   GROUP BY sourceairport\n   UNION ALL SELECT destairport AS airport,\n                    COUNT(*) AS flight_count\n   FROM flights\n   GROUP BY destairport) AS airport_counts\nGROUP BY airport\nORDER BY total_flights DESC\nLIMIT 1;",
        "gold": "SELECT airports.airportcode\nFROM airports\nJOIN flights ON airports.airportcode = flights.destairport\nOR airports.airportcode = flights.sourceairport\nGROUP BY airports.airportcode\nORDER BY COUNT (*) DESC\nLIMIT 1"
    },
    {
        "index": 227,
        "difficulty": "extra",
        "db_id": "flight_2",
        "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
        "question": "What is the code of airport that has fewest number of flights?",
        "pred": "SELECT airport\nFROM\n  (SELECT sourceairport AS airport\n   FROM flights\n   UNION ALL SELECT destairport AS airport\n   FROM flights) AS combined\nGROUP BY airport\nORDER BY COUNT(*) ASC\nLIMIT 1;",
        "gold": "SELECT airports.airportcode\nFROM airports\nJOIN flights ON airports.airportcode = flights.destairport\nOR airports.airportcode = flights.sourceairport\nGROUP BY airports.airportcode\nORDER BY COUNT (*) ASC\nLIMIT 1"
    },
    {
        "index": 228,
        "difficulty": "extra",
        "db_id": "flight_2",
        "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
        "question": "Give the code of the airport with the least flights.",
        "pred": "SELECT airportcode\nFROM\n  (SELECT sourceairport AS airportcode\n   FROM flights\n   UNION ALL SELECT destairport AS airportcode\n   FROM flights) AS all_flights\nGROUP BY airportcode\nORDER BY COUNT(*) ASC\nLIMIT 1;",
        "gold": "SELECT airports.airportcode\nFROM airports\nJOIN flights ON airports.airportcode = flights.destairport\nOR airports.airportcode = flights.sourceairport\nGROUP BY airports.airportcode\nORDER BY COUNT (*) ASC\nLIMIT 1"
    },
    {
        "index": 229,
        "difficulty": "extra",
        "db_id": "flight_2",
        "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
        "question": "Which airline has most number of flights?",
        "pred": "SELECT airline,\n       COUNT(*) AS flight_count\nFROM flights\nGROUP BY airline\nORDER BY flight_count DESC\nLIMIT 1;",
        "gold": "SELECT airlines.airline\nFROM airlines\nJOIN flights ON airlines.uid = flights.airline\nGROUP BY airlines.airline\nORDER BY COUNT (*) DESC\nLIMIT 1"
    },
    {
        "index": 230,
        "difficulty": "extra",
        "db_id": "flight_2",
        "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
        "question": "What airline serves the most flights?",
        "pred": "SELECT airlines.airline,\n       COUNT(*) AS total_flights\nFROM flights\nJOIN airlines ON flights.airline = airlines.uid\nGROUP BY flights.airline\nORDER BY total_flights DESC\nLIMIT 1;",
        "gold": "SELECT airlines.airline\nFROM airlines\nJOIN flights ON airlines.uid = flights.airline\nGROUP BY airlines.airline\nORDER BY COUNT (*) DESC\nLIMIT 1"
    },
    {
        "index": 241,
        "difficulty": "medium",
        "db_id": "flight_2",
        "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
        "question": "Find all airlines that have at least 10 flights.",
        "pred": "SELECT f.airline\nFROM flights AS f\nGROUP BY f.airline\nHAVING COUNT(f.flightno) >= 10;",
        "gold": "SELECT airlines.airline\nFROM airlines\nJOIN flights ON airlines.uid = flights.airline\nGROUP BY airlines.airline\nHAVING COUNT (*) > 10"
    },
    {
        "index": 346,
        "difficulty": "hard",
        "db_id": "cre_Doc_Template_Mgt",
        "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
        "question": "What are the codes of template types that are not used for any document?",
        "pred": "SELECT DISTINCT t.template_type_code\nFROM ref_template_types AS t\nLEFT JOIN templates AS tp ON t.template_type_code = tp.template_type_code\nLEFT JOIN documents AS d ON tp.template_id = d.template_id\nWHERE d.document_id IS NULL;",
        "gold": "SELECT template_type_code\nFROM templates\nEXCEPT\nSELECT template_type_code\nFROM templates\nJOIN documents ON templates.template_id = documents.template_id"
    },
    {
        "index": 387,
        "difficulty": "easy",
        "db_id": "course_teach",
        "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "pred": "SELECT DISTINCT name\nFROM teacher\nWHERE hometown != 'Little Lever Urban District';",
        "gold": "SELECT name\nFROM teacher\nWHERE hometown != 'little lever urban district'"
    },
    {
        "index": 388,
        "difficulty": "easy",
        "db_id": "course_teach",
        "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
        "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "pred": "SELECT name\nFROM teacher\nWHERE hometown != 'Little Lever Urban District';",
        "gold": "SELECT name\nFROM teacher\nWHERE hometown != 'little lever urban district'"
    },
    {
        "index": 452,
        "difficulty": "extra",
        "db_id": "wta_1",
        "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "pred": "SELECT DISTINCT p.first_name,\n                p.country_code\nFROM players p\nJOIN matches m1 ON p.player_id = m1.winner_id\nAND m1.tourney_name = 'WTA Championships'\nJOIN matches m2 ON p.player_id = m2.winner_id\nAND m2.tourney_name = 'Australian Open';",
        "gold": "SELECT players.country_code,\n       players.first_name\nFROM players\nJOIN matches ON players.player_id = matches.winner_id\nWHERE matches.tourney_name = 'WTA Championships' INTERSECT\n  SELECT players.country_code,\n         players.first_name\n  FROM players\n  JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open'"
    },
    {
        "index": 455,
        "difficulty": "medium",
        "db_id": "wta_1",
        "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
        "question": "List the first and last name of all players in the order of birth date.",
        "pred": "SELECT first_name,\n       last_name\nFROM players\nORDER BY birth_date ASC;",
        "gold": "SELECT first_name,\n       last_name\nFROM players\nORDER BY birth_date ASC"
    },
    {
        "index": 456,
        "difficulty": "medium",
        "db_id": "wta_1",
        "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
        "question": "What are the full names of all players, sorted by birth date?",
        "pred": "",
        "gold": "SELECT first_name,\n       last_name\nFROM players\nORDER BY birth_date ASC"
    },
    {
        "index": 459,
        "difficulty": "hard",
        "db_id": "wta_1",
        "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "pred": "SELECT players.first_name,\n       players.country_code\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nGROUP BY players.player_id,\n         players.first_name,\n         players.country_code\nORDER BY SUM(rankings.tours) DESC\nLIMIT 1;",
        "gold": "SELECT players.country_code,\n       players.first_name\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nORDER BY rankings.tours DESC\nLIMIT 1"
    },
    {
        "index": 464,
        "difficulty": "hard",
        "db_id": "wta_1",
        "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "pred": "SELECT matches.winner_name,\n\n  (SELECT ranking_points\n   FROM rankings\n   WHERE player_id = top_winner.winner_id\n   ORDER BY ranking_date DESC\n   LIMIT 1) AS ranking_points\nFROM\n  (SELECT winner_id,\n          winner_name,\n          COUNT(*) AS wins\n   FROM matches\n   GROUP BY winner_id\n   ORDER BY wins DESC\n   LIMIT 1) AS top_winner;",
        "gold": "SELECT winner_name,\n       winner_rank_points\nFROM matches\nGROUP BY winner_name\nORDER BY COUNT (*) DESC\nLIMIT 1"
    },
    {
        "index": 479,
        "difficulty": "medium",
        "db_id": "wta_1",
        "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
        "question": "Find the total number of tours for each ranking date.",
        "pred": "SELECT ranking_date,\n       SUM(DISTINCT tours) AS total_tours\nFROM rankings\nGROUP BY ranking_date;",
        "gold": "SELECT SUM (tours) , ranking_date\nFROM rankings\nGROUP BY ranking_date"
    },
    {
        "index": 498,
        "difficulty": "medium",
        "db_id": "battle_death",
        "db_info": "# battle ( id , name , date , bulgarian_commander , latin_commander , result )\n# ship ( lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship )\n# death ( caused_by_ship_id , id , note , killed , injured )\n# ship.lost_in_battle = battle.id\n# death.caused_by_ship_id = ship.id\n",
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "pred": "SELECT b.id,\n       b.name\nFROM battle b\nWHERE b.id IN\n    (SELECT s.lost_in_battle\n     FROM ship s\n     WHERE s.ship_type = 'Brig');",
        "gold": "SELECT DISTINCT battle.id,\n                battle.name\nFROM battle\nJOIN ship ON battle.id = ship.lost_in_battle\nWHERE ship.ship_type = 'Brig'"
    },
    {
        "index": 500,
        "difficulty": "extra",
        "db_id": "battle_death",
        "db_info": "# battle ( id , name , date , bulgarian_commander , latin_commander , result )\n# ship ( lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship )\n# death ( caused_by_ship_id , id , note , killed , injured )\n# ship.lost_in_battle = battle.id\n# death.caused_by_ship_id = ship.id\n",
        "question": "What is the ship id and name that caused most total injuries?",
        "pred": "SELECT ship.id,\n       ship.name\nFROM ship\nJOIN death ON ship.id = death.caused_by_ship_id\nGROUP BY ship.id,\n         ship.name\nORDER BY SUM(death.injured) DESC\nLIMIT 1;",
        "gold": "SELECT ship.id,\n       ship.name\nFROM death\nJOIN ship ON death.caused_by_ship_id = ship.id\nGROUP BY ship.id\nORDER BY COUNT (*) DESC\nLIMIT 1"
    },
    {
        "index": 505,
        "difficulty": "extra",
        "db_id": "battle_death",
        "db_info": "# battle ( id , name , date , bulgarian_commander , latin_commander , result )\n# ship ( lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship )\n# death ( caused_by_ship_id , id , note , killed , injured )\n# ship.lost_in_battle = battle.id\n# death.caused_by_ship_id = ship.id\n",
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "pred": "SELECT name,\n       RESULT,\n       bulgarian_commander\nFROM battle\nWHERE id NOT IN\n    (SELECT lost_in_battle\n     FROM ship\n     WHERE LOCATION = 'English Channel'\n       AND disposition_of_ship = 'lost' );",
        "gold": "SELECT name,\n       RESULT,\n       bulgarian_commander\nFROM battle\nEXCEPT\nSELECT battle.name,\n       battle.result,\n       battle.bulgarian_commander\nFROM battle\nJOIN ship ON battle.id = ship.lost_in_battle\nWHERE ship.location = 'English Channel'"
    },
    {
        "index": 526,
        "difficulty": "medium",
        "db_id": "student_transcripts_tracking",
        "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
        "question": "What are the names and ids of every course with less than 2 sections?",
        "pred": "SELECT c.course_name,\n       c.course_id\nFROM courses c\nLEFT JOIN sections s ON c.course_id = s.course_id\nGROUP BY c.course_id,\n         c.course_name\nHAVING COUNT(s.section_id) < 2;",
        "gold": "SELECT courses.course_name,\n       courses.course_id\nFROM courses\nJOIN sections ON courses.course_id = sections.course_id\nGROUP BY courses.course_id\nHAVING COUNT (*) <= 2"
    },
    {
        "index": 535,
        "difficulty": "hard",
        "db_id": "student_transcripts_tracking",
        "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "pred": "\nWHERE LOWER(degree_programs.degree_summary_name) = 'bachelor';",
        "gold": "SELECT DISTINCT students.first_name,\n                students.middle_name,\n                students.last_name\nFROM students\nJOIN student_enrolment ON students.student_id = student_enrolment.student_id\nJOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id\nWHERE degree_programs.degree_summary_name = 'Bachelor'"
    },
    {
        "index": 541,
        "difficulty": "extra",
        "db_id": "student_transcripts_tracking",
        "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "pred": "SELECT students.student_id,\n       students.first_name,\n       students.middle_name,\n       students.last_name,\n       COUNT(student_enrolment.student_id) AS number_of_enrollments\nFROM students\nJOIN student_enrolment ON students.student_id = student_enrolment.student_id\nGROUP BY students.student_id,\n         students.first_name,\n         students.middle_name,\n         students.last_name\nORDER BY number_of_enrollments DESC\nLIMIT 1;",
        "gold": "SELECT students.student_id,\n       students.first_name,\n       students.middle_name,\n       students.last_name,\n       COUNT (*) , students.student_id\nFROM students\nJOIN student_enrolment ON students.student_id = student_enrolment.student_id\nGROUP BY students.student_id\nORDER BY COUNT (*) DESC\nLIMIT 1"
    },
    {
        "index": 542,
        "difficulty": "extra",
        "db_id": "student_transcripts_tracking",
        "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "pred": "SELECT s.first_name,\n       s.middle_name,\n       s.last_name,\n       s.student_id,\n       COUNT(*) AS total_enrollments\nFROM students s\nJOIN student_enrolment se ON s.student_id = se.student_id\nGROUP BY s.student_id,\n         s.first_name,\n         s.middle_name,\n         s.last_name\nORDER BY total_enrollments DESC\nLIMIT 1;",
        "gold": "SELECT students.student_id,\n       students.first_name,\n       students.middle_name,\n       students.last_name,\n       COUNT (*) , students.student_id\nFROM students\nJOIN student_enrolment ON students.student_id = student_enrolment.student_id\nGROUP BY students.student_id\nORDER BY COUNT (*) DESC\nLIMIT 1"
    },
    {
        "index": 548,
        "difficulty": "extra",
        "db_id": "student_transcripts_tracking",
        "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
        "question": "What is the name of the course with the most students enrolled?",
        "pred": "SELECT courses.course_name\nFROM student_enrolment_courses\nJOIN courses ON student_enrolment_courses.course_id = courses.course_id\nGROUP BY student_enrolment_courses.course_id\nORDER BY COUNT(student_enrolment_courses.student_course_id) DESC\nLIMIT 1;",
        "gold": "SELECT courses.course_name\nFROM courses\nJOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id\nGROUP BY courses.course_name\nORDER BY COUNT (*) DESC\nLIMIT 1"
    },
    {
        "index": 554,
        "difficulty": "medium",
        "db_id": "student_transcripts_tracking",
        "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
        "question": "What is the mobile phone number of the student named Timmothy Ward ?",
        "pred": "SELECT cell_mobile_number\nFROM students\nWHERE first_name = 'Timmothy'\n  AND last_name = 'Ward';",
        "gold": "SELECT cell_mobile_number\nFROM students\nWHERE first_name = 'timmothy'\n  AND last_name = 'ward'"
    },
    {
        "index": 557,
        "difficulty": "medium",
        "db_id": "student_transcripts_tracking",
        "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "pred": "SELECT s.first_name,\n       s.middle_name,\n       s.last_name\nFROM students s\nJOIN student_enrolment se ON s.student_id = se.student_id\nJOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id\nJOIN transcript_contents tc ON sec.student_course_id = tc.student_course_id\nJOIN transcripts t ON tc.transcript_id = t.transcript_id\nORDER BY t.transcript_date ASC\nLIMIT 1;",
        "gold": "SELECT first_name,\n       middle_name,\n       last_name\nFROM students\nORDER BY date_left ASC\nLIMIT 1"
    },
    {
        "index": 580,
        "difficulty": "easy",
        "db_id": "student_transcripts_tracking",
        "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "pred": "",
        "gold": "SELECT other_student_details\nFROM students\nORDER BY other_student_details DESC"
    },
    {
        "index": 583,
        "difficulty": "hard",
        "db_id": "student_transcripts_tracking",
        "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "pred": "SELECT first_name\nFROM students\nWHERE permanent_address_id IN\n    (SELECT address_id\n     FROM addresses\n     WHERE country = 'Haiti' )\n  OR cell_mobile_number = '09700166582';",
        "gold": "SELECT students.first_name\nFROM students\nJOIN addresses ON students.permanent_address_id = addresses.address_id\nWHERE addresses.country = 'haiti'\n  OR students.cell_mobile_number = '09700166582'"
    },
    {
        "index": 584,
        "difficulty": "hard",
        "db_id": "student_transcripts_tracking",
        "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "pred": "SELECT DISTINCT s.first_name\nFROM students AS s\nLEFT JOIN addresses AS a ON s.permanent_address_id = a.address_id\nWHERE a.country = 'Haiti'\n  OR s.cell_mobile_number = '09700166582';",
        "gold": "SELECT students.first_name\nFROM students\nJOIN addresses ON students.permanent_address_id = addresses.address_id\nWHERE addresses.country = 'haiti'\n  OR students.cell_mobile_number = '09700166582'"
    },
    {
        "index": 610,
        "difficulty": "medium",
        "db_id": "tvshow",
        "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "pred": "SELECT tv_series.series_name\nFROM tv_series\nJOIN cartoon ON tv_series.channel = cartoon.channel\nWHERE cartoon.title = 'The Rise of the Blue Beetle';",
        "gold": "SELECT tv_channel.series_name\nFROM tv_channel\nJOIN cartoon ON tv_channel.id = cartoon.channel\nWHERE cartoon.title = 'The Rise of the Blue Beetle!'"
    },
    {
        "index": 627,
        "difficulty": "medium",
        "db_id": "tvshow",
        "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "pred": "SELECT directed_by,\n       COUNT(*) AS total_cartoons\nFROM cartoon\nGROUP BY directed_by\nORDER BY total_cartoons DESC;",
        "gold": "SELECT COUNT (*) , directed_by\nFROM cartoon\nGROUP BY directed_by"
    },
    {
        "index": 631,
        "difficulty": "medium",
        "db_id": "tvshow",
        "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "pred": "SELECT package_option,\n       series_name\nFROM tv_channel\nWHERE high_definition_tv = 'Yes';",
        "gold": "SELECT package_option,\n       series_name\nFROM tv_channel\nWHERE hight_definition_tv = 'yes'"
    },
    {
        "index": 632,
        "difficulty": "medium",
        "db_id": "tvshow",
        "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "pred": "SELECT package_option,\n       series_name\nFROM tv_channel\nWHERE high_definition_tv = 'Yes';",
        "gold": "SELECT package_option,\n       series_name\nFROM tv_channel\nWHERE hight_definition_tv = 'yes'"
    },
    {
        "index": 636,
        "difficulty": "hard",
        "db_id": "tvshow",
        "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
        "question": "What are the countries that are not playing cartoons written by Todd Casey?",
        "pred": "SELECT DISTINCT tc.country\nFROM tv_channel tc\nWHERE tc.id NOT IN\n    (SELECT c.channel\n     FROM cartoon c\n     WHERE c.written_by = 'Todd Casey' );",
        "gold": "SELECT country\nFROM tv_channel\nEXCEPT\nSELECT tv_channel.country\nFROM tv_channel\nJOIN cartoon ON tv_channel.id = cartoon.channel\nWHERE cartoon.written_by = 'Todd Casey'"
    },
    {
        "index": 641,
        "difficulty": "easy",
        "db_id": "tvshow",
        "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
        "question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "pred": "SELECT id\nFROM tv_channel\nWHERE country IN\n    (SELECT country\n     FROM tv_channel\n     GROUP BY country\n     HAVING COUNT(id) > 2);",
        "gold": "SELECT id\nFROM tv_channel\nGROUP BY country\nHAVING COUNT (*) > 2"
    },
    {
        "index": 642,
        "difficulty": "easy",
        "db_id": "tvshow",
        "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
        "question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "pred": "SELECT tc.id\nFROM tv_channel tc\nLEFT JOIN tv_series ts ON tc.id = ts.channel\nLEFT JOIN cartoon c ON tc.id = c.channel\nGROUP BY tc.id\nHAVING COUNT(DISTINCT ts.id) + COUNT(DISTINCT c.id) > 2;",
        "gold": "SELECT id\nFROM tv_channel\nGROUP BY country\nHAVING COUNT (*) > 2"
    },
    {
        "index": 645,
        "difficulty": "hard",
        "db_id": "tvshow",
        "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "pred": "SELECT DISTINCT tv_channel.package_option\nFROM tv_channel\nWHERE NOT EXISTS\n    (SELECT 1\n     FROM cartoon\n     WHERE cartoon.directed_by = 'Ben Jones'\n       AND cartoon.channel = tv_channel.id );",
        "gold": "SELECT package_option\nFROM tv_channel\nWHERE id NOT IN\n    (SELECT channel\n     FROM cartoon\n     WHERE directed_by = 'Ben Jones' )"
    },
    {
        "index": 704,
        "difficulty": "easy",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "How many countries have a republic as their form of government?",
        "pred": "SELECT count(*)\nFROM country\nWHERE governmentform LIKE '%Republic%';",
        "gold": "SELECT COUNT (*)\nFROM country\nWHERE governmentform = 'Republic'"
    },
    {
        "index": 705,
        "difficulty": "easy",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "How many countries have governments that are republics?",
        "pred": "SELECT COUNT(*)\nFROM country\nWHERE TRIM(LOWER(governmentform)) LIKE '%republic%';",
        "gold": "SELECT COUNT (*)\nFROM country\nWHERE governmentform = 'Republic'"
    },
    {
        "index": 713,
        "difficulty": "extra",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "What language is predominantly spoken in Aruba?",
        "pred": "SELECT LANGUAGE\nFROM countrylanguage\nWHERE countrycode =\n    (SELECT code\n     FROM country\n     WHERE name = 'Aruba')\n  AND isofficial = 'T'\nORDER BY percentage DESC\nLIMIT 1;",
        "gold": "SELECT countrylanguage.language\nFROM country\nJOIN countrylanguage ON country.code = countrylanguage.countrycode\nWHERE country.name = 'Aruba'\nORDER BY percentage DESC\nLIMIT 1"
    },
    {
        "index": 716,
        "difficulty": "medium",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "What are the region and population of Angola?",
        "pred": "SELECT c.region,\n       cty.population\nFROM country AS c\nJOIN city AS cty ON c.capital = cty.id\nWHERE c.name = 'Angola';",
        "gold": "SELECT population,\n       region\nFROM country\nWHERE name = 'Angola'"
    },
    {
        "index": 731,
        "difficulty": "medium",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "pred": "SELECT AVG(gnp) AS mean_gnp,\n       SUM(population) AS total_population\nFROM country\nWHERE name LIKE '%U.S.%';",
        "gold": "SELECT AVG (gnp) , SUM (population)\nFROM country\nWHERE governmentform = 'US Territory'"
    },
    {
        "index": 740,
        "difficulty": "extra",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "What is name of the country that speaks the largest number of languages?",
        "pred": "SELECT country.name\nFROM countrylanguage\nJOIN country ON countrylanguage.countrycode = country.code\nGROUP BY countrylanguage.countrycode\nORDER BY COUNT(DISTINCT countrylanguage.language) DESC\nLIMIT 1;",
        "gold": "SELECT country.name\nFROM country\nJOIN countrylanguage ON country.code = countrylanguage.countrycode\nGROUP BY country.name\nORDER BY COUNT (*) DESC\nLIMIT 1"
    },
    {
        "index": 741,
        "difficulty": "extra",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "pred": "SELECT country.name\nFROM country\nJOIN countrylanguage ON country.code = countrylanguage.countrycode\nGROUP BY country.code\nORDER BY COUNT(DISTINCT countrylanguage.language) DESC\nLIMIT 1;",
        "gold": "SELECT country.name\nFROM country\nJOIN countrylanguage ON country.code = countrylanguage.countrycode\nGROUP BY country.name\nORDER BY COUNT (*) DESC\nLIMIT 1"
    },
    {
        "index": 745,
        "difficulty": "easy",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "What is the number of nations that use English and Dutch?",
        "pred": "SELECT COUNT(DISTINCT countrycode)\nFROM countrylanguage\nWHERE LANGUAGE IN ('English',\n                   'Dutch')\nGROUP BY countrycode\nHAVING COUNT(DISTINCT LANGUAGE) = 2;",
        "gold": "SELECT COUNT (*)\nFROM\n  (SELECT country.name\n   FROM country\n   JOIN countrylanguage ON country.code = countrylanguage.countrycode\n   WHERE countrylanguage.language = 'English' INTERSECT\n     SELECT country.name\n     FROM country\n     JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Dutch' )"
    },
    {
        "index": 746,
        "difficulty": "extra",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "What are the names of nations speak both English and French?",
        "pred": "SELECT country.name\nFROM country\nJOIN countrylanguage AS cl1 ON country.code = cl1.countrycode\nWHERE cl1.language = 'English'\n  AND cl1.isofficial = 'T' INTERSECT\n  SELECT country.name\n  FROM country\n  JOIN countrylanguage AS cl2 ON country.code = cl2.countrycode WHERE cl2.language = 'French'\n  AND cl2.isofficial = 'T';",
        "gold": "SELECT country.name\nFROM country\nJOIN countrylanguage ON country.code = countrylanguage.countrycode\nWHERE countrylanguage.language = 'English' INTERSECT\n  SELECT country.name\n  FROM country\n  JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'French'"
    },
    {
        "index": 750,
        "difficulty": "medium",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "pred": "SELECT COUNT(DISTINCT continent)\nFROM country\nJOIN countrylanguage ON country.code = countrylanguage.countrycode\nWHERE countrylanguage.language = 'Chinese'\n  AND countrylanguage.isofficial = 1;",
        "gold": "SELECT COUNT (DISTINCT continent)\nFROM country\nJOIN countrylanguage ON country.code = countrylanguage.countrycode\nWHERE countrylanguage.language = 'Chinese'"
    },
    {
        "index": 751,
        "difficulty": "medium",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "How many continents speak Chinese?",
        "pred": "SELECT COUNT(DISTINCT c.continent)\nFROM country AS c\nJOIN countrylanguage AS cl ON c.code = cl.countrycode\nWHERE cl.language = 'Chinese'\n  AND cl.isofficial = 1;",
        "gold": "SELECT COUNT (DISTINCT continent)\nFROM country\nJOIN countrylanguage ON country.code = countrylanguage.countrycode\nWHERE countrylanguage.language = 'Chinese'"
    },
    {
        "index": 753,
        "difficulty": "hard",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "Which regions speak Dutch or English?",
        "pred": "SELECT DISTINCT region\nFROM country\nWHERE code IN\n    (SELECT countrycode\n     FROM countrylanguage\n     WHERE (LANGUAGE = 'Dutch'\n            OR LANGUAGE = 'English')\n       AND isofficial = 'T' );",
        "gold": "SELECT DISTINCT country.region\nFROM country\nJOIN countrylanguage ON country.code = countrylanguage.countrycode\nWHERE countrylanguage.language = 'English'\n  OR countrylanguage.language = 'Dutch'"
    },
    {
        "index": 755,
        "difficulty": "extra",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "Which countries have either English or Dutch as an official language?",
        "pred": "SELECT DISTINCT c.name\nFROM country c\nJOIN countrylanguage cl ON c.code = cl.countrycode\nWHERE (cl.language = 'English'\n       OR cl.language = 'Dutch')\n  AND cl.isofficial = 'T';",
        "gold": "SELECT *\nFROM country\nJOIN countrylanguage ON country.code = countrylanguage.countrycode\nWHERE countrylanguage.language = 'English'\n  AND isofficial = 'T'\nUNION\nSELECT *\nFROM country\nJOIN countrylanguage ON country.code = countrylanguage.countrycode\nWHERE countrylanguage.language = 'Dutch'\n  AND isofficial = 'T'"
    },
    {
        "index": 766,
        "difficulty": "extra",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "What is the total number of people living in the nations that do not use English?",
        "pred": "SELECT SUM(c.population) AS TotalPopulation\nFROM country c\nWHERE NOT EXISTS\n    (SELECT 1\n     FROM countrylanguage cl\n     WHERE cl.countrycode = c.code\n       AND cl.language = 'English'\n       AND cl.isofficial = 'T' );",
        "gold": "SELECT SUM (population)\nFROM country\nWHERE name NOT IN\n    (SELECT country.name\n     FROM country\n     JOIN countrylanguage ON country.code = countrylanguage.countrycode\n     WHERE countrylanguage.language = 'English' )"
    },
    {
        "index": 774,
        "difficulty": "extra",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "What are the African countries that have a  population less than any country in Asia?",
        "pred": "SELECT name\nFROM country\nWHERE population <\n    (SELECT MIN(population)\n     FROM country\n     WHERE continent = 'Asia' )\n  AND continent = 'Africa';",
        "gold": "SELECT name\nFROM country\nWHERE continent = 'Africa'\n  AND population <\n    (SELECT MAX (population)\n     FROM country\n     WHERE continent = 'Asia' )"
    },
    {
        "index": 777,
        "difficulty": "extra",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "pred": "SELECT a.name\nFROM country AS a\nWHERE a.continent = 'Asia'\n  AND a.population > ALL\n    (SELECT b.population\n     FROM country AS b\n     WHERE b.continent = 'Africa');",
        "gold": "SELECT name\nFROM country\nWHERE continent = 'Asia'\n  AND population >\n    (SELECT MIN (population)\n     FROM country\n     WHERE continent = 'Africa' )"
    },
    {
        "index": 778,
        "difficulty": "hard",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "What are the country codes for countries that do not speak English?",
        "pred": "SELECT code\nFROM country\nWHERE NOT EXISTS\n    (SELECT 1\n     FROM countrylanguage\n     WHERE country.code = countrylanguage.countrycode\n       AND LANGUAGE = 'English' );",
        "gold": "SELECT countrycode\nFROM countrylanguage\nEXCEPT\nSELECT countrycode\nFROM countrylanguage\nWHERE LANGUAGE = 'English'"
    },
    {
        "index": 780,
        "difficulty": "easy",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "What are the country codes of countries where people use languages other than English?",
        "pred": "SELECT DISTINCT cl.countrycode\nFROM countrylanguage cl\nWHERE NOT EXISTS (\n  SELECT 1\n  FROM countrylanguage WHERE countrycode = cl.countrycode\n  AND LOWER(LANGUAGE) = 'english'\n  AND isofficial = 'T';",
        "gold": "SELECT DISTINCT countrycode\nFROM countrylanguage\nWHERE LANGUAGE != 'English'"
    },
    {
        "index": 784,
        "difficulty": "extra",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "Which cities are in European countries where English is not the official language?",
        "pred": "SELECT city.name\nFROM city\nJOIN country ON city.countrycode = country.code\nLEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode\nAND countrylanguage.language = 'English'\nWHERE country.continent = 'Europe'\n  AND countrylanguage.language IS NULL;",
        "gold": "SELECT DISTINCT city.name\nFROM country\nJOIN city ON city.countrycode = country.code\nWHERE country.continent = 'Europe'\n  AND country.name NOT IN\n    (SELECT country.name\n     FROM country\n     JOIN countrylanguage ON country.code = countrylanguage.countrycode\n     WHERE countrylanguage.isofficial = 'T'\n       AND countrylanguage.language = 'English' )"
    },
    {
        "index": 785,
        "difficulty": "extra",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "pred": "SELECT city.name\nFROM city\nJOIN country ON city.countrycode = country.code\nWHERE country.continent = 'Europe'\n  AND NOT EXISTS\n    (SELECT 1\n     FROM countrylanguage\n     WHERE countrylanguage.countrycode = city.countrycode\n       AND LANGUAGE = 'English'\n       AND isofficial = 'T' );",
        "gold": "SELECT DISTINCT city.name\nFROM country\nJOIN city ON city.countrycode = country.code\nWHERE country.continent = 'Europe'\n  AND country.name NOT IN\n    (SELECT country.name\n     FROM country\n     JOIN countrylanguage ON country.code = countrylanguage.countrycode\n     WHERE countrylanguage.isofficial = 'T'\n       AND countrylanguage.language = 'English' )"
    },
    {
        "index": 786,
        "difficulty": "hard",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "pred": "SELECT DISTINCT city.name\nFROM city\nJOIN country ON city.countrycode = country.code\nJOIN countrylanguage ON countrylanguage.countrycode = country.code\nWHERE country.continent = 'Asia'\n  AND countrylanguage.language = 'Chinese'\n  AND countrylanguage.isofficial = 'T';",
        "gold": "SELECT DISTINCT city.name\nFROM country\nJOIN countrylanguage ON country.code = countrylanguage.countrycode\nJOIN city ON country.code = city.countrycode\nWHERE countrylanguage.isofficial = 't'\n  AND countrylanguage.language = 'chinese'\n  AND country.continent = 'asia'"
    },
    {
        "index": 799,
        "difficulty": "medium",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "pred": "SELECT continent,\n       SUM(population) AS total_population,\n       AVG(lifeexpectancy) AS average_life_expectancy\nFROM country\nGROUP BY continent\nHAVING AVG(lifeexpectancy) < 72;",
        "gold": "SELECT SUM (population) , AVG (lifeexpectancy) , continent\nFROM country\nGROUP BY continent\nHAVING AVG (lifeexpectancy) < 72"
    },
    {
        "index": 810,
        "difficulty": "hard",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "pred": "SELECT SUM(population) AS total_population,\n       AVG(surfacearea) AS average_area\nFROM country\nWHERE continent = 'North America'\n  AND surfacearea > 3000;",
        "gold": "SELECT SUM (population) , AVG (surfacearea)\nFROM country\nWHERE continent = 'north america'\n  AND surfacearea > 3000"
    },
    {
        "index": 811,
        "difficulty": "hard",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "pred": "SELECT SUM(population) AS total_population,\n       AVG(surfacearea) AS average_surface_area\nFROM country\nWHERE surfacearea > 3000\n  AND continent = 'North America';",
        "gold": "SELECT SUM (population) , AVG (surfacearea)\nFROM country\nWHERE continent = 'north america'\n  AND surfacearea > 3000"
    },
    {
        "index": 816,
        "difficulty": "medium",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "pred": "SELECT cl.countrycode,\n       cl.language,\n       cl.percentage\nFROM countrylanguage cl\nJOIN\n  (SELECT countrycode,\n          MAX(percentage) AS max_percentage\n   FROM countrylanguage\n   WHERE isofficial = 'T'\n   GROUP BY countrycode) AS subq ON cl.countrycode = subq.countrycode\nAND cl.percentage = subq.max_percentage\nWHERE cl.isofficial = 'T'\nORDER BY cl.countrycode;",
        "gold": "SELECT LANGUAGE,\n       countrycode,\n       MAX (percentage)\nFROM countrylanguage\nGROUP BY countrycode"
    },
    {
        "index": 817,
        "difficulty": "medium",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "pred": "SELECT cl.countrycode,\n       cl.language,\n       cl.percentage\nFROM countrylanguage cl\nINNER JOIN\n  (SELECT countrycode,\n          MAX(percentage) AS max_percentage\n   FROM countrylanguage\n   GROUP BY countrycode) AS max_cl ON cl.countrycode = max_cl.countrycode\nAND cl.percentage = max_cl.max_percentage;",
        "gold": "SELECT LANGUAGE,\n       countrycode,\n       MAX (percentage)\nFROM countrylanguage\nGROUP BY countrycode"
    },
    {
        "index": 818,
        "difficulty": "extra",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "pred": "SELECT COUNT(*)\nFROM\n  (SELECT cl.countrycode\n   FROM countrylanguage cl\n   INNER JOIN\n     (SELECT countrycode,\n             MAX(percentage) AS max_percentage\n      FROM countrylanguage\n      GROUP BY countrycode) AS max_lang ON cl.countrycode = max_lang.countrycode\n   WHERE cl.language = 'Spanish'\n     AND cl.percentage = max_lang.max_percentage ) AS spanish_speaking_countries;",
        "gold": "SELECT COUNT (*) , MAX (percentage)\nFROM countrylanguage\nWHERE LANGUAGE = 'Spanish'\nGROUP BY countrycode"
    },
    {
        "index": 819,
        "difficulty": "extra",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "pred": "SELECT COUNT(*)\nFROM country AS c\nWHERE EXISTS\n    (SELECT 1\n     FROM countrylanguage AS cl\n     WHERE cl.countrycode = c.code\n       AND cl.language = 'Spanish'\n       AND cl.isofficial = 'T'\n       AND cl.percentage >= ALL\n         (SELECT cl2.percentage\n          FROM countrylanguage AS cl2\n          WHERE cl2.countrycode = c.code\n            AND cl2.language = 'Spanish' ) );",
        "gold": "SELECT COUNT (*) , MAX (percentage)\nFROM countrylanguage\nWHERE LANGUAGE = 'Spanish'\nGROUP BY countrycode"
    },
    {
        "index": 820,
        "difficulty": "medium",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "pred": "WITH SpanishSpeaking AS\n  (SELECT countrycode,\n          MAX(percentage) AS max_percentage\n   FROM countrylanguage\n   WHERE LANGUAGE = 'Spanish'\n   GROUP BY countrycode),\n     MaxPercentage AS\n  (SELECT MAX(max_percentage) AS max_percentage\n   FROM SpanishSpeaking)\nSELECT s.countrycode\nFROM SpanishSpeaking s\nJOIN MaxPercentage mp ON s.max_percentage = mp.max_percentage;",
        "gold": "SELECT countrycode,\n       MAX (percentage)\nFROM countrylanguage\nWHERE LANGUAGE = 'Spanish'\nGROUP BY countrycode"
    },
    {
        "index": 821,
        "difficulty": "medium",
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "pred": "SELECT cl.countrycode\nFROM countrylanguage cl\nJOIN\n  (SELECT countrycode,\n          MAX(percentage) AS max_percentage\n   FROM countrylanguage\n   WHERE LANGUAGE = 'Spanish'\n   GROUP BY countrycode) AS subq ON cl.countrycode = subq.countrycode\nAND cl.percentage = subq.max_percentage\nWHERE cl.language = 'Spanish';",
        "gold": "SELECT countrycode,\n       MAX (percentage)\nFROM countrylanguage\nWHERE LANGUAGE = 'Spanish'\nGROUP BY countrycode"
    },
    {
        "index": 890,
        "difficulty": "hard",
        "db_id": "network_1",
        "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "pred": "SELECT h2.name\nFROM friend\nJOIN highschooler h1 ON friend.student_id = h1.id\nJOIN highschooler h2 ON friend.friend_id = h2.id\nWHERE h1.name = 'Kyle';",
        "gold": "SELECT highschooler.name\nFROM friend\nJOIN highschooler ON friend.student_id = highschooler.id\nJOIN highschooler ON friend.friend_id = highschooler.id\nWHERE highschooler.name = 'Kyle'"
    },
    {
        "index": 891,
        "difficulty": "hard",
        "db_id": "network_1",
        "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
        "question": "Return the names of friends of the high school student Kyle.",
        "pred": "SELECT friend_hs.name\nFROM friend\nJOIN highschooler AS student_hs ON friend.student_id = student_hs.id\nJOIN highschooler AS friend_hs ON friend.friend_id = friend_hs.id\nWHERE student_hs.name = 'Kyle';",
        "gold": "SELECT highschooler.name\nFROM friend\nJOIN highschooler ON friend.student_id = highschooler.id\nJOIN highschooler ON friend.friend_id = highschooler.id\nWHERE highschooler.name = 'Kyle'"
    },
    {
        "index": 899,
        "difficulty": "hard",
        "db_id": "network_1",
        "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
        "question": "What are the ids of students who both have friends and are liked?",
        "pred": "SELECT DISTINCT student_id\nFROM highschooler\nWHERE student_id IN\n    (SELECT student_id\n     FROM friend)\n  AND student_id IN\n    (SELECT student_id\n     FROM likes);",
        "gold": "SELECT student_id\nFROM friend INTERSECT\nSELECT liked_id\nFROM likes"
    },
    {
        "index": 900,
        "difficulty": "hard",
        "db_id": "network_1",
        "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "pred": "SELECT DISTINCT h.name\nFROM highschooler h\nWHERE EXISTS\n    (SELECT 1\n     FROM friend f\n     WHERE f.student_id = h.id )\n  AND EXISTS\n    (SELECT 1\n     FROM likes l\n     WHERE l.liked_id = h.id );",
        "gold": "SELECT highschooler.name\nFROM friend\nJOIN highschooler ON likes.student_id = highschooler.id INTERSECT\nSELECT highschooler.name\nFROM likes\nJOIN highschooler ON likes.liked_id = highschooler.id"
    },
    {
        "index": 901,
        "difficulty": "hard",
        "db_id": "network_1",
        "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "pred": "SELECT DISTINCT h.name\nFROM highschooler h\nWHERE h.id IN\n    (SELECT f.student_id\n     FROM friend f\n     WHERE f.student_id = h.id )\n  AND h.id IN\n    (SELECT l.liked_id\n     FROM likes l\n     WHERE l.liked_id = h.id );",
        "gold": "SELECT highschooler.name\nFROM friend\nJOIN highschooler ON likes.student_id = highschooler.id INTERSECT\nSELECT highschooler.name\nFROM likes\nJOIN highschooler ON likes.liked_id = highschooler.id"
    },
    {
        "index": 936,
        "difficulty": "extra",
        "db_id": "dog_kennels",
        "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "pred": "SELECT owners.owner_id,\n       owners.last_name\nFROM owners\nJOIN dogs ON owners.owner_id = dogs.owner_id\nJOIN treatments ON dogs.dog_id = treatments.dog_id\nGROUP BY owners.owner_id,\n         owners.last_name\nORDER BY SUM(treatments.cost_of_treatment) DESC\nLIMIT 1;",
        "gold": "SELECT owners.owner_id,\n       owners.last_name\nFROM owners\nJOIN dogs ON owners.owner_id = dogs.owner_id\nJOIN treatments ON dogs.dog_id = treatments.dog_id\nGROUP BY owners.owner_id\nORDER BY COUNT (*) DESC\nLIMIT 1"
    },
    {
        "index": 937,
        "difficulty": "extra",
        "db_id": "dog_kennels",
        "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "pred": "SELECT owners.owner_id,\n       owners.last_name,\n       SUM(treatments.cost_of_treatment) AS total_cost\nFROM owners\nJOIN dogs ON owners.owner_id = dogs.owner_id\nJOIN treatments ON dogs.dog_id = treatments.dog_id\nGROUP BY owners.owner_id,\n         owners.last_name\nORDER BY total_cost DESC\nLIMIT 1;",
        "gold": "SELECT owners.owner_id,\n       owners.last_name\nFROM owners\nJOIN dogs ON owners.owner_id = dogs.owner_id\nJOIN treatments ON dogs.dog_id = treatments.dog_id\nGROUP BY owners.owner_id\nORDER BY COUNT (*) DESC\nLIMIT 1"
    },
    {
        "index": 942,
        "difficulty": "medium",
        "db_id": "dog_kennels",
        "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "pred": "SELECT p.professional_id,\n       p.cell_number\nFROM professionals p\nJOIN treatments t ON p.professional_id = t.professional_id\nGROUP BY p.professional_id,\n         p.cell_number\nHAVING COUNT(DISTINCT t.treatment_type_code) >= 2;",
        "gold": "SELECT professionals.professional_id,\n       professionals.cell_number\nFROM professionals\nJOIN treatments ON professionals.professional_id = treatments.professional_id\nGROUP BY professionals.professional_id\nHAVING COUNT (*) >= 2"
    },
    {
        "index": 943,
        "difficulty": "medium",
        "db_id": "dog_kennels",
        "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "pred": "SELECT p.professional_id,\n       p.cell_number\nFROM professionals p\nJOIN treatments t ON p.professional_id = t.professional_id\nGROUP BY p.professional_id,\n         p.cell_number\nHAVING COUNT(DISTINCT t.treatment_type_code) >= 2;",
        "gold": "SELECT professionals.professional_id,\n       professionals.cell_number\nFROM professionals\nJOIN treatments ON professionals.professional_id = treatments.professional_id\nGROUP BY professionals.professional_id\nHAVING COUNT (*) >= 2"
    },
    {
        "index": 944,
        "difficulty": "extra",
        "db_id": "dog_kennels",
        "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "pred": "SELECT DISTINCT p.first_name,\n                p.last_name\nFROM professionals p\nJOIN treatments t ON p.professional_id = t.professional_id\nWHERE t.cost_of_treatment <\n    (SELECT AVG(cost_of_treatment)\n     FROM treatments);",
        "gold": "SELECT DISTINCT professionals.first_name,\n                professionals.last_name\nFROM professionals\nJOIN treatments\nWHERE cost_of_treatment <\n    (SELECT AVG (cost_of_treatment)\n     FROM treatments)"
    },
    {
        "index": 945,
        "difficulty": "extra",
        "db_id": "dog_kennels",
        "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "pred": "SELECT DISTINCT professionals.first_name,\n                professionals.last_name\nFROM professionals\nJOIN treatments ON professionals.professional_id = treatments.professional_id\nWHERE treatments.cost_of_treatment <\n    (SELECT AVG(treatments.cost_of_treatment)\n     FROM treatments);",
        "gold": "SELECT DISTINCT professionals.first_name,\n                professionals.last_name\nFROM professionals\nJOIN treatments\nWHERE cost_of_treatment <\n    (SELECT AVG (cost_of_treatment)\n     FROM treatments)"
    },
    {
        "index": 960,
        "difficulty": "extra",
        "db_id": "dog_kennels",
        "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
        "question": "List the last name of the owner owning the youngest dog.",
        "pred": "SELECT o.last_name\nFROM owners o\nJOIN dogs d ON o.owner_id = d.owner_id\nWHERE d.date_of_birth =\n    (SELECT MAX(date_of_birth)\n     FROM dogs);",
        "gold": "SELECT owners.last_name\nFROM owners\nJOIN dogs ON owners.owner_id = dogs.owner_id\nWHERE dogs.age =\n    (SELECT MAX (age)\n     FROM dogs)"
    },
    {
        "index": 961,
        "difficulty": "extra",
        "db_id": "dog_kennels",
        "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
        "question": "Who owns the youngest dog? Give me his or her last name.",
        "pred": "SELECT o.last_name\nFROM owners o\nJOIN dogs d ON o.owner_id = d.owner_id\nORDER BY d.age ASC;",
        "gold": "SELECT owners.last_name\nFROM owners\nJOIN dogs ON owners.owner_id = dogs.owner_id\nWHERE dogs.age =\n    (SELECT MAX (age)\n     FROM dogs)"
    },
    {
        "index": 981,
        "difficulty": "extra",
        "db_id": "dog_kennels",
        "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
        "question": "Find the number of owners who do not own any dogs at this moment.",
        "pred": "SELECT COUNT(*)\nFROM owners\nWHERE owner_id NOT IN\n    (SELECT DISTINCT owner_id\n     FROM dogs\n     WHERE date_departed IS NULL );",
        "gold": "SELECT COUNT (*)\nFROM owners\nWHERE owner_id NOT IN\n    (SELECT owner_id\n     FROM dogs)"
    },
    {
        "index": 996,
        "difficulty": "medium",
        "db_id": "dog_kennels",
        "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
        "question": "What are all the possible breed type and size type combinations?",
        "pred": "SELECT breeds.breed_code,\n       breeds.breed_name,\n       sizes.size_code,\n       sizes.size_description\nFROM breeds\nCROSS JOIN sizes;",
        "gold": "SELECT DISTINCT breed_code,\n                size_code\nFROM dogs"
    },
    {
        "index": 1007,
        "difficulty": "easy",
        "db_id": "singer",
        "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
        "question": "What are the names of the singers who are not French citizens?",
        "pred": "SELECT name\nFROM singer\nWHERE citizenship <> 'French';",
        "gold": "SELECT name\nFROM singer\nWHERE citizenship != 'France'"
    }
]