[
  {
    "index": 0,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "easy",
    "question": "How many singers do we have?",
    "pred": "SELECT count ( * ) from singer",
    "gold": "SELECT count(*) FROM singer"
  },
  {
    "index": 1,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "easy",
    "question": "What is the total number of singers?",
    "pred": "SELECT count ( * ) from singer",
    "gold": "SELECT count(*) FROM singer"
  },
  {
    "index": 2,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "medium",
    "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
    "pred": "SELECT name , country , age from singer order by age desc",
    "gold": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"
  },
  {
    "index": 3,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "medium",
    "question": "What are the names, countries, and ages for every singer in descending order of age?",
    "pred": "SELECT name , country , age from singer order by age desc",
    "gold": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"
  },
  {
    "index": 4,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "medium",
    "question": "What is the average, minimum, and maximum age of all singers from France?",
    "pred": "SELECT avg ( age ) , min ( age ) , max ( age ) from singer where country = 'France'",
    "gold": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"
  },
  {
    "index": 5,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "medium",
    "question": "What is the average, minimum, and maximum age for all French singers?",
    "pred": "SELECT avg ( age ) , min ( age ) , max ( age ) from singer where country = 'France';",
    "gold": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"
  },
  {
    "index": 6,
    "correct": false,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "medium",
    "question": "Show the name and the release year of the song by the youngest singer.",
    "pred": "SELECT name , song_release_year from singer order by age asc limit 1;",
    "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"
  },
  {
    "index": 7,
    "correct": false,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "medium",
    "question": "What are the names and release years for all the songs of the youngest singer?",
    "pred": "SELECT name , song_release_year from singer order by age asc limit 1",
    "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"
  },
  {
    "index": 8,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "easy",
    "question": "What are all distinct countries where singers above age 20 are from?",
    "pred": "SELECT distinct country from singer where age > 20",
    "gold": "SELECT DISTINCT country FROM singer WHERE age  >  20"
  },
  {
    "index": 9,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "easy",
    "question": "What are  the different countries with singers above age 20?",
    "pred": "SELECT distinct country from singer where age > 20",
    "gold": "SELECT DISTINCT country FROM singer WHERE age  >  20"
  },
  {
    "index": 10,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "medium",
    "question": "Show all countries and the number of singers in each country.",
    "pred": "SELECT country , count ( * ) from singer group by country;",
    "gold": "SELECT country ,  count(*) FROM singer GROUP BY country"
  },
  {
    "index": 11,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "medium",
    "question": "How many singers are from each country?",
    "pred": "SELECT country , count ( * ) from singer group by country ;",
    "gold": "SELECT country ,  count(*) FROM singer GROUP BY country"
  },
  {
    "index": 12,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "hard",
    "question": "List all song names by singers above the average age.",
    "pred": "SELECT song_name from singer where age > ( select avg ( age ) from singer );",
    "gold": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"
  },
  {
    "index": 13,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "hard",
    "question": "What are all the song names by singers who are older than average?",
    "pred": "SELECT song_name from singer where age > ( select avg ( age ) from singer )",
    "gold": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"
  },
  {
    "index": 14,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "medium",
    "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
    "pred": "SELECT location , name from stadium where capacity between 5000 and 10000",
    "gold": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"
  },
  {
    "index": 15,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "medium",
    "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
    "pred": "SELECT location , name from stadium where capacity between 5000 and 10000",
    "gold": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"
  },
  {
    "index": 16,
    "correct": false,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "medium",
    "question": "What is the maximum capacity and the average of all stadiums ?",
    "pred": "SELECT max ( capacity ) , avg ( capacity ) from stadium",
    "gold": "select max(capacity), average from stadium"
  },
  {
    "index": 17,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "medium",
    "question": "What is the average and maximum capacities for all stadiums ?",
    "pred": "SELECT max ( capacity ) , avg ( capacity ) from stadium",
    "gold": "select avg(capacity) ,  max(capacity) from stadium"
  },
  {
    "index": 18,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "medium",
    "question": "What is the name and capacity for the stadium with highest average attendance?",
    "pred": "SELECT name , capacity from stadium order by average desc limit 1",
    "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"
  },
  {
    "index": 19,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "medium",
    "question": "What is the name and capacity for the stadium with the highest average attendance?",
    "pred": "SELECT name , capacity from stadium order by average desc limit 1",
    "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"
  },
  {
    "index": 20,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "medium",
    "question": "How many concerts are there in year 2014 or 2015?",
    "pred": "SELECT count ( * ) from concert where year = 2014 or year = 2015",
    "gold": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015"
  },
  {
    "index": 21,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "medium",
    "question": "How many concerts occurred in 2014 or 2015?",
    "pred": "SELECT count ( * ) from concert where year = 2014 or year = 2015",
    "gold": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015"
  },
  {
    "index": 22,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "medium",
    "question": "Show the stadium name and the number of concerts in each stadium.",
    "pred": "SELECT stadium.name , count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id group by concert.stadium_id",
    "gold": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id"
  },
  {
    "index": 23,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "medium",
    "question": "For each stadium, how many concerts play there?",
    "pred": "SELECT stadium.name , count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id group by concert.stadium_id;",
    "gold": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id"
  },
  {
    "index": 24,
    "correct": false,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "extra",
    "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
    "pred": "SELECT stadium.name , stadium.capacity from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year >= 2014 group by concert.stadium_id order by count ( * ) desc limit 1",
    "gold": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 25,
    "correct": false,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "extra",
    "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
    "pred": "SELECT stadium.name , stadium.capacity from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year > 2013 group by concert.stadium_id order by count ( * ) desc limit 1",
    "gold": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1"
  },
  {
    "index": 26,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "hard",
    "question": "Which year has most number of concerts?",
    "pred": "SELECT year from concert group by year order by count ( * ) desc limit 1",
    "gold": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 27,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "hard",
    "question": "What is the year that had the most concerts?",
    "pred": "SELECT year from concert group by year order by count ( * ) desc limit 1",
    "gold": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 28,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "hard",
    "question": "Show the stadium names without any concert.",
    "pred": "SELECT name from stadium where stadium_id not in ( select stadium_id from concert )",
    "gold": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)"
  },
  {
    "index": 29,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "hard",
    "question": "What are the names of the stadiums without any concerts?",
    "pred": "SELECT name from stadium where stadium_id not in ( select stadium_id from concert )",
    "gold": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)"
  },
  {
    "index": 30,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "hard",
    "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
    "pred": "SELECT country from singer where age > 40 intersect select country from singer where age < 30",
    "gold": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30"
  },
  {
    "index": 31,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "hard",
    "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
    "pred": "SELECT name from stadium except select stadium.name from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014",
    "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"
  },
  {
    "index": 32,
    "correct": false,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "hard",
    "question": "What are the names of all stadiums that did not have a concert in 2014?",
    "pred": "SELECT name from stadium except select concert.concert_name from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014",
    "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"
  },
  {
    "index": 33,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "medium",
    "question": "Show the name and theme for all concerts and the number of singers in each concert.",
    "pred": "SELECT concert.concert_name , concert.theme , count ( * ) from concert join singer_in_concert on concert.concert_id = singer_in_concert.concert_id group by singer_in_concert.concert_id",
    "gold": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id"
  },
  {
    "index": 34,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "medium",
    "question": "What are the names , themes , and number of singers for every concert ?",
    "pred": "SELECT concert.concert_name , concert.theme , count ( * ) from concert join singer_in_concert on concert.concert_id = singer_in_concert.concert_id group by concert.concert_id;",
    "gold": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id"
  },
  {
    "index": 35,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "medium",
    "question": "List singer names and number of concerts for each singer.",
    "pred": "SELECT singer.name , count ( * ) from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id group by singer.singer_id;",
    "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"
  },
  {
    "index": 36,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "medium",
    "question": "What are the names of the singers and number of concerts for each person?",
    "pred": "SELECT singer.name , count ( * ) from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id group by singer.singer_id;",
    "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"
  },
  {
    "index": 37,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "hard",
    "question": "List all singer names in concerts in year 2014.",
    "pred": "SELECT singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where year = 2014",
    "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"
  },
  {
    "index": 38,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "hard",
    "question": "What are the names of the singers who performed in a concert in 2014?",
    "pred": "SELECT singer.name from concert join singer_in_concert on concert.concert_id = singer_in_concert.concert_id join singer on singer_in_concert.singer_id = singer.singer_id where concert.year = 2014;",
    "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"
  },
  {
    "index": 39,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "medium",
    "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
    "pred": "SELECT name , country from singer where song_name like '%Hey%';",
    "gold": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"
  },
  {
    "index": 40,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "medium",
    "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
    "pred": "SELECT name , country from singer where song_name like '%Hey%';",
    "gold": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"
  },
  {
    "index": 41,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "extra",
    "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
    "pred": "SELECT stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2015",
    "gold": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015"
  },
  {
    "index": 42,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "extra",
    "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
    "pred": "SELECT stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2015",
    "gold": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015"
  },
  {
    "index": 43,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "hard",
    "question": "Find the number of concerts happened in the stadium with the highest capacity .",
    "pred": "SELECT count ( * ) from concert where stadium_id = ( select stadium_id from stadium order by capacity desc limit 1 );",
    "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)"
  },
  {
    "index": 44,
    "correct": true,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id , location , name , capacity , highest , lowest , average )\n# singer ( singer_id , name , country , song_name , song_release_year , age , is_male )\n# concert ( concert_id , concert_name , theme , stadium_id , year )\n# singer_in_concert ( concert_id , singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n",
    "difficulty": "hard",
    "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
    "pred": "SELECT count ( * ) from concert where stadium_id = ( select stadium_id from stadium order by capacity desc limit 1 );",
    "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)"
  },
  {
    "index": 45,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "easy",
    "question": "Find the number of pets whose weight is heavier than 10.",
    "pred": "SELECT count ( * ) from pets where weight > 10",
    "gold": "SELECT count(*) FROM pets WHERE weight  >  10"
  },
  {
    "index": 46,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "easy",
    "question": "How many pets have a greater weight than 10?",
    "pred": "SELECT count ( * ) from pets where weight > 10",
    "gold": "SELECT count(*) FROM pets WHERE weight  >  10"
  },
  {
    "index": 47,
    "correct": false,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "medium",
    "question": "Find the weight of the youngest dog.",
    "pred": "SELECT weight from pets where pettype = 'dog' order by pet_age desc limit 1",
    "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
  },
  {
    "index": 48,
    "correct": false,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "medium",
    "question": "How much does the youngest dog weigh?",
    "pred": "SELECT weight from pets where pettype = 'dog' order by pet_age desc limit 1",
    "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
  },
  {
    "index": 49,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "medium",
    "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
    "pred": "SELECT max ( weight ) , pettype from pets group by pettype",
    "gold": "SELECT max(weight) ,  petType FROM pets GROUP BY petType"
  },
  {
    "index": 50,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "medium",
    "question": "List the maximum weight and type for each type of pet.",
    "pred": "SELECT max ( weight ) , pettype from pets group by pettype",
    "gold": "SELECT max(weight) ,  petType FROM pets GROUP BY petType"
  },
  {
    "index": 51,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "medium",
    "question": "Find number of pets owned by students who are older than 20.",
    "pred": "SELECT count ( * ) from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where student.age > 20",
    "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"
  },
  {
    "index": 52,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "medium",
    "question": "How many pets are owned by students that have an age greater than 20?",
    "pred": "SELECT count ( * ) from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where student.age > 20",
    "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"
  },
  {
    "index": 53,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "hard",
    "question": "Find the number of dog pets that are raised by female students (with sex F).",
    "pred": "SELECT count ( * ) from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where pets.pettype = 'dog' and student.sex = 'F';",
    "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"
  },
  {
    "index": 54,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "hard",
    "question": "How many dog pets are raised by female students?",
    "pred": "SELECT count ( * ) from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where pets.pettype = 'Dog' and student.sex = 'F'",
    "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"
  },
  {
    "index": 55,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "easy",
    "question": "Find the number of distinct type of pets.",
    "pred": "SELECT count ( distinct pettype ) from pets",
    "gold": "SELECT count(DISTINCT pettype) FROM pets"
  },
  {
    "index": 56,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "easy",
    "question": "How many different types of pet are there?",
    "pred": "SELECT count ( distinct pettype ) from pets",
    "gold": "SELECT count(DISTINCT pettype) FROM pets"
  },
  {
    "index": 57,
    "correct": false,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "extra",
    "question": "Find the first name of students who have cat or dog pet.",
    "pred": "SELECT student.fname from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'Cat' or pets.pettype = 'Dog'",
    "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"
  },
  {
    "index": 58,
    "correct": false,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "extra",
    "question": "What are the first names of every student who has a cat or dog as a pet?",
    "pred": "SELECT student.fname from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where pets.pettype = 'Cat' or pets.pettype = 'Dog' group by student.stuid having count ( * ) >= 2",
    "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"
  },
  {
    "index": 59,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "extra",
    "question": "Find the first name of students who have both cat and dog pets .",
    "pred": "SELECT student.fname from has_pet join student on has_pet.stuid = student.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'cat' intersect select student.fname from has_pet join student on has_pet.stuid = student.stuid join pets on pets.petid = has_pet.petid where pets.pettype = 'dog';",
    "gold": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'"
  },
  {
    "index": 60,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "extra",
    "question": "What are the students' first names who have both cats and dogs as pets?",
    "pred": "SELECT student.fname from has_pet join student on has_pet.stuid = student.stuid where has_pet.petid in ( select petid from pets where pettype = 'Cat' ) intersect select student.fname from has_pet join student on has_pet.stuid = student.stuid where has_pet.petid in ( select petid from pets where pettype = 'Dog' );",
    "gold": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'"
  },
  {
    "index": 61,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "extra",
    "question": "Find the major and age of students who do not have a cat pet.",
    "pred": "SELECT major , age from student where stuid not in ( select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' )",
    "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
  },
  {
    "index": 62,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "extra",
    "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
    "pred": "SELECT major , age from student where stuid not in ( select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' )",
    "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
  },
  {
    "index": 63,
    "correct": false,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "hard",
    "question": "Find the id of students who do not have a cat pet.",
    "pred": "SELECT stuid from has_pet except select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'Cat'",
    "gold": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"
  },
  {
    "index": 64,
    "correct": false,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "hard",
    "question": "What are the ids of the students who do not own cats as pets?",
    "pred": "SELECT stuid from has_pet except select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'cat';",
    "gold": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"
  },
  {
    "index": 65,
    "correct": false,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "extra",
    "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
    "pred": "SELECT student.fname , student.age from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where pets.pettype = 'dog' except select student.fname , student.age from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where pets.pettype = 'cat';",
    "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
  },
  {
    "index": 66,
    "correct": false,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "extra",
    "question": "What is the first name of every student who has a dog but does not have a cat?",
    "pred": "SELECT student.fname from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where pets.pettype = 'Dog' except select student.fname from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where pets.pettype = 'Cat';",
    "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
  },
  {
    "index": 67,
    "correct": false,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "medium",
    "question": "Find the type and weight of the youngest pet.",
    "pred": "SELECT pettype , weight from pets order by pet_age desc limit 1",
    "gold": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"
  },
  {
    "index": 68,
    "correct": false,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "medium",
    "question": "What type of pet is the youngest animal, and how much does it weigh?",
    "pred": "SELECT pettype , weight from pets order by pet_age desc , weight asc limit 1",
    "gold": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"
  },
  {
    "index": 69,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "medium",
    "question": "Find the id and weight of all pets whose age is older than 1.",
    "pred": "SELECT petid , weight from pets where pet_age > 1",
    "gold": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"
  },
  {
    "index": 70,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "medium",
    "question": "What is the id and weight of every pet who is older than 1?",
    "pred": "SELECT petid , weight from pets where pet_age > 1",
    "gold": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"
  },
  {
    "index": 71,
    "correct": false,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "medium",
    "question": "Find the average and maximum age for each type of pet.",
    "pred": "SELECT avg ( pet_age ) , max ( pet_age ) from pets group by pettype",
    "gold": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"
  },
  {
    "index": 72,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "medium",
    "question": "What is the average and maximum age for each pet type?",
    "pred": "SELECT pettype , avg ( pet_age ) , max ( pet_age ) from pets group by pettype",
    "gold": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"
  },
  {
    "index": 73,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "medium",
    "question": "Find the average weight for each pet type.",
    "pred": "SELECT pettype , avg ( weight ) from pets group by pettype;",
    "gold": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"
  },
  {
    "index": 74,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "medium",
    "question": "What is the average weight for each type of pet?",
    "pred": "SELECT avg ( weight ) , pettype from pets group by pettype",
    "gold": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"
  },
  {
    "index": 75,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "medium",
    "question": "Find the first name and age of students who have a pet.",
    "pred": "SELECT distinct student.fname , student.age from has_pet join student on has_pet.stuid = student.stuid;",
    "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"
  },
  {
    "index": 76,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "medium",
    "question": "What are the different first names and ages of the students who do have pets?",
    "pred": "SELECT distinct student.fname , student.age from has_pet join student on has_pet.stuid = student.stuid",
    "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"
  },
  {
    "index": 77,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "medium",
    "question": "Find the id of the pet owned by student whose last name is 'Smith'.",
    "pred": "SELECT pets.petid from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where student.lname = 'Smith';",
    "gold": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"
  },
  {
    "index": 78,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "medium",
    "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
    "pred": "SELECT pets.petid from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where student.lname = 'Smith';",
    "gold": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"
  },
  {
    "index": 79,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "medium",
    "question": "Find the number of pets for each student who has any pet and student id.",
    "pred": "SELECT count ( * ) , stuid from has_pet group by stuid",
    "gold": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid"
  },
  {
    "index": 80,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "medium",
    "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
    "pred": "SELECT stuid , count ( * ) from has_pet group by stuid",
    "gold": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid"
  },
  {
    "index": 81,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "medium",
    "question": "Find the first name and gender of student who have more than one pet.",
    "pred": "SELECT student.fname , student.sex from has_pet join student on has_pet.stuid = student.stuid group by has_pet.stuid having count ( * ) > 1",
    "gold": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"
  },
  {
    "index": 82,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "medium",
    "question": "What is the first name and gender of the all the students who have more than one pet?",
    "pred": "SELECT student.fname , student.sex from has_pet join student on has_pet.stuid = student.stuid group by has_pet.stuid having count ( * ) > 1 ;",
    "gold": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"
  },
  {
    "index": 83,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "hard",
    "question": "Find the last name of the student who has a cat that is age 3.",
    "pred": "SELECT student.lname from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where pets.pettype = 'cat' and pets.pet_age = 3",
    "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"
  },
  {
    "index": 84,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "hard",
    "question": "What is the last name of the student who has a cat that is 3 years old?",
    "pred": "SELECT student.lname from has_pet join pets on has_pet.petid = pets.petid join student on student.stuid = has_pet.stuid where pets.pettype = 'cat' and pets.pet_age = 3",
    "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"
  },
  {
    "index": 85,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "extra",
    "question": "Find the average age of students who do not have any pet .",
    "pred": "SELECT avg ( age ) from student where stuid not in ( select stuid from has_pet )",
    "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)"
  },
  {
    "index": 86,
    "correct": true,
    "db_id": "pets_1",
    "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
    "difficulty": "extra",
    "question": "What is the average age for all students who do not own any pets ?",
    "pred": "SELECT avg ( age ) from student where stuid not in ( select stuid from has_pet )",
    "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)"
  },
  {
    "index": 87,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "easy",
    "question": "How many continents are there?",
    "pred": "SELECT count ( * ) from continents",
    "gold": "SELECT count(*) FROM CONTINENTS;"
  },
  {
    "index": 88,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "easy",
    "question": "What is the number of continents?",
    "pred": "SELECT count ( * ) from continents",
    "gold": "SELECT count(*) FROM CONTINENTS;"
  },
  {
    "index": 89,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
    "pred": "SELECT continents.contid , continents.continent , count ( * ) , countries.continent from countries join continents on countries.continent = continents.contid group by countries.continent;",
    "gold": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"
  },
  {
    "index": 90,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "For each continent, list its id, name, and how many countries it has?",
    "pred": "SELECT continents.contid , continents.continent , count ( * ) from countries join continents on countries.continent = continents.contid group by countries.continent;",
    "gold": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"
  },
  {
    "index": 91,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "easy",
    "question": "How many countries are listed?",
    "pred": "SELECT count ( * ) from countries",
    "gold": "SELECT count(*) FROM COUNTRIES;"
  },
  {
    "index": 92,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "easy",
    "question": "How many countries exist?",
    "pred": "SELECT count ( * ) from countries",
    "gold": "SELECT count(*) FROM COUNTRIES;"
  },
  {
    "index": 93,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "How many models does each car maker produce? List maker full name, id and the number.",
    "pred": "SELECT car_makers.fullname , model_list.maker , count ( * ) from model_list join car_makers on model_list.maker = car_makers.id group by model_list.maker;",
    "gold": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"
  },
  {
    "index": 94,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "What is the full name of each car maker, along with its id and how many models it produces?",
    "pred": "SELECT car_makers.fullname , model_list.id , count ( * ) from car_makers join model_list on car_makers.id = model_list.id group by model_list.id",
    "gold": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"
  },
  {
    "index": 95,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "hard",
    "question": "Which model of the car has the minimum horsepower?",
    "pred": "SELECT model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model order by cars_data.horsepower asc limit 1",
    "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"
  },
  {
    "index": 96,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "hard",
    "question": "What is the model of the car with the smallest amount of horsepower?",
    "pred": "SELECT distinct model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model order by cars_data.horsepower asc limit 1 ;",
    "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"
  },
  {
    "index": 97,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "Find the model of the car whose weight is below the average weight.",
    "pred": "SELECT distinct model_list.model from model_list join cars_data on model_list.modelid = cars_data.id where cars_data.weight < ( select avg ( weight ) from cars_data )",
    "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"
  },
  {
    "index": 98,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "What is the model for the car with a weight smaller than the average?",
    "pred": "SELECT distinct model_list.model from model_list join cars_data on model_list.modelid = cars_data.id where cars_data.weight < ( select avg ( weight ) from cars_data )",
    "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"
  },
  {
    "index": 99,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "Find the name of the makers that produced some cars in the year of 1970?",
    "pred": "SELECT maker from cars_data where year = 1970",
    "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"
  },
  {
    "index": 100,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "What is the name of the different car makers who produced a car in 1970?",
    "pred": "SELECT distinct car_makers.fullname from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.modelid join car_makers on model_list.maker = car_makers.id where cars_data.year = 1970",
    "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"
  },
  {
    "index": 101,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "Find the make and production time of the cars that were produced in the earliest year?",
    "pred": "SELECT car_names.make , cars_data.year from car_names join cars_data on car_names.id = cars_data.id order by cars_data.year asc limit 1 ;",
    "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"
  },
  {
    "index": 102,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "What is the maker of the carr produced in the earliest year and what year was it?",
    "pred": "SELECT car_makers.maker , cars_data.year from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id order by cars_data.year asc limit 1",
    "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"
  },
  {
    "index": 103,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "hard",
    "question": "Which distinct car models are the produced after 1980?",
    "pred": "SELECT distinct model_list.model from model_list join cars_data on model_list.modelid = cars_data.id where cars_data.year > 1980",
    "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"
  },
  {
    "index": 104,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "hard",
    "question": "What are the different models for the cards produced after 1980?",
    "pred": "SELECT distinct model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where cars_data.year > 1980 ;",
    "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"
  },
  {
    "index": 105,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "hard",
    "question": "How many car makers are there in each continents? List the continent name and the count.",
    "pred": "SELECT continents.continent , count ( * ) from countries join continents on countries.continent = continents.contid group by countries.continent",
    "gold": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"
  },
  {
    "index": 106,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "hard",
    "question": "What is the name of each continent and how many car makers are there in each one?",
    "pred": "SELECT continents.continent , count ( * ) from car_makers join countries on car_makers.country = countries.countryid join continents on countries.continent = continents.contid group by countries.continent",
    "gold": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"
  },
  {
    "index": 107,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "Which of the countries has the most car makers? List the country name.",
    "pred": "SELECT countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname order by count ( * ) desc limit 1",
    "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"
  },
  {
    "index": 108,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "What is the name of the country with the most car makers?",
    "pred": "SELECT countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by car_makers.country order by count ( * ) desc limit 1",
    "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"
  },
  {
    "index": 109,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
    "pred": "SELECT count ( * ) , car_makers.fullname from model_list join car_makers on model_list.maker = car_makers.id group by car_makers.fullname",
    "gold": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;"
  },
  {
    "index": 110,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
    "pred": "SELECT count ( * ) , car_makers.id , car_makers.fullname from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id",
    "gold": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;"
  },
  {
    "index": 111,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
    "pred": "SELECT cars_data.accelerate from car_names join cars_data on car_names.makeid = cars_data.id where car_names.model = 'amc hornet sportabout (sw)';",
    "gold": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"
  },
  {
    "index": 112,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
    "pred": "SELECT accelerate from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where model_list.maker = ( select id from car_makers where maker = 'amc' ) and model_list.model = 'hornet sportabout (sw)'",
    "gold": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"
  },
  {
    "index": 113,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "How many car makers are there in france?",
    "pred": "SELECT count ( * ) from car_makers where country = 'France'",
    "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"
  },
  {
    "index": 114,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "What is the number of makers of care in France?",
    "pred": "SELECT count ( * ) from car_makers where country = 'France'",
    "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"
  },
  {
    "index": 115,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "hard",
    "question": "How many car models are produced in the usa?",
    "pred": "SELECT count ( * ) from car_names join model_list on car_names.model = model_list.model join car_makers on car_makers.id = model_list.maker where car_makers.country = 'usa';",
    "gold": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"
  },
  {
    "index": 116,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "hard",
    "question": "What is the count of the car models produced in the United States?",
    "pred": "SELECT count ( * ) from car_names join car_makers on car_names.makeid = car_makers.id where car_makers.country = 'United States'",
    "gold": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"
  },
  {
    "index": 117,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "easy",
    "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
    "pred": "SELECT avg ( mpg ) from cars_data where cylinders = 4",
    "gold": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"
  },
  {
    "index": 118,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "easy",
    "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
    "pred": "SELECT avg ( mpg ) from cars_data where cylinders = 4",
    "gold": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"
  },
  {
    "index": 119,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
    "pred": "SELECT min ( weight ) from cars_data where year = 1974 and cylinders = 8",
    "gold": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"
  },
  {
    "index": 120,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
    "pred": "SELECT min ( weight ) from cars_data where cylinders = 8 and year = 1974",
    "gold": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"
  },
  {
    "index": 121,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "What are all the makers and models?",
    "pred": "SELECT maker , model from model_list",
    "gold": "SELECT Maker ,  Model FROM MODEL_LIST;"
  },
  {
    "index": 122,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "What are the makers and models?",
    "pred": "SELECT maker , model from model_list",
    "gold": "SELECT Maker ,  Model FROM MODEL_LIST;"
  },
  {
    "index": 123,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "What are the countries having at least one car maker? List name and id.",
    "pred": "SELECT car_makers.fullname , car_makers.id from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname having count ( * ) >= 1;",
    "gold": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;"
  },
  {
    "index": 124,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "What are the names and ids of all countries with at least one car maker?",
    "pred": "SELECT distinct countries.countryname , countries.countryid from countries join car_makers on countries.countryid = car_makers.country",
    "gold": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;"
  },
  {
    "index": 125,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "easy",
    "question": "What is the number of the cars with horsepower more than 150?",
    "pred": "SELECT count ( * ) from cars_data where horsepower > 150",
    "gold": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;"
  },
  {
    "index": 126,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "easy",
    "question": "What is the number of cars with a horsepower greater than 150?",
    "pred": "SELECT count ( * ) from cars_data where horsepower > 150",
    "gold": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;"
  },
  {
    "index": 127,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "What is the average weight of cars each year?",
    "pred": "SELECT avg ( weight ) , year from cars_data group by year",
    "gold": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"
  },
  {
    "index": 128,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "What is the average weight and year for each year?",
    "pred": "SELECT avg ( weight ) , year from cars_data group by year",
    "gold": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"
  },
  {
    "index": 129,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "Which countries in europe have at least 3 car manufacturers?",
    "pred": "SELECT countries.countryname from countries join car_makers on countries.countryid = car_makers.country where countries.continent = 'Europe' group by countries.countryname having count ( * ) >= 3",
    "gold": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"
  },
  {
    "index": 130,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "What are the names of all European countries with at least 3 manufacturers?",
    "pred": "SELECT countries.countryname from countries join car_makers on countries.countryid = car_makers.country where countries.continent = 'Europe' group by countries.countryname having count ( distinct car_makers.maker ) >= 3;",
    "gold": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"
  },
  {
    "index": 131,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
    "pred": "SELECT max ( cars_data.horsepower ) , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.cylinders = 3 group by car_names.make",
    "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"
  },
  {
    "index": 132,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
    "pred": "SELECT max ( cars_data.horsepower ) , car_makers.maker from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id where cars_data.cylinders = 3;",
    "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"
  },
  {
    "index": 133,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "hard",
    "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
    "pred": "SELECT model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id order by cars_data.mpg desc limit 1",
    "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;"
  },
  {
    "index": 134,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "hard",
    "question": "What is the car model with the highest mpg ?",
    "pred": "SELECT model_list.model from model_list join cars_data on model_list.modelid = cars_data.id order by cars_data.mpg desc limit 1",
    "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;"
  },
  {
    "index": 135,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "easy",
    "question": "What is the average horsepower of the cars before 1980?",
    "pred": "SELECT avg ( horsepower ) from cars_data where year < 1980",
    "gold": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;"
  },
  {
    "index": 136,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "easy",
    "question": "What is the average horsepower for all cars produced before 1980 ?",
    "pred": "SELECT avg ( horsepower ) from cars_data where year < 1980",
    "gold": "select avg(horsepower) from cars_data where year  <  1980;"
  },
  {
    "index": 137,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "What is the average edispl of the cars of model volvo?",
    "pred": "SELECT avg ( cars_data.edispl ) from cars_data join car_names on cars_data.id = car_names.makeid where car_names.model = 'volvo';",
    "gold": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"
  },
  {
    "index": 138,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "What is the average edispl for all volvos?",
    "pred": "SELECT avg ( cars_data.edispl ) from car_names join cars_data on car_names.makeid = cars_data.id where car_names.make = 'volvo';",
    "gold": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"
  },
  {
    "index": 139,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "What is the maximum accelerate for different number of cylinders?",
    "pred": "SELECT max ( accelerate ) , cylinders from cars_data group by cylinders",
    "gold": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"
  },
  {
    "index": 140,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "What is the maximum accelerate for all the different cylinders?",
    "pred": "SELECT max ( accelerate ) , cylinders from cars_data group by cylinders",
    "gold": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"
  },
  {
    "index": 141,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "hard",
    "question": "Which model has the most version(make) of cars?",
    "pred": "SELECT model from car_names group by model order by count ( * ) desc limit 1",
    "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"
  },
  {
    "index": 142,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "hard",
    "question": "What model has the most different versions?",
    "pred": "SELECT model from model_list group by model order by count ( * ) desc limit 1",
    "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"
  },
  {
    "index": 143,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "easy",
    "question": "How many cars have more than 4 cylinders?",
    "pred": "SELECT count ( * ) from cars_data where cylinders > 4",
    "gold": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"
  },
  {
    "index": 144,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "easy",
    "question": "What is the number of cars with more than 4 cylinders?",
    "pred": "SELECT count ( * ) from cars_data where cylinders > 4",
    "gold": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"
  },
  {
    "index": 145,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "easy",
    "question": "how many cars were produced in 1980?",
    "pred": "SELECT count ( * ) from cars_data where year = 1980",
    "gold": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"
  },
  {
    "index": 146,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "easy",
    "question": "In 1980, how many cars were made?",
    "pred": "SELECT count ( * ) from cars_data where year = 80",
    "gold": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"
  },
  {
    "index": 147,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "How many car models were produced by the maker with full name American Motor Company?",
    "pred": "SELECT count ( * ) from model_list join car_makers on model_list.maker = car_makers.id where car_makers.fullname = 'American Motor Company';",
    "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"
  },
  {
    "index": 148,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "What is the number of car models created by the car maker American Motor Company?",
    "pred": "SELECT count ( * ) from model_list where maker = 'American Motors Corporation';",
    "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"
  },
  {
    "index": 149,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "Which makers designed more than 3 car models? List full name and the id.",
    "pred": "SELECT car_makers.fullname , model_list.maker from model_list join car_makers on model_list.maker = car_makers.id group by model_list.maker having count ( * ) > 3",
    "gold": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"
  },
  {
    "index": 150,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "What are the names and ids of all makers with more than 3 models?",
    "pred": "SELECT maker , id from model_list group by maker having count ( * ) > 3",
    "gold": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"
  },
  {
    "index": 151,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
    "pred": "SELECT distinct model_list.model from model_list join car_names on model_list.model = car_names.model where car_names.make in ( select car_makers.maker from car_makers where car_makers.fullname = 'General Motors' ) or car_names.makeid in ( select id from cars_data where weight > 3500 );",
    "gold": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"
  },
  {
    "index": 152,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
    "pred": "SELECT distinct model_list.model from model_list join car_makers on model_list.maker = car_makers.id where car_makers.fullname = 'General Motors' or cars_data.weight > 3500;",
    "gold": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"
  },
  {
    "index": 153,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "easy",
    "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
    "pred": "SELECT year from cars_data where weight >= 3000 and weight <= 4000",
    "gold": "select distinct year from cars_data where weight between 3000 and 4000;"
  },
  {
    "index": 154,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "easy",
    "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
    "pred": "SELECT distinct year from cars_data where weight < 4000 intersect select distinct year from cars_data where weight > 3000",
    "gold": "select distinct year from cars_data where weight between 3000 and 4000;"
  },
  {
    "index": 155,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "What is the horsepower of the car with the largest accelerate?",
    "pred": "SELECT horsepower from cars_data order by accelerate desc limit 1",
    "gold": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"
  },
  {
    "index": 156,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "What is the horsepower of the car with the greatest accelerate?",
    "pred": "SELECT horsepower from cars_data order by accelerate desc limit 1",
    "gold": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"
  },
  {
    "index": 157,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
    "pred": "SELECT cars_data.cylinders from cars_data join car_names on cars_data.id = car_names.makeid where car_names.make = 'volvo' order by cars_data.accelerate asc limit 1",
    "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"
  },
  {
    "index": 158,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
    "pred": "SELECT cars_data.cylinders from cars_data join car_names on cars_data.id = car_names.makeid where car_names.make = 'volvo' order by cars_data.accelerate asc limit 1",
    "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"
  },
  {
    "index": 159,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "hard",
    "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
    "pred": "SELECT count ( * ) from cars_data where accelerate > ( select max ( horsepower ) from cars_data );",
    "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"
  },
  {
    "index": 160,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "hard",
    "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
    "pred": "SELECT count ( * ) from cars_data where accelerate > ( select max ( horsepower ) from cars_data );",
    "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"
  },
  {
    "index": 161,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "How many countries has more than 2 car makers ?",
    "pred": "SELECT countries.countryname from countries join car_makers on countries.countryid = car_makers.country group by countries.countryname having count ( distinct car_makers.maker ) > 2",
    "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2"
  },
  {
    "index": 162,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "What is the number of countries with more than 2 car makers ?",
    "pred": "SELECT countries.countryname from countries join car_makers on countries.countryid = car_makers.country group by countries.countryname having count ( distinct car_makers.maker ) > 2;",
    "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2"
  },
  {
    "index": 163,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "easy",
    "question": "How many cars has over 6 cylinders?",
    "pred": "SELECT count ( * ) from cars_data where cylinders > 6",
    "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"
  },
  {
    "index": 164,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "easy",
    "question": "What is the number of carsw ith over 6 cylinders?",
    "pred": "SELECT count ( * ) from cars_data where cylinders > 6",
    "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"
  },
  {
    "index": 165,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
    "pred": "SELECT max ( cars_data.horsepower ) , model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.modelid where cars_data.cylinders = 4;",
    "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"
  },
  {
    "index": 166,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
    "pred": "SELECT model_list.model from model_list join cars_data on model_list.modelid = cars_data.id where cars_data.cylinders = 4 order by cars_data.horsepower desc limit 1",
    "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"
  },
  {
    "index": 167,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
    "pred": "SELECT makeid , make from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.horsepower > ( select min ( horsepower ) from cars_data ) except select makeid , make from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.cylinders > 3",
    "gold": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;"
  },
  {
    "index": 168,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
    "pred": "SELECT car_names.makeid , car_names.make from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.cylinders < ( select min ( horsepower ) from cars_data )",
    "gold": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;"
  },
  {
    "index": 169,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
    "pred": "SELECT max ( mpg ) from cars_data where cylinders = 8 or year < 1980",
    "gold": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980"
  },
  {
    "index": 170,
    "correct": true,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "medium",
    "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
    "pred": "SELECT max ( mpg ) from cars_data where cylinders = 8 or year < 1980",
    "gold": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980"
  },
  {
    "index": 171,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
    "pred": "SELECT model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where cars_data.weight < 3500 except select model from model_list join car_makers on model_list.maker = car_makers.id where car_makers.fullname = 'Ford Motor Company';",
    "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"
  },
  {
    "index": 172,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
    "pred": "SELECT distinct model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where cars_data.weight < 3500 except select distinct model from model_list join car_names on model_list.model = car_names.model where model_list.maker = 'Ford'",
    "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"
  },
  {
    "index": 173,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "hard",
    "question": "What are the name of the countries where there is not a single car maker?",
    "pred": "SELECT countryname from countries where countryname not in ( select fullname from car_makers )",
    "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"
  },
  {
    "index": 174,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "hard",
    "question": "What are the names of the countries with no car makers?",
    "pred": "SELECT countryname from countries where countryname not in ( select fullname from car_makers )",
    "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"
  },
  {
    "index": 175,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
    "pred": "SELECT car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 2 intersect select car_makers.id , car_makers.maker from car_makers group by car_makers.id having count ( * ) > 3",
    "gold": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;"
  },
  {
    "index": 176,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
    "pred": "SELECT car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model group by car_names.make having count ( * ) > 3 intersect select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model group by car_names.make having count ( * ) > 1",
    "gold": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;"
  },
  {
    "index": 177,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
    "pred": "SELECT countries.countryid , countries.countryname from countries join car_makers on countries.countryid = car_makers.country where countries.countryid in ( select countries.countryid from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( * ) > 3 ) or car_makers.maker = 'fiat'",
    "gold": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';"
  },
  {
    "index": 178,
    "correct": false,
    "db_id": "car_1",
    "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
    "difficulty": "extra",
    "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
    "pred": "SELECT countries.countryid , countries.countryname from countries join car_makers on countries.countryid = car_makers.country where car_makers.id in ( select id from car_makers group by id having count ( * ) > 3 ) or car_makers.maker = 'fiat'",
    "gold": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';"
  },
  {
    "index": 179,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "Which country does Airline \"JetBlue Airways\" belong to?",
    "pred": "SELECT country from airlines where airline = 'JetBlue Airways'",
    "gold": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
  },
  {
    "index": 180,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "What country is Jetblue Airways affiliated with?",
    "pred": "SELECT country from airlines where airline = 'JetBlue Airways';",
    "gold": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
  },
  {
    "index": 181,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
    "pred": "SELECT abbreviation from airlines where airline = 'JetBlue Airways'",
    "gold": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
  },
  {
    "index": 182,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "Which abbreviation corresponds to Jetblue Airways?",
    "pred": "SELECT abbreviation from airlines where airline = 'JetBlue Airways'",
    "gold": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
  },
  {
    "index": 183,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "List all airline names and their abbreviations in \"USA\".",
    "pred": "SELECT airline , abbreviation from airlines where country = 'USA'",
    "gold": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""
  },
  {
    "index": 184,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "What are the airline names and abbreviations for airlines in the USA?",
    "pred": "SELECT airline , abbreviation from airlines where country = 'USA'",
    "gold": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""
  },
  {
    "index": 185,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "List the airport code and name in the city of Anthony.",
    "pred": "SELECT airportcode , airportname from airports where city = 'Anthony'",
    "gold": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""
  },
  {
    "index": 186,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "Give the airport code and airport name corresonding to the city Anthony.",
    "pred": "SELECT airportcode , airportname from airports where city = 'Anthony'",
    "gold": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""
  },
  {
    "index": 187,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "How many airlines do we have?",
    "pred": "SELECT count ( * ) from airlines",
    "gold": "SELECT count(*) FROM AIRLINES"
  },
  {
    "index": 188,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "What is the total number of airlines?",
    "pred": "SELECT count ( * ) from airlines",
    "gold": "SELECT count(*) FROM AIRLINES"
  },
  {
    "index": 189,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "How many airports do we have?",
    "pred": "SELECT count ( * ) from airports",
    "gold": "SELECT count(*) FROM AIRPORTS"
  },
  {
    "index": 190,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "Return the number of  airports.",
    "pred": "SELECT count ( * ) from airports",
    "gold": "SELECT count(*) FROM AIRPORTS"
  },
  {
    "index": 191,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "How many flights do we have?",
    "pred": "SELECT count ( * ) from flights",
    "gold": "SELECT count(*) FROM FLIGHTS"
  },
  {
    "index": 192,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "Return the number of flights.",
    "pred": "SELECT count ( * ) from flights",
    "gold": "SELECT count(*) FROM FLIGHTS"
  },
  {
    "index": 193,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "Which airline has abbreviation 'UAL'?",
    "pred": "SELECT airline from airlines where abbreviation = 'UAL'",
    "gold": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""
  },
  {
    "index": 194,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "Give the airline with abbreviation 'UAL'.",
    "pred": "SELECT airline from airlines where abbreviation = 'UAL'",
    "gold": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""
  },
  {
    "index": 195,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "How many airlines are from USA?",
    "pred": "SELECT count ( * ) from airlines where country = 'United States';",
    "gold": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""
  },
  {
    "index": 196,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "Return the number of airlines in the USA.",
    "pred": "SELECT count ( * ) from airlines where country = 'United States'",
    "gold": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""
  },
  {
    "index": 197,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "Which city and country is the Alton airport at?",
    "pred": "SELECT city , country from airports where airportname = 'Alton';",
    "gold": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""
  },
  {
    "index": 198,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "Give the city and country for the Alton airport.",
    "pred": "SELECT city , country from airports where airportname = 'Alton';",
    "gold": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""
  },
  {
    "index": 199,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "What is the airport name for airport 'AKO'?",
    "pred": "SELECT airportname from airports where airportcode = 'AKO'",
    "gold": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""
  },
  {
    "index": 200,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "Return the name of the airport with code 'AKO'.",
    "pred": "SELECT airportname from airports where airportcode = 'AKO'",
    "gold": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""
  },
  {
    "index": 201,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "What are airport names at City 'Aberdeen'?",
    "pred": "SELECT airportname from airports where city = 'Aberdeen'",
    "gold": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""
  },
  {
    "index": 202,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "What are the names of airports in Aberdeen?",
    "pred": "SELECT airportname from airports where city = 'Aberdeen'",
    "gold": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""
  },
  {
    "index": 203,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "How many flights depart from 'APG'?",
    "pred": "SELECT count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.airportname = 'Phillips Aaf'",
    "gold": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
  },
  {
    "index": 204,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "Count the number of flights departing from 'APG'.",
    "pred": "SELECT count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'APG';",
    "gold": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
  },
  {
    "index": 205,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "How many flights have destination ATO?",
    "pred": "SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Atlanta';",
    "gold": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""
  },
  {
    "index": 206,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "Count the number of flights into ATO.",
    "pred": "SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Athens';",
    "gold": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""
  },
  {
    "index": 207,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "How many flights depart from City Aberdeen?",
    "pred": "SELECT count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen';",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
  },
  {
    "index": 208,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "Return the number of flights departing from Aberdeen.",
    "pred": "SELECT count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen';",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
  },
  {
    "index": 209,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "How many flights arriving in Aberdeen city?",
    "pred": "SELECT count ( * ) from airports join flights on airports.airportcode = flights.destairport where airports.city = 'Aberdeen';",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
  },
  {
    "index": 210,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "Return the number of flights arriving in Aberdeen.",
    "pred": "SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen';",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
  },
  {
    "index": 211,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "hard",
    "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
    "pred": "SELECT count ( * ) from airports join flights on airports.airportcode = flights.sourceairport join airports on airports.airportcode = flights.destairport where airports.city = 'Aberdeen' and airports.city = 'Ashley';",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""
  },
  {
    "index": 212,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "hard",
    "question": "How many flights fly from Aberdeen to Ashley?",
    "pred": "SELECT count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen' join airports on flights.destairport = airports.airportcode where airports.city = 'Ashley';",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""
  },
  {
    "index": 213,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "How many flights does airline 'JetBlue Airways' have?",
    "pred": "SELECT count ( * ) from flights where airline = 'JetBlue Airways';",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""
  },
  {
    "index": 214,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "Give the number of Jetblue Airways flights.",
    "pred": "SELECT count ( * ) from flights where airline = 'JetBlue Airways'",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""
  },
  {
    "index": 215,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
    "pred": "SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode join airlines on flights.airline = airlines.abbreviation where airlines.airline = 'United Airlines' and airports.airportcode = 'ASY';",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""
  },
  {
    "index": 216,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "Count the number of United Airlines flights arriving in ASY Airport.",
    "pred": "SELECT count ( * ) from airports join flights on airports.airportcode = flights.destairport where flights.airline = 'United Airlines' and flights.destairport = 'ASY';",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""
  },
  {
    "index": 217,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
    "pred": "SELECT count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.airportname = 'AHD' and flights.airline = 'United Airlines';",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""
  },
  {
    "index": 218,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "Return the number of United Airlines flights leaving from AHD Airport.",
    "pred": "SELECT count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.airportname = 'Ardmore Municipal Airport' and flights.airline = 'United Airlines'",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""
  },
  {
    "index": 219,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "hard",
    "question": "How many United Airlines flights go to City 'Aberdeen'?",
    "pred": "SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen' and flights.airline = 'United Airlines';",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""
  },
  {
    "index": 220,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "hard",
    "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
    "pred": "SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen' and flights.airline = 'United Airlines';",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""
  },
  {
    "index": 221,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "extra",
    "question": "Which city has most number of arriving flights?",
    "pred": "SELECT airports.city from airports join flights on flights.destairport = airports.airportcode group by airports.city order by count ( * ) desc limit 1",
    "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 222,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "extra",
    "question": "Which city has the most frequent destination airport?",
    "pred": "SELECT airports.city from airports join flights on flights.destairport = airports.airportcode group by airports.city order by count ( * ) desc limit 1",
    "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 223,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "extra",
    "question": "Which city has most number of departing flights?",
    "pred": "SELECT airports.city from airports join flights on flights.sourceairport = airports.airportcode group by airports.city order by count ( * ) desc limit 1",
    "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 224,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "extra",
    "question": "Which city is the most frequent source airport?",
    "pred": "SELECT airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1",
    "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 225,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "extra",
    "question": "What is the code of airport that has the highest number of flights?",
    "pred": "SELECT sourceairport from flights group by sourceairport order by count ( * ) desc limit 1",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 226,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "extra",
    "question": "What is the airport code of the airport with the most flights?",
    "pred": "SELECT destairport from flights group by destairport order by count ( * ) desc limit 1",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 227,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "extra",
    "question": "What is the code of airport that has fewest number of flights?",
    "pred": "SELECT sourceairport from flights group by sourceairport order by count ( * ) asc limit 1",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"
  },
  {
    "index": 228,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "extra",
    "question": "Give the code of the airport with the least flights.",
    "pred": "SELECT sourceairport from flights group by sourceairport order by count ( * ) asc limit 1",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"
  },
  {
    "index": 229,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "extra",
    "question": "Which airline has most number of flights?",
    "pred": "SELECT airline from flights group by airline order by count ( * ) desc limit 1",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 230,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "extra",
    "question": "What airline serves the most flights?",
    "pred": "SELECT airline from flights group by airline order by count ( * ) desc limit 1",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 231,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "extra",
    "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
    "pred": "SELECT airlines.abbreviation , airlines.country from flights join airlines on flights.airline = airlines.abbreviation group by airlines.abbreviation order by count ( * ) asc limit 1 ;",
    "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"
  },
  {
    "index": 232,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "extra",
    "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
    "pred": "SELECT abbreviation , country from airlines join flights on airlines.uid = flights.airline group by airline order by count ( * ) asc limit 1",
    "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"
  },
  {
    "index": 233,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "What are airlines that have some flight departing from airport 'AHD'?",
    "pred": "SELECT distinct airlines.airline from airlines join flights on airlines.uid = flights.airline join airports on airports.airportcode = flights.sourceairport where airports.airportname = 'AHD';",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""
  },
  {
    "index": 234,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "Which airlines have a flight with source airport AHD?",
    "pred": "SELECT airlines.airline from airports join flights on airports.airportcode = flights.sourceairport join airlines on flights.airline = airlines.uid where airports.airportname = 'Ardmore Municipal Airport';",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""
  },
  {
    "index": 235,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "What are airlines that have flights arriving at airport 'AHD'?",
    "pred": "SELECT distinct airlines.airline from airlines join flights on airlines.uid = flights.airline join airports on airports.airportcode = flights.destairport where airports.airportname = 'Doha Intl'",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""
  },
  {
    "index": 236,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "Which airlines have a flight with destination airport AHD?",
    "pred": "SELECT airlines.airline from airlines join flights on airlines.abbreviation = flights.airline join airports on airports.airportcode = flights.destairport where airports.airportname = 'Ardmore Municipal Airport';",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""
  },
  {
    "index": 237,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "extra",
    "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
    "pred": "SELECT airline from flights where sourceairport = 'APG' intersect select airline from flights where sourceairport = 'CVO';",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""
  },
  {
    "index": 238,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "extra",
    "question": "Which airlines have departing flights from both APG and CVO airports?",
    "pred": "SELECT airlines.airline from airports join flights on airports.airportcode = flights.sourceairport join airlines on flights.airline = airlines.abbreviation where airports.airportname = 'Phillips Aaf' intersect select airlines.airline from airports join flights on airports.airportcode = flights.sourceairport join airlines on flights.airline = airlines.abbreviation where airports.airportname = 'Corvallis Muni';",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""
  },
  {
    "index": 239,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "extra",
    "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
    "pred": "SELECT airlines.airline from flights join airports on flights.destairport = airports.airportcode join airlines on flights.airline = airlines.uid where airports.airportname = 'Cordova Municipal Airport' except select airlines.airline from flights join airports on flights.destairport = airports.airportcode join airlines on flights.airline = airlines.uid where airports.airportname = 'Phillips Army Air Field';",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""
  },
  {
    "index": 240,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "extra",
    "question": "Which airlines have departures from CVO but not from APG airports?",
    "pred": "SELECT airlines.airline from airports join flights on airports.airportcode = flights.sourceairport join airlines on flights.airline = airlines.uid where airports.city = 'Cordova' except select airlines.airline from airports join flights on airports.airportcode = flights.sourceairport join airlines on flights.airline = airlines.uid where airports.city = 'Marion';",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""
  },
  {
    "index": 241,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "Find all airlines that have at least 10 flights.",
    "pred": "SELECT airline from flights group by airline having count ( * ) >= 10",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"
  },
  {
    "index": 242,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "Which airlines have at least 10 flights?",
    "pred": "SELECT airline from flights group by airline having count ( * ) >= 10",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"
  },
  {
    "index": 243,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "Find all airlines that have fewer than 200 flights.",
    "pred": "SELECT airline from flights group by airline having count ( * ) < 200",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"
  },
  {
    "index": 244,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "Which airlines have less than 200 flights?",
    "pred": "SELECT airline from flights group by airline having count ( * ) < 200",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"
  },
  {
    "index": 245,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "What are flight numbers of Airline \"United Airlines\"?",
    "pred": "SELECT flightno from flights where airline = 'United Airlines'",
    "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""
  },
  {
    "index": 246,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "Which flight numbers correspond to United Airlines flights?",
    "pred": "SELECT flightno from flights where airline = 'United Airlines'",
    "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""
  },
  {
    "index": 247,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "What are flight numbers of flights departing from Airport \"APG\"?",
    "pred": "SELECT flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.airportname = 'Phillips Army Air Field';",
    "gold": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
  },
  {
    "index": 248,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "Give the flight numbers of flights leaving from APG.",
    "pred": "SELECT flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Malmo';",
    "gold": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
  },
  {
    "index": 249,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
    "pred": "SELECT flights.flightno from airports join flights on airports.airportcode = flights.destairport where airports.airportname = 'Phillips Army Air Field';",
    "gold": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""
  },
  {
    "index": 250,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "easy",
    "question": "Give the flight numbers of flights landing at APG.",
    "pred": "SELECT flightno from flights where destairport = 'APG'",
    "gold": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""
  },
  {
    "index": 251,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
    "pred": "SELECT flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen';",
    "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
  },
  {
    "index": 252,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "Give the flight numbers of flights leaving from Aberdeen.",
    "pred": "SELECT flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen';",
    "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
  },
  {
    "index": 253,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
    "pred": "SELECT flights.flightno from airports join flights on airports.airportcode = flights.destairport where airports.city = 'Aberdeen'",
    "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
  },
  {
    "index": 254,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "medium",
    "question": "Give the flight numbers of flights arriving in Aberdeen.",
    "pred": "SELECT distinct flights.flightno from airports join flights on airports.airportcode = flights.destairport where airports.city = 'Aberdeen';",
    "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
  },
  {
    "index": 255,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "hard",
    "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
    "pred": "SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen' or airports.city = 'Abilene';",
    "gold": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\""
  },
  {
    "index": 256,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "hard",
    "question": "How many flights land in Aberdeen or Abilene?",
    "pred": "SELECT count ( * ) from flights where destairport = 'Aberdeen' or destairport = 'Abilene';",
    "gold": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\""
  },
  {
    "index": 257,
    "correct": true,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "hard",
    "question": "Find the name of airports which do not have any flight in and out.",
    "pred": "SELECT airportname from airports where airportcode not in ( select destairport from flights ) and airportcode not in ( select sourceairport from flights )",
    "gold": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"
  },
  {
    "index": 258,
    "correct": false,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
    "difficulty": "hard",
    "question": "Which airports do not have departing or arriving flights?",
    "pred": "SELECT airportname from airports except select airportname from airports join flights on airports.airportcode = flights.sourceairport join airports on airports.airportcode = flights.destairport",
    "gold": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"
  },
  {
    "index": 259,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "easy",
    "question": "How many employees are there?",
    "pred": "SELECT count ( * ) from employee",
    "gold": "SELECT count(*) FROM employee"
  },
  {
    "index": 260,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "easy",
    "question": "Count the number of employees",
    "pred": "SELECT count ( * ) from employee",
    "gold": "SELECT count(*) FROM employee"
  },
  {
    "index": 261,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "easy",
    "question": "Sort employee names by their age in ascending order.",
    "pred": "SELECT name from employee order by age asc;",
    "gold": "SELECT name FROM employee ORDER BY age"
  },
  {
    "index": 262,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "easy",
    "question": "List the names of employees and sort in ascending order of age.",
    "pred": "SELECT name from employee order by age asc",
    "gold": "SELECT name FROM employee ORDER BY age"
  },
  {
    "index": 263,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "medium",
    "question": "What is the number of employees from each city?",
    "pred": "SELECT city , count ( * ) from employee group by city ;",
    "gold": "SELECT count(*) ,  city FROM employee GROUP BY city"
  },
  {
    "index": 264,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "medium",
    "question": "Count the number of employees for each city.",
    "pred": "SELECT count ( * ) , city from employee group by city ;",
    "gold": "SELECT count(*) ,  city FROM employee GROUP BY city"
  },
  {
    "index": 265,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "medium",
    "question": "Which cities do more than one employee under age 30 come from?",
    "pred": "SELECT city from employee where age < 30 group by city having count ( * ) > 1",
    "gold": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"
  },
  {
    "index": 266,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "medium",
    "question": "Find the cities that have more than one employee under age 30.",
    "pred": "SELECT city from employee where age < 30 group by city having count ( * ) > 1",
    "gold": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"
  },
  {
    "index": 267,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "medium",
    "question": "Find the number of shops in each location.",
    "pred": "SELECT location , count ( * ) from shop group by location ;",
    "gold": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION"
  },
  {
    "index": 268,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "medium",
    "question": "How many shops are there in each location?",
    "pred": "SELECT location , count ( * ) from shop group by location ;",
    "gold": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION"
  },
  {
    "index": 269,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "medium",
    "question": "Find the manager name and district of the shop whose number of products is the largest.",
    "pred": "SELECT manager_name , district from shop order by number_products desc limit 1",
    "gold": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"
  },
  {
    "index": 270,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "medium",
    "question": "What are the manager name and district of the shop that sells the largest number of products?",
    "pred": "SELECT manager_name , district from shop order by number_products desc limit 1",
    "gold": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"
  },
  {
    "index": 271,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "medium",
    "question": "find the minimum and maximum number of products of all stores.",
    "pred": "SELECT max ( number_products ) , min ( number_products ) from shop",
    "gold": "SELECT min(Number_products) ,  max(Number_products) FROM shop"
  },
  {
    "index": 272,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "medium",
    "question": "What are the minimum and maximum number of products across all the shops?",
    "pred": "SELECT max ( number_products ) , min ( number_products ) from shop",
    "gold": "SELECT min(Number_products) ,  max(Number_products) FROM shop"
  },
  {
    "index": 273,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "medium",
    "question": "Return the name, location and district of all shops in descending order of number of products.",
    "pred": "SELECT name , location , district from shop order by number_products desc",
    "gold": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC"
  },
  {
    "index": 274,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "medium",
    "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
    "pred": "SELECT name , location , district from shop order by number_products desc",
    "gold": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC"
  },
  {
    "index": 275,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "hard",
    "question": "Find the names of stores whose number products is more than the average number of products.",
    "pred": "SELECT name from shop where number_products > ( select avg ( number_products ) from shop )",
    "gold": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)"
  },
  {
    "index": 276,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "hard",
    "question": "Which shops' number products is above the average? Give me the shop names.",
    "pred": "SELECT name from shop where number_products > ( select avg ( number_products ) from shop );",
    "gold": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)"
  },
  {
    "index": 277,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "extra",
    "question": "find the name of employee who was awarded the most times in the evaluation.",
    "pred": "SELECT employee.name from evaluation join employee on evaluation.employee_id = employee.employee_id group by evaluation.employee_id order by count ( * ) desc limit 1",
    "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 278,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "extra",
    "question": "Which employee received the most awards in evaluations? Give me the employee name.",
    "pred": "SELECT employee.name from evaluation join employee on evaluation.employee_id = employee.employee_id group by evaluation.employee_id order by count ( * ) desc limit 1",
    "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 279,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "hard",
    "question": "Find the name of the employee who got the highest one time bonus.",
    "pred": "SELECT employee.name from evaluation join employee on evaluation.employee_id = employee.employee_id order by bonus desc limit 1",
    "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"
  },
  {
    "index": 280,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "hard",
    "question": "Which employee received the biggest bonus? Give me the employee name.",
    "pred": "SELECT employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1;",
    "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"
  },
  {
    "index": 281,
    "correct": false,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "hard",
    "question": "Find the names of employees who never won any award in the evaluation.",
    "pred": "SELECT name from employee except select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id",
    "gold": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"
  },
  {
    "index": 282,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "hard",
    "question": "What are the names of the employees who never received any evaluation?",
    "pred": "SELECT name from employee where employee_id not in ( select employee_id from evaluation )",
    "gold": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"
  },
  {
    "index": 283,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "extra",
    "question": "What is the name of the shop that is hiring the largest number of employees?",
    "pred": "SELECT shop.name from shop join hiring on shop.shop_id = hiring.shop_id group by shop.shop_id order by count ( * ) desc limit 1",
    "gold": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 284,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "extra",
    "question": "Which shop has the most employees? Give me the shop name.",
    "pred": "SELECT shop.name from shop join hiring on shop.shop_id = hiring.shop_id group by shop.shop_id order by count ( * ) desc limit 1;",
    "gold": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 285,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "hard",
    "question": "Find the name of the shops that do not hire any employee.",
    "pred": "SELECT name from shop where shop_id not in ( select shop_id from hiring )",
    "gold": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)"
  },
  {
    "index": 286,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "hard",
    "question": "Which shops run with no employees? Find the shop names",
    "pred": "SELECT name from shop where shop_id not in ( select shop_id from hiring )",
    "gold": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)"
  },
  {
    "index": 287,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "medium",
    "question": "Find the number of employees hired in each shop; show the shop name as well.",
    "pred": "SELECT count ( * ) , shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by shop.name",
    "gold": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"
  },
  {
    "index": 288,
    "correct": false,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "medium",
    "question": "For each shop, return the number of employees working there and the name of the shop.",
    "pred": "SELECT count ( * ) , shop.name from shop join hiring on shop.shop_id = hiring.shop_id group by shop.shop_id;",
    "gold": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"
  },
  {
    "index": 289,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "easy",
    "question": "What is total bonus given in all evaluations?",
    "pred": "SELECT sum ( bonus ) from evaluation",
    "gold": "SELECT sum(bonus) FROM evaluation"
  },
  {
    "index": 290,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "easy",
    "question": "Find the total amount of bonus given in all the evaluations.",
    "pred": "SELECT sum ( bonus ) from evaluation",
    "gold": "SELECT sum(bonus) FROM evaluation"
  },
  {
    "index": 291,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "easy",
    "question": "Give me all the information about hiring.",
    "pred": "SELECT * from hiring",
    "gold": "SELECT * FROM hiring"
  },
  {
    "index": 292,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "easy",
    "question": "What is all the information about hiring?",
    "pred": "SELECT * from hiring",
    "gold": "SELECT * FROM hiring"
  },
  {
    "index": 293,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "hard",
    "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
    "pred": "SELECT district from shop where number_products < 3000 intersect select district from shop where number_products > 10000",
    "gold": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000"
  },
  {
    "index": 294,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "hard",
    "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
    "pred": "SELECT district from shop where number_products < 3000 intersect select district from shop where number_products > 10000",
    "gold": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000"
  },
  {
    "index": 295,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "easy",
    "question": "How many different store locations are there?",
    "pred": "SELECT count ( distinct location ) from shop",
    "gold": "SELECT count(DISTINCT LOCATION) FROM shop"
  },
  {
    "index": 296,
    "correct": true,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
    "difficulty": "easy",
    "question": "Count the number of distinct store locations.",
    "pred": "SELECT count ( distinct location ) from shop",
    "gold": "SELECT count(DISTINCT LOCATION) FROM shop"
  },
  {
    "index": 297,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "easy",
    "question": "How many documents do we have?",
    "pred": "SELECT count ( * ) from documents",
    "gold": "SELECT count(*) FROM Documents"
  },
  {
    "index": 298,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "easy",
    "question": "Count the number of documents.",
    "pred": "SELECT count ( * ) from documents",
    "gold": "SELECT count(*) FROM Documents"
  },
  {
    "index": 299,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "List document IDs, document names, and document descriptions for all documents.",
    "pred": "SELECT document_id , document_name , document_description from documents",
    "gold": "SELECT document_id ,  document_name ,  document_description FROM Documents"
  },
  {
    "index": 300,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "What are the ids, names, and descriptions for all documents?",
    "pred": "SELECT document_id , document_name , document_description from documents",
    "gold": "SELECT document_id ,  document_name ,  document_description FROM Documents"
  },
  {
    "index": 301,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "What is the document name and template id for document with description with the letter 'w' in it?",
    "pred": "SELECT document_name , template_id from documents where document_description like '%w%';",
    "gold": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""
  },
  {
    "index": 302,
    "correct": false,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "Return the names and template ids for documents that contain the letter w in their description.",
    "pred": "SELECT document_name , document_id from documents where document_description like '%w%';",
    "gold": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""
  },
  {
    "index": 303,
    "correct": false,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
    "pred": "SELECT documents.document_id , documents.template_id , documents.document_description from documents join paragraphs on documents.document_id = paragraphs.document_id where paragraphs.paragraph_text like '%Robbin CV%';",
    "gold": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""
  },
  {
    "index": 304,
    "correct": false,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
    "pred": "SELECT documents.document_id , documents.template_id , documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id where paragraphs.paragraph_text like '%Robbin%';",
    "gold": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""
  },
  {
    "index": 305,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "easy",
    "question": "How many different templates do all document use?",
    "pred": "SELECT count ( distinct templates.template_id ) from documents join templates on documents.template_id = templates.template_id",
    "gold": "SELECT count(DISTINCT template_id) FROM Documents"
  },
  {
    "index": 306,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "easy",
    "question": "Count the number of different templates used for documents.",
    "pred": "SELECT count ( distinct templates.template_id ) from documents join templates on documents.template_id = templates.template_id",
    "gold": "SELECT count(DISTINCT template_id) FROM Documents"
  },
  {
    "index": 307,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "How many documents are using the template with type code 'PPT'?",
    "pred": "SELECT count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'",
    "gold": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"
  },
  {
    "index": 308,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "Count the number of documents that use the PPT template type.",
    "pred": "SELECT count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT';",
    "gold": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"
  },
  {
    "index": 309,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "Show all template ids and number of documents using each template.",
    "pred": "SELECT template_id , count ( * ) from documents group by template_id",
    "gold": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"
  },
  {
    "index": 310,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "What are all different template ids used for documents, and how many times were each of them used?",
    "pred": "SELECT template_id , count ( * ) from documents group by template_id",
    "gold": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"
  },
  {
    "index": 311,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "extra",
    "question": "What is the id and type code for the template used by the most documents?",
    "pred": "SELECT templates.template_id , templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_id order by count ( * ) desc limit 1",
    "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 312,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "extra",
    "question": "Return the id and type code of the template that is used for the greatest number of documents.",
    "pred": "SELECT templates.template_id , templates.template_type_code from documents join templates on documents.template_id = templates.template_id group by documents.template_id order by count ( * ) desc limit 1",
    "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 313,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "easy",
    "question": "Show ids for all templates that are used by more than one document.",
    "pred": "SELECT template_id from documents group by template_id having count ( * ) > 1",
    "gold": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"
  },
  {
    "index": 314,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "easy",
    "question": "What are the template ids of any templates used in more than a single document?",
    "pred": "SELECT documents.template_id from documents group by template_id having count ( * ) > 1",
    "gold": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"
  },
  {
    "index": 315,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "hard",
    "question": "Show ids for all templates not used by any document.",
    "pred": "SELECT template_id from templates except select template_id from documents",
    "gold": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"
  },
  {
    "index": 316,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "hard",
    "question": "What are the ids for templates that are not used in any documents?",
    "pred": "SELECT template_id from templates except select template_id from documents",
    "gold": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"
  },
  {
    "index": 317,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "easy",
    "question": "How many templates do we have?",
    "pred": "SELECT count ( * ) from templates",
    "gold": "SELECT count(*) FROM Templates"
  },
  {
    "index": 318,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "easy",
    "question": "Count the number of templates.",
    "pred": "SELECT count ( * ) from templates",
    "gold": "SELECT count(*) FROM Templates"
  },
  {
    "index": 319,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "Show template ids, version numbers, and template type codes for all templates.",
    "pred": "SELECT template_id , version_number , template_type_code from templates",
    "gold": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"
  },
  {
    "index": 320,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "What are the ids, version numbers, and type codes for each template?",
    "pred": "SELECT template_id , version_number , template_type_code from templates",
    "gold": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"
  },
  {
    "index": 321,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "easy",
    "question": "Show all distinct template type codes for all templates.",
    "pred": "SELECT distinct template_type_code from templates",
    "gold": "SELECT DISTINCT template_type_code FROM Templates"
  },
  {
    "index": 322,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "easy",
    "question": "What are the different template type codes?",
    "pred": "SELECT distinct template_type_code from templates",
    "gold": "SELECT DISTINCT template_type_code FROM Templates"
  },
  {
    "index": 323,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "What are the ids of templates with template type code PP or PPT?",
    "pred": "SELECT template_id from templates where template_type_code = 'PP' or template_type_code = 'PPT'",
    "gold": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\""
  },
  {
    "index": 324,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "Return the ids of templates that have the code PP or PPT.",
    "pred": "SELECT template_id from templates where template_type_code = 'PP' or template_type_code = 'PPT'",
    "gold": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\""
  },
  {
    "index": 325,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "easy",
    "question": "How many templates have template type code CV?",
    "pred": "SELECT count ( * ) from templates where template_type_code = 'CV';",
    "gold": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""
  },
  {
    "index": 326,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "easy",
    "question": "Count the number of templates of the type CV.",
    "pred": "SELECT count ( * ) from templates where template_type_code = 'CV';",
    "gold": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""
  },
  {
    "index": 327,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "What is the version number and template type code for the template with version number later than 5?",
    "pred": "SELECT version_number , template_type_code from templates where version_number > 5",
    "gold": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"
  },
  {
    "index": 328,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
    "pred": "SELECT version_number , template_type_code from templates where version_number > 5",
    "gold": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"
  },
  {
    "index": 329,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "Show all template type codes and number of templates for each.",
    "pred": "SELECT template_type_code , count ( * ) from templates group by template_type_code;",
    "gold": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code"
  },
  {
    "index": 330,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "What are the different template type codes, and how many templates correspond to each?",
    "pred": "SELECT template_type_code , count ( * ) from templates group by template_type_code",
    "gold": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code"
  },
  {
    "index": 331,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "hard",
    "question": "Which template type code has most number of templates?",
    "pred": "SELECT template_type_code from templates group by template_type_code order by count ( * ) desc limit 1",
    "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 332,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "hard",
    "question": "Return the type code of the template type that the most templates belong to.",
    "pred": "SELECT template_type_code from templates group by template_type_code order by count ( * ) desc limit 1",
    "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 333,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "easy",
    "question": "Show all template type codes with less than three templates.",
    "pred": "SELECT template_type_code from templates group by template_type_code having count ( * ) < 3",
    "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"
  },
  {
    "index": 334,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "easy",
    "question": "What are the codes of template types that have fewer than 3 templates?",
    "pred": "SELECT template_type_code from templates group by template_type_code having count ( * ) < 3",
    "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"
  },
  {
    "index": 335,
    "correct": false,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "What the smallest version number and its template type code?",
    "pred": "SELECT template_type_code , min ( version_number ) from templates group by template_type_code order by min ( version_number ) asc limit 1;",
    "gold": "SELECT min(Version_Number) ,  template_type_code FROM Templates"
  },
  {
    "index": 336,
    "correct": false,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "Return the lowest version number, along with its corresponding template type code.",
    "pred": "SELECT template_type_code , min ( version_number ) from templates group by template_type_code order by min ( version_number ) asc limit 1 ;",
    "gold": "SELECT min(Version_Number) ,  template_type_code FROM Templates"
  },
  {
    "index": 337,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "What is the template type code of the template used by document with the name \"Data base\"?",
    "pred": "SELECT templates.template_type_code from documents join templates on documents.template_id = templates.template_id where documents.document_name = 'Data base'",
    "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""
  },
  {
    "index": 338,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "Return the template type code of the template that is used by a document named Data base.",
    "pred": "SELECT templates.template_type_code from documents join templates on documents.template_id = templates.template_id where documents.document_name = 'Data Base';",
    "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""
  },
  {
    "index": 339,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "Show all document names using templates with template type code BK.",
    "pred": "SELECT documents.document_name from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'BK'",
    "gold": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\""
  },
  {
    "index": 340,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "What are the names of documents that use templates with the code BK?",
    "pred": "SELECT documents.document_name from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'BK'",
    "gold": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\""
  },
  {
    "index": 341,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "Show all template type codes and the number of documents using each type.",
    "pred": "SELECT template_type_code , count ( * ) from documents join templates on documents.template_id = templates.template_id group by templates.template_type_code",
    "gold": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"
  },
  {
    "index": 342,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "What are the different template type codes, and how many documents use each type?",
    "pred": "SELECT template_type_code , count ( * ) from documents join templates on documents.template_id = templates.template_id group by templates.template_type_code",
    "gold": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"
  },
  {
    "index": 343,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "extra",
    "question": "Which template type code is used by most number of documents?",
    "pred": "SELECT templates.template_type_code from documents join templates on documents.template_id = templates.template_id group by templates.template_type_code order by count ( * ) desc limit 1",
    "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 344,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "extra",
    "question": "Return the code of the template type that is most commonly used in documents.",
    "pred": "SELECT templates.template_type_code from documents join templates on documents.template_id = templates.template_id group by templates.template_type_code order by count ( * ) desc limit 1",
    "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 345,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "hard",
    "question": "Show all template type codes that are not used by any document.",
    "pred": "SELECT template_type_code from templates except select template_type_code from templates join documents on templates.template_id = documents.template_id",
    "gold": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"
  },
  {
    "index": 346,
    "correct": false,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "hard",
    "question": "What are the codes of template types that are not used for any document?",
    "pred": "SELECT template_type_code from templates except select template_type_code from documents",
    "gold": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"
  },
  {
    "index": 347,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "Show all template type codes and descriptions.",
    "pred": "SELECT template_type_code , template_type_description from ref_template_types",
    "gold": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"
  },
  {
    "index": 348,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "What are the type codes and descriptions for all template types?",
    "pred": "SELECT template_type_code , template_type_description from ref_template_types",
    "gold": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"
  },
  {
    "index": 349,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "easy",
    "question": "What is the template type descriptions for template type code \"AD\".",
    "pred": "SELECT template_type_description from ref_template_types where template_type_code = 'AD'",
    "gold": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\""
  },
  {
    "index": 350,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "easy",
    "question": "Return the template type description of the template type with the code AD.",
    "pred": "SELECT template_type_description from ref_template_types where template_type_code = 'AD'",
    "gold": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\""
  },
  {
    "index": 351,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "easy",
    "question": "What is the template type code for template type description \"Book\".",
    "pred": "SELECT template_type_code from ref_template_types where template_type_description = 'Book';",
    "gold": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""
  },
  {
    "index": 352,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "easy",
    "question": "Return the type code of the template type with the description \"Book\".",
    "pred": "SELECT template_type_code from ref_template_types where template_type_description = 'Book'",
    "gold": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""
  },
  {
    "index": 353,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "What are the distinct template type descriptions for the templates ever used by any document?",
    "pred": "SELECT distinct ref_template_types.template_type_description from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code join documents on templates.template_id = documents.template_id",
    "gold": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"
  },
  {
    "index": 354,
    "correct": false,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "Return the different descriptions for templates that have been used in a document.",
    "pred": "SELECT distinct templates.template_details from documents join templates on documents.template_id = templates.template_id",
    "gold": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"
  },
  {
    "index": 355,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "What are the template ids with template type description \"Presentation\".",
    "pred": "SELECT templates.template_id from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code where ref_template_types.template_type_description = 'Presentation'",
    "gold": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""
  },
  {
    "index": 356,
    "correct": false,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "Return the ids corresponding to templates with the description 'Presentation'.",
    "pred": "SELECT templates.template_id from templates join documents on templates.template_id = documents.template_id where documents.document_description = 'Presentation'",
    "gold": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""
  },
  {
    "index": 357,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "easy",
    "question": "How many paragraphs in total?",
    "pred": "SELECT count ( * ) from paragraphs",
    "gold": "SELECT count(*) FROM Paragraphs"
  },
  {
    "index": 358,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "easy",
    "question": "Count the number of paragraphs.",
    "pred": "SELECT count ( * ) from paragraphs",
    "gold": "SELECT count(*) FROM Paragraphs"
  },
  {
    "index": 359,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "How many paragraphs for the document with name 'Summer Show'?",
    "pred": "SELECT count ( * ) from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Summer Show';",
    "gold": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"
  },
  {
    "index": 360,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "Count the number of paragraphs in the document named 'Summer Show'.",
    "pred": "SELECT count ( * ) from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Summer Show';",
    "gold": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"
  },
  {
    "index": 361,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "Show paragraph details for paragraph with text 'Korea ' .",
    "pred": "SELECT other_details from paragraphs where paragraph_text = 'Korea';",
    "gold": "select other_details from paragraphs where paragraph_text like 'korea'"
  },
  {
    "index": 362,
    "correct": false,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
    "pred": "SELECT paragraph_text from paragraphs where paragraph_text like '%Korea %';",
    "gold": "select other_details from paragraphs where paragraph_text like 'korea'"
  },
  {
    "index": 363,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
    "pred": "SELECT paragraph_id , paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Welcome to NY';",
    "gold": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"
  },
  {
    "index": 364,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
    "pred": "SELECT paragraphs.paragraph_id , paragraphs.paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Welcome to NY';",
    "gold": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"
  },
  {
    "index": 365,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "Show all paragraph texts for the document \"Customer reviews\".",
    "pred": "SELECT paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Customer reviews'",
    "gold": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""
  },
  {
    "index": 366,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
    "pred": "SELECT paragraphs.paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Customer reviews';",
    "gold": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""
  },
  {
    "index": 367,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
    "pred": "SELECT document_id , count ( * ) from paragraphs group by document_id order by document_id asc",
    "gold": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"
  },
  {
    "index": 368,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
    "pred": "SELECT document_id , count ( * ) from paragraphs group by document_id order by document_id asc",
    "gold": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"
  },
  {
    "index": 369,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "Show all document ids, names and the number of paragraphs in each document.",
    "pred": "SELECT documents.document_id , documents.document_name , count ( * ) from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id",
    "gold": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"
  },
  {
    "index": 370,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "medium",
    "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
    "pred": "SELECT documents.document_id , documents.document_name , count ( * ) from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id;",
    "gold": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"
  },
  {
    "index": 371,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "easy",
    "question": "List all document ids with at least two paragraphs.",
    "pred": "SELECT document_id from paragraphs group by document_id having count ( * ) >= 2",
    "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"
  },
  {
    "index": 372,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "easy",
    "question": "What are the ids of documents that have 2 or more paragraphs?",
    "pred": "SELECT documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id having count ( * ) >= 2",
    "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"
  },
  {
    "index": 373,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "extra",
    "question": "What is the document id and name with greatest number of paragraphs?",
    "pred": "SELECT documents.document_id , documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count ( * ) desc limit 1",
    "gold": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 374,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "extra",
    "question": "Return the id and name of the document with the most paragraphs.",
    "pred": "SELECT documents.document_id , documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count ( * ) desc limit 1",
    "gold": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 375,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "hard",
    "question": "What is the document id with least number of paragraphs?",
    "pred": "SELECT document_id from paragraphs group by document_id order by count ( * ) asc limit 1",
    "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "index": 376,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "hard",
    "question": "Return the id of the document with the fewest paragraphs.",
    "pred": "SELECT document_id from paragraphs group by document_id order by count ( * ) asc limit 1",
    "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "index": 377,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "easy",
    "question": "What is the document id with 1 to 2 paragraphs?",
    "pred": "SELECT document_id from paragraphs group by document_id having count ( * ) between 1 and 2",
    "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2"
  },
  {
    "index": 378,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "easy",
    "question": "Give the ids of documents that have between one and two paragraphs.",
    "pred": "SELECT documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id having count ( * ) between 1 and 2",
    "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2"
  },
  {
    "index": 379,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "hard",
    "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
    "pred": "SELECT document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland'",
    "gold": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'"
  },
  {
    "index": 380,
    "correct": true,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code , template_type_description )\n# templates ( template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details )\n# documents ( document_id , template_id , document_name , document_description , other_details )\n# paragraphs ( paragraph_id , document_id , paragraph_text , other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id\n",
    "difficulty": "hard",
    "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
    "pred": "SELECT documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id where paragraphs.paragraph_text like '%Brazil%' intersect select document_id from paragraphs where paragraph_text like '%Ireland%';",
    "gold": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'"
  },
  {
    "index": 381,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "easy",
    "question": "How many teachers are there?",
    "pred": "SELECT count ( * ) from teacher",
    "gold": "SELECT count(*) FROM teacher"
  },
  {
    "index": 382,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "easy",
    "question": "What is the total count of teachers?",
    "pred": "SELECT count ( * ) from teacher",
    "gold": "SELECT count(*) FROM teacher"
  },
  {
    "index": 383,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "easy",
    "question": "List the names of teachers in ascending order of age.",
    "pred": "SELECT name from teacher order by age asc",
    "gold": "SELECT Name FROM teacher ORDER BY Age ASC"
  },
  {
    "index": 384,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "easy",
    "question": "What are the names of the teachers ordered by ascending age?",
    "pred": "SELECT name from teacher order by age asc",
    "gold": "SELECT Name FROM teacher ORDER BY Age ASC"
  },
  {
    "index": 385,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "medium",
    "question": "What are the age and hometown of teachers?",
    "pred": "SELECT age , hometown from teacher",
    "gold": "SELECT Age ,  Hometown FROM teacher"
  },
  {
    "index": 386,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "medium",
    "question": "What is the age and hometown of every teacher?",
    "pred": "SELECT age , hometown from teacher",
    "gold": "SELECT Age ,  Hometown FROM teacher"
  },
  {
    "index": 387,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "easy",
    "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
    "pred": "SELECT name from teacher where hometown != 'Little Lever Urban District';",
    "gold": "select name from teacher where hometown != \"little lever urban district\""
  },
  {
    "index": 388,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "easy",
    "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
    "pred": "SELECT name from teacher where hometown != 'Little Lever Urban District'",
    "gold": "select name from teacher where hometown != \"little lever urban district\""
  },
  {
    "index": 389,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "medium",
    "question": "Show the name of teachers aged either 32 or 33?",
    "pred": "SELECT name from teacher where age = 32 or age = 33",
    "gold": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33"
  },
  {
    "index": 390,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "medium",
    "question": "What are the names of the teachers who are aged either 32 or 33?",
    "pred": "SELECT name from teacher where age = 32 or age = 33",
    "gold": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33"
  },
  {
    "index": 391,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "medium",
    "question": "What is the hometown of the youngest teacher?",
    "pred": "SELECT hometown from teacher order by age asc limit 1;",
    "gold": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"
  },
  {
    "index": 392,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "medium",
    "question": "Where is the youngest teacher from?",
    "pred": "SELECT hometown from teacher order by age asc limit 1",
    "gold": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"
  },
  {
    "index": 393,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "medium",
    "question": "Show different hometown of teachers and the number of teachers from each hometown.",
    "pred": "SELECT hometown , count ( * ) from teacher group by hometown",
    "gold": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown"
  },
  {
    "index": 394,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "medium",
    "question": "For each hometown, how many teachers are there?",
    "pred": "SELECT hometown , count ( * ) from teacher group by hometown ;",
    "gold": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown"
  },
  {
    "index": 395,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "hard",
    "question": "List the most common hometown of teachers.",
    "pred": "SELECT hometown from teacher group by hometown order by count ( * ) desc limit 1",
    "gold": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "index": 396,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "hard",
    "question": "What is the most commmon hometowns for teachers?",
    "pred": "SELECT hometown from teacher group by hometown order by count ( * ) desc limit 1",
    "gold": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "index": 397,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "easy",
    "question": "Show the hometowns shared by at least two teachers.",
    "pred": "SELECT hometown from teacher group by hometown having count ( * ) >= 2 ;",
    "gold": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"
  },
  {
    "index": 398,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "easy",
    "question": "What are the towns from which at least two teachers come from?",
    "pred": "SELECT hometown from teacher group by hometown having count ( * ) >= 2",
    "gold": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"
  },
  {
    "index": 399,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "medium",
    "question": "Show names of teachers and the courses they are arranged to teach.",
    "pred": "SELECT teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id",
    "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"
  },
  {
    "index": 400,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "medium",
    "question": "What is the name of each teacher and what course they teach?",
    "pred": "SELECT teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id",
    "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"
  },
  {
    "index": 401,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "hard",
    "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
    "pred": "SELECT teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc",
    "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name"
  },
  {
    "index": 402,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "hard",
    "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
    "pred": "SELECT teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc",
    "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name"
  },
  {
    "index": 403,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "hard",
    "question": "Show the name of the teacher for the math course.",
    "pred": "SELECT teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id join course on course_arrange.course_id = course.course_id where course.course = 'math'",
    "gold": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""
  },
  {
    "index": 404,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "hard",
    "question": "What are the names of the people who teach math courses?",
    "pred": "SELECT teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id join course on course_arrange.course_id = course.course_id where course.course = 'math'",
    "gold": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""
  },
  {
    "index": 405,
    "correct": false,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "medium",
    "question": "Show names of teachers and the number of courses they teach.",
    "pred": "SELECT teacher.name , count ( * ) from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id",
    "gold": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name"
  },
  {
    "index": 406,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "medium",
    "question": "What are the names of the teachers and how many courses do they teach?",
    "pred": "SELECT teacher.name , count ( * ) from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by teacher.name",
    "gold": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name"
  },
  {
    "index": 407,
    "correct": false,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "medium",
    "question": "Show names of teachers that teach at least two courses.",
    "pred": "SELECT teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count ( * ) >= 2 ;",
    "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"
  },
  {
    "index": 408,
    "correct": false,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "medium",
    "question": "What are the names of the teachers who teach at least two courses?",
    "pred": "SELECT teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count ( * ) >= 2",
    "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"
  },
  {
    "index": 409,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "hard",
    "question": "List the names of teachers who have not been arranged to teach courses.",
    "pred": "SELECT name from teacher where teacher_id not in ( select teacher_id from course_arrange )",
    "gold": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)"
  },
  {
    "index": 410,
    "correct": true,
    "db_id": "course_teach",
    "db_info": "# course ( course_id , staring_date , course )\n# teacher ( teacher_id , name , age , hometown )\n# course_arrange ( course_id , teacher_id , grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id\n",
    "difficulty": "hard",
    "question": "What are the names of the teachers whose courses have not been arranged?",
    "pred": "SELECT name from teacher where teacher_id not in ( select teacher_id from course_arrange )",
    "gold": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)"
  },
  {
    "index": 411,
    "correct": true,
    "db_id": "museum_visit",
    "db_info": "# museum ( museum_id , name , num_of_staff , open_year )\n# visitor ( id , name , level_of_membership , age )\n# visit ( museum_id , visitor_id , num_of_ticket , total_spent )\n# visit.visitor_id = visitor.id\n# visit.museum_id = museum.museum_id\n",
    "difficulty": "easy",
    "question": "How many visitors below age 30 are there?",
    "pred": "SELECT count ( * ) from visitor where age < 30",
    "gold": "SELECT count(*) FROM visitor WHERE age  <  30"
  },
  {
    "index": 412,
    "correct": true,
    "db_id": "museum_visit",
    "db_info": "# museum ( museum_id , name , num_of_staff , open_year )\n# visitor ( id , name , level_of_membership , age )\n# visit ( museum_id , visitor_id , num_of_ticket , total_spent )\n# visit.visitor_id = visitor.id\n# visit.museum_id = museum.museum_id\n",
    "difficulty": "medium",
    "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
    "pred": "SELECT name from visitor where level_of_membership > 4 order by level_of_membership desc",
    "gold": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC"
  },
  {
    "index": 413,
    "correct": true,
    "db_id": "museum_visit",
    "db_info": "# museum ( museum_id , name , num_of_staff , open_year )\n# visitor ( id , name , level_of_membership , age )\n# visit ( museum_id , visitor_id , num_of_ticket , total_spent )\n# visit.visitor_id = visitor.id\n# visit.museum_id = museum.museum_id\n",
    "difficulty": "easy",
    "question": "What is the average age of the visitors whose membership level is not higher than 4?",
    "pred": "SELECT avg ( age ) from visitor where level_of_membership <= 4",
    "gold": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"
  },
  {
    "index": 414,
    "correct": true,
    "db_id": "museum_visit",
    "db_info": "# museum ( museum_id , name , num_of_staff , open_year )\n# visitor ( id , name , level_of_membership , age )\n# visit ( museum_id , visitor_id , num_of_ticket , total_spent )\n# visit.visitor_id = visitor.id\n# visit.museum_id = museum.museum_id\n",
    "difficulty": "medium",
    "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
    "pred": "SELECT name , level_of_membership from visitor where level_of_membership > 4 order by age desc",
    "gold": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC"
  },
  {
    "index": 415,
    "correct": true,
    "db_id": "museum_visit",
    "db_info": "# museum ( museum_id , name , num_of_staff , open_year )\n# visitor ( id , name , level_of_membership , age )\n# visit ( museum_id , visitor_id , num_of_ticket , total_spent )\n# visit.visitor_id = visitor.id\n# visit.museum_id = museum.museum_id\n",
    "difficulty": "medium",
    "question": "Find the id and name of the museum that has the most staff members?",
    "pred": "SELECT museum_id , name from museum order by num_of_staff desc limit 1",
    "gold": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"
  },
  {
    "index": 416,
    "correct": true,
    "db_id": "museum_visit",
    "db_info": "# museum ( museum_id , name , num_of_staff , open_year )\n# visitor ( id , name , level_of_membership , age )\n# visit ( museum_id , visitor_id , num_of_ticket , total_spent )\n# visit.visitor_id = visitor.id\n# visit.museum_id = museum.museum_id\n",
    "difficulty": "easy",
    "question": "Find the average number of staff working for the museums that were open before 2009.",
    "pred": "SELECT avg ( num_of_staff ) from museum where open_year < 2009",
    "gold": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"
  },
  {
    "index": 417,
    "correct": true,
    "db_id": "museum_visit",
    "db_info": "# museum ( museum_id , name , num_of_staff , open_year )\n# visitor ( id , name , level_of_membership , age )\n# visit ( museum_id , visitor_id , num_of_ticket , total_spent )\n# visit.visitor_id = visitor.id\n# visit.museum_id = museum.museum_id\n",
    "difficulty": "medium",
    "question": "What are the opening year and staff number of the museum named Plaza Museum?",
    "pred": "SELECT open_year , num_of_staff from museum where name = 'Plaza Museum'",
    "gold": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"
  },
  {
    "index": 418,
    "correct": true,
    "db_id": "museum_visit",
    "db_info": "# museum ( museum_id , name , num_of_staff , open_year )\n# visitor ( id , name , level_of_membership , age )\n# visit ( museum_id , visitor_id , num_of_ticket , total_spent )\n# visit.visitor_id = visitor.id\n# visit.museum_id = museum.museum_id\n",
    "difficulty": "hard",
    "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
    "pred": "SELECT name from museum where num_of_staff > ( select min ( num_of_staff ) from museum where open_year > 2010 );",
    "gold": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)"
  },
  {
    "index": 419,
    "correct": true,
    "db_id": "museum_visit",
    "db_info": "# museum ( museum_id , name , num_of_staff , open_year )\n# visitor ( id , name , level_of_membership , age )\n# visit ( museum_id , visitor_id , num_of_ticket , total_spent )\n# visit.visitor_id = visitor.id\n# visit.museum_id = museum.museum_id\n",
    "difficulty": "medium",
    "question": "find the id, name and age for visitors who visited some museums more than once.",
    "pred": "SELECT visitor.id , visitor.name , visitor.age from visitor join visit on visitor.id = visit.visitor_id group by visit.visitor_id having count ( * ) > 1",
    "gold": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1"
  },
  {
    "index": 420,
    "correct": false,
    "db_id": "museum_visit",
    "db_info": "# museum ( museum_id , name , num_of_staff , open_year )\n# visitor ( id , name , level_of_membership , age )\n# visit ( museum_id , visitor_id , num_of_ticket , total_spent )\n# visit.visitor_id = visitor.id\n# visit.museum_id = museum.museum_id\n",
    "difficulty": "extra",
    "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
    "pred": "SELECT visitor.id , visitor.name , visitor.level_of_membership from visitor join visit on visitor.id = visit.visitor_id group by visitor.id order by sum ( total_spent ) desc limit 1",
    "gold": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1"
  },
  {
    "index": 421,
    "correct": true,
    "db_id": "museum_visit",
    "db_info": "# museum ( museum_id , name , num_of_staff , open_year )\n# visitor ( id , name , level_of_membership , age )\n# visit ( museum_id , visitor_id , num_of_ticket , total_spent )\n# visit.visitor_id = visitor.id\n# visit.museum_id = museum.museum_id\n",
    "difficulty": "extra",
    "question": "What are the id and name of the museum visited most times?",
    "pred": "SELECT visit.museum_id , museum.name from visit join museum on visit.museum_id = museum.museum_id group by visit.museum_id order by count ( * ) desc limit 1",
    "gold": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 422,
    "correct": false,
    "db_id": "museum_visit",
    "db_info": "# museum ( museum_id , name , num_of_staff , open_year )\n# visitor ( id , name , level_of_membership , age )\n# visit ( museum_id , visitor_id , num_of_ticket , total_spent )\n# visit.visitor_id = visitor.id\n# visit.museum_id = museum.museum_id\n",
    "difficulty": "hard",
    "question": "What is the name of the museum that had no visitor yet?",
    "pred": "SELECT name from museum except select museum.name from visit join museum on visit.museum_id = museum.museum_id",
    "gold": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)"
  },
  {
    "index": 423,
    "correct": true,
    "db_id": "museum_visit",
    "db_info": "# museum ( museum_id , name , num_of_staff , open_year )\n# visitor ( id , name , level_of_membership , age )\n# visit ( museum_id , visitor_id , num_of_ticket , total_spent )\n# visit.visitor_id = visitor.id\n# visit.museum_id = museum.museum_id\n",
    "difficulty": "hard",
    "question": "Find the name and age of the visitor who bought the most tickets at once.",
    "pred": "SELECT visitor.name , visitor.age from visitor join visit on visitor.id = visit.visitor_id order by visit.num_of_ticket desc limit 1",
    "gold": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"
  },
  {
    "index": 424,
    "correct": true,
    "db_id": "museum_visit",
    "db_info": "# museum ( museum_id , name , num_of_staff , open_year )\n# visitor ( id , name , level_of_membership , age )\n# visit ( museum_id , visitor_id , num_of_ticket , total_spent )\n# visit.visitor_id = visitor.id\n# visit.museum_id = museum.museum_id\n",
    "difficulty": "medium",
    "question": "What are the average and maximum number of tickets bought in all visits?",
    "pred": "SELECT avg ( num_of_ticket ) , max ( num_of_ticket ) from visit",
    "gold": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"
  },
  {
    "index": 425,
    "correct": false,
    "db_id": "museum_visit",
    "db_info": "# museum ( museum_id , name , num_of_staff , open_year )\n# visitor ( id , name , level_of_membership , age )\n# visit ( museum_id , visitor_id , num_of_ticket , total_spent )\n# visit.visitor_id = visitor.id\n# visit.museum_id = museum.museum_id\n",
    "difficulty": "medium",
    "question": "What is the total ticket expense of the visitors whose membership level is 1?",
    "pred": "SELECT sum ( num_of_ticket ) from visit join visitor on visit.visitor_id = visitor.id where visitor.level_of_membership = 1",
    "gold": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"
  },
  {
    "index": 426,
    "correct": true,
    "db_id": "museum_visit",
    "db_info": "# museum ( museum_id , name , num_of_staff , open_year )\n# visitor ( id , name , level_of_membership , age )\n# visit ( museum_id , visitor_id , num_of_ticket , total_spent )\n# visit.visitor_id = visitor.id\n# visit.museum_id = museum.museum_id\n",
    "difficulty": "extra",
    "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
    "pred": "SELECT visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on visit.museum_id = museum.museum_id where museum.open_year < 2009 intersect select visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on visit.museum_id = museum.museum_id where museum.open_year > 2011",
    "gold": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011"
  },
  {
    "index": 427,
    "correct": true,
    "db_id": "museum_visit",
    "db_info": "# museum ( museum_id , name , num_of_staff , open_year )\n# visitor ( id , name , level_of_membership , age )\n# visit ( museum_id , visitor_id , num_of_ticket , total_spent )\n# visit.visitor_id = visitor.id\n# visit.museum_id = museum.museum_id\n",
    "difficulty": "extra",
    "question": "Find the number of visitors who did not visit any museum opened after 2010.",
    "pred": "SELECT count ( * ) from visitor where id not in ( select visit.visitor_id from visit join museum on visit.museum_id = museum.museum_id where museum.open_year > 2010 )",
    "gold": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)"
  },
  {
    "index": 428,
    "correct": true,
    "db_id": "museum_visit",
    "db_info": "# museum ( museum_id , name , num_of_staff , open_year )\n# visitor ( id , name , level_of_membership , age )\n# visit ( museum_id , visitor_id , num_of_ticket , total_spent )\n# visit.visitor_id = visitor.id\n# visit.museum_id = museum.museum_id\n",
    "difficulty": "medium",
    "question": "How many museums were opened after 2013 or before 2008?",
    "pred": "SELECT count ( * ) from museum where open_year > 2013 or open_year < 2008",
    "gold": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008"
  },
  {
    "index": 429,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "easy",
    "question": "Find the total number of players.",
    "pred": "SELECT count ( * ) from players",
    "gold": "SELECT count(*) FROM players"
  },
  {
    "index": 430,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "easy",
    "question": "How many players are there?",
    "pred": "SELECT count ( * ) from players",
    "gold": "SELECT count(*) FROM players"
  },
  {
    "index": 431,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "easy",
    "question": "Find the total number of matches.",
    "pred": "SELECT count ( * ) from matches",
    "gold": "SELECT count(*) FROM matches"
  },
  {
    "index": 432,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "easy",
    "question": "Count the number of matches.",
    "pred": "SELECT count ( * ) from matches",
    "gold": "SELECT count(*) FROM matches"
  },
  {
    "index": 433,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "List the first name and birth date of all players from the country with code USA.",
    "pred": "SELECT first_name , birth_date from players where country_code = 'USA'",
    "gold": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"
  },
  {
    "index": 434,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "What are the first names and birth dates of players from the USA?",
    "pred": "SELECT first_name , birth_date from players where country_code = 'USA'",
    "gold": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"
  },
  {
    "index": 435,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "Find the average age of losers and winners of all matches.",
    "pred": "SELECT avg ( winner_age ) , avg ( loser_age ) from matches",
    "gold": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"
  },
  {
    "index": 436,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "What are the average ages of losers and winners across matches?",
    "pred": "SELECT avg ( winner_age ) , avg ( loser_age ) from matches",
    "gold": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"
  },
  {
    "index": 437,
    "correct": false,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "easy",
    "question": "Find the average rank of winners in all matches.",
    "pred": "SELECT avg ( winner_rank ) from matches where winner_rank != 0",
    "gold": "SELECT avg(winner_rank) FROM matches"
  },
  {
    "index": 438,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "easy",
    "question": "What is the average rank for winners in all matches?",
    "pred": "SELECT avg ( winner_rank ) from matches where winner_rank != 'N/A';",
    "gold": "SELECT avg(winner_rank) FROM matches"
  },
  {
    "index": 439,
    "correct": false,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "easy",
    "question": "Find the highest rank of losers in all matches.",
    "pred": "SELECT max ( loser_rank ) from matches",
    "gold": "SELECT min(loser_rank) FROM matches"
  },
  {
    "index": 440,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "easy",
    "question": "What is the best rank of losers across all matches?",
    "pred": "SELECT loser_rank from matches order by loser_rank asc limit 1",
    "gold": "SELECT min(loser_rank) FROM matches"
  },
  {
    "index": 441,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "easy",
    "question": "find the number of distinct country codes of all players.",
    "pred": "SELECT count ( distinct country_code ) from players",
    "gold": "SELECT count(DISTINCT country_code) FROM players"
  },
  {
    "index": 442,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "easy",
    "question": "How many distinct countries do players come from?",
    "pred": "SELECT count ( distinct country_code ) from players",
    "gold": "SELECT count(DISTINCT country_code) FROM players"
  },
  {
    "index": 443,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "easy",
    "question": "Find the number of distinct name of losers.",
    "pred": "SELECT count ( distinct loser_name ) from matches",
    "gold": "SELECT count(DISTINCT loser_name) FROM matches"
  },
  {
    "index": 444,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "easy",
    "question": "How many different loser names are there?",
    "pred": "SELECT count ( distinct loser_name ) from matches",
    "gold": "SELECT count(DISTINCT loser_name) FROM matches"
  },
  {
    "index": 445,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "easy",
    "question": "Find the name of tourney that has more than 10 matches.",
    "pred": "SELECT tourney_name from matches group by tourney_name having count ( * ) > 10",
    "gold": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"
  },
  {
    "index": 446,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "easy",
    "question": "What are the names of tournaments that have more than 10 matches?",
    "pred": "SELECT tourney_name from matches group by tourney_name having count ( * ) > 10",
    "gold": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"
  },
  {
    "index": 447,
    "correct": false,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "hard",
    "question": "List the names of all winners who played in both 2013 and 2016.",
    "pred": "SELECT players.first_name , players.last_name from players join matches on players.player_id = matches.winner_id where matches.year = 2013 intersect select players.first_name , players.last_name from players join matches on players.player_id = matches.winner_id where matches.year = 2016",
    "gold": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016"
  },
  {
    "index": 448,
    "correct": false,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "hard",
    "question": "What are the names of players who won in both 2013 and 2016?",
    "pred": "SELECT players.first_name , players.last_name from players join matches on players.player_id = matches.winner_id where matches.year = 2013 intersect select players.first_name , players.last_name from players join matches on players.player_id = matches.winner_id where matches.year = 2016;",
    "gold": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016"
  },
  {
    "index": 449,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "List the number of all matches who played in years of 2013 or 2016.",
    "pred": "SELECT count ( * ) from matches where year = 2013 or year = 2016",
    "gold": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"
  },
  {
    "index": 450,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "How many matches were played in 2013 or 2016?",
    "pred": "SELECT count ( * ) from matches where year = 2013 or year = 2016",
    "gold": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"
  },
  {
    "index": 451,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "extra",
    "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
    "pred": "SELECT players.country_code , players.first_name from players join matches on matches.winner_id = players.player_id where matches.tourney_name = 'WTA Championships' intersect select players.country_code , players.first_name from players join matches on matches.winner_id = players.player_id where matches.tourney_name = 'Australian Open';",
    "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"
  },
  {
    "index": 452,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "extra",
    "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
    "pred": "SELECT players.first_name , players.country_code from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' intersect select players.first_name , players.country_code from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'Australian Open';",
    "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"
  },
  {
    "index": 453,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "Find the first name and country code of the oldest player.",
    "pred": "SELECT first_name , country_code from players order by birth_date asc limit 1",
    "gold": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"
  },
  {
    "index": 454,
    "correct": false,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "What is the first name and country code of the oldest player?",
    "pred": "SELECT players.first_name , players.country_code from players join rankings on players.player_id = rankings.player_id order by rankings.ranking_date asc limit 1",
    "gold": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"
  },
  {
    "index": 455,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "List the first and last name of all players in the order of birth date.",
    "pred": "SELECT first_name , last_name from players order by birth_date asc",
    "gold": "SELECT first_name ,  last_name FROM players ORDER BY birth_date"
  },
  {
    "index": 456,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "What are the full names of all players, sorted by birth date?",
    "pred": "SELECT first_name , last_name from players order by birth_date asc",
    "gold": "SELECT first_name ,  last_name FROM players ORDER BY birth_date"
  },
  {
    "index": 457,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
    "pred": "SELECT first_name , last_name from players where hand = 'L' order by birth_date asc",
    "gold": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"
  },
  {
    "index": 458,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "What are the full names of all left handed players, in order of birth date?",
    "pred": "SELECT first_name , last_name from players where hand = 'L' order by birth_date asc",
    "gold": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"
  },
  {
    "index": 459,
    "correct": false,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "hard",
    "question": "Find the first name and country code of the player who did the most number of tours.",
    "pred": "SELECT players.first_name , players.country_code from players join rankings on players.player_id = rankings.player_id where rankings.tours = ( select tours from rankings group by tours order by count ( * ) desc limit 1 ) limit 1;",
    "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"
  },
  {
    "index": 460,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "hard",
    "question": "What is the first name and country code of the player with the most tours?",
    "pred": "SELECT players.first_name , players.country_code from players join rankings on players.player_id = rankings.player_id where rankings.tours = ( select max ( tours ) from rankings );",
    "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"
  },
  {
    "index": 461,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "hard",
    "question": "Find the year that has the most number of matches.",
    "pred": "SELECT year from matches group by year order by count ( * ) desc limit 1",
    "gold": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 462,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "hard",
    "question": "Which year had the most matches?",
    "pred": "SELECT year from matches group by year order by count ( * ) desc limit 1;",
    "gold": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 463,
    "correct": false,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "hard",
    "question": "Find the name and rank points of the winner who won the most times.",
    "pred": "SELECT winner_name , winner_rank_points from matches group by winner_id order by count ( * ) desc limit 1 ;",
    "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 464,
    "correct": false,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "hard",
    "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
    "pred": "SELECT players.first_name , players.last_name , matches.winner_name , rankings.ranking_points from players join rankings on players.player_id = rankings.player_id join matches on players.player_id = matches.winner_id group by players.player_id order by count ( * ) desc limit 1",
    "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 465,
    "correct": false,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "hard",
    "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
    "pred": "SELECT players.first_name , players.last_name from players join matches on matches.winner_id = players.player_id where matches.tourney_name = 'Australian Open' order by matches.winner_rank_points desc limit 1",
    "gold": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"
  },
  {
    "index": 466,
    "correct": false,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "hard",
    "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
    "pred": "SELECT winner_name from matches where tourney_name = 'Australian Open' join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id order by rankings.ranking_points desc limit 1",
    "gold": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"
  },
  {
    "index": 467,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
    "pred": "SELECT winner_name , loser_name from matches order by minutes desc limit 1",
    "gold": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"
  },
  {
    "index": 468,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "What are the names of the winner and loser who played in the longest match?",
    "pred": "SELECT winner_name , loser_name from matches order by minutes desc limit 1",
    "gold": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"
  },
  {
    "index": 469,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "Find the average ranking for each player and their first name.",
    "pred": "SELECT avg ( rankings.ranking ) , players.first_name from rankings join players on rankings.player_id = players.player_id group by players.first_name",
    "gold": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
  },
  {
    "index": 470,
    "correct": false,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "What are the first names of all players, and their average rankings?",
    "pred": "SELECT players.first_name , avg ( rankings.ranking ) from players join rankings on players.player_id = rankings.player_id group by players.player_id",
    "gold": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
  },
  {
    "index": 471,
    "correct": false,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "Find the total ranking points for each player and their first name.",
    "pred": "SELECT sum ( ranking_points ) , players.first_name from players join rankings on players.player_id = rankings.player_id group by players.player_id;",
    "gold": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
  },
  {
    "index": 472,
    "correct": false,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "What are the first names of all players, and their total ranking points?",
    "pred": "SELECT players.first_name , sum ( rankings.ranking_points ) from players join rankings on players.player_id = rankings.player_id group by players.player_id",
    "gold": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
  },
  {
    "index": 473,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "find the number of players for each country.",
    "pred": "SELECT count ( * ) , country_code from players group by country_code order by count ( * ) desc;",
    "gold": "SELECT count(*) ,  country_code FROM players GROUP BY country_code"
  },
  {
    "index": 474,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "How many players are from each country?",
    "pred": "SELECT country_code , count ( * ) from players group by country_code ;",
    "gold": "SELECT count(*) ,  country_code FROM players GROUP BY country_code"
  },
  {
    "index": 475,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "hard",
    "question": "find the code of the country where has the greatest number of players.",
    "pred": "SELECT country_code from players group by country_code order by count ( * ) desc limit 1",
    "gold": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 476,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "hard",
    "question": "What is the code of the country with the most players?",
    "pred": "SELECT country_code from players group by country_code order by count ( * ) desc limit 1",
    "gold": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 477,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "easy",
    "question": "Find the codes of countries that have more than 50 players.",
    "pred": "SELECT country_code from players group by country_code having count ( * ) > 50",
    "gold": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"
  },
  {
    "index": 478,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "easy",
    "question": "What are the codes of countries with more than 50 players?",
    "pred": "SELECT country_code from players group by country_code having count ( * ) > 50",
    "gold": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"
  },
  {
    "index": 479,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "Find the total number of tours for each ranking date.",
    "pred": "SELECT ranking_date , sum ( tours ) from rankings group by ranking_date",
    "gold": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"
  },
  {
    "index": 480,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "How many total tours were there for each ranking date?",
    "pred": "SELECT ranking_date , sum ( tours ) from rankings group by ranking_date",
    "gold": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"
  },
  {
    "index": 481,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "Find the number of matches happened in each year.",
    "pred": "SELECT year , count ( * ) from matches group by year",
    "gold": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR"
  },
  {
    "index": 482,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "How many matches were played in each year?",
    "pred": "SELECT year , count ( * ) from matches group by year",
    "gold": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR"
  },
  {
    "index": 483,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "Find the name and rank of the 3 youngest winners across all matches.",
    "pred": "SELECT winner_name , winner_rank from matches order by winner_age asc limit 3",
    "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"
  },
  {
    "index": 484,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "What are the names and ranks of the three youngest winners across all matches?",
    "pred": "SELECT winner_name , winner_rank from matches order by winner_age asc limit 3;",
    "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"
  },
  {
    "index": 485,
    "correct": false,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "How many different winners both participated in the WTA Championships and were left handed?",
    "pred": "SELECT count ( * ) from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' and players.hand = 'L';",
    "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"
  },
  {
    "index": 486,
    "correct": false,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "Find the number of left handed winners who participated in the WTA Championships.",
    "pred": "SELECT count ( * ) from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' and players.hand = 'L';",
    "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"
  },
  {
    "index": 487,
    "correct": false,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "hard",
    "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
    "pred": "SELECT players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id join rankings on players.player_id = rankings.player_id order by rankings.ranking_points desc limit 1",
    "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"
  },
  {
    "index": 488,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "hard",
    "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
    "pred": "SELECT players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id order by matches.winner_rank_points desc limit 1",
    "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"
  },
  {
    "index": 489,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "Find the number of players for each hand type.",
    "pred": "SELECT hand , count ( * ) from players group by hand",
    "gold": "SELECT count(*) ,  hand FROM players GROUP BY hand"
  },
  {
    "index": 490,
    "correct": true,
    "db_id": "wta_1",
    "db_info": "# players ( player_id , first_name , last_name , hand , birth_date , country_code )\n# matches ( best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year )\n# rankings ( ranking_date , ranking , player_id , ranking_points , tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n",
    "difficulty": "medium",
    "question": "How many players are there for each hand type?",
    "pred": "SELECT hand , count ( * ) from players group by hand;",
    "gold": "SELECT count(*) ,  hand FROM players GROUP BY hand"
  },
  {
    "index": 491,
    "correct": true,
    "db_id": "battle_death",
    "db_info": "# battle ( id , name , date , bulgarian_commander , latin_commander , result )\n# ship ( lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship )\n# death ( caused_by_ship_id , id , note , killed , injured )\n# ship.lost_in_battle = battle.id\n# death.caused_by_ship_id = ship.id\n",
    "difficulty": "easy",
    "question": "How many ships ended up being 'Captured'?",
    "pred": "SELECT count ( * ) from ship where disposition_of_ship = 'Captured';",
    "gold": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"
  },
  {
    "index": 492,
    "correct": true,
    "db_id": "battle_death",
    "db_info": "# battle ( id , name , date , bulgarian_commander , latin_commander , result )\n# ship ( lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship )\n# death ( caused_by_ship_id , id , note , killed , injured )\n# ship.lost_in_battle = battle.id\n# death.caused_by_ship_id = ship.id\n",
    "difficulty": "medium",
    "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
    "pred": "SELECT name , tonnage from ship order by name desc",
    "gold": "SELECT name ,  tonnage FROM ship ORDER BY name DESC"
  },
  {
    "index": 493,
    "correct": false,
    "db_id": "battle_death",
    "db_info": "# battle ( id , name , date , bulgarian_commander , latin_commander , result )\n# ship ( lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship )\n# death ( caused_by_ship_id , id , note , killed , injured )\n# ship.lost_in_battle = battle.id\n# death.caused_by_ship_id = ship.id\n",
    "difficulty": "medium",
    "question": "List the name, date and result of each battle.",
    "pred": "SELECT name , date , result from battle",
    "gold": "SELECT name ,  date FROM battle"
  },
  {
    "index": 494,
    "correct": true,
    "db_id": "battle_death",
    "db_info": "# battle ( id , name , date , bulgarian_commander , latin_commander , result )\n# ship ( lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship )\n# death ( caused_by_ship_id , id , note , killed , injured )\n# ship.lost_in_battle = battle.id\n# death.caused_by_ship_id = ship.id\n",
    "difficulty": "medium",
    "question": "What is maximum and minimum death toll caused each time?",
    "pred": "SELECT max ( killed ) , min ( killed ) from death",
    "gold": "SELECT max(killed) ,  min(killed) FROM death"
  },
  {
    "index": 495,
    "correct": true,
    "db_id": "battle_death",
    "db_info": "# battle ( id , name , date , bulgarian_commander , latin_commander , result )\n# ship ( lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship )\n# death ( caused_by_ship_id , id , note , killed , injured )\n# ship.lost_in_battle = battle.id\n# death.caused_by_ship_id = ship.id\n",
    "difficulty": "easy",
    "question": "What is the average number of injuries caused each time?",
    "pred": "SELECT avg ( injured ) from death",
    "gold": "SELECT avg(injured) FROM death"
  },
  {
    "index": 496,
    "correct": false,
    "db_id": "battle_death",
    "db_info": "# battle ( id , name , date , bulgarian_commander , latin_commander , result )\n# ship ( lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship )\n# death ( caused_by_ship_id , id , note , killed , injured )\n# ship.lost_in_battle = battle.id\n# death.caused_by_ship_id = ship.id\n",
    "difficulty": "medium",
    "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
    "pred": "SELECT death.note , sum ( death.killed ) , sum ( death.injured ) from ship join death on ship.id = death.caused_by_ship_id where ship.tonnage = 't' group by death.note;",
    "gold": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"
  },
  {
    "index": 497,
    "correct": true,
    "db_id": "battle_death",
    "db_info": "# battle ( id , name , date , bulgarian_commander , latin_commander , result )\n# ship ( lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship )\n# death ( caused_by_ship_id , id , note , killed , injured )\n# ship.lost_in_battle = battle.id\n# death.caused_by_ship_id = ship.id\n",
    "difficulty": "medium",
    "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
    "pred": "SELECT name , result from battle where bulgarian_commander != 'Boril'",
    "gold": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"
  },
  {
    "index": 498,
    "correct": false,
    "db_id": "battle_death",
    "db_info": "# battle ( id , name , date , bulgarian_commander , latin_commander , result )\n# ship ( lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship )\n# death ( caused_by_ship_id , id , note , killed , injured )\n# ship.lost_in_battle = battle.id\n# death.caused_by_ship_id = ship.id\n",
    "difficulty": "medium",
    "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
    "pred": "SELECT battle.id , battle.name from battle join ship on battle.id = ship.lost_in_battle where ship.ship_type = 'Brig' group by battle.id having count ( * ) >= 1",
    "gold": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"
  },
  {
    "index": 499,
    "correct": false,
    "db_id": "battle_death",
    "db_info": "# battle ( id , name , date , bulgarian_commander , latin_commander , result )\n# ship ( lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship )\n# death ( caused_by_ship_id , id , note , killed , injured )\n# ship.lost_in_battle = battle.id\n# death.caused_by_ship_id = ship.id\n",
    "difficulty": "hard",
    "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
    "pred": "SELECT battle.id , battle.name from battle join death on battle.id = death.caused_by_ship_id group by battle.id having sum ( death.killed ) > 10",
    "gold": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10"
  },
  {
    "index": 500,
    "correct": false,
    "db_id": "battle_death",
    "db_info": "# battle ( id , name , date , bulgarian_commander , latin_commander , result )\n# ship ( lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship )\n# death ( caused_by_ship_id , id , note , killed , injured )\n# ship.lost_in_battle = battle.id\n# death.caused_by_ship_id = ship.id\n",
    "difficulty": "extra",
    "question": "What is the ship id and name that caused most total injuries?",
    "pred": "SELECT ship.name , ship.id from ship join death on ship.id = death.caused_by_ship_id group by ship.id order by sum ( death.injured ) desc limit 1",
    "gold": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 501,
    "correct": true,
    "db_id": "battle_death",
    "db_info": "# battle ( id , name , date , bulgarian_commander , latin_commander , result )\n# ship ( lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship )\n# death ( caused_by_ship_id , id , note , killed , injured )\n# ship.lost_in_battle = battle.id\n# death.caused_by_ship_id = ship.id\n",
    "difficulty": "medium",
    "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
    "pred": "SELECT distinct name from battle where bulgarian_commander = 'Kaloyan' and latin_commander = 'Baldwin I';",
    "gold": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"
  },
  {
    "index": 502,
    "correct": true,
    "db_id": "battle_death",
    "db_info": "# battle ( id , name , date , bulgarian_commander , latin_commander , result )\n# ship ( lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship )\n# death ( caused_by_ship_id , id , note , killed , injured )\n# ship.lost_in_battle = battle.id\n# death.caused_by_ship_id = ship.id\n",
    "difficulty": "easy",
    "question": "How many different results are there for the battles?",
    "pred": "SELECT count ( distinct result ) from battle",
    "gold": "SELECT count(DISTINCT RESULT) FROM battle"
  },
  {
    "index": 503,
    "correct": true,
    "db_id": "battle_death",
    "db_info": "# battle ( id , name , date , bulgarian_commander , latin_commander , result )\n# ship ( lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship )\n# death ( caused_by_ship_id , id , note , killed , injured )\n# ship.lost_in_battle = battle.id\n# death.caused_by_ship_id = ship.id\n",
    "difficulty": "extra",
    "question": "How many battles did not lose any ship with tonnage '225'?",
    "pred": "SELECT count ( * ) from battle where id not in ( select lost_in_battle from ship where tonnage = 225 )",
    "gold": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );"
  },
  {
    "index": 504,
    "correct": true,
    "db_id": "battle_death",
    "db_info": "# battle ( id , name , date , bulgarian_commander , latin_commander , result )\n# ship ( lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship )\n# death ( caused_by_ship_id , id , note , killed , injured )\n# ship.lost_in_battle = battle.id\n# death.caused_by_ship_id = ship.id\n",
    "difficulty": "extra",
    "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
    "pred": "SELECT battle.name , battle.date from battle join ship on battle.id = ship.lost_in_battle where ship.name = 'Lettice' intersect select battle.name , battle.date from battle join ship on battle.id = ship.lost_in_battle where ship.name = 'HMS Atalanta';",
    "gold": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'"
  },
  {
    "index": 505,
    "correct": false,
    "db_id": "battle_death",
    "db_info": "# battle ( id , name , date , bulgarian_commander , latin_commander , result )\n# ship ( lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship )\n# death ( caused_by_ship_id , id , note , killed , injured )\n# ship.lost_in_battle = battle.id\n# death.caused_by_ship_id = ship.id\n",
    "difficulty": "extra",
    "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
    "pred": "SELECT name , result , bulgarian_commander from battle where id not in ( select lost_in_battle from ship where location = 'English Channel' )",
    "gold": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'"
  },
  {
    "index": 506,
    "correct": true,
    "db_id": "battle_death",
    "db_info": "# battle ( id , name , date , bulgarian_commander , latin_commander , result )\n# ship ( lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship )\n# death ( caused_by_ship_id , id , note , killed , injured )\n# ship.lost_in_battle = battle.id\n# death.caused_by_ship_id = ship.id\n",
    "difficulty": "medium",
    "question": "What are the notes of the death events which has substring 'East'?",
    "pred": "SELECT note from death where note like '%East%';",
    "gold": "SELECT note FROM death WHERE note LIKE '%East%'"
  },
  {
    "index": 507,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "medium",
    "question": "what are all the addresses including line 1 and line 2?",
    "pred": "SELECT line_1 , line_2 from addresses",
    "gold": "SELECT line_1 ,  line_2 FROM addresses"
  },
  {
    "index": 508,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "medium",
    "question": "What is the first and second line for all addresses?",
    "pred": "SELECT line_1 , line_2 from addresses",
    "gold": "SELECT line_1 ,  line_2 FROM addresses"
  },
  {
    "index": 509,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "How many courses in total are listed?",
    "pred": "SELECT count ( * ) from courses",
    "gold": "SELECT count(*) FROM Courses"
  },
  {
    "index": 510,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "How many courses are there?",
    "pred": "SELECT count ( * ) from courses",
    "gold": "SELECT count(*) FROM Courses"
  },
  {
    "index": 511,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "How is the math course described?",
    "pred": "SELECT course_description from courses where course_name = 'Math';",
    "gold": "SELECT course_description FROM Courses WHERE course_name  =  'math'"
  },
  {
    "index": 512,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "What are the descriptions for all the math courses?",
    "pred": "SELECT courses.course_description from courses join sections on courses.course_id = sections.course_id where sections.section_name = 'MATH'",
    "gold": "SELECT course_description FROM Courses WHERE course_name  =  'math'"
  },
  {
    "index": 513,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "What is the zip code of the address in the city Port Chelsea?",
    "pred": "SELECT zip_postcode from addresses where city = 'Port Chelsea'",
    "gold": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"
  },
  {
    "index": 514,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "What is the zip code for Port Chelsea?",
    "pred": "SELECT zip_postcode from addresses where city = 'Port Chelsea'",
    "gold": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"
  },
  {
    "index": 515,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "extra",
    "question": "Which department offers the most number of degrees? List department name and id.",
    "pred": "SELECT departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1",
    "gold": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 516,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "extra",
    "question": "What is the name and id of the department with the most number of degrees ?",
    "pred": "SELECT departments.department_name , degree_programs.department_id from departments join degree_programs on departments.department_id = degree_programs.department_id group by degree_programs.department_id order by count ( * ) desc limit 1",
    "gold": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1"
  },
  {
    "index": 517,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "How many departments offer any degree?",
    "pred": "SELECT count ( distinct department_id ) from degree_programs",
    "gold": "SELECT count(DISTINCT department_id) FROM Degree_Programs"
  },
  {
    "index": 518,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "How many different departments offer degrees?",
    "pred": "SELECT count ( distinct department_id ) from degree_programs",
    "gold": "SELECT count(DISTINCT department_id) FROM Degree_Programs"
  },
  {
    "index": 519,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "How many different degree names are offered?",
    "pred": "SELECT count ( distinct degree_summary_name ) from degree_programs",
    "gold": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"
  },
  {
    "index": 520,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "How many different degrees are offered?",
    "pred": "SELECT count ( distinct degree_summary_name ) from degree_programs",
    "gold": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"
  },
  {
    "index": 521,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "medium",
    "question": "How many degrees does the engineering department offer?",
    "pred": "SELECT count ( * ) from degree_programs join departments on degree_programs.department_id = departments.department_id where departments.department_name = 'Engineering';",
    "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"
  },
  {
    "index": 522,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "medium",
    "question": "How many degrees does the engineering department have?",
    "pred": "SELECT count ( * ) from departments join degree_programs on departments.department_id = degree_programs.department_id where departments.department_name = 'Engineering';",
    "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"
  },
  {
    "index": 523,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "medium",
    "question": "What are the names and descriptions of all the sections?",
    "pred": "SELECT section_name , section_description from sections",
    "gold": "SELECT section_name ,  section_description FROM Sections"
  },
  {
    "index": 524,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "medium",
    "question": "What are the names and descriptions for all the sections?",
    "pred": "SELECT section_name , section_description from sections",
    "gold": "SELECT section_name ,  section_description FROM Sections"
  },
  {
    "index": 525,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "medium",
    "question": "What are the names and id of courses having at most 2 sections?",
    "pred": "SELECT courses.course_name , courses.course_id from courses join sections on courses.course_id = sections.course_id group by courses.course_id having count ( * ) <= 2",
    "gold": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"
  },
  {
    "index": 526,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "medium",
    "question": "What are the names and ids of every course with less than 2 sections?",
    "pred": "SELECT courses.course_name , courses.course_id from courses join sections on courses.course_id = sections.course_id group by courses.course_id having count ( * ) < 2",
    "gold": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"
  },
  {
    "index": 527,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "List the section_name in reversed lexicographical order.",
    "pred": "SELECT section_name from sections order by section_name desc",
    "gold": "SELECT section_name FROM Sections ORDER BY section_name DESC"
  },
  {
    "index": 528,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "What are the names of the sections in reverse alphabetical order?",
    "pred": "SELECT section_name from sections order by section_name desc",
    "gold": "SELECT section_name FROM Sections ORDER BY section_name DESC"
  },
  {
    "index": 529,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "extra",
    "question": "What is the semester which most student registered in? Show both the name and the id.",
    "pred": "SELECT semesters.semester_name , student_enrolment.semester_id from student_enrolment join semesters on student_enrolment.semester_id = semesters.semester_id group by student_enrolment.semester_id order by count ( * ) desc limit 1",
    "gold": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 530,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "extra",
    "question": "For each semester, what is the name and id of the one with the most students registered?",
    "pred": "SELECT semesters.semester_name , student_enrolment.semester_id from student_enrolment join semesters on student_enrolment.semester_id = semesters.semester_id group by student_enrolment.semester_id order by count ( * ) desc limit 1",
    "gold": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 531,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "medium",
    "question": "What is the description of the department whose name has the substring the computer?",
    "pred": "SELECT department_description from departments where department_name like '%computer%';",
    "gold": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"
  },
  {
    "index": 532,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "medium",
    "question": "What is the department description for the one whose name has the word computer?",
    "pred": "SELECT department_description from departments where department_name like '%computer%';",
    "gold": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"
  },
  {
    "index": 533,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "medium",
    "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
    "pred": "SELECT students.first_name , students.middle_name , students.last_name , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id , student_enrolment.semester_id having count ( * ) = 2",
    "gold": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"
  },
  {
    "index": 534,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "medium",
    "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
    "pred": "SELECT students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id having count ( * ) = 2",
    "gold": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"
  },
  {
    "index": 535,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "hard",
    "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
    "pred": "SELECT students.first_name , students.middle_name , students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Bachelor'",
    "gold": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"
  },
  {
    "index": 536,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "hard",
    "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
    "pred": "SELECT students.first_name , students.middle_name , students.last_name from student_enrolment join students on student_enrolment.student_id = students.student_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Bachelors';",
    "gold": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"
  },
  {
    "index": 537,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "extra",
    "question": "Find the kind of program which most number of students are enrolled in?",
    "pred": "SELECT degree_programs.degree_summary_name from student_enrolment join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id group by student_enrolment.degree_program_id order by count ( * ) desc limit 1",
    "gold": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 538,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "extra",
    "question": "What is the degree summary name that has the most number of students enrolled?",
    "pred": "SELECT degree_programs.degree_summary_name from student_enrolment join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id group by degree_programs.degree_summary_name order by count ( * ) desc limit 1",
    "gold": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 539,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "extra",
    "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
    "pred": "SELECT degree_programs.degree_program_id , degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by student_enrolment.degree_program_id order by count ( * ) desc limit 1",
    "gold": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 540,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "extra",
    "question": "What is the program id and the summary of the degree that has the most students enrolled?",
    "pred": "SELECT degree_program_id , degree_summary_name from degree_programs group by degree_program_id order by count ( * ) desc limit 1",
    "gold": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 541,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "extra",
    "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
    "pred": "SELECT student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id order by count ( * ) desc limit 1",
    "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 542,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "extra",
    "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
    "pred": "SELECT students.first_name , students.middle_name , students.last_name , students.student_id , count ( * ) from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id order by count ( * ) desc limit 1",
    "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 543,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "hard",
    "question": "Which semesters do not have any student enrolled? List the semester name.",
    "pred": "SELECT semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )",
    "gold": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )"
  },
  {
    "index": 544,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "hard",
    "question": "What is the name of the semester with no students enrolled?",
    "pred": "SELECT semester_name from semesters except select semesters.semester_name from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id",
    "gold": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )"
  },
  {
    "index": 545,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "What are all the course names of the courses which ever have students enrolled in?",
    "pred": "SELECT distinct courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id",
    "gold": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"
  },
  {
    "index": 546,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "What are the names of all courses that have some students enrolled?",
    "pred": "SELECT courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id",
    "gold": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"
  },
  {
    "index": 547,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "extra",
    "question": "What's the name of the course with most number of enrollments?",
    "pred": "SELECT courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by student_enrolment_courses.course_id order by count ( * ) desc limit 1 ;",
    "gold": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 548,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "extra",
    "question": "What is the name of the course with the most students enrolled?",
    "pred": "SELECT courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by student_enrolment_courses.course_id order by count ( * ) desc limit 1",
    "gold": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 549,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "extra",
    "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
    "pred": "SELECT distinct students.first_name , students.middle_name , students.last_name from students join addresses on students.current_address_id = addresses.address_id where addresses.state_province_county = 'North Carolina' except select students.first_name , students.middle_name , students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id",
    "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
  },
  {
    "index": 550,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "extra",
    "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
    "pred": "SELECT distinct students.last_name from students join addresses on students.permanent_address_id = addresses.address_id where addresses.state_province_county = 'North Carolina' except select distinct students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id",
    "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
  },
  {
    "index": 551,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "medium",
    "question": "Show the date and id of the transcript with at least 2 course results.",
    "pred": "SELECT transcripts.transcript_date , transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcripts.transcript_id having count ( * ) >= 2",
    "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2"
  },
  {
    "index": 552,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "medium",
    "question": "What is the date and id of the transcript with at least 2 courses listed?",
    "pred": "SELECT transcripts.transcript_date , transcript_contents.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcripts.transcript_date , transcript_contents.transcript_id having count ( * ) >= 2",
    "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2"
  },
  {
    "index": 553,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "medium",
    "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
    "pred": "SELECT cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Ward'",
    "gold": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"
  },
  {
    "index": 554,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "medium",
    "question": "What is the mobile phone number of the student named Timmothy Ward ?",
    "pred": "SELECT cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Ward'",
    "gold": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"
  },
  {
    "index": 555,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "medium",
    "question": "Who is the first student to register? List the first name, middle name and last name.",
    "pred": "SELECT first_name , middle_name , last_name from students order by date_first_registered asc limit 1;",
    "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"
  },
  {
    "index": 556,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "medium",
    "question": "What is the first, middle, and last name of the first student to register?",
    "pred": "SELECT first_name , middle_name , last_name from students order by date_first_registered asc limit 1;",
    "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"
  },
  {
    "index": 557,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "medium",
    "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
    "pred": "SELECT students.first_name , students.middle_name , students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id order by student_enrolment.date_left asc limit 1",
    "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"
  },
  {
    "index": 558,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "medium",
    "question": "What is the first, middle, and last name of the earliest school graduate?",
    "pred": "SELECT students.first_name , students.middle_name , students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id order by student_enrolment.date_first_graduated asc limit 1",
    "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"
  },
  {
    "index": 559,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "Whose permanent address is different from his or her current address? List his or her first name.",
    "pred": "SELECT first_name from students where permanent_address_id != current_address_id",
    "gold": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id"
  },
  {
    "index": 560,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "What is the first name of the student whose permanent address is different from his or her current one?",
    "pred": "SELECT first_name from students where permanent_address_id != current_address_id",
    "gold": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id"
  },
  {
    "index": 561,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "extra",
    "question": "Which address holds the most number of students currently? List the address id and all lines.",
    "pred": "SELECT addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count ( * ) desc limit 1",
    "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 562,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "extra",
    "question": "What is the id, line 1, and line 2 of the address with the most students?",
    "pred": "SELECT addresses.address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.permanent_address_id group by addresses.address_id order by count ( * ) desc limit 1",
    "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 563,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "On average, when were the transcripts printed?",
    "pred": "SELECT avg ( transcript_date ) from transcripts",
    "gold": "SELECT avg(transcript_date) FROM Transcripts"
  },
  {
    "index": 564,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "What is the average transcript date?",
    "pred": "SELECT avg ( transcript_date ) from transcripts",
    "gold": "SELECT avg(transcript_date) FROM Transcripts"
  },
  {
    "index": 565,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "medium",
    "question": "When is the first transcript released? List the date and details.",
    "pred": "SELECT transcripts.transcript_date , transcripts.other_details from transcripts order by transcripts.transcript_date asc limit 1",
    "gold": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"
  },
  {
    "index": 566,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "medium",
    "question": "What is the earliest date of a transcript release, and what details can you tell me?",
    "pred": "SELECT min ( transcript_contents.transcript_date ) , transcripts.other_details from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id",
    "gold": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"
  },
  {
    "index": 567,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "How many transcripts are released?",
    "pred": "SELECT count ( * ) from transcripts",
    "gold": "SELECT count(*) FROM Transcripts"
  },
  {
    "index": 568,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "How many transcripts are listed?",
    "pred": "SELECT count ( * ) from transcripts",
    "gold": "SELECT count(*) FROM Transcripts"
  },
  {
    "index": 569,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "medium",
    "question": "What is the last transcript release date?",
    "pred": "SELECT transcript_date from transcripts order by transcript_date desc limit 1;",
    "gold": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"
  },
  {
    "index": 570,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "medium",
    "question": "When was the last transcript released?",
    "pred": "SELECT transcript_date from transcripts order by transcript_date desc limit 1",
    "gold": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"
  },
  {
    "index": 571,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "hard",
    "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
    "pred": "SELECT student_course_id , count ( * ) from transcript_contents group by student_course_id order by count ( * ) desc limit 1",
    "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 572,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "hard",
    "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
    "pred": "SELECT student_enrolment_courses.course_id , count ( * ) from student_enrolment_courses join transcript_contents on student_enrolment_courses.student_course_id = transcript_contents.student_course_id group by student_enrolment_courses.course_id order by count ( * ) desc limit 1",
    "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 573,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "extra",
    "question": "Show the date of the transcript which shows the least number of results, also list the id.",
    "pred": "SELECT transcript_contents.transcript_id , transcripts.transcript_date from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1 , transcripts.transcript_date",
    "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "index": 574,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "extra",
    "question": "What is the date and id of the transcript with the least number of results?",
    "pred": "SELECT transcripts.transcript_date , transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcripts.transcript_id order by count ( * ) desc limit 1",
    "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "index": 575,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "extra",
    "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
    "pred": "SELECT semester_id from student_enrolment where degree_program_id = 1 intersect select semester_id from student_enrolment where degree_program_id = 2",
    "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"
  },
  {
    "index": 576,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "extra",
    "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
    "pred": "SELECT semester_id from student_enrolment where degree_program_id = 2 intersect select semester_id from student_enrolment where degree_program_id = 3",
    "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"
  },
  {
    "index": 577,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "How many different addresses do the students currently live?",
    "pred": "SELECT count ( distinct current_address_id ) from students",
    "gold": "SELECT count(DISTINCT current_address_id) FROM Students"
  },
  {
    "index": 578,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "What are the different addresses that have students living there?",
    "pred": "SELECT distinct addresses.line_1 from addresses join students on students.permanent_address_id = addresses.address_id",
    "gold": "SELECT count(DISTINCT current_address_id) FROM Students"
  },
  {
    "index": 579,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "List all the student details in reversed lexicographical order.",
    "pred": "SELECT * from students order by first_name desc , last_name desc",
    "gold": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"
  },
  {
    "index": 580,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "What other details can you tell me about students in reverse alphabetical order?",
    "pred": "SELECT other_student_details from students order by first_name desc , last_name desc",
    "gold": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"
  },
  {
    "index": 581,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "Describe the section h.",
    "pred": "SELECT section_description from sections where section_name = 'h'",
    "gold": "SELECT section_description FROM Sections WHERE section_name  =  'h'"
  },
  {
    "index": 582,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "easy",
    "question": "What is the description for the section named h?",
    "pred": "SELECT section_description from sections where section_name = 'h'",
    "gold": "SELECT section_description FROM Sections WHERE section_name  =  'h'"
  },
  {
    "index": 583,
    "correct": true,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "hard",
    "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
    "pred": "SELECT students.first_name from students join addresses on students.permanent_address_id = addresses.address_id where addresses.country = 'Haiti' or students.cell_mobile_number = '09700166582'",
    "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'"
  },
  {
    "index": 584,
    "correct": false,
    "db_id": "student_transcripts_tracking",
    "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
    "difficulty": "hard",
    "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
    "pred": "SELECT students.first_name from students join addresses on students.permanent_address_id = addresses.address_id where addresses.country = 'Haiti' union select first_name from students where cell_mobile_number = '09700166582';",
    "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'"
  },
  {
    "index": 585,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "easy",
    "question": "List the title of all cartoons in alphabetical order.",
    "pred": "SELECT title from cartoon order by title asc",
    "gold": "SELECT Title FROM Cartoon ORDER BY title"
  },
  {
    "index": 586,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "easy",
    "question": "What are the titles of the cartoons sorted alphabetically?",
    "pred": "SELECT title from cartoon order by title asc",
    "gold": "SELECT Title FROM Cartoon ORDER BY title"
  },
  {
    "index": 587,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "easy",
    "question": "List all cartoon directed by \"Ben Jones\".",
    "pred": "SELECT title from cartoon where directed_by = 'Ben Jones'",
    "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";"
  },
  {
    "index": 588,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "easy",
    "question": "What are the names of all cartoons directed by Ben Jones?",
    "pred": "SELECT title from cartoon where directed_by = 'Ben Jones'",
    "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";"
  },
  {
    "index": 589,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "easy",
    "question": "How many cartoons were written by \"Joseph Kuhr\"?",
    "pred": "SELECT count ( * ) from cartoon where written_by = 'Joseph Kuhr'",
    "gold": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";"
  },
  {
    "index": 590,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "easy",
    "question": "What is the number of cartoones written by Joseph Kuhr?",
    "pred": "SELECT count ( * ) from cartoon where written_by = 'Joseph Kuhr';",
    "gold": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";"
  },
  {
    "index": 591,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "list all cartoon titles and their directors ordered by their air date",
    "pred": "SELECT title , directed_by from cartoon order by original_air_date asc",
    "gold": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date"
  },
  {
    "index": 592,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "What is the name and directors of all the cartoons that are ordered by air date?",
    "pred": "SELECT title , directed_by from cartoon order by original_air_date asc",
    "gold": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date"
  },
  {
    "index": 593,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
    "pred": "SELECT title from cartoon where directed_by = 'Ben Jones' or directed_by = 'Brandon Vietti';",
    "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";"
  },
  {
    "index": 594,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
    "pred": "SELECT title from cartoon where directed_by = 'Ben Jones' or directed_by = 'Brandon Vietti'",
    "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";"
  },
  {
    "index": 595,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "hard",
    "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
    "pred": "SELECT country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1",
    "gold": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"
  },
  {
    "index": 596,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "hard",
    "question": "What is the country with the most number of TV Channels and how many does it have?",
    "pred": "SELECT country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1",
    "gold": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"
  },
  {
    "index": 597,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "List the number of different series names and contents in the TV Channel table.",
    "pred": "SELECT count ( distinct series_name ) , count ( distinct content ) from tv_channel",
    "gold": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"
  },
  {
    "index": 598,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "How many different series and contents are listed in the TV Channel table?",
    "pred": "SELECT count ( distinct series_name ) , count ( distinct content ) from tv_channel",
    "gold": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"
  },
  {
    "index": 599,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "easy",
    "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
    "pred": "SELECT content from tv_channel where series_name = 'Sky Radio'",
    "gold": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";"
  },
  {
    "index": 600,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "easy",
    "question": "What is the content of the series Sky Radio?",
    "pred": "SELECT content from tv_channel where series_name = 'Sky Radio';",
    "gold": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";"
  },
  {
    "index": 601,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "easy",
    "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
    "pred": "SELECT package_option from tv_channel where series_name = 'Sky Radio'",
    "gold": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";"
  },
  {
    "index": 602,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "easy",
    "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
    "pred": "SELECT package_option from tv_channel where series_name = 'Sky Radio'",
    "gold": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";"
  },
  {
    "index": 603,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "easy",
    "question": "How many TV Channel using language English?",
    "pred": "SELECT count ( * ) from tv_channel where language = 'English';",
    "gold": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";"
  },
  {
    "index": 604,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "easy",
    "question": "How many TV Channels use the English language?",
    "pred": "SELECT count ( * ) from tv_channel where language = 'English';",
    "gold": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";"
  },
  {
    "index": 605,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "hard",
    "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
    "pred": "SELECT language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1",
    "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"
  },
  {
    "index": 606,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "hard",
    "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
    "pred": "SELECT language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1",
    "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"
  },
  {
    "index": 607,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "List each language and the number of TV Channels using it.",
    "pred": "SELECT language , count ( * ) from tv_channel group by language ;",
    "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE"
  },
  {
    "index": 608,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "For each language, list the number of TV Channels that use it.",
    "pred": "SELECT language , count ( * ) from tv_channel group by language;",
    "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE"
  },
  {
    "index": 609,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
    "pred": "SELECT tv_channel.series_name from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.title = 'The Rise of the Blue Beetle!';",
    "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";"
  },
  {
    "index": 610,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
    "pred": "SELECT tv_channel.series_name from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.title = 'The Rise of the Blue Beetle';",
    "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";"
  },
  {
    "index": 611,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
    "pred": "SELECT cartoon.title from cartoon join tv_channel on cartoon.channel = tv_channel.id where tv_channel.series_name = 'Sky Radio'",
    "gold": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
  },
  {
    "index": 612,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
    "pred": "SELECT cartoon.title from cartoon join tv_channel on cartoon.channel = tv_channel.id where tv_channel.series_name = 'Sky Radio'",
    "gold": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
  },
  {
    "index": 613,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "easy",
    "question": "List the Episode of all TV series sorted by rating.",
    "pred": "SELECT episode from tv_series order by rating asc;",
    "gold": "SELECT Episode FROM TV_series ORDER BY rating"
  },
  {
    "index": 614,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "easy",
    "question": "What are all of the episodes ordered by ratings?",
    "pred": "SELECT episode from tv_series order by rating asc;",
    "gold": "SELECT Episode FROM TV_series ORDER BY rating"
  },
  {
    "index": 615,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
    "pred": "SELECT episode , rating from tv_series order by rating desc limit 3",
    "gold": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"
  },
  {
    "index": 616,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
    "pred": "SELECT episode , rating from tv_series order by rating desc limit 3",
    "gold": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"
  },
  {
    "index": 617,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "What is minimum and maximum share of TV series?",
    "pred": "SELECT max ( share ) , min ( share ) from tv_series",
    "gold": "SELECT max(SHARE) , min(SHARE) FROM TV_series;"
  },
  {
    "index": 618,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "What is the maximum and minimum share for the TV series?",
    "pred": "SELECT max ( share ) , min ( share ) from tv_series",
    "gold": "SELECT max(SHARE) , min(SHARE) FROM TV_series;"
  },
  {
    "index": 619,
    "correct": false,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "easy",
    "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
    "pred": "SELECT tv_series.air_date from tv_series join cartoon on tv_series.channel = cartoon.channel where cartoon.title = 'A Love of a Lifetime';",
    "gold": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
  },
  {
    "index": 620,
    "correct": false,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "easy",
    "question": "When did the episode \"A Love of a Lifetime\" air?",
    "pred": "SELECT cartoon.original_air_date from cartoon join tv_series on cartoon.channel = tv_series.channel where cartoon.title = 'A Love of a Lifetime';",
    "gold": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
  },
  {
    "index": 621,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "easy",
    "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
    "pred": "SELECT weekly_rank from tv_series where episode = 'A Love of a Lifetime';",
    "gold": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
  },
  {
    "index": 622,
    "correct": false,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "easy",
    "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
    "pred": "SELECT tv_series.weekly_rank from tv_series join cartoon on tv_series.channel = cartoon.channel where cartoon.title = 'A Love of a Lifetime';",
    "gold": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
  },
  {
    "index": 623,
    "correct": false,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
    "pred": "SELECT tv_channel.series_name from tv_channel join tv_series on tv_channel.id = tv_series.channel join cartoon on tv_channel.id = cartoon.channel where cartoon.title = 'A Love of a Lifetime';",
    "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";"
  },
  {
    "index": 624,
    "correct": false,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
    "pred": "SELECT title from cartoon where title = 'A Love of a Lifetime';",
    "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";"
  },
  {
    "index": 625,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
    "pred": "SELECT tv_series.episode from tv_channel join tv_series on tv_channel.id = tv_series.channel where tv_channel.series_name = 'Sky Radio';",
    "gold": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
  },
  {
    "index": 626,
    "correct": false,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "What is the episode for the TV series named \"Sky Radio\"?",
    "pred": "SELECT episode from tv_series where id in ( select channel from tv_channel where series_name = 'Sky Radio' )",
    "gold": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
  },
  {
    "index": 627,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "Find the number of cartoons directed by each of the listed directors.",
    "pred": "SELECT directed_by , count ( * ) from cartoon group by directed_by;",
    "gold": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by"
  },
  {
    "index": 628,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "How many cartoons did each director create?",
    "pred": "SELECT count ( * ) , directed_by from cartoon group by directed_by;",
    "gold": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by"
  },
  {
    "index": 629,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "Find the production code and channel of the most recently aired cartoon .",
    "pred": "SELECT production_code , channel from cartoon order by original_air_date desc limit 1",
    "gold": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"
  },
  {
    "index": 630,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "What is the produdction code and channel of the most recent cartoon ?",
    "pred": "SELECT production_code , channel from cartoon order by original_air_date desc limit 1",
    "gold": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"
  },
  {
    "index": 631,
    "correct": false,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "Find the package choice and series name of the TV channel that has high definition TV.",
    "pred": "SELECT hight_definition_tv , series_name from tv_channel where hight_definition_tv = 'Yes'",
    "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""
  },
  {
    "index": 632,
    "correct": false,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
    "pred": "SELECT tv_channel.hight_definition_tv , tv_channel.package_option , tv_channel.series_name from tv_channel where hight_definition_tv = 'Yes';",
    "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""
  },
  {
    "index": 633,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
    "pred": "SELECT distinct tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey';",
    "gold": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
  },
  {
    "index": 634,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
    "pred": "SELECT distinct tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey';",
    "gold": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
  },
  {
    "index": 635,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "hard",
    "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
    "pred": "SELECT country from tv_channel except select tv_channel.country from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.written_by = 'Todd Casey';",
    "gold": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
  },
  {
    "index": 636,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "hard",
    "question": "What are the countries that are not playing cartoons written by Todd Casey?",
    "pred": "SELECT distinct country from tv_channel except select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey';",
    "gold": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
  },
  {
    "index": 637,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "extra",
    "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
    "pred": "SELECT tv_channel.series_name , tv_channel.country from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.directed_by = 'Ben Jones' intersect select tv_channel.series_name , tv_channel.country from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.directed_by = 'Michael Chang';",
    "gold": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"
  },
  {
    "index": 638,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "extra",
    "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
    "pred": "SELECT tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones' intersect select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Michael Chang';",
    "gold": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"
  },
  {
    "index": 639,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
    "pred": "SELECT pixel_aspect_ratio_par , country from tv_channel where language != 'english'",
    "gold": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"
  },
  {
    "index": 640,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "medium",
    "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
    "pred": "SELECT pixel_aspect_ratio_par , country from tv_channel where language != 'english'",
    "gold": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"
  },
  {
    "index": 641,
    "correct": false,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "easy",
    "question": "find id of the tv channels that from the countries where have more than two tv channels.",
    "pred": "SELECT id from tv_channel where country in ( select country from tv_channel group by country having count ( * ) > 2 )",
    "gold": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"
  },
  {
    "index": 642,
    "correct": false,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "easy",
    "question": "What are the ids of all tv channels that have more than 2 TV channels?",
    "pred": "SELECT id from tv_channel group by id having count ( * ) > 2",
    "gold": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"
  },
  {
    "index": 643,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "hard",
    "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
    "pred": "SELECT id from tv_channel except select channel from cartoon where directed_by = 'Ben Jones';",
    "gold": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'"
  },
  {
    "index": 644,
    "correct": true,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "hard",
    "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
    "pred": "SELECT id from tv_channel except select channel from cartoon where directed_by = 'Ben Jones'",
    "gold": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'"
  },
  {
    "index": 645,
    "correct": false,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "hard",
    "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
    "pred": "SELECT package_option from tv_channel except select tv_channel.package_option from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.directed_by = 'Ben Jones'",
    "gold": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')"
  },
  {
    "index": 646,
    "correct": false,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option )\n# tv_series ( id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel )\n# cartoon ( id , title , directed_by , written_by , original_air_date , production_code , channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n",
    "difficulty": "hard",
    "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
    "pred": "SELECT package_option from tv_channel except select tv_channel.package_option from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'",
    "gold": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')"
  },
  {
    "index": 647,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "easy",
    "question": "How many poker players are there?",
    "pred": "SELECT count ( * ) from poker_player",
    "gold": "SELECT count(*) FROM poker_player"
  },
  {
    "index": 648,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "easy",
    "question": "Count the number of poker players.",
    "pred": "SELECT count ( * ) from poker_player",
    "gold": "SELECT count(*) FROM poker_player"
  },
  {
    "index": 649,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "easy",
    "question": "List the earnings of poker players in descending order.",
    "pred": "SELECT earnings from poker_player order by earnings desc",
    "gold": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"
  },
  {
    "index": 650,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "easy",
    "question": "What are the earnings of poker players, ordered descending by value?",
    "pred": "SELECT earnings from poker_player order by earnings desc",
    "gold": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"
  },
  {
    "index": 651,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "medium",
    "question": "List the final tables made and the best finishes of poker players.",
    "pred": "SELECT final_table_made , best_finish from poker_player",
    "gold": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"
  },
  {
    "index": 652,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "medium",
    "question": "What are the final tables made and best finishes for all poker players?",
    "pred": "SELECT final_table_made , best_finish from poker_player",
    "gold": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"
  },
  {
    "index": 653,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "easy",
    "question": "What is the average earnings of poker players?",
    "pred": "SELECT avg ( earnings ) from poker_player",
    "gold": "SELECT avg(Earnings) FROM poker_player"
  },
  {
    "index": 654,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "easy",
    "question": "Return the average earnings across all poker players.",
    "pred": "SELECT avg ( earnings ) from poker_player",
    "gold": "SELECT avg(Earnings) FROM poker_player"
  },
  {
    "index": 655,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "medium",
    "question": "What is the money rank of the poker player with the highest earnings?",
    "pred": "SELECT money_rank from poker_player order by earnings desc limit 1",
    "gold": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"
  },
  {
    "index": 656,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "medium",
    "question": "Return the money rank of the player with the greatest earnings.",
    "pred": "SELECT money_rank from poker_player order by earnings desc limit 1",
    "gold": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"
  },
  {
    "index": 657,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "easy",
    "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
    "pred": "SELECT max ( final_table_made ) from poker_player where earnings < 200000",
    "gold": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"
  },
  {
    "index": 658,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "easy",
    "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
    "pred": "SELECT max ( final_table_made ) from poker_player where earnings < 200000",
    "gold": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"
  },
  {
    "index": 659,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "easy",
    "question": "What are the names of poker players?",
    "pred": "SELECT people.name from people join poker_player on people.people_id = poker_player.people_id",
    "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"
  },
  {
    "index": 660,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "easy",
    "question": "Return the names of all the poker players.",
    "pred": "SELECT people.name from people join poker_player on people.people_id = poker_player.people_id",
    "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"
  },
  {
    "index": 661,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "medium",
    "question": "What are the names of poker players whose earnings is higher than 300000?",
    "pred": "SELECT distinct people.name from people join poker_player on people.people_id = poker_player.people_id where poker_player.earnings > 300000",
    "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"
  },
  {
    "index": 662,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "medium",
    "question": "Give the names of poker players who have earnings above 300000.",
    "pred": "SELECT people.name from people join poker_player on people.people_id = poker_player.people_id where poker_player.earnings > 300000",
    "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"
  },
  {
    "index": 663,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "medium",
    "question": "List the names of poker players ordered by the final tables made in ascending order.",
    "pred": "SELECT people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.final_table_made asc",
    "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made"
  },
  {
    "index": 664,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "medium",
    "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
    "pred": "SELECT people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.final_table_made asc",
    "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made"
  },
  {
    "index": 665,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "hard",
    "question": "What is the birth date of the poker player with the lowest earnings?",
    "pred": "SELECT people.birth_date from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings asc limit 1",
    "gold": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"
  },
  {
    "index": 666,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "hard",
    "question": "Return the birth date of the poker player with the lowest earnings.",
    "pred": "SELECT people.birth_date from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings asc limit 1",
    "gold": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"
  },
  {
    "index": 667,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "hard",
    "question": "What is the money rank of the tallest poker player?",
    "pred": "SELECT poker_player.money_rank from people join poker_player on people.people_id = poker_player.people_id order by people.height desc limit 1",
    "gold": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
  },
  {
    "index": 668,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "hard",
    "question": "Return the money rank of the poker player with the greatest height.",
    "pred": "SELECT poker_player.money_rank from people join poker_player on people.people_id = poker_player.people_id order by people.height desc limit 1",
    "gold": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
  },
  {
    "index": 669,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "medium",
    "question": "What is the average earnings of poker players with height higher than 200?",
    "pred": "SELECT avg ( poker_player.earnings ) from people join poker_player on people.people_id = poker_player.people_id where people.height > 200",
    "gold": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"
  },
  {
    "index": 670,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "medium",
    "question": "Give average earnings of poker players who are taller than 200.",
    "pred": "SELECT avg ( poker_player.earnings ) from people join poker_player on people.people_id = poker_player.people_id where people.height > 200",
    "gold": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"
  },
  {
    "index": 671,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "medium",
    "question": "What are the names of poker players in descending order of earnings?",
    "pred": "SELECT people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings desc",
    "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC"
  },
  {
    "index": 672,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "medium",
    "question": "Return the names of poker players sorted by their earnings descending.",
    "pred": "SELECT people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings desc",
    "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC"
  },
  {
    "index": 673,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "medium",
    "question": "What are different nationalities of people and the corresponding number of people from each nation?",
    "pred": "SELECT distinct nationality , count ( * ) from people group by nationality;",
    "gold": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality"
  },
  {
    "index": 674,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "medium",
    "question": "How many people are there of each nationality?",
    "pred": "SELECT count ( * ) , nationality from people group by nationality ;",
    "gold": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality"
  },
  {
    "index": 675,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "hard",
    "question": "What is the most common nationality of people?",
    "pred": "SELECT nationality from people group by nationality order by count ( * ) desc limit 1",
    "gold": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "index": 676,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "hard",
    "question": "Give the nationality that is most common across all people.",
    "pred": "SELECT nationality from people group by nationality order by count ( * ) desc limit 1",
    "gold": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "index": 677,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "easy",
    "question": "What are the nationalities that are shared by at least two people?",
    "pred": "SELECT nationality from people group by nationality having count ( * ) >= 2",
    "gold": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"
  },
  {
    "index": 678,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "easy",
    "question": "Return the nationalities for which there are two or more people.",
    "pred": "SELECT nationality from people group by nationality having count ( * ) >= 2",
    "gold": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"
  },
  {
    "index": 679,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "medium",
    "question": "List the names and birth dates of people in ascending alphabetical order of name.",
    "pred": "SELECT name , birth_date from people order by name asc",
    "gold": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC"
  },
  {
    "index": 680,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "medium",
    "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
    "pred": "SELECT name , birth_date from people order by name asc",
    "gold": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC"
  },
  {
    "index": 681,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "easy",
    "question": "Show names of people whose nationality is not \"Russia\".",
    "pred": "SELECT name from people where nationality != 'Russia'",
    "gold": "SELECT Name FROM people WHERE Nationality != \"Russia\""
  },
  {
    "index": 682,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "easy",
    "question": "What are the names of people who are not from Russia?",
    "pred": "SELECT distinct name from people where nationality != 'Russia'",
    "gold": "SELECT Name FROM people WHERE Nationality != \"Russia\""
  },
  {
    "index": 683,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "hard",
    "question": "List the names of people that are not poker players.",
    "pred": "SELECT name from people where people_id not in ( select people_id from poker_player )",
    "gold": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"
  },
  {
    "index": 684,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "hard",
    "question": "What are the names of people who do not play poker?",
    "pred": "SELECT name from people where people_id not in ( select people_id from poker_player );",
    "gold": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"
  },
  {
    "index": 685,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "easy",
    "question": "How many distinct nationalities are there?",
    "pred": "SELECT count ( distinct nationality ) from people",
    "gold": "SELECT count(DISTINCT Nationality) FROM people"
  },
  {
    "index": 686,
    "correct": true,
    "db_id": "poker_player",
    "db_info": "# poker_player ( poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings )\n# people ( people_id , nationality , name , birth_date , height )\n# poker_player.people_id = people.people_id\n",
    "difficulty": "easy",
    "question": "Count the number of different nationalities.",
    "pred": "SELECT count ( distinct nationality ) from people",
    "gold": "SELECT count(DISTINCT Nationality) FROM people"
  },
  {
    "index": 687,
    "correct": true,
    "db_id": "voter_1",
    "db_info": "# area_code_state ( area_code , state )\n# contestants ( contestant_number , contestant_name )\n# votes ( vote_id , phone_number , state , contestant_number , created )\n# votes.contestant_number = contestants.contestant_number\n# votes.state = area_code_state.state\n",
    "difficulty": "easy",
    "question": "How many states are there?",
    "pred": "SELECT count ( * ) from area_code_state",
    "gold": "SELECT count(*) FROM area_code_state"
  },
  {
    "index": 688,
    "correct": true,
    "db_id": "voter_1",
    "db_info": "# area_code_state ( area_code , state )\n# contestants ( contestant_number , contestant_name )\n# votes ( vote_id , phone_number , state , contestant_number , created )\n# votes.contestant_number = contestants.contestant_number\n# votes.state = area_code_state.state\n",
    "difficulty": "medium",
    "question": "List the contestant numbers and names, ordered by contestant name descending.",
    "pred": "SELECT contestants.contestant_number , contestants.contestant_name from contestants order by contestants.contestant_name desc",
    "gold": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC"
  },
  {
    "index": 689,
    "correct": true,
    "db_id": "voter_1",
    "db_info": "# area_code_state ( area_code , state )\n# contestants ( contestant_number , contestant_name )\n# votes ( vote_id , phone_number , state , contestant_number , created )\n# votes.contestant_number = contestants.contestant_number\n# votes.state = area_code_state.state\n",
    "difficulty": "medium",
    "question": "List the vote ids, phone numbers and states of all votes.",
    "pred": "SELECT distinct vote_id , phone_number , state from votes",
    "gold": "SELECT vote_id ,  phone_number ,  state FROM votes"
  },
  {
    "index": 690,
    "correct": true,
    "db_id": "voter_1",
    "db_info": "# area_code_state ( area_code , state )\n# contestants ( contestant_number , contestant_name )\n# votes ( vote_id , phone_number , state , contestant_number , created )\n# votes.contestant_number = contestants.contestant_number\n# votes.state = area_code_state.state\n",
    "difficulty": "medium",
    "question": "What are the maximum and minimum values of area codes?",
    "pred": "SELECT max ( area_code ) , min ( area_code ) from area_code_state",
    "gold": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"
  },
  {
    "index": 691,
    "correct": true,
    "db_id": "voter_1",
    "db_info": "# area_code_state ( area_code , state )\n# contestants ( contestant_number , contestant_name )\n# votes ( vote_id , phone_number , state , contestant_number , created )\n# votes.contestant_number = contestants.contestant_number\n# votes.state = area_code_state.state\n",
    "difficulty": "easy",
    "question": "What is last date created of votes from the state 'CA'?",
    "pred": "SELECT max ( created ) from votes where state = 'CA'",
    "gold": "SELECT max(created) FROM votes WHERE state  =  'CA'"
  },
  {
    "index": 692,
    "correct": true,
    "db_id": "voter_1",
    "db_info": "# area_code_state ( area_code , state )\n# contestants ( contestant_number , contestant_name )\n# votes ( vote_id , phone_number , state , contestant_number , created )\n# votes.contestant_number = contestants.contestant_number\n# votes.state = area_code_state.state\n",
    "difficulty": "easy",
    "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
    "pred": "SELECT contestant_name from contestants where contestant_name != 'Jessie Alloway'",
    "gold": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"
  },
  {
    "index": 693,
    "correct": true,
    "db_id": "voter_1",
    "db_info": "# area_code_state ( area_code , state )\n# contestants ( contestant_number , contestant_name )\n# votes ( vote_id , phone_number , state , contestant_number , created )\n# votes.contestant_number = contestants.contestant_number\n# votes.state = area_code_state.state\n",
    "difficulty": "medium",
    "question": "What are the distinct states and create time of all votes?",
    "pred": "SELECT distinct state , created from votes",
    "gold": "SELECT DISTINCT state ,  created FROM votes"
  },
  {
    "index": 694,
    "correct": true,
    "db_id": "voter_1",
    "db_info": "# area_code_state ( area_code , state )\n# contestants ( contestant_number , contestant_name )\n# votes ( vote_id , phone_number , state , contestant_number , created )\n# votes.contestant_number = contestants.contestant_number\n# votes.state = area_code_state.state\n",
    "difficulty": "medium",
    "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
    "pred": "SELECT contestants.contestant_name , contestants.contestant_number from contestants join votes on contestants.contestant_number = votes.contestant_number group by contestants.contestant_number having count ( * ) >= 2",
    "gold": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2"
  },
  {
    "index": 695,
    "correct": true,
    "db_id": "voter_1",
    "db_info": "# area_code_state ( area_code , state )\n# contestants ( contestant_number , contestant_name )\n# votes ( vote_id , phone_number , state , contestant_number , created )\n# votes.contestant_number = contestants.contestant_number\n# votes.state = area_code_state.state\n",
    "difficulty": "extra",
    "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
    "pred": "SELECT contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by contestants.contestant_number order by count ( * ) asc limit 1",
    "gold": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "index": 696,
    "correct": true,
    "db_id": "voter_1",
    "db_info": "# area_code_state ( area_code , state )\n# contestants ( contestant_number , contestant_name )\n# votes ( vote_id , phone_number , state , contestant_number , created )\n# votes.contestant_number = contestants.contestant_number\n# votes.state = area_code_state.state\n",
    "difficulty": "medium",
    "question": "What are the number of votes from state 'NY' or 'CA'?",
    "pred": "SELECT count ( * ) from votes where state = 'NY' or state = 'CA';",
    "gold": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'"
  },
  {
    "index": 697,
    "correct": true,
    "db_id": "voter_1",
    "db_info": "# area_code_state ( area_code , state )\n# contestants ( contestant_number , contestant_name )\n# votes ( vote_id , phone_number , state , contestant_number , created )\n# votes.contestant_number = contestants.contestant_number\n# votes.state = area_code_state.state\n",
    "difficulty": "extra",
    "question": "How many contestants did not get voted?",
    "pred": "SELECT count ( * ) from contestants where contestant_number not in ( select contestant_number from votes )",
    "gold": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )"
  },
  {
    "index": 698,
    "correct": true,
    "db_id": "voter_1",
    "db_info": "# area_code_state ( area_code , state )\n# contestants ( contestant_number , contestant_name )\n# votes ( vote_id , phone_number , state , contestant_number , created )\n# votes.contestant_number = contestants.contestant_number\n# votes.state = area_code_state.state\n",
    "difficulty": "extra",
    "question": "What is the area code in which the most voters voted?",
    "pred": "SELECT area_code_state.area_code from area_code_state join votes on area_code_state.state = votes.state group by area_code_state.area_code order by count ( * ) desc limit 1",
    "gold": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 699,
    "correct": true,
    "db_id": "voter_1",
    "db_info": "# area_code_state ( area_code , state )\n# contestants ( contestant_number , contestant_name )\n# votes ( vote_id , phone_number , state , contestant_number , created )\n# votes.contestant_number = contestants.contestant_number\n# votes.state = area_code_state.state\n",
    "difficulty": "medium",
    "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
    "pred": "SELECT distinct votes.created , votes.state , votes.phone_number from contestants join votes on contestants.contestant_number = votes.contestant_number where contestants.contestant_name = 'Tabatha Gehling'",
    "gold": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"
  },
  {
    "index": 700,
    "correct": false,
    "db_id": "voter_1",
    "db_info": "# area_code_state ( area_code , state )\n# contestants ( contestant_number , contestant_name )\n# votes ( vote_id , phone_number , state , contestant_number , created )\n# votes.contestant_number = contestants.contestant_number\n# votes.state = area_code_state.state\n",
    "difficulty": "extra",
    "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
    "pred": "SELECT votes.state from votes join area_code_state on votes.state = area_code_state.state join contestants on votes.contestant_number = contestants.contestant_number where area_code_state.area_code in ( select area_code_state.area_code from area_code_state join votes on area_code_state.state = votes.state join contestants on votes.contestant_number = contestants.contestant_number where contestants.contestant_name = 'Tabatha Gehling' intersect select area_code_state.area_code from area_code_state join votes on area_code_state.state = votes.state join contestants on votes.contestant_number = contestants.contestant_number where contestants.contestant_name = 'Kelly Clauss' ) group by votes.state having count ( * ) >= 2;",
    "gold": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'"
  },
  {
    "index": 701,
    "correct": true,
    "db_id": "voter_1",
    "db_info": "# area_code_state ( area_code , state )\n# contestants ( contestant_number , contestant_name )\n# votes ( vote_id , phone_number , state , contestant_number , created )\n# votes.contestant_number = contestants.contestant_number\n# votes.state = area_code_state.state\n",
    "difficulty": "medium",
    "question": "Return the names of the contestants whose names contain the substring 'Al' .",
    "pred": "SELECT contestant_name from contestants where contestant_name like '%Al%';",
    "gold": "select contestant_name from contestants where contestant_name like \"%al%\""
  },
  {
    "index": 702,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "easy",
    "question": "What are the names of all the countries that became independent after 1950?",
    "pred": "SELECT name from country where indepyear > 1950",
    "gold": "SELECT Name FROM country WHERE IndepYear  >  1950"
  },
  {
    "index": 703,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "easy",
    "question": "Give the names of the nations that were founded after 1950.",
    "pred": "SELECT name from country where indepyear > 1950",
    "gold": "SELECT Name FROM country WHERE IndepYear  >  1950"
  },
  {
    "index": 704,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "easy",
    "question": "How many countries have a republic as their form of government?",
    "pred": "SELECT count ( * ) from country where governmentform like '%Republic%';",
    "gold": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\""
  },
  {
    "index": 705,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "easy",
    "question": "How many countries have governments that are republics?",
    "pred": "SELECT count ( * ) from country where governmentform like '%Republic%';",
    "gold": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\""
  },
  {
    "index": 706,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "easy",
    "question": "What is the total surface area of the countries in the Caribbean region?",
    "pred": "SELECT sum ( surfacearea ) from country where region = 'Caribbean';",
    "gold": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""
  },
  {
    "index": 707,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "easy",
    "question": "How much surface area do the countires in the Carribean cover together?",
    "pred": "SELECT sum ( surfacearea ) from country where continent = 'Caribbean'",
    "gold": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""
  },
  {
    "index": 708,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "easy",
    "question": "Which continent is Anguilla in?",
    "pred": "SELECT continent from country where name = 'Anguilla'",
    "gold": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\""
  },
  {
    "index": 709,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "easy",
    "question": "What is the continent name which Anguilla belongs to?",
    "pred": "SELECT continent from country where name = 'Anguilla'",
    "gold": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\""
  },
  {
    "index": 710,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "Which region is the city Kabul located in?",
    "pred": "SELECT country.region from city join country on city.countrycode = country.code where city.name = 'Kabul';",
    "gold": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""
  },
  {
    "index": 711,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "What region is Kabul in?",
    "pred": "SELECT region from country join city on country.capital = city.id where city.name = 'Kabul';",
    "gold": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""
  },
  {
    "index": 712,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "Which language is the most popular in Aruba?",
    "pred": "SELECT language from countrylanguage where countrycode = 'ABW' and isofficial = 'T' order by percentage desc limit 1;",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"
  },
  {
    "index": 713,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "What language is predominantly spoken in Aruba?",
    "pred": "SELECT language from countrylanguage where countrycode in ( select code from country where name = 'Aruba' ) and isofficial = 'T'",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"
  },
  {
    "index": 714,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "What are the population and life expectancies in Brazil?",
    "pred": "SELECT population , lifeexpectancy from country where name = 'Brazil'",
    "gold": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\""
  },
  {
    "index": 715,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "Give me Brazil's population and life expectancies.",
    "pred": "SELECT population , lifeexpectancy from country where name = 'Brazil'",
    "gold": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\""
  },
  {
    "index": 716,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "What are the region and population of Angola?",
    "pred": "SELECT region , population from country where name = 'Angola'",
    "gold": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\""
  },
  {
    "index": 717,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "What region does Angola belong to and what is its population?",
    "pred": "SELECT region , population from country where name = 'Angola'",
    "gold": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\""
  },
  {
    "index": 718,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "easy",
    "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
    "pred": "SELECT avg ( lifeexpectancy ) from country where region = 'Central Africa'",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""
  },
  {
    "index": 719,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "easy",
    "question": "How long is the people's average life expectancy in Central Africa?",
    "pred": "SELECT avg ( lifeexpectancy ) from country where region = 'Central Africa'",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""
  },
  {
    "index": 720,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "hard",
    "question": "What is the name of country that has the shortest life expectancy in Asia?",
    "pred": "SELECT name from country where continent = 'Asia' order by lifeexpectancy asc limit 1",
    "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"
  },
  {
    "index": 721,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "hard",
    "question": "Give the name of the country in Asia with the lowest life expectancy.",
    "pred": "SELECT name from country where continent = 'Asia' order by lifeexpectancy asc limit 1",
    "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"
  },
  {
    "index": 722,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "What is the total population and maximum GNP in Asia?",
    "pred": "SELECT sum ( population ) , max ( gnp ) from country where continent = 'Asia'",
    "gold": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""
  },
  {
    "index": 723,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "How many people live in Asia, and what is the largest GNP among them?",
    "pred": "SELECT sum ( population ) , max ( gnp ) from country where continent = 'Asia'",
    "gold": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""
  },
  {
    "index": 724,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "What is the average life expectancy in African countries that are republics?",
    "pred": "SELECT avg ( lifeexpectancy ) from country where continent = 'Africa' and governmentform like '%Republic%';",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\""
  },
  {
    "index": 725,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "Give the average life expectancy for countries in Africa which are republics?",
    "pred": "SELECT avg ( lifeexpectancy ) from country where continent = 'Africa' and governmentform like '%Republic%';",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\""
  },
  {
    "index": 726,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "What is the total surface area of the continents Asia and Europe?",
    "pred": "SELECT sum ( surfacearea ) from country where continent = 'Asia' or continent = 'Europe'",
    "gold": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\""
  },
  {
    "index": 727,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "Give the total surface area covered by countries in Asia or Europe.",
    "pred": "SELECT sum ( surfacearea ) from country where continent = 'Asia' or continent = 'Europe'",
    "gold": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\""
  },
  {
    "index": 728,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "easy",
    "question": "How many people live in Gelderland district?",
    "pred": "SELECT sum ( population ) from city where district = 'Gelderland'",
    "gold": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""
  },
  {
    "index": 729,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "easy",
    "question": "What is the total population of Gelderland district?",
    "pred": "SELECT sum ( population ) from city where district = 'Gelderland'",
    "gold": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""
  },
  {
    "index": 730,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "What is the average GNP and total population in all nations whose government is US territory?",
    "pred": "SELECT avg ( gnp ) , sum ( population ) from country where governmentform = 'US Trust Territory';",
    "gold": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""
  },
  {
    "index": 731,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "Give the mean GNP and total population of nations which are considered US territory.",
    "pred": "SELECT avg ( gnp ) , sum ( population ) from country where name like '%U.S.%';",
    "gold": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""
  },
  {
    "index": 732,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "easy",
    "question": "How many unique languages are spoken in the world?",
    "pred": "SELECT count ( distinct language ) from countrylanguage",
    "gold": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"
  },
  {
    "index": 733,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "easy",
    "question": "What is the number of distinct languages used around the world?",
    "pred": "SELECT count ( distinct language ) from countrylanguage",
    "gold": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"
  },
  {
    "index": 734,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "easy",
    "question": "How many type of governments are in Africa?",
    "pred": "SELECT count ( distinct governmentform ) from country where region = 'Africa'",
    "gold": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""
  },
  {
    "index": 735,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "easy",
    "question": "How many different forms of governments are there in Africa?",
    "pred": "SELECT count ( distinct governmentform ) from country where continent = 'Africa';",
    "gold": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""
  },
  {
    "index": 736,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "What is the total number of languages used in Aruba?",
    "pred": "SELECT count ( * ) from countrylanguage where countrycode = 'ABW';",
    "gold": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""
  },
  {
    "index": 737,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "How many languages are spoken in Aruba?",
    "pred": "SELECT count ( * ) from countrylanguage where countrycode = 'ABW';",
    "gold": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""
  },
  {
    "index": 738,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "How many official languages does Afghanistan have?",
    "pred": "SELECT count ( * ) from countrylanguage where countrycode = 'AFG' and isofficial = 'T';",
    "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""
  },
  {
    "index": 739,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "How many official languages are spoken in Afghanistan?",
    "pred": "SELECT count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Afghanistan' and isofficial = 'T'",
    "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""
  },
  {
    "index": 740,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "What is name of the country that speaks the largest number of languages?",
    "pred": "SELECT country.name from countrylanguage join country on countrylanguage.countrycode = country.code group by countrylanguage.countrycode order by count ( * ) desc limit 1",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "index": 741,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "Give the name of the nation that uses the greatest amount of languages.",
    "pred": "SELECT country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by countrylanguage.countrycode order by count ( * ) desc limit 1",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "index": 742,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "Which continent has the most diverse languages?",
    "pred": "SELECT continent from countrylanguage join country on countrylanguage.countrycode = country.code group by country.continent order by count ( distinct countrylanguage.language ) desc limit 1",
    "gold": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "index": 743,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "Which continent speaks the most languages?",
    "pred": "SELECT continent from countrylanguage join country on countrylanguage.countrycode = country.code group by country.continent order by count ( distinct countrylanguage.language ) desc limit 1",
    "gold": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "index": 744,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "easy",
    "question": "How many countries speak both English and Dutch?",
    "pred": "SELECT count ( * ) from countrylanguage where language = 'english' and countrycode in ( select countrycode from countrylanguage where language = 'dutch' )",
    "gold": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"
  },
  {
    "index": 745,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "easy",
    "question": "What is the number of nations that use English and Dutch?",
    "pred": "SELECT count ( * ) from countrylanguage where language = 'english' intersect select count ( * ) from countrylanguage where language = 'dutch';",
    "gold": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"
  },
  {
    "index": 746,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "What are the names of nations speak both English and French?",
    "pred": "SELECT country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'english' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'french';",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""
  },
  {
    "index": 747,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "Give the names of nations that speak both English and French.",
    "pred": "SELECT name from country where code in ( select countrycode from countrylanguage where language = 'english' intersect select countrycode from countrylanguage where language = 'french' );",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""
  },
  {
    "index": 748,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "What are the names of nations where both English and French are official languages?",
    "pred": "SELECT name from countrylanguage join country on countrylanguage.countrycode = country.code where language = 'english' intersect select name from countrylanguage join country on countrylanguage.countrycode = country.code where language = 'french'",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\""
  },
  {
    "index": 749,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "Give the names of countries with English and French as official languages.",
    "pred": "SELECT country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'english' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'french'",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\""
  },
  {
    "index": 750,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "What is the number of distinct continents where Chinese is spoken?",
    "pred": "SELECT count ( * ) from countrylanguage where language = 'Chinese' and isofficial = 'T'",
    "gold": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\""
  },
  {
    "index": 751,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "How many continents speak Chinese?",
    "pred": "SELECT count ( * ) from countrylanguage where language = 'Chinese' and isofficial = 'T'",
    "gold": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\""
  },
  {
    "index": 752,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "hard",
    "question": "What are the regions that use English or Dutch?",
    "pred": "SELECT region from countrylanguage join country on countrylanguage.countrycode = country.code where language = 'English' or language = 'Dutch'",
    "gold": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\""
  },
  {
    "index": 753,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "hard",
    "question": "Which regions speak Dutch or English?",
    "pred": "SELECT distinct country.region from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'Dutch' or countrylanguage.language = 'English'",
    "gold": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\""
  },
  {
    "index": 754,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "What are the countries where either English or Dutch is the official language ?",
    "pred": "SELECT distinct countryname from countrylanguage where language = 'English' and isofficial = 'T' intersect select distinct countryname from countrylanguage where language = 'Dutch' and isofficial = 'T';",
    "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\""
  },
  {
    "index": 755,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "Which countries have either English or Dutch as an official language?",
    "pred": "SELECT country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' and countrylanguage.isofficial = 'T' union select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'Dutch' and countrylanguage.isofficial = 'T';",
    "gold": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\""
  },
  {
    "index": 756,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "Which language is the most popular on the Asian continent?",
    "pred": "SELECT language from countrylanguage join country on countrylanguage.countrycode = country.code where continent = 'Asia' group by language order by sum ( population ) desc limit 1 ;",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1"
  },
  {
    "index": 757,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "What is the language that is used by the largest number of Asian nations?",
    "pred": "SELECT language from countrylanguage join country on countrylanguage.countrycode = country.code where country.continent = 'Asia' group by countrylanguage.language order by count ( * ) desc limit 1",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1"
  },
  {
    "index": 758,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "hard",
    "question": "Which languages are spoken by only one country in republic governments?",
    "pred": "SELECT language from countrylanguage join country on countrylanguage.countrycode = country.code where governmentform = 'Republic' group by language having count ( * ) = 1;",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1"
  },
  {
    "index": 759,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "hard",
    "question": "What languages are only used by a single country with a republic government?",
    "pred": "SELECT language from countrylanguage join country on countrylanguage.countrycode = country.code where governmentform = 'Republic' group by language having count ( * ) = 1",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1"
  },
  {
    "index": 760,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "Find the city with the largest population that uses English.",
    "pred": "SELECT city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'english' order by city.population desc limit 1;",
    "gold": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1"
  },
  {
    "index": 761,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "What is the most populace city that speaks English?",
    "pred": "SELECT city . name from city join countrylanguage on city . countrycode = countrylanguage . countrycode where countrylanguage . language = 'english' order by city . population desc limit 1",
    "gold": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1"
  },
  {
    "index": 762,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "hard",
    "question": "Find the name, population and expected life length of asian country with the largest area?",
    "pred": "SELECT name , population , lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1",
    "gold": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"
  },
  {
    "index": 763,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "hard",
    "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
    "pred": "SELECT name , population , lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1",
    "gold": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"
  },
  {
    "index": 764,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "What is average life expectancy in the countries where English is not the official language?",
    "pred": "SELECT avg ( lifeexpectancy ) from country where code not in ( select countrycode from countrylanguage where language = 'english' and isofficial = 'T' )",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"
  },
  {
    "index": 765,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "Give the mean life expectancy of countries in which English is not the official language.",
    "pred": "SELECT avg ( lifeexpectancy ) from country where code not in ( select countrycode from countrylanguage where language = 'english' and isofficial = 'T' )",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"
  },
  {
    "index": 766,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "What is the total number of people living in the nations that do not use English?",
    "pred": "SELECT sum ( population ) from country where code not in ( select countrycode from countrylanguage where language = 'english' )",
    "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"
  },
  {
    "index": 767,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "How many people live in countries that do not speak English?",
    "pred": "SELECT sum ( population ) from country where code not in ( select countrycode from countrylanguage where language = 'english' )",
    "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"
  },
  {
    "index": 768,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "What is the official language spoken in the country whose head of state is Beatrix?",
    "pred": "SELECT countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.headofstate = 'Beatrix' and countrylanguage.isofficial = 'T';",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\""
  },
  {
    "index": 769,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
    "pred": "SELECT countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.headofstate = 'Beatrix' and countrylanguage.isofficial = 'T'",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\""
  },
  {
    "index": 770,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
    "pred": "SELECT count ( distinct language ) from countrylanguage join country on countrylanguage.countrycode = country.code where indepyear < 1930",
    "gold": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""
  },
  {
    "index": 771,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
    "pred": "SELECT count ( distinct language ) from countrylanguage join country on countrylanguage.countrycode = country.code where indepyear < 1930 and isofficial = 'T';",
    "gold": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""
  },
  {
    "index": 772,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "hard",
    "question": "What are the countries that have greater surface area than any country in Europe?",
    "pred": "SELECT name from country where surfacearea > ( select max ( surfacearea ) from country where continent = 'Europe' )",
    "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"
  },
  {
    "index": 773,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "hard",
    "question": "Which countries have greater area than that of any country in Europe?",
    "pred": "SELECT name from country where surfacearea > ( select max ( surfacearea ) from country where continent = 'Europe' );",
    "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"
  },
  {
    "index": 774,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "What are the African countries that have a  population less than any country in Asia?",
    "pred": "SELECT name from country where population < ( select min ( population ) from country where continent = 'Asia' ) and continent = 'Africa'",
    "gold": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")"
  },
  {
    "index": 775,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "Which African countries have a smaller population than that of any country in Asia?",
    "pred": "SELECT name from country where continent = 'Africa' and population < ( select min ( population ) from country where continent = 'Asia' );",
    "gold": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")"
  },
  {
    "index": 776,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "Which Asian countries have a population that is larger than any country in Africa?",
    "pred": "SELECT name from country where continent = 'Asia' and population > ( select max ( population ) from country where continent = 'Africa' );",
    "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")"
  },
  {
    "index": 777,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
    "pred": "SELECT name from country where continent = 'Asia' and population > ( select max ( population ) from country where continent = 'Africa' );",
    "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")"
  },
  {
    "index": 778,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "hard",
    "question": "What are the country codes for countries that do not speak English?",
    "pred": "SELECT code from country except select countrycode from countrylanguage where language = 'english';",
    "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
  },
  {
    "index": 779,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "hard",
    "question": "Return the country codes for countries that do not speak English.",
    "pred": "SELECT countrycode from countrylanguage where language != 'english'",
    "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
  },
  {
    "index": 780,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "easy",
    "question": "What are the country codes of countries where people use languages other than English?",
    "pred": "SELECT distinct countrycode from countrylanguage where language != 'english';",
    "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""
  },
  {
    "index": 781,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "easy",
    "question": "Give the country codes for countries in which people speak langauges that are not English.",
    "pred": "SELECT distinct countrycode from countrylanguage where language != 'english'",
    "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""
  },
  {
    "index": 782,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "hard",
    "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
    "pred": "SELECT code from country except select countrycode from countrylanguage where language = 'English' except select code from country where governmentform = 'Republic';",
    "gold": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
  },
  {
    "index": 783,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "hard",
    "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
    "pred": "SELECT code from country except select countrycode from countrylanguage where language = 'English' and isofficial = 'T' except select code from country where governmentform = 'Republic';",
    "gold": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
  },
  {
    "index": 784,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "Which cities are in European countries where English is not the official language?",
    "pred": "SELECT city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode join country on city.countrycode = country.code where country.continent = 'Europe' and countrylanguage.language != 'english' and countrylanguage.isofficial = 'T'",
    "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
  },
  {
    "index": 785,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "What are the names of cities in Europe for which English is not the official language?",
    "pred": "SELECT city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode join country on city.countrycode = country.code where country.continent = 'Europe' and countrylanguage.language = 'english' and countrylanguage.isofficial = 'F'",
    "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
  },
  {
    "index": 786,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "hard",
    "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
    "pred": "SELECT distinct city.name from city join country on city.countrycode = country.code join countrylanguage on countrylanguage.countrycode = country.code where country.continent = 'Asia' and countrylanguage.language = 'Chinese' and countrylanguage.isofficial = 'T'",
    "gold": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\""
  },
  {
    "index": 787,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "hard",
    "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
    "pred": "SELECT distinct city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode join country on city.countrycode = country.code where country.continent = 'Asia' and countrylanguage.language = 'Chinese' and countrylanguage.isofficial = 'T'",
    "gold": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\""
  },
  {
    "index": 788,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "What are the name, independence year, and surface area of the country with the smallest population?",
    "pred": "SELECT name , indepyear , surfacearea from country order by population asc limit 1",
    "gold": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"
  },
  {
    "index": 789,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
    "pred": "SELECT name , indepyear , surfacearea from country order by population asc limit 1",
    "gold": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"
  },
  {
    "index": 790,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "What are the population, name and leader of the country with the largest area?",
    "pred": "SELECT name , headofstate , population from country order by surfacearea desc limit 1",
    "gold": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"
  },
  {
    "index": 791,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "Give the name, population, and head of state for the country that has the largest area.",
    "pred": "SELECT name , population , headofstate from country order by surfacearea desc limit 1",
    "gold": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"
  },
  {
    "index": 792,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
    "pred": "SELECT country . name , count ( * ) from countrylanguage join country on countrylanguage . countrycode = country . code group by countrylanguage . countrycode having count ( * ) >= 3 ;",
    "gold": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"
  },
  {
    "index": 793,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
    "pred": "SELECT count ( * ) , country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by countrylanguage.countrycode having count ( * ) > 2;",
    "gold": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"
  },
  {
    "index": 794,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
    "pred": "SELECT count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district;",
    "gold": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District"
  },
  {
    "index": 795,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "How many cities in each district have a population that is above the average population across all cities?",
    "pred": "SELECT count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district ;",
    "gold": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District"
  },
  {
    "index": 796,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
    "pred": "SELECT governmentform , sum ( population ) from country group by governmentform having avg ( lifeexpectancy ) > 72 ;",
    "gold": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"
  },
  {
    "index": 797,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
    "pred": "SELECT governmentform , sum ( population ) from country group by governmentform having avg ( lifeexpectancy ) > 72;",
    "gold": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"
  },
  {
    "index": 798,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
    "pred": "SELECT continent , avg ( population ) , sum ( population ) from country group by continent having avg ( lifeexpectancy ) < 72 ;",
    "gold": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"
  },
  {
    "index": 799,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
    "pred": "SELECT continent , sum ( population ) , avg ( lifeexpectancy ) from country group by continent having avg ( lifeexpectancy ) < 72;",
    "gold": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"
  },
  {
    "index": 800,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "What are the names and areas of countries with the top 5 largest area?",
    "pred": "SELECT name , surfacearea from country order by surfacearea desc limit 5",
    "gold": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"
  },
  {
    "index": 801,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "Return the names and surface areas of the 5 largest countries.",
    "pred": "SELECT name , surfacearea from country order by surfacearea desc limit 5",
    "gold": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"
  },
  {
    "index": 802,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "What are names of countries with the top 3 largest population?",
    "pred": "SELECT name from country order by population desc limit 3",
    "gold": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"
  },
  {
    "index": 803,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "Return the names of the 3 most populated countries.",
    "pred": "SELECT name from country order by population desc limit 3;",
    "gold": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"
  },
  {
    "index": 804,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "What are the names of the nations with the 3 lowest populations?",
    "pred": "SELECT name from country order by population asc limit 3",
    "gold": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"
  },
  {
    "index": 805,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "Return the names of the 3 countries with the fewest people.",
    "pred": "SELECT name from country order by population asc limit 3",
    "gold": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"
  },
  {
    "index": 806,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "easy",
    "question": "how many countries are in Asia?",
    "pred": "SELECT count ( * ) from country where continent = 'Asia'",
    "gold": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""
  },
  {
    "index": 807,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "easy",
    "question": "Count the number of countries in Asia.",
    "pred": "SELECT count ( * ) from country where continent = 'Asia';",
    "gold": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""
  },
  {
    "index": 808,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
    "pred": "SELECT name from country where continent = 'Europe' and population > 80000",
    "gold": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""
  },
  {
    "index": 809,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
    "pred": "SELECT name from country where continent = 'Europe' and population = 80000",
    "gold": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""
  },
  {
    "index": 810,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "hard",
    "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
    "pred": "SELECT sum ( population ) , avg ( surfacearea ) from country where continent = 'North America' and surfacearea > 3000;",
    "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000"
  },
  {
    "index": 811,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "hard",
    "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
    "pred": "SELECT sum ( population ) , avg ( surfacearea ) from country where continent = 'North America' and surfacearea > 3000;",
    "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000"
  },
  {
    "index": 812,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "easy",
    "question": "What are the cities whose population is between 160000 and 900000?",
    "pred": "SELECT name from city where population between 160000 and 900000",
    "gold": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"
  },
  {
    "index": 813,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "easy",
    "question": "Return the names of cities that have a population between 160000 and 900000 .",
    "pred": "SELECT name from city where population between 160000 and 900000",
    "gold": "select name from city where population between 160000 and 900000"
  },
  {
    "index": 814,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "hard",
    "question": "Which language is spoken by the largest number of countries?",
    "pred": "SELECT language from countrylanguage where isofficial = 'T' group by language order by count ( * ) desc limit 1",
    "gold": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 815,
    "correct": true,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "hard",
    "question": "Give the language that is spoken in the most countries.",
    "pred": "SELECT language from countrylanguage group by language order by count ( * ) desc limit 1;",
    "gold": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 816,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "What is the language spoken by the largest percentage of people in each country?",
    "pred": "SELECT country.name , countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.isofficial = 'T' group by country.name order by percentage desc , country.name asc;",
    "gold": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode"
  },
  {
    "index": 817,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
    "pred": "SELECT countrycode , language from countrylanguage where ( countrycode , percentage ) in ( select countrycode , max ( percentage ) from countrylanguage group by countrycode );",
    "gold": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode"
  },
  {
    "index": 818,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
    "pred": "SELECT count ( * ) from countrylanguage where language = 'spanish' and isofficial = 'T'",
    "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
  },
  {
    "index": 819,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "extra",
    "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
    "pred": "SELECT count ( * ) from countrylanguage where language = 'spanish' and isofficial = 'T';",
    "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
  },
  {
    "index": 820,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
    "pred": "SELECT countrycode from countrylanguage where language = 'spanish' order by percentage desc limit 1;",
    "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
  },
  {
    "index": 821,
    "correct": false,
    "db_id": "world_1",
    "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
    "difficulty": "medium",
    "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
    "pred": "SELECT countrycode from countrylanguage where language = 'spanish' and isofficial = 'T';",
    "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
  },
  {
    "index": 822,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "easy",
    "question": "How many conductors are there?",
    "pred": "SELECT count ( * ) from conductor",
    "gold": "SELECT count(*) FROM conductor"
  },
  {
    "index": 823,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "easy",
    "question": "Count the number of conductors.",
    "pred": "SELECT count ( * ) from conductor",
    "gold": "SELECT count(*) FROM conductor"
  },
  {
    "index": 824,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "easy",
    "question": "List the names of conductors in ascending order of age.",
    "pred": "SELECT name from conductor order by age asc",
    "gold": "SELECT Name FROM conductor ORDER BY Age ASC"
  },
  {
    "index": 825,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "easy",
    "question": "What are the names of conductors, ordered by age?",
    "pred": "SELECT name from conductor order by age asc",
    "gold": "SELECT Name FROM conductor ORDER BY Age ASC"
  },
  {
    "index": 826,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "easy",
    "question": "What are the names of conductors whose nationalities are not \"USA\"?",
    "pred": "SELECT name from conductor where nationality != 'USA'",
    "gold": "SELECT Name FROM conductor WHERE Nationality != 'USA'"
  },
  {
    "index": 827,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "easy",
    "question": "Return the names of conductors that do not have the nationality \"USA\".",
    "pred": "SELECT name from conductor where nationality != 'USA'",
    "gold": "SELECT Name FROM conductor WHERE Nationality != 'USA'"
  },
  {
    "index": 828,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "easy",
    "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
    "pred": "SELECT record_company from orchestra order by year_of_founded desc",
    "gold": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"
  },
  {
    "index": 829,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "easy",
    "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
    "pred": "SELECT record_company from orchestra order by year_of_founded desc",
    "gold": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"
  },
  {
    "index": 830,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "easy",
    "question": "What is the average attendance of shows?",
    "pred": "SELECT avg ( attendance ) from show",
    "gold": "SELECT avg(Attendance) FROM SHOW"
  },
  {
    "index": 831,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "easy",
    "question": "Return the average attendance across all shows.",
    "pred": "SELECT avg ( attendance ) from show",
    "gold": "SELECT avg(Attendance) FROM SHOW"
  },
  {
    "index": 832,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "medium",
    "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
    "pred": "SELECT max ( share ) , min ( share ) from performance where type != 'Live final';",
    "gold": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""
  },
  {
    "index": 833,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "medium",
    "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
    "pred": "SELECT max ( share ) , min ( share ) from performance where type != 'Live final'",
    "gold": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""
  },
  {
    "index": 834,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "easy",
    "question": "How many different nationalities do conductors have?",
    "pred": "SELECT count ( distinct nationality ) from conductor",
    "gold": "SELECT count(DISTINCT Nationality) FROM conductor"
  },
  {
    "index": 835,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "easy",
    "question": "Count the number of different nationalities of conductors.",
    "pred": "SELECT count ( distinct nationality ) from conductor",
    "gold": "SELECT count(DISTINCT Nationality) FROM conductor"
  },
  {
    "index": 836,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "easy",
    "question": "List names of conductors in descending order of years of work.",
    "pred": "SELECT name from conductor order by year_of_work desc",
    "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"
  },
  {
    "index": 837,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "easy",
    "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
    "pred": "SELECT name from conductor order by year_of_work desc",
    "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"
  },
  {
    "index": 838,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "medium",
    "question": "List the name of the conductor with the most years of work.",
    "pred": "SELECT name from conductor order by year_of_work desc limit 1",
    "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"
  },
  {
    "index": 839,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "medium",
    "question": "What is the name of the conductor who has worked the greatest number of years?",
    "pred": "SELECT name from conductor order by year_of_work desc limit 1",
    "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"
  },
  {
    "index": 840,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "medium",
    "question": "Show the names of conductors and the orchestras they have conducted.",
    "pred": "SELECT conductor.name , orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id",
    "gold": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"
  },
  {
    "index": 841,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "medium",
    "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
    "pred": "SELECT conductor.name , orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id",
    "gold": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"
  },
  {
    "index": 842,
    "correct": false,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "medium",
    "question": "Show the names of conductors that have conducted more than one orchestras.",
    "pred": "SELECT conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.name having count ( * ) > 1",
    "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"
  },
  {
    "index": 843,
    "correct": false,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "medium",
    "question": "What are the names of conductors who have conducted at more than one orchestra?",
    "pred": "SELECT conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.name having count ( * ) > 1 ;",
    "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"
  },
  {
    "index": 844,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "extra",
    "question": "Show the name of the conductor that has conducted the most number of orchestras.",
    "pred": "SELECT conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.conductor_id order by count ( * ) desc limit 1",
    "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "index": 845,
    "correct": false,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "extra",
    "question": "What is the name of the conductor who has conducted the most orchestras?",
    "pred": "SELECT conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.name order by count ( * ) desc limit 1",
    "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "index": 846,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "medium",
    "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
    "pred": "SELECT conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id where orchestra.year_of_founded > 2008",
    "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"
  },
  {
    "index": 847,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "medium",
    "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
    "pred": "SELECT conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id where orchestra.year_of_founded > 2008",
    "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"
  },
  {
    "index": 848,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "medium",
    "question": "Please show the different record companies and the corresponding number of orchestras.",
    "pred": "SELECT record_company , count ( * ) from orchestra group by record_company;",
    "gold": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company"
  },
  {
    "index": 849,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "medium",
    "question": "How many orchestras does each record company manage?",
    "pred": "SELECT count ( * ) , record_company from orchestra group by record_company;",
    "gold": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company"
  },
  {
    "index": 850,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "medium",
    "question": "Please show the record formats of orchestras in ascending order of count.",
    "pred": "SELECT major_record_format from orchestra group by major_record_format order by count ( * ) asc;",
    "gold": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"
  },
  {
    "index": 851,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "medium",
    "question": "What are the major record formats of orchestras, sorted by their frequency?",
    "pred": "SELECT major_record_format from orchestra group by major_record_format order by count ( * ) asc",
    "gold": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"
  },
  {
    "index": 852,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "hard",
    "question": "List the record company shared by the most number of orchestras.",
    "pred": "SELECT record_company from orchestra group by record_company order by count ( * ) desc limit 1",
    "gold": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "index": 853,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "hard",
    "question": "What is the record company used by the greatest number of orchestras?",
    "pred": "SELECT record_company from orchestra group by record_company order by count ( * ) desc limit 1",
    "gold": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "index": 854,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "hard",
    "question": "List the names of orchestras that have no performance.",
    "pred": "SELECT orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )",
    "gold": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"
  },
  {
    "index": 855,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "hard",
    "question": "What are the orchestras that do not have any performances?",
    "pred": "SELECT orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )",
    "gold": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"
  },
  {
    "index": 856,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "hard",
    "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
    "pred": "SELECT record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003",
    "gold": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003"
  },
  {
    "index": 857,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "hard",
    "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
    "pred": "SELECT record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003",
    "gold": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003"
  },
  {
    "index": 858,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "medium",
    "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
    "pred": "SELECT count ( * ) from orchestra where major_record_format = 'CD' or major_record_format = 'DVD';",
    "gold": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\""
  },
  {
    "index": 859,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "medium",
    "question": "Count the number of orchestras that have CD or DVD as their record format.",
    "pred": "SELECT count ( * ) from orchestra where major_record_format = 'CD' or major_record_format = 'DVD'",
    "gold": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\""
  },
  {
    "index": 860,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "medium",
    "question": "Show the years in which orchestras that have given more than one performance are founded.",
    "pred": "SELECT year_of_founded from orchestra where orchestra_id in ( select orchestra_id from performance group by orchestra_id having count ( * ) > 1 )",
    "gold": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1"
  },
  {
    "index": 861,
    "correct": true,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id , name , age , nationality , year_of_work )\n# orchestra ( orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format )\n# performance ( performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share )\n# show ( show_id , performance_id , if_first_show , result , attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id\n",
    "difficulty": "medium",
    "question": "What are years of founding for orchestras that have had more than a single performance?",
    "pred": "SELECT orchestra.year_of_founded from orchestra join performance on orchestra.orchestra_id = performance.orchestra_id group by performance.orchestra_id having count ( * ) > 1",
    "gold": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1"
  },
  {
    "index": 862,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "easy",
    "question": "How many high schoolers are there?",
    "pred": "SELECT count ( * ) from highschooler",
    "gold": "SELECT count(*) FROM Highschooler"
  },
  {
    "index": 863,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "easy",
    "question": "Count the number of high schoolers.",
    "pred": "SELECT count ( * ) from highschooler",
    "gold": "SELECT count(*) FROM Highschooler"
  },
  {
    "index": 864,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "medium",
    "question": "Show the names and grades of each high schooler.",
    "pred": "SELECT name , grade from highschooler",
    "gold": "SELECT name ,  grade FROM Highschooler"
  },
  {
    "index": 865,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "medium",
    "question": "What are the names and grades for each high schooler?",
    "pred": "SELECT name , grade from highschooler",
    "gold": "SELECT name ,  grade FROM Highschooler"
  },
  {
    "index": 866,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "easy",
    "question": "Show all the grades of the high schoolers.",
    "pred": "SELECT distinct grade from highschooler",
    "gold": "SELECT grade FROM Highschooler"
  },
  {
    "index": 867,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "easy",
    "question": "What is the grade of each high schooler?",
    "pred": "SELECT grade from highschooler",
    "gold": "SELECT grade FROM Highschooler"
  },
  {
    "index": 868,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "easy",
    "question": "What grade is Kyle in?",
    "pred": "SELECT grade from highschooler where name = 'Kyle';",
    "gold": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\""
  },
  {
    "index": 869,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "easy",
    "question": "Return the grade for the high schooler named Kyle.",
    "pred": "SELECT grade from highschooler where name = 'Kyle'",
    "gold": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\""
  },
  {
    "index": 870,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "easy",
    "question": "Show the names of all high schoolers in grade 10.",
    "pred": "SELECT name from highschooler where grade = 10",
    "gold": "SELECT name FROM Highschooler WHERE grade  =  10"
  },
  {
    "index": 871,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "easy",
    "question": "What are the names of all high schoolers in grade 10?",
    "pred": "SELECT name from highschooler where grade = 10",
    "gold": "SELECT name FROM Highschooler WHERE grade  =  10"
  },
  {
    "index": 872,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "easy",
    "question": "Show the ID of the high schooler named Kyle.",
    "pred": "SELECT id from highschooler where name = 'Kyla';",
    "gold": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\""
  },
  {
    "index": 873,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "easy",
    "question": "What is Kyle's id?",
    "pred": "SELECT id from highschooler where name = 'Kyla';",
    "gold": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\""
  },
  {
    "index": 874,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "medium",
    "question": "How many high schoolers are there in grade 9 or 10?",
    "pred": "SELECT count ( * ) from highschooler where grade = 9 or grade = 10",
    "gold": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10"
  },
  {
    "index": 875,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "medium",
    "question": "Count the number of high schoolers in grades 9 or 10.",
    "pred": "SELECT count ( * ) from highschooler where grade = 9 or grade = 10",
    "gold": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10"
  },
  {
    "index": 876,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "medium",
    "question": "Show the number of high schoolers for each grade.",
    "pred": "SELECT count ( * ) , grade from highschooler group by grade;",
    "gold": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade"
  },
  {
    "index": 877,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "medium",
    "question": "How many high schoolers are in each grade?",
    "pred": "SELECT count ( * ) , grade from highschooler group by grade",
    "gold": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade"
  },
  {
    "index": 878,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "hard",
    "question": "Which grade has the most high schoolers?",
    "pred": "SELECT grade from highschooler group by grade order by count ( * ) desc limit 1",
    "gold": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 879,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "hard",
    "question": "Return the grade that has the greatest number of high schoolers.",
    "pred": "SELECT grade from highschooler group by grade order by count ( * ) desc limit 1",
    "gold": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 880,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "easy",
    "question": "Show me all grades that have at least 4 students.",
    "pred": "SELECT grade from highschooler group by grade having count ( * ) >= 4",
    "gold": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4"
  },
  {
    "index": 881,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "easy",
    "question": "Which grades have 4 or more high schoolers?",
    "pred": "SELECT grade from highschooler group by grade having count ( * ) >= 4",
    "gold": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4"
  },
  {
    "index": 882,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "medium",
    "question": "Show the student IDs and numbers of friends corresponding to each.",
    "pred": "SELECT student_id , count ( * ) from friend group by student_id",
    "gold": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id"
  },
  {
    "index": 883,
    "correct": false,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "medium",
    "question": "How many friends does each student have?",
    "pred": "SELECT student_id , count ( * ) from friend group by student_id order by count ( * ) asc limit 1 ;",
    "gold": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id"
  },
  {
    "index": 884,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "medium",
    "question": "Show the names of high school students and their corresponding number of friends.",
    "pred": "SELECT highschooler.name , count ( * ) from friend join highschooler on friend.student_id = highschooler.id group by highschooler.id",
    "gold": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
  },
  {
    "index": 885,
    "correct": false,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "medium",
    "question": "What are the names of the high schoolers and how many friends does each have?",
    "pred": "SELECT highschooler.name , count ( * ) from friend join highschooler on friend.friend_id = highschooler.id group by highschooler.name;",
    "gold": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
  },
  {
    "index": 886,
    "correct": false,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "extra",
    "question": "What is the name of the high schooler who has the greatest number of friends?",
    "pred": "SELECT highschooler.name from friend join highschooler on friend.friend_id = highschooler.id group by friend.student_id order by count ( * ) desc limit 1",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 887,
    "correct": false,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "extra",
    "question": "Return the name of the high school student with the most friends.",
    "pred": "SELECT highschooler.name from friend join highschooler on friend.friend_id = highschooler.id group by friend.student_id order by count ( * ) desc limit 1",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 888,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "medium",
    "question": "Show the names of high schoolers who have at least 3 friends.",
    "pred": "SELECT name from highschooler where id in ( select student_id from friend group by student_id having count ( * ) >= 3 )",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3"
  },
  {
    "index": 889,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "medium",
    "question": "What are the names of high schoolers who have 3 or more friends?",
    "pred": "SELECT highschooler.name from friend join highschooler on friend.student_id = highschooler.id group by friend.student_id having count ( * ) >= 3",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3"
  },
  {
    "index": 890,
    "correct": false,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "hard",
    "question": "Show the names of all of the high schooler Kyle's friends.",
    "pred": "SELECT highschooler.name from friend join highschooler on friend.friend_id = highschooler.id where friend.student_id = ( select id from highschooler where name = 'Kyle' )",
    "gold": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""
  },
  {
    "index": 891,
    "correct": false,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "hard",
    "question": "Return the names of friends of the high school student Kyle.",
    "pred": "SELECT highschooler.name from friend join highschooler on friend.friend_id = highschooler.id where highschooler.name = 'Kyle';",
    "gold": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""
  },
  {
    "index": 892,
    "correct": false,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "medium",
    "question": "How many friends does the high school student Kyle have?",
    "pred": "SELECT count ( * ) from highschooler join friend on highschooler.id = friend.friend_id where highschooler.name = 'Kyle';",
    "gold": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
  },
  {
    "index": 893,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "medium",
    "question": "Count the number of friends Kyle has.",
    "pred": "SELECT count ( * ) from highschooler join friend on highschooler.id = friend.student_id where highschooler.name = 'Kyle';",
    "gold": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
  },
  {
    "index": 894,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "hard",
    "question": "Show ids of all students who do not have any friends.",
    "pred": "SELECT id from highschooler where id not in ( select student_id from friend )",
    "gold": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"
  },
  {
    "index": 895,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "hard",
    "question": "What are the ids of high school students who do not have friends?",
    "pred": "SELECT id from highschooler except select student_id from friend",
    "gold": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"
  },
  {
    "index": 896,
    "correct": false,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "hard",
    "question": "Show names of all high school students who do not have any friends.",
    "pred": "SELECT name from highschooler where id not in ( select student_id from friend )",
    "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"
  },
  {
    "index": 897,
    "correct": false,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "hard",
    "question": "What are the names of students who have no friends?",
    "pred": "SELECT name from highschooler where id not in ( select student_id from friend )",
    "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"
  },
  {
    "index": 898,
    "correct": false,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "hard",
    "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
    "pred": "SELECT distinct highschooler.id from friend join likes on friend.friend_id = likes.student_id and friend.student_id != likes.liked_id",
    "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"
  },
  {
    "index": 899,
    "correct": false,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "hard",
    "question": "What are the ids of students who both have friends and are liked?",
    "pred": "SELECT student_id from friend intersect select student_id from likes",
    "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"
  },
  {
    "index": 900,
    "correct": false,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "hard",
    "question": "Show name of all students who have some friends and also are liked by someone else.",
    "pred": "SELECT highschooler.name from friend join likes on friend.student_id = likes.student_id join highschooler on likes.liked_id = highschooler.id intersect select highschooler.name from friend join likes on friend.friend_id = likes.student_id join highschooler on likes.liked_id = highschooler.id;",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"
  },
  {
    "index": 901,
    "correct": false,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "hard",
    "question": "What are the names of high schoolers who both have friends and are liked?",
    "pred": "SELECT highschooler.name from highschooler join friend on highschooler.id = friend.student_id join likes on highschooler.id = likes.student_id;",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"
  },
  {
    "index": 902,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "medium",
    "question": "Count the number of likes for each student id.",
    "pred": "SELECT student_id , count ( * ) from likes group by student_id",
    "gold": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id"
  },
  {
    "index": 903,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "medium",
    "question": "How many likes correspond to each student id?",
    "pred": "SELECT student_id , count ( * ) from likes group by student_id ;",
    "gold": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id"
  },
  {
    "index": 904,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "medium",
    "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
    "pred": "SELECT highschooler.name , count ( * ) from likes join highschooler on highschooler.id = likes.student_id group by likes.student_id;",
    "gold": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
  },
  {
    "index": 905,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "medium",
    "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
    "pred": "SELECT highschooler.name , count ( * ) from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id;",
    "gold": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
  },
  {
    "index": 906,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "extra",
    "question": "What is the name of the high schooler who has the greatest number of likes?",
    "pred": "SELECT highschooler.name from likes join highschooler on likes.student_id = highschooler.id group by likes.student_id order by count ( * ) desc limit 1",
    "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 907,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "extra",
    "question": "Give the name of the student with the most likes.",
    "pred": "SELECT name from highschooler where id in ( select student_id from likes group by student_id order by count ( * ) desc limit 1 );",
    "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 908,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "medium",
    "question": "Show the names of students who have at least 2 likes.",
    "pred": "SELECT name from highschooler where id in ( select student_id from likes group by student_id having count ( * ) >= 2 )",
    "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2"
  },
  {
    "index": 909,
    "correct": false,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "medium",
    "question": "What are the names of students who have 2 or more likes?",
    "pred": "SELECT highschooler.name from likes join highschooler on likes.liked_id = highschooler.id group by likes.student_id having count ( * ) >= 2 ;",
    "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2"
  },
  {
    "index": 910,
    "correct": false,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "hard",
    "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
    "pred": "SELECT highschooler.name from friend join highschooler on friend.friend_id = highschooler.id where highschooler.grade > 5 group by friend.student_id having count ( * ) >= 2 ;",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2"
  },
  {
    "index": 911,
    "correct": false,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "hard",
    "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
    "pred": "SELECT highschooler.name from friend join highschooler on friend.friend_id = highschooler.id where highschooler.grade > 5 group by friend.student_id having count ( * ) >= 2 ;",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2"
  },
  {
    "index": 912,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "medium",
    "question": "How many likes does Kyle have?",
    "pred": "SELECT count ( * ) from likes join highschooler on likes.student_id = highschooler.id where highschooler.name = 'Kyle';",
    "gold": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
  },
  {
    "index": 913,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "medium",
    "question": "Return the number of likes that the high schooler named Kyle has.",
    "pred": "SELECT count ( * ) from likes join highschooler on likes.student_id = highschooler.id where highschooler.name = 'Kyle';",
    "gold": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
  },
  {
    "index": 914,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "hard",
    "question": "Find the average grade of all students who have some friends.",
    "pred": "SELECT avg ( grade ) from highschooler where id in ( select student_id from friend )",
    "gold": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
  },
  {
    "index": 915,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "hard",
    "question": "What is the average grade of students who have friends?",
    "pred": "SELECT avg ( grade ) from highschooler where id in ( select student_id from friend )",
    "gold": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
  },
  {
    "index": 916,
    "correct": true,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "extra",
    "question": "Find the minimum grade of students who have no friends.",
    "pred": "SELECT min ( grade ) from highschooler where id not in ( select student_id from friend );",
    "gold": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
  },
  {
    "index": 917,
    "correct": false,
    "db_id": "network_1",
    "db_info": "# highschooler ( id , name , grade )\n# friend ( student_id , friend_id )\n# likes ( student_id , liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id\n",
    "difficulty": "extra",
    "question": "What is the lowest grade of students who do not have any friends?",
    "pred": "SELECT grade from highschooler where id not in ( select student_id from friend ) order by grade asc limit 1",
    "gold": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
  },
  {
    "index": 918,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "hard",
    "question": "Which states have both owners and professionals living there?",
    "pred": "SELECT state from owners intersect select state from professionals",
    "gold": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals"
  },
  {
    "index": 919,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "hard",
    "question": "Find the states where both owners and professionals live.",
    "pred": "SELECT state from owners intersect select state from professionals",
    "gold": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals"
  },
  {
    "index": 920,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "hard",
    "question": "What is the average age of the dogs who have gone through any treatments?",
    "pred": "SELECT avg ( age ) from dogs where dog_id in ( select dog_id from treatments )",
    "gold": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )"
  },
  {
    "index": 921,
    "correct": false,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "hard",
    "question": "Find the average age of the dogs who went through treatments.",
    "pred": "SELECT avg ( date_of_birth ) from dogs where dog_id in ( select dog_id from treatments )",
    "gold": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )"
  },
  {
    "index": 922,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
    "pred": "SELECT professional_id , last_name , cell_number from professionals where state = 'Indiana' or professional_id in ( select professional_id from treatments group by professional_id having count ( * ) > 2 )",
    "gold": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"
  },
  {
    "index": 923,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
    "pred": "SELECT professional_id , last_name , cell_number from professionals where state = 'Indiana' or professional_id in ( select professional_id from treatments group by professional_id having count ( * ) > 2 )",
    "gold": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"
  },
  {
    "index": 924,
    "correct": false,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "hard",
    "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
    "pred": "SELECT name from dogs group by name having sum ( cost_of_treatment ) > 1000",
    "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )"
  },
  {
    "index": 925,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "hard",
    "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
    "pred": "SELECT name from dogs where dog_id not in ( select dogs.dog_id from dogs join treatments on dogs.dog_id = treatments.dog_id group by dogs.dog_id having sum ( cost_of_treatment ) > 1000 )",
    "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )"
  },
  {
    "index": 926,
    "correct": false,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "hard",
    "question": "Which first names are used for professionals or owners but are not used as dog names?",
    "pred": "SELECT first_name from owners intersect select first_name from professionals except select name from dogs",
    "gold": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"
  },
  {
    "index": 927,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "hard",
    "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
    "pred": "SELECT first_name from owners where first_name not in ( select name from dogs ) union select first_name from professionals where first_name not in ( select name from dogs );",
    "gold": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"
  },
  {
    "index": 928,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
    "pred": "SELECT professional_id , role_code , email_address from professionals where professional_id not in ( select professional_id from treatments )",
    "gold": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"
  },
  {
    "index": 929,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
    "pred": "SELECT professional_id , role_code , email_address from professionals where professional_id not in ( select professional_id from treatments )",
    "gold": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"
  },
  {
    "index": 930,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
    "pred": "SELECT owners.owner_id , owners.first_name , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id group by owners.owner_id order by count ( * ) desc limit 1",
    "gold": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 931,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
    "pred": "SELECT owners.owner_id , owners.first_name , owners.last_name from dogs join owners on dogs.owner_id = owners.owner_id group by owners.owner_id order by count ( * ) desc limit 1",
    "gold": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 932,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
    "pred": "SELECT professionals.professional_id , professionals.role_code , professionals.first_name from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2",
    "gold": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
  },
  {
    "index": 933,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
    "pred": "SELECT professionals.professional_id , professionals.role_code , professionals.first_name from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2",
    "gold": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
  },
  {
    "index": 934,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "What is the name of the breed with the most dogs?",
    "pred": "SELECT breeds.breed_name from dogs join breeds on dogs.breed_code = breeds.breed_code group by breeds.breed_name order by count ( * ) desc limit 1",
    "gold": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 935,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "Which breed do the most dogs have? Give me the breed name.",
    "pred": "SELECT breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_name order by count ( * ) desc limit 1",
    "gold": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 936,
    "correct": false,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
    "pred": "SELECT owners.owner_id , owners.last_name from treatments join dogs on treatments.dog_id = dogs.dog_id join owners on dogs.owner_id = owners.owner_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1",
    "gold": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 937,
    "correct": false,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
    "pred": "SELECT owners.owner_id , owners.last_name from treatments join dogs on treatments.dog_id = dogs.dog_id join owners on dogs.owner_id = owners.owner_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1",
    "gold": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 938,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "What is the description of the treatment type that costs the least money in total?",
    "pred": "SELECT treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatments.treatment_type_code order by sum ( cost_of_treatment ) asc limit 1 ;",
    "gold": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"
  },
  {
    "index": 939,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "Give me the description of the treatment type whose total cost is the lowest.",
    "pred": "SELECT treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatments.treatment_type_code order by sum ( treatments.cost_of_treatment ) asc limit 1",
    "gold": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"
  },
  {
    "index": 940,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
    "pred": "SELECT owners.owner_id , owners.zip_code from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1",
    "gold": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"
  },
  {
    "index": 941,
    "correct": false,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
    "pred": "SELECT dogs.owner_id , owners.zip_code from dogs join owners on dogs.owner_id = owners.owner_id group by dogs.owner_id order by sum ( dogs.weight ) desc limit 1",
    "gold": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"
  },
  {
    "index": 942,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
    "pred": "SELECT professionals.professional_id , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( distinct treatment_type_code ) >= 2",
    "gold": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
  },
  {
    "index": 943,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
    "pred": "SELECT professionals.professional_id , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( distinct treatment_type_code ) >= 2",
    "gold": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
  },
  {
    "index": 944,
    "correct": false,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
    "pred": "SELECT distinct professionals.first_name , professionals.last_name from professionals join treatments on professionals.professional_id = treatments.professional_id where treatments.cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )",
    "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"
  },
  {
    "index": 945,
    "correct": false,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
    "pred": "SELECT distinct professionals.first_name , professionals.last_name from professionals join treatments on professionals.professional_id = treatments.professional_id where treatments.cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )",
    "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"
  },
  {
    "index": 946,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "List the date of each treatment, together with the first name of the professional who operated it.",
    "pred": "SELECT treatments.date_of_treatment , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id",
    "gold": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"
  },
  {
    "index": 947,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "What are the date and the operating professional's first name of each treatment?",
    "pred": "SELECT date_of_treatment , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id",
    "gold": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"
  },
  {
    "index": 948,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "List the cost of each treatment and the corresponding treatment type description.",
    "pred": "SELECT treatments.cost_of_treatment , treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code",
    "gold": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"
  },
  {
    "index": 949,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "What are the cost and treatment type description of each treatment?",
    "pred": "SELECT treatments.cost_of_treatment , treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code",
    "gold": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"
  },
  {
    "index": 950,
    "correct": false,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "List each owner's first name, last name, and the size of his for her dog.",
    "pred": "SELECT distinct owners.first_name , owners.last_name , sizes.size_description from dogs join owners on dogs.owner_id = owners.owner_id join sizes on dogs.size_code = sizes.size_code",
    "gold": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"
  },
  {
    "index": 951,
    "correct": false,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "What are each owner's first name, last name, and the size of their dog?",
    "pred": "SELECT owners.first_name , owners.last_name , sizes.size_description from dogs join owners on dogs.owner_id = owners.owner_id join sizes on dogs.size_code = sizes.size_code",
    "gold": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"
  },
  {
    "index": 952,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "List pairs of the owner's first name and the dogs's name.",
    "pred": "SELECT owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id",
    "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"
  },
  {
    "index": 953,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "What are each owner's first name and their dogs's name?",
    "pred": "SELECT distinct owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id",
    "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"
  },
  {
    "index": 954,
    "correct": false,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
    "pred": "SELECT dogs.name , treatments.date_of_treatment from dogs join treatments on dogs.dog_id = treatments.dog_id join breeds on dogs.breed_code = breeds.breed_code where breeds.breed_name = ( select breed_name from breeds group by breed_name order by count ( * ) asc limit 1 )",
    "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"
  },
  {
    "index": 955,
    "correct": false,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
    "pred": "SELECT dogs.name , treatments.date_of_treatment from dogs join treatments on dogs.dog_id = treatments.dog_id join breeds on dogs.breed_code = breeds.breed_code where breeds.breed_name = ( select breed_name from breeds group by breed_name order by count ( * ) asc limit 1 )",
    "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"
  },
  {
    "index": 956,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
    "pred": "SELECT owners.first_name , dogs.name from dogs join owners on dogs.owner_id = owners.owner_id where owners.state = 'Virginia'",
    "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"
  },
  {
    "index": 957,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
    "pred": "SELECT owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = 'Virginia' ;",
    "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"
  },
  {
    "index": 958,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
    "pred": "SELECT distinct dogs.date_arrived , dogs.date_departed from dogs join treatments on dogs.dog_id = treatments.dog_id",
    "gold": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"
  },
  {
    "index": 959,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
    "pred": "SELECT dogs.date_arrived , dogs.date_departed from dogs join treatments on dogs.dog_id = treatments.dog_id",
    "gold": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"
  },
  {
    "index": 960,
    "correct": false,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "List the last name of the owner owning the youngest dog.",
    "pred": "SELECT owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id order by dogs.age desc limit 1",
    "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"
  },
  {
    "index": 961,
    "correct": false,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "Who owns the youngest dog? Give me his or her last name.",
    "pred": "SELECT owners.first_name from owners join dogs on owners.owner_id = dogs.owner_id order by dogs.age desc limit 1",
    "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"
  },
  {
    "index": 962,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
    "pred": "SELECT email_address from professionals where state = 'HI' or state = 'WI'",
    "gold": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'"
  },
  {
    "index": 963,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
    "pred": "SELECT email_address from professionals where state = 'Hawaii' or state = 'Wisconsin'",
    "gold": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'"
  },
  {
    "index": 964,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "What are the arriving date and the departing date of all the dogs?",
    "pred": "SELECT date_arrived , date_departed from dogs",
    "gold": "SELECT date_arrived ,  date_departed FROM Dogs"
  },
  {
    "index": 965,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "List the arrival date and the departure date for all the dogs.",
    "pred": "SELECT date_arrived , date_departed from dogs",
    "gold": "SELECT date_arrived ,  date_departed FROM Dogs"
  },
  {
    "index": 966,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "easy",
    "question": "How many dogs went through any treatments?",
    "pred": "SELECT count ( distinct dog_id ) from treatments",
    "gold": "SELECT count(DISTINCT dog_id) FROM Treatments"
  },
  {
    "index": 967,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "easy",
    "question": "Count the number of dogs that went through a treatment.",
    "pred": "SELECT count ( distinct dog_id ) from treatments",
    "gold": "SELECT count(DISTINCT dog_id) FROM Treatments"
  },
  {
    "index": 968,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "easy",
    "question": "How many professionals have performed any treatment to dogs?",
    "pred": "SELECT count ( distinct professional_id ) from treatments",
    "gold": "SELECT count(DISTINCT professional_id) FROM Treatments"
  },
  {
    "index": 969,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "easy",
    "question": "Find the number of professionals who have ever treated dogs.",
    "pred": "SELECT count ( distinct professional_id ) from treatments",
    "gold": "SELECT count(DISTINCT professional_id) FROM Treatments"
  },
  {
    "index": 970,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
    "pred": "SELECT role_code , street , city , state from professionals where city like '%West%';",
    "gold": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"
  },
  {
    "index": 971,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
    "pred": "SELECT role_code , street , city , state from professionals where city like '%West%';",
    "gold": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"
  },
  {
    "index": 972,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
    "pred": "SELECT first_name , last_name , email_address from owners where state like '%North%';",
    "gold": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"
  },
  {
    "index": 973,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
    "pred": "SELECT first_name , last_name , email_address from owners where state like '%North%';",
    "gold": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"
  },
  {
    "index": 974,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "hard",
    "question": "How many dogs have an age below the average?",
    "pred": "SELECT count ( * ) from dogs where age < ( select avg ( age ) from dogs )",
    "gold": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )"
  },
  {
    "index": 975,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "hard",
    "question": "Count the number of dogs of an age below the average.",
    "pred": "SELECT count ( * ) from dogs where age < ( select avg ( age ) from dogs );",
    "gold": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )"
  },
  {
    "index": 976,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "How much does the most recent treatment cost?",
    "pred": "SELECT cost_of_treatment from treatments order by date_of_treatment desc limit 1",
    "gold": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"
  },
  {
    "index": 977,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "Show me the cost of the most recently performed treatment.",
    "pred": "SELECT cost_of_treatment from treatments order by date_of_treatment desc limit 1",
    "gold": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"
  },
  {
    "index": 978,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "How many dogs have not gone through any treatment?",
    "pred": "SELECT count ( * ) from dogs where dog_id not in ( select dog_id from treatments )",
    "gold": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )"
  },
  {
    "index": 979,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "Tell me the number of dogs that have not received any treatment .",
    "pred": "SELECT count ( * ) from dogs where dog_id not in ( select dog_id from treatments )",
    "gold": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )"
  },
  {
    "index": 980,
    "correct": false,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "How many owners temporarily do not have any dogs?",
    "pred": "SELECT count ( * ) from owners where owner_id not in ( select owner_id from dogs where date_adopted = '9999-12-31' )",
    "gold": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )"
  },
  {
    "index": 981,
    "correct": false,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "Find the number of owners who do not own any dogs at this moment.",
    "pred": "SELECT count ( * ) from owners where owner_id not in ( select owner_id from dogs where date_departed = 'null' )",
    "gold": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )"
  },
  {
    "index": 982,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "How many professionals did not operate any treatment on dogs?",
    "pred": "SELECT count ( * ) from professionals where professional_id not in ( select professional_id from treatments )",
    "gold": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )"
  },
  {
    "index": 983,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "extra",
    "question": "Find the number of professionals who have not treated any dogs.",
    "pred": "SELECT count ( * ) from professionals where professional_id not in ( select professional_id from treatments )",
    "gold": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )"
  },
  {
    "index": 984,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
    "pred": "SELECT name , age , weight from dogs where abandoned_yn = 1",
    "gold": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"
  },
  {
    "index": 985,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
    "pred": "SELECT name , age , weight from dogs where abandoned_yn = 1",
    "gold": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"
  },
  {
    "index": 986,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "easy",
    "question": "What is the average age of all the dogs?",
    "pred": "SELECT avg ( age ) from dogs",
    "gold": "SELECT avg(age) FROM Dogs"
  },
  {
    "index": 987,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "easy",
    "question": "Compute the average age of all the dogs.",
    "pred": "SELECT avg ( age ) from dogs",
    "gold": "SELECT avg(age) FROM Dogs"
  },
  {
    "index": 988,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "easy",
    "question": "What is the age of the oldest dog?",
    "pred": "SELECT max ( age ) from dogs",
    "gold": "SELECT max(age) FROM Dogs"
  },
  {
    "index": 989,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "easy",
    "question": "Tell me the age of the oldest dog.",
    "pred": "SELECT age from dogs order by age desc limit 1",
    "gold": "SELECT max(age) FROM Dogs"
  },
  {
    "index": 990,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "How much does each charge type costs? List both charge type and amount.",
    "pred": "SELECT charge_type , charge_amount from charges",
    "gold": "SELECT charge_type ,  charge_amount FROM Charges"
  },
  {
    "index": 991,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "List each charge type and its amount.",
    "pred": "SELECT charge_type , charge_amount from charges",
    "gold": "SELECT charge_type ,  charge_amount FROM Charges"
  },
  {
    "index": 992,
    "correct": false,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "easy",
    "question": "How much does the most expensive charge type costs?",
    "pred": "SELECT max ( charge_amount ) from charges where charge_type = 'Adoption';",
    "gold": "SELECT max(charge_amount) FROM Charges"
  },
  {
    "index": 993,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "easy",
    "question": "What is the charge amount of the most expensive charge type?",
    "pred": "SELECT charge_amount from charges order by charge_amount desc limit 1;",
    "gold": "SELECT max(charge_amount) FROM Charges"
  },
  {
    "index": 994,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "List the email, cell phone and home phone of all the professionals.",
    "pred": "SELECT email_address , cell_number , home_phone from professionals",
    "gold": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"
  },
  {
    "index": 995,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "What are the email, cell phone and home phone of each professional?",
    "pred": "SELECT email_address , cell_number , home_phone from professionals",
    "gold": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"
  },
  {
    "index": 996,
    "correct": false,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "What are all the possible breed type and size type combinations?",
    "pred": "SELECT breeds.breed_name , sizes.size_description from breeds cross join sizes",
    "gold": "SELECT DISTINCT breed_code ,  size_code FROM dogs"
  },
  {
    "index": 997,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "Find the distinct breed type and size type combinations for dogs.",
    "pred": "SELECT distinct breed_code , size_code from dogs",
    "gold": "SELECT DISTINCT breed_code ,  size_code FROM dogs"
  },
  {
    "index": 998,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "List the first name of all the professionals along with the description of the treatment they have done.",
    "pred": "SELECT distinct professionals.first_name , treatment_types.treatment_type_description from professionals join treatments on professionals.professional_id = treatments.professional_id join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code",
    "gold": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"
  },
  {
    "index": 999,
    "correct": true,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code , breed_name )\n# charges ( charge_id , charge_type , charge_amount )\n# sizes ( size_code , size_description )\n# treatment_types ( treatment_type_code , treatment_type_description )\n# owners ( owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number )\n# dogs ( dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed )\n# professionals ( professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number )\n# treatments ( treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code\n",
    "difficulty": "medium",
    "question": "What are each professional's first name and description of the treatment they have performed?",
    "pred": "SELECT distinct professionals.first_name , treatment_types.treatment_type_description from professionals join treatments on professionals.professional_id = treatments.professional_id join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code",
    "gold": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"
  },
  {
    "index": 1000,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "easy",
    "question": "How many singers are there?",
    "pred": "SELECT count ( * ) from singer",
    "gold": "SELECT count(*) FROM singer"
  },
  {
    "index": 1001,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "easy",
    "question": "What is the count of singers?",
    "pred": "SELECT count ( * ) from singer",
    "gold": "SELECT count(*) FROM singer"
  },
  {
    "index": 1002,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "easy",
    "question": "List the name of singers in ascending order of net worth.",
    "pred": "SELECT name from singer order by net_worth_millions asc;",
    "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"
  },
  {
    "index": 1003,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "easy",
    "question": "What are the names of singers ordered by ascending net worth?",
    "pred": "SELECT name from singer order by net_worth_millions asc",
    "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"
  },
  {
    "index": 1004,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "medium",
    "question": "What are the birth year and citizenship of singers?",
    "pred": "SELECT birth_year , citizenship from singer",
    "gold": "SELECT Birth_Year ,  Citizenship FROM singer"
  },
  {
    "index": 1005,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "medium",
    "question": "What are the birth years and citizenships of the singers?",
    "pred": "SELECT birth_year , citizenship from singer",
    "gold": "SELECT Birth_Year ,  Citizenship FROM singer"
  },
  {
    "index": 1006,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "easy",
    "question": "List the name of singers whose citizenship is not \"France\".",
    "pred": "SELECT name from singer where citizenship != 'France'",
    "gold": "SELECT Name FROM singer WHERE Citizenship != \"France\""
  },
  {
    "index": 1007,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "easy",
    "question": "What are the names of the singers who are not French citizens?",
    "pred": "SELECT name from singer where citizenship != 'French';",
    "gold": "SELECT Name FROM singer WHERE Citizenship != \"France\""
  },
  {
    "index": 1008,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "medium",
    "question": "Show the name of singers whose birth year is either 1948 or 1949?",
    "pred": "SELECT name from singer where birth_year = 1948 or birth_year = 1949",
    "gold": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"
  },
  {
    "index": 1009,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "medium",
    "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
    "pred": "SELECT name from singer where birth_year = 1948 or birth_year = 1949",
    "gold": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"
  },
  {
    "index": 1010,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "medium",
    "question": "What is the name of the singer with the largest net worth?",
    "pred": "SELECT name from singer order by net_worth_millions desc limit 1",
    "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"
  },
  {
    "index": 1011,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "medium",
    "question": "What is the name of the singer who is worth the most?",
    "pred": "SELECT name from singer order by net_worth_millions desc limit 1",
    "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"
  },
  {
    "index": 1012,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "medium",
    "question": "Show different citizenship of singers and the number of singers of each citizenship.",
    "pred": "SELECT citizenship , count ( * ) from singer group by citizenship;",
    "gold": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship"
  },
  {
    "index": 1013,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "medium",
    "question": "For each citizenship, how many singers are from that country?",
    "pred": "SELECT citizenship , count ( * ) from singer group by citizenship;",
    "gold": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship"
  },
  {
    "index": 1014,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "hard",
    "question": "Please show the most common citizenship of singers.",
    "pred": "SELECT citizenship from singer group by citizenship order by count ( * ) desc limit 1",
    "gold": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "index": 1015,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "hard",
    "question": "What is the most common singer citizenship ?",
    "pred": "SELECT citizenship from singer group by citizenship order by count ( * ) desc limit 1",
    "gold": "select citizenship from singer group by citizenship order by count(*) desc limit 1"
  },
  {
    "index": 1016,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "medium",
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
    "pred": "SELECT max ( net_worth_millions ) , citizenship from singer group by citizenship;",
    "gold": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship"
  },
  {
    "index": 1017,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "medium",
    "question": "For each citizenship, what is the maximum net worth?",
    "pred": "SELECT max ( net_worth_millions ) , citizenship from singer group by citizenship;",
    "gold": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship"
  },
  {
    "index": 1018,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "medium",
    "question": "Show titles of songs and names of singers.",
    "pred": "SELECT title , name from singer join song on singer.singer_id = song.singer_id",
    "gold": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"
  },
  {
    "index": 1019,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "medium",
    "question": "What are the song titles and singer names?",
    "pred": "SELECT song.title , singer.name from song join singer on song.singer_id = singer.singer_id",
    "gold": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"
  },
  {
    "index": 1020,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "medium",
    "question": "Show distinct names of singers that have songs with sales more than 300000.",
    "pred": "SELECT distinct singer.name from song join singer on song.singer_id = singer.singer_id where song.sales > 300000",
    "gold": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"
  },
  {
    "index": 1021,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "medium",
    "question": "what are the different names of the singers that have sales more than 300000?",
    "pred": "SELECT distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000",
    "gold": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"
  },
  {
    "index": 1022,
    "correct": false,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "medium",
    "question": "Show the names of singers that have more than one song.",
    "pred": "SELECT name from singer join song on singer.singer_id = song.singer_id group by song.singer_id having count ( * ) > 1 ;",
    "gold": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
  },
  {
    "index": 1023,
    "correct": false,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "medium",
    "question": "What are the names of the singers that have more than one songs?",
    "pred": "SELECT singer.name from singer join song on singer.singer_id = song.singer_id group by song.singer_id having count ( * ) > 1 ;",
    "gold": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
  },
  {
    "index": 1024,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "medium",
    "question": "Show the names of singers and the total sales of their songs.",
    "pred": "SELECT sum ( song.sales ) , singer.name from song join singer on song.singer_id = singer.singer_id group by singer.name;",
    "gold": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"
  },
  {
    "index": 1025,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "medium",
    "question": "For each singer name, what is the total sales for their songs?",
    "pred": "SELECT sum ( song.sales ) , singer.name from song join singer on song.singer_id = singer.singer_id group by singer.name;",
    "gold": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"
  },
  {
    "index": 1026,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "hard",
    "question": "List the name of singers that do not have any song.",
    "pred": "SELECT name from singer where singer_id not in ( select singer_id from song )",
    "gold": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"
  },
  {
    "index": 1027,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "hard",
    "question": "What is the sname of every sing that does not have any song?",
    "pred": "SELECT name from singer where singer_id not in ( select singer_id from song )",
    "gold": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"
  },
  {
    "index": 1028,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "hard",
    "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
    "pred": "SELECT citizenship from singer where birth_year > 1955 intersect select citizenship from singer where birth_year < 1945",
    "gold": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955"
  },
  {
    "index": 1029,
    "correct": true,
    "db_id": "singer",
    "db_info": "# singer ( singer_id , name , birth_year , net_worth_millions , citizenship )\n# song ( song_id , title , singer_id , sales , highest_position )\n# song.singer_id = singer.singer_id\n",
    "difficulty": "hard",
    "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
    "pred": "SELECT citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955",
    "gold": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955"
  },
  {
    "index": 1030,
    "correct": true,
    "db_id": "real_estate_properties",
    "db_info": "# ref_feature_types ( feature_type_code , feature_type_name )\n# ref_property_types ( property_type_code , property_type_description )\n# other_available_features ( feature_id , feature_type_code , feature_name , feature_description )\n# properties ( property_id , property_type_code , date_on_market , date_sold , property_name , property_address , room_count , vendor_requested_price , buyer_offered_price , agreed_selling_price , apt_feature_1 , apt_feature_2 , apt_feature_3 , fld_feature_1 , fld_feature_2 , fld_feature_3 , hse_feature_1 , hse_feature_2 , hse_feature_3 , oth_feature_1 , oth_feature_2 , oth_feature_3 , shp_feature_1 , shp_feature_2 , shp_feature_3 , other_property_details )\n# other_property_features ( property_id , feature_id , property_feature_description )\n# other_available_features.feature_type_code = ref_feature_types.feature_type_code\n# properties.property_type_code = ref_property_types.property_type_code\n# other_property_features.property_id = properties.property_id\n# other_property_features.feature_id = other_available_features.feature_id\n",
    "difficulty": "easy",
    "question": "How many available features are there in total?",
    "pred": "SELECT count ( * ) from other_available_features",
    "gold": "SELECT count(*) FROM Other_Available_Features"
  },
  {
    "index": 1031,
    "correct": true,
    "db_id": "real_estate_properties",
    "db_info": "# ref_feature_types ( feature_type_code , feature_type_name )\n# ref_property_types ( property_type_code , property_type_description )\n# other_available_features ( feature_id , feature_type_code , feature_name , feature_description )\n# properties ( property_id , property_type_code , date_on_market , date_sold , property_name , property_address , room_count , vendor_requested_price , buyer_offered_price , agreed_selling_price , apt_feature_1 , apt_feature_2 , apt_feature_3 , fld_feature_1 , fld_feature_2 , fld_feature_3 , hse_feature_1 , hse_feature_2 , hse_feature_3 , oth_feature_1 , oth_feature_2 , oth_feature_3 , shp_feature_1 , shp_feature_2 , shp_feature_3 , other_property_details )\n# other_property_features ( property_id , feature_id , property_feature_description )\n# other_available_features.feature_type_code = ref_feature_types.feature_type_code\n# properties.property_type_code = ref_property_types.property_type_code\n# other_property_features.property_id = properties.property_id\n# other_property_features.feature_id = other_available_features.feature_id\n",
    "difficulty": "medium",
    "question": "What is the feature type name of feature AirCon?",
    "pred": "SELECT ref_feature_types.feature_type_name from other_available_features join ref_feature_types on other_available_features.feature_type_code = ref_feature_types.feature_type_code where other_available_features.feature_name = 'AirCon'",
    "gold": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""
  },
  {
    "index": 1032,
    "correct": false,
    "db_id": "real_estate_properties",
    "db_info": "# ref_feature_types ( feature_type_code , feature_type_name )\n# ref_property_types ( property_type_code , property_type_description )\n# other_available_features ( feature_id , feature_type_code , feature_name , feature_description )\n# properties ( property_id , property_type_code , date_on_market , date_sold , property_name , property_address , room_count , vendor_requested_price , buyer_offered_price , agreed_selling_price , apt_feature_1 , apt_feature_2 , apt_feature_3 , fld_feature_1 , fld_feature_2 , fld_feature_3 , hse_feature_1 , hse_feature_2 , hse_feature_3 , oth_feature_1 , oth_feature_2 , oth_feature_3 , shp_feature_1 , shp_feature_2 , shp_feature_3 , other_property_details )\n# other_property_features ( property_id , feature_id , property_feature_description )\n# other_available_features.feature_type_code = ref_feature_types.feature_type_code\n# properties.property_type_code = ref_property_types.property_type_code\n# other_property_features.property_id = properties.property_id\n# other_property_features.feature_id = other_available_features.feature_id\n",
    "difficulty": "medium",
    "question": "Show the property type descriptions of properties belonging to that code.",
    "pred": "SELECT ref_property_types.property_type_description from ref_property_types join properties on ref_property_types.property_type_code = properties.property_type_code where properties.property_type_code = 'apt';",
    "gold": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code"
  },
  {
    "index": 1033,
    "correct": false,
    "db_id": "real_estate_properties",
    "db_info": "# ref_feature_types ( feature_type_code , feature_type_name )\n# ref_property_types ( property_type_code , property_type_description )\n# other_available_features ( feature_id , feature_type_code , feature_name , feature_description )\n# properties ( property_id , property_type_code , date_on_market , date_sold , property_name , property_address , room_count , vendor_requested_price , buyer_offered_price , agreed_selling_price , apt_feature_1 , apt_feature_2 , apt_feature_3 , fld_feature_1 , fld_feature_2 , fld_feature_3 , hse_feature_1 , hse_feature_2 , hse_feature_3 , oth_feature_1 , oth_feature_2 , oth_feature_3 , shp_feature_1 , shp_feature_2 , shp_feature_3 , other_property_details )\n# other_property_features ( property_id , feature_id , property_feature_description )\n# other_available_features.feature_type_code = ref_feature_types.feature_type_code\n# properties.property_type_code = ref_property_types.property_type_code\n# other_property_features.property_id = properties.property_id\n# other_property_features.feature_id = other_available_features.feature_id\n",
    "difficulty": "hard",
    "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
    "pred": "SELECT property_name from properties where property_type_code = 'HSE' and room_count > 1 union select property_name from properties where property_type_code = 'APT' and room_count > 1",
    "gold": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1"
  }
]