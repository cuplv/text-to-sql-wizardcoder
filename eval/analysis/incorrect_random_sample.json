[
    {
        "index": 746,
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "difficulty": "extra",
        "question": "What are the names of nations speak both English and French?",
        "pred": "SELECT country.name FROM country JOIN countrylanguage AS cl1 ON country.code = cl1.countrycode WHERE cl1.language = 'English' AND cl1.isofficial = 'T' INTERSECT SELECT country.name FROM country JOIN countrylanguage AS cl2 ON country.code = cl2.countrycode WHERE cl2.language = 'French' AND cl2.isofficial = 'T';",
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""
    },
    {
        "index": 230,
        "db_id": "flight_2",
        "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
        "difficulty": "extra",
        "question": "What airline serves the most flights?",
        "pred": "SELECT airlines.airline, COUNT(*) AS total_flights FROM flights JOIN airlines ON flights.airline = airlines.uid GROUP BY flights.airline ORDER BY total_flights DESC LIMIT 1;",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "index": 764,
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "difficulty": "extra",
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "pred": "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN ( SELECT countrycode FROM countrylanguage WHERE isofficial = 'T' AND LOWER(language) = 'english' );",
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"
    },
    {
        "index": 765,
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "difficulty": "extra",
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "pred": "SELECT AVG(lifeexpectancy) FROM country WHERE NOT EXISTS ( SELECT 1 FROM countrylanguage WHERE countrylanguage.countrycode = country.code AND language = 'English' AND isofficial = 'T' );",
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"
    },
    {
        "index": 131,
        "db_id": "car_1",
        "db_info": "# continents ( contid , continent )\n# countries ( countryid , countryname , continent )\n# car_makers ( id , maker , fullname , country )\n# model_list ( modelid , maker , model )\n# car_names ( makeid , model , make )\n# cars_data ( id , mpg , cylinders , edispl , horsepower , weight , accelerate , year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n",
        "difficulty": "extra",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "pred": "SELECT MAX(cars_data.horsepower) AS max_horsepower, car_names.make FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.cylinders = 3 GROUP BY car_names.make;",
        "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    {
        "index": 65,
        "db_id": "pets_1",
        "db_info": "# student ( stuid , lname , fname , age , sex , major , advisor , city_code )\n# has_pet ( stuid , petid )\n# pets ( petid , pettype , pet_age , weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid\n",
        "difficulty": "extra",
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "pred": "SELECT fname, age FROM student WHERE EXISTS ( SELECT 1 FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'Dog' AND has_pet.stuid = student.stuid ) AND NOT EXISTS ( SELECT 1 FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'Cat' AND has_pet.stuid = student.stuid );",
        "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    {
        "index": 537,
        "db_id": "student_transcripts_tracking",
        "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
        "difficulty": "extra",
        "question": "Find the kind of program which most number of students are enrolled in?",
        "pred": "SELECT degree_programs.degree_summary_name from students join student_enrolment on students.student_id = student_enrolment.student_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id group by student_enrolment.degree_program_id order by count ( * ) desc limit 1;",
        "gold": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "index": 539,
        "db_id": "student_transcripts_tracking",
        "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
        "difficulty": "extra",
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "pred": "SELECT dp.degree_program_id, dp.degree_summary_name FROM degree_programs dp JOIN student_enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;",
        "gold": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "index": 227,
        "db_id": "flight_2",
        "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
        "difficulty": "extra",
        "question": "What is the code of airport that has fewest number of flights?",
        "pred": "SELECT airport FROM ( SELECT sourceairport AS airport FROM flights UNION ALL SELECT destairport AS airport FROM flights ) AS combined GROUP BY airport ORDER BY COUNT(*) ASC LIMIT 1;",
        "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"
    },
    {
        "index": 225,
        "db_id": "flight_2",
        "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
        "difficulty": "extra",
        "question": "What is the code of airport that has the highest number of flights?",
        "pred": "SELECT airport, SUM(flight_count) as total_flights FROM ( SELECT sourceairport as airport, COUNT(*) as flight_count FROM flights GROUP BY sourceairport UNION ALL SELECT destairport as airport, COUNT(*) as flight_count FROM flights GROUP BY destairport ) AS airport_counts GROUP BY airport ORDER BY total_flights DESC LIMIT 1;",
        "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "index": 741,
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "difficulty": "extra",
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "pred": "SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code ORDER BY COUNT(DISTINCT countrylanguage.language) DESC LIMIT 1;",
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "index": 549,
        "db_id": "student_transcripts_tracking",
        "db_info": "# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# transcripts ( transcript_id , transcript_date , other_details )\n# transcript_contents ( student_course_id , transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id\n",
        "difficulty": "extra",
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "pred": "SELECT DISTINCT s.last_name FROM students AS s JOIN addresses AS a ON s.current_address_id = a.address_id LEFT JOIN student_enrolment AS se ON s.student_id = se.student_id WHERE a.state_province_county = 'North Carolina' AND se.student_id IS NULL;",
        "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
    },
    {
        "index": 785,
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "difficulty": "extra",
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "pred": "SELECT city.name FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = 'Europe' AND NOT EXISTS ( SELECT 1 FROM countrylanguage WHERE countrylanguage.countrycode = city.countrycode AND language = 'English' AND isofficial = 'T' );",
        "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
    },
    {
        "index": 784,
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "difficulty": "extra",
        "question": "Which cities are in European countries where English is not the official language?",
        "pred": "SELECT city.name FROM city JOIN country ON city.countrycode = country.code LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode AND countrylanguage.language = 'English' WHERE country.continent = 'Europe' AND countrylanguage.language IS NULL;",
        "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
    },
    {
        "index": 500,
        "db_id": "battle_death",
        "db_info": "# battle ( id , name , date , bulgarian_commander , latin_commander , result )\n# ship ( lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship )\n# death ( caused_by_ship_id , id , note , killed , injured )\n# ship.lost_in_battle = battle.id\n# death.caused_by_ship_id = ship.id\n",
        "difficulty": "extra",
        "question": "What is the ship id and name that caused most total injuries?",
        "pred": "SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1;",
        "gold": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "index": 773,
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "difficulty": "hard",
        "question": "Which countries have greater area than that of any country in Europe?",
        "pred": "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe');",
        "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"
    },
    {
        "index": 281,
        "db_id": "employee_hire_evaluation",
        "db_info": "# employee ( employee_id , name , age , city )\n# shop ( shop_id , name , location , district , number_products , manager_name )\n# hiring ( shop_id , employee_id , start_from , is_full_time )\n# evaluation ( employee_id , year_awarded , bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n",
        "difficulty": "hard",
        "question": "Find the names of employees who never won any award in the evaluation.",
        "pred": "SELECT e.name FROM employee e WHERE NOT EXISTS ( SELECT 1 FROM evaluation ev WHERE e.employee_id = ev.employee_id AND ev.bonus > 0 );",
        "gold": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"
    },
    {
        "index": 220,
        "db_id": "flight_2",
        "db_info": "# airlines ( uid , airline , abbreviation , country )\n# airports ( city , airportcode , airportname , country , countryabbrev )\n# flights ( airline , flightno , sourceairport , destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode\n",
        "difficulty": "hard",
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "pred": "SELECT count ( * ) from airports join flights on airports.airportcode = flights.destairport where flights.airline = 'United Airlines' and airports.city = 'Aberdeen';",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""
    },
    {
        "index": 793,
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "difficulty": "medium",
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "pred": "SELECT country.name, COUNT(DISTINCT countrylanguage.language) AS language_count FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code, country.name HAVING COUNT(DISTINCT countrylanguage.language) > 2;",
        "gold": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"
    },
    {
        "index": 751,
        "db_id": "world_1",
        "db_info": "# city ( id , name , countrycode , district , population )\n# sqlite_sequence ( name , seq )\n# country ( code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 )\n# countrylanguage ( countrycode , language , isofficial , percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n",
        "difficulty": "medium",
        "question": "How many continents speak Chinese?",
        "pred": "SELECT COUNT(DISTINCT c.continent) FROM country AS c JOIN countrylanguage AS cl ON c.code = cl.countrycode WHERE cl.language = 'Chinese' AND cl.isofficial = 1;",
        "gold": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\""
    }
]