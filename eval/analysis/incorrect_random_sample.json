[
    {
        "index": 177,
        "db_id": "car_1",
        "db_info": "# car_makers ( id, maker, fullname, country )\n# countries ( countryid, countryname, continent )\n# model_list ( modelid, maker, model )\n# car_names ( makeid, model, make )\n# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )\n# continents ( contid, continent )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
        "difficulty": "extra",
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "pred": "SELECT DISTINCT countries.countryid, countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country LEFT JOIN model_list ON car_makers.id = model_list.maker WHERE model_list.model = 'fiat' OR countries.countryid IN ( SELECT country FROM car_makers GROUP BY country HAVING COUNT(*) > 3 );",
        "gold": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';"
    },
    {
        "index": 541,
        "db_id": "student_transcripts_tracking",
        "db_info": "# student_enrolment ( student_id, degree_program_id )\n# students ( first_name, middle_name, last_name )\n# student_enrolment.student_id = students.student_id",
        "difficulty": "extra",
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "pred": "SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(student_enrolment.student_id) AS number_of_enrollments FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id, students.first_name, students.middle_name, students.last_name ORDER BY number_of_enrollments DESC LIMIT 1;",
        "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "index": 960,
        "db_id": "dog_kennels",
        "db_info": "# dogs ( age, owner_id, dog_id, abandoned_yn, breed_code, size_code, name, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )\n# owners ( owner_id, last_name, first_name, street, city, state, zip_code, email_address, home_phone, cell_number )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id",
        "difficulty": "extra",
        "question": "List the last name of the owner owning the youngest dog.",
        "pred": "SELECT o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.date_of_birth = (SELECT MAX(date_of_birth) FROM dogs);",
        "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"
    },
    {
        "index": 740,
        "db_id": "world_1",
        "db_info": "# country ( name, code, population, continent, surfacearea, indepyear, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# countrylanguage ( language, countrycode, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
        "difficulty": "extra",
        "question": "What is name of the country that speaks the largest number of languages?",
        "pred": "SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code GROUP BY countrylanguage.countrycode ORDER BY COUNT(DISTINCT countrylanguage.language) DESC LIMIT 1;",
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "index": 65,
        "db_id": "pets_1",
        "db_info": "# student ( fname, age, stuid, major )\n# has_pet ( stuid, petid )\n# pets ( pettype, pet_age )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid",
        "difficulty": "extra",
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "pred": "SELECT fname, age FROM student WHERE EXISTS ( SELECT 1 FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'Dog' AND has_pet.stuid = student.stuid ) AND NOT EXISTS ( SELECT 1 FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'Cat' AND has_pet.stuid = student.stuid );",
        "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    {
        "index": 240,
        "db_id": "flight_2",
        "db_info": "# flights ( airline, flightno, sourceairport, destairport )\n# airlines ( uid, airline, abbreviation, country )\n# airports ( city, airportcode, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
        "difficulty": "extra",
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "pred": "SELECT airlines.airline from airports join flights on airports.airportcode = flights.sourceairport join airlines on flights.airline = airlines.uid where airports.city = 'Cordova' except select airlines.airline from airports join flights on airports.airportcode = flights.sourceairport join airlines on flights.airline = airlines.uid where airports.city = 'Marion';",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""
    },
    {
        "index": 66,
        "db_id": "pets_1",
        "db_info": "# student ( fname, stuid, lname, age, sex, major, advisor, city_code )\n# has_pet ( stuid, petid )\n# pets ( petid, pettype, pet_age, weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid",
        "difficulty": "extra",
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "pred": "SELECT fname FROM student WHERE stuid IN ( SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'Dog' ) AND stuid NOT IN ( SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'Cat' );",
        "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    {
        "index": 237,
        "db_id": "flight_2",
        "db_info": "# airlines ( airline, abbreviation, country, uid )\n# flights ( airline, sourceairport, destairport, flightno )\n# airports ( airportcode, country, countryabbrev, city, airportname )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
        "difficulty": "extra",
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "pred": "SELECT airlines.airline from flights join airlines on flights.airline = airlines.uid where flights.destairport = 'APG' intersect select airlines.airline from flights join airlines on flights.airline = airlines.uid where flights.destairport = 'CVO';",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""
    },
    {
        "index": 232,
        "db_id": "flight_2",
        "db_info": "# airlines ( abbreviation, country, airline, uid )\n# flights ( airline, sourceairport, destairport, flightno )\n# airports ( country, airportcode, airportname, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
        "difficulty": "extra",
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "pred": "SELECT a.abbreviation, a.country FROM airlines AS a JOIN flights AS f ON a.abbreviation = f.airline GROUP BY a.abbreviation, a.country ORDER BY COUNT(*) ASC LIMIT 1;",
        "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"
    },
    {
        "index": 102,
        "db_id": "car_1",
        "db_info": "# car_makers ( maker, country, fullname, id )\n# cars_data ( year, horsepower, mpg, cylinders, edispl, weight, accelerate, id )\n# car_names ( make, model, makeid )\n# model_list ( model, maker, modelid )\n# countries ( countryname, continent, countryid )\n# continents ( continent )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
        "difficulty": "extra",
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "pred": "SELECT cm.maker, cd.year FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker JOIN car_names cn ON ml.model = cn.model JOIN cars_data cd ON cn.makeid = cd.id WHERE cd.year = (SELECT MIN(year) FROM cars_data);",
        "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"
    },
    {
        "index": 539,
        "db_id": "student_transcripts_tracking",
        "db_info": "# student_enrolment ( degree_program_id, student_enrolment_id )\n# degree_programs ( degree_program_id, degree_summary_name, degree_summary_description )\n# students ( student_id )\n# student_enrolment_courses ( student_enrolment_id, course_id )\n# courses ( course_id )\n# semesters ( semester_id )\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id",
        "difficulty": "extra",
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "pred": "SELECT dp.degree_program_id, dp.degree_summary_name FROM degree_programs dp JOIN student_enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;",
        "gold": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "index": 767,
        "db_id": "world_1",
        "db_info": "# country ( population, code, name, continent, surfacearea, indepyear, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
        "difficulty": "extra",
        "question": "How many people live in countries that do not speak English?",
        "pred": "SELECT SUM(c.population) FROM country AS c WHERE NOT EXISTS ( SELECT 1 FROM countrylanguage AS cl WHERE cl.countrycode = c.code AND cl.language = 'English' );",
        "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"
    },
    {
        "index": 945,
        "db_id": "dog_kennels",
        "db_info": "# professionals ( professional_id, role_code, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )\n# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )\n# treatments.professional_id = professionals.professional_id",
        "difficulty": "extra",
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "pred": "SELECT DISTINCT professionals.first_name, professionals.last_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.cost_of_treatment < ( SELECT AVG(treatments.cost_of_treatment) FROM treatments );",
        "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"
    },
    {
        "index": 231,
        "db_id": "flight_2",
        "db_info": "# airlines ( abbreviation, country, airline )\n# flights ( airline, flightno, sourceairport, destairport )\n# airports ( airportcode, country, airportname, city, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
        "difficulty": "extra",
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "pred": "SELECT a.abbreviation, a.country FROM airlines AS a JOIN flights AS f ON a.uid = f.airline GROUP BY a.abbreviation, a.country ORDER BY COUNT(*) ASC LIMIT 1;",
        "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"
    },
    {
        "index": 562,
        "db_id": "student_transcripts_tracking",
        "db_info": "# students ( student_id, current_address_id, permanent_address_id, other_student_details )\n# addresses ( address_id, line_1, line_2, other_address_details )\n# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, other_details )\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id",
        "difficulty": "extra",
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "pred": "SELECT addresses.address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.permanent_address_id group by addresses.address_id order by count ( * ) desc limit 1;",
        "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "index": 220,
        "db_id": "flight_2",
        "db_info": "# flights ( airline, flightno, sourceairport, destairport )\n# airlines ( airline, uid, abbreviation, country )\n# airports ( airportcode, city, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
        "difficulty": "hard",
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "pred": "SELECT count ( * ) from airports join flights on airports.airportcode = flights.destairport where flights.airline = 'United Airlines' and airports.city = 'Aberdeen';",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""
    },
    {
        "index": 281,
        "db_id": "employee_hire_evaluation",
        "db_info": "# employee ( employee_id, name, age, city )\n# evaluation ( employee_id, year_awarded, bonus )\n# hiring ( employee_id, shop_id, start_from, is_full_time )\n# hiring.employee_id = employee.employee_id\n# evaluation.employee_id = employee.employee_id",
        "difficulty": "hard",
        "question": "Find the names of employees who never won any award in the evaluation.",
        "pred": "SELECT e.name FROM employee e WHERE NOT EXISTS ( SELECT 1 FROM evaluation ev WHERE e.employee_id = ev.employee_id AND ev.bonus > 0 );",
        "gold": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"
    },
    {
        "index": 896,
        "db_id": "network_1",
        "db_info": "# highschooler ( name, id, grade )\n# friend ( student_id, friend_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id",
        "difficulty": "hard",
        "question": "Show names of all high school students who do not have any friends.",
        "pred": "SELECT name from highschooler where id not in ( select student_id from friend );",
        "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"
    },
    {
        "index": 792,
        "db_id": "world_1",
        "db_info": "# country ( name, code, population, indepyear, governmentform )\n# countrylanguage ( countrycode, language )\n# countrylanguage.countrycode = country.code",
        "difficulty": "medium",
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "pred": "SELECT country.name, COUNT(countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code HAVING COUNT(countrylanguage.language) >= 3;",
        "gold": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"
    },
    {
        "index": 842,
        "db_id": "orchestra",
        "db_info": "# conductor ( name, conductor_id, age, nationality, year_of_work )\n# orchestra ( conductor_id, orchestra_id, orchestra, record_company, year_of_founded, major_record_format )\n# orchestra.conductor_id = conductor.conductor_id",
        "difficulty": "medium",
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "pred": "SELECT conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.name having count ( * ) > 1 ;",
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"
    }
]