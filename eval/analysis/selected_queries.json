[
    {
        "index": 230,
        "db_id": "flight_2",
        "db_info": "# flights ( airline, flightno, sourceairport, destairport )\n# airlines ( airline, uid, abbreviation, country )",
        "difficulty": "extra",
        "question": "What airline serves the most flights?",
        "pred": "SELECT flights.airline  FROM  flights  GROUP BY  flights.airline  ORDER BY  COUNT(*) DESC  LIMIT 1;",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "index": 844,
        "db_id": "orchestra",
        "db_info": "# conductor ( name, age, nationality, year_of_work )\n# orchestra ( conductor_id, orchestra, record_company, year_of_founded, major_record_format )\n# orchestra.conductor_id = conductor.conductor_id",
        "difficulty": "extra",
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "pred": "SELECT conductor.name  FROM  conductor  JOIN  orchestra  ON  conductor.conductor_id = orchestra.conductor_id  GROUP BY  conductor.name  ORDER BY  COUNT(orchestra.orchestra) DESC  LIMIT 1",
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "index": 129,
        "db_id": "car_1",
        "db_info": "# countries ( countryname, continent )\n# continents ( continent )\n# car_makers ( maker, fullname, country )\n# model_list ( maker, model )\n# car_names ( model, make )\n# cars_data ( mpg, cylinders, edispl, horsepower, weight, accelerate, year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
        "difficulty": "extra",
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "pred": "SELECT countries.countryname  FROM  countries  JOIN  car_makers ON countries.countryname = car_makers.country  WHERE  countries.continent = 'Europe'  GROUP BY  countries.countryname  HAVING  COUNT(car_makers.maker) >= 3;",
        "gold": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"
    },
    {
        "index": 542,
        "db_id": "student_transcripts_tracking",
        "db_info": "# students ( student_id, first_name, middle_name, last_name )\n# student_enrolment ( student_id, student_enrolment_id )\n# degree_programs ( degree_program_id )\n# departments ( department_id )\n# transcripts ( transcript_id )\n# transcript_contents ( student_course_id )\n# degree_programs.department_id = departments.department_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# transcript_contents.transcript_id = transcripts.transcript_id",
        "difficulty": "extra",
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "pred": "SELECT students.first_name ,  students.middle_name ,  students.last_name ,  student_enrolment.student_id ,  count(student_enrolment.student_id) AS number_of_enrollments FROM student_enrolment  JOIN students ON student_enrolment.student_id = students.student_id  GROUP BY student_enrolment.student_id  ORDER BY number_of_enrollments DESC  LIMIT 1;",
        "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "index": 945,
        "db_id": "dog_kennels",
        "db_info": "# professionals ( professional_id, role_code, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )\n# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )\n# treatments.professional_id = professionals.professional_id",
        "difficulty": "extra",
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "pred": "SELECT distinct professionals.first_name, professionals.last_name  FROM  professionals  JOIN  treatments  ON  professionals.professional_id = treatments.professional_id  WHERE  treatments.cost_of_treatment < ( SELECT AVG (cost_of_treatment) FROM treatments )",
        "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"
    },
    {
        "index": 172,
        "db_id": "car_1",
        "db_info": "# cars_data ( weight, id, mpg, cylinders, edispl, horsepower, accelerate, year )\n# car_makers ( id, maker, fullname, country )\n# model_list ( modelid, maker, model )\n# model_list.maker = car_makers.id",
        "difficulty": "extra",
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "pred": "SELECT distinct model_list.model  FROM  model_list  JOIN  cars_data  ON  model_list.modelid = cars_data.id  WHERE  cars_data.weight < 3500  AND  model_list.maker NOT IN (SELECT id FROM car_makers WHERE fullname = 'Ford Motor Company')",
        "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"
    },
    {
        "index": 576,
        "db_id": "student_transcripts_tracking",
        "db_info": "# student_enrolment ( degree_program_id, semester_id, student_id )\n# degree_programs ( degree_program_id, department_id )\n# semesters ( semester_id, semester_name, semester_description )\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id",
        "difficulty": "extra",
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "pred": "SELECT semester_id  FROM  student_enrolment  INNER JOIN  degree_programs  ON  student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE  department_id IN ('Masters', 'Bachelors')  GROUP BY  semester_id  HAVING  COUNT(DISTINCT department_id) > 1;",
        "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"
    },
    {
        "index": 228,
        "db_id": "flight_2",
        "db_info": "# flights ( sourceairport, airline, flightno, destairport )\n# airports ( airportcode, airportname, city, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
        "difficulty": "extra",
        "question": "Give the code of the airport with the least flights.",
        "pred": "SELECT sourceairport  FROM  flights  GROUP BY  sourceairport  ORDER BY  COUNT(*) ASC  LIMIT 1;",
        "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"
    },
    {
        "index": 277,
        "db_id": "employee_hire_evaluation",
        "db_info": "# evaluation ( employee_id, year_awarded, bonus )\n# employee ( employee_id, name, age, city )\n# hiring ( employee_id, shop_id, start_from, is_full_time )\n# shop ( shop_id, name, location, district, number_products, manager_name )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id",
        "difficulty": "extra",
        "question": "find the name of employee who was awarded the most times in the evaluation.",
        "pred": "SELECT employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by employee.employee_id order by count ( * ) desc limit 1",
        "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "index": 158,
        "db_id": "car_1",
        "db_info": "# model_list ( modelid )\n# car_makers ( id, maker )\n# car_names ( makeid, model )\n# cars_data ( id, accelerate, cylinders )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
        "difficulty": "extra",
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "pred": "SELECT cars_data.cylinders  FROM  cars_data  JOIN  car_names ON cars_data.id = car_names.makeid  JOIN  model_list ON car_names.model = model_list.modelid  JOIN  car_makers ON model_list.maker = car_makers.id WHERE  car_makers.maker = 'volvo'  ORDER BY  cars_data.accelerate ASC  LIMIT 1;",
        "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"
    },
    {
        "index": 700,
        "db_id": "voter_1",
        "db_info": "# contestants ( contestant_number )\n# votes ( contestant_number, state, phone_number )\n# area_code_state ( area_code, state )\n# votes.contestant_number = contestants.contestant_number\n# votes.state = area_code_state.state",
        "difficulty": "extra",
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "pred": "SELECT area_code_state.area_code  FROM  area_code_state  WHERE  state IN (     SELECT      votes.state      FROM      votes      JOIN      contestants      ON      votes.contestant_number = contestants.contestant_number      WHERE      contestants.contestant_number = 'Tabatha Gehling'     INTERSECT      SELECT      votes.state      FROM      votes      JOIN      contestants      ON      votes.contestant_number = contestants.contestant_number      WHERE      contestants.contestant_number = 'Kelly Clauss' )",
        "gold": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'"
    },
    {
        "index": 537,
        "db_id": "student_transcripts_tracking",
        "db_info": "# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )\n# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )\n# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )\n# student_enrolment.student_id = students.student_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id",
        "difficulty": "extra",
        "question": "Find the kind of program which most number of students are enrolled in?",
        "pred": "SELECT degree_programs.degree_summary_name from student_enrolment join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id group by student_enrolment.degree_program_id order by count ( * ) desc limit 1",
        "gold": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "index": 237,
        "db_id": "flight_2",
        "db_info": "# airlines ( airline, abbreviation, country, uid )\n# flights ( airline, sourceairport, destairport, flightno )\n# airports ( airportcode, country, countryabbrev, city, airportname )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
        "difficulty": "extra",
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "pred": "SELECT airline from flights where destairport = 'APG' intersect select airline from flights where destairport = 'CVO';",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""
    },
    {
        "index": 240,
        "db_id": "flight_2",
        "db_info": "# flights ( airline, flightno, sourceairport, destairport )\n# airlines ( uid, airline, abbreviation, country )\n# airports ( city, airportcode, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
        "difficulty": "extra",
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "pred": "SELECT airlines.airline from airlines join flights on airlines.airline = flights.airline join airports on airports.airportcode = flights.sourceairport where airports.city = 'Cordova' except select airlines.airline from airlines join flights on airlines.airline = flights.airline join airports on airports.airportcode = flights.sourceairport where airports.city = 'Marion';",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""
    },
    {
        "index": 764,
        "db_id": "world_1",
        "db_info": "# country ( lifeexpectancy, name, code )\n# countrylanguage ( language, countrycode, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
        "difficulty": "extra",
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "pred": "SELECT avg(lifeexpectancy)  FROM country  WHERE code NOT IN      (SELECT countrycode       FROM countrylanguage       WHERE isofficial = 'T'       AND language = 'English')",
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"
    },
    {
        "index": 900,
        "db_id": "network_1",
        "db_info": "# highschooler ( name, id )\n# friend ( student_id, friend_id )\n# likes ( student_id, liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
        "difficulty": "hard",
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "pred": "SELECT name  FROM  highschooler  WHERE  id IN (  SELECT  friend.student_id  FROM  friend  JOIN  likes  ON  friend.student_id = likes.liked_id)  AND  id IN (  SELECT  likes.liked_id  FROM  likes  JOIN  friend  ON  likes.student_id = friend.student_id)",
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"
    },
    {
        "index": 1033,
        "db_id": "real_estate_properties",
        "db_info": "# properties ( property_name, property_type_code, room_count )\n# ref_property_types ( property_type_code )\n# other_available_features ( feature_name )\n# ref_feature_types ( feature_type_code )\n# other_property_features ( property_id, feature_id, property_feature_description )\n# other_available_features.feature_type_code = ref_feature_types.feature_type_code\n# properties.property_type_code = ref_property_types.property_type_code\n# other_property_features.property_id = properties.property_id\n# other_property_features.feature_id = other_available_features.feature_id",
        "difficulty": "hard",
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "pred": "SELECT property_name  FROM properties  WHERE (property_type_code = 'house' OR property_type_code = 'apartment') AND room_count > 1",
        "gold": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1"
    },
    {
        "index": 925,
        "db_id": "dog_kennels",
        "db_info": "# dogs ( name, owner_id )\n# owners ( owner_id )\n# treatments ( dog_id, cost_of_treatment )\n# charges ( charge_amount )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# treatments.dog_id = dogs.dog_id",
        "difficulty": "hard",
        "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "pred": "SELECT distinct dogs.name  FROM dogs  JOIN treatments ON dogs.dog_id = treatments.dog_id  GROUP BY dogs.name  HAVING SUM(treatments.cost_of_treatment) <= 1000",
        "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )"
    },
    {
        "index": 632,
        "db_id": "tvshow",
        "db_info": "# tv_channel ( hight_definition_tv, package_option, id, series_name )\n# tv_series ( channel, id )\n# cartoon ( channel, title, id )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id",
        "difficulty": "medium",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "pred": "SELECT tv_channel.package_option,  tv_channel.series_name  FROM tv_channel  JOIN tv_series  ON tv_channel.id = tv_series.channel  WHERE tv_channel.hight_definition_tv = 'Yes';",
        "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""
    },
    {
        "index": 893,
        "db_id": "network_1",
        "db_info": "# highschooler ( id, name )\n# friend ( student_id, friend_id )\n# likes ( student_id, liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
        "difficulty": "medium",
        "question": "Count the number of friends Kyle has.",
        "pred": "SELECT count ( * ) from friend where student_id = ( select id from highschooler where name = 'Kyle' )",
        "gold": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
    }
]