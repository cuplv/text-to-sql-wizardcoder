[
  {
    "index": 7,
    "db_id": "concert_singer",
    "db_info": "# singer ( age, name, song_release_year )",
    "difficulty": "medium",
    "question": "What are the names and release years for all the songs of the youngest singer?",
    "pred": "select song_name, song_release_year from singer where age = ( select min ( age ) from singer )",
    "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"
  },
  {
    "index": 12,
    "db_id": "concert_singer",
    "db_info": "# singer ( age, name, singer_id )\n# singer_in_concert ( singer_id, concert_id )\n# concert ( concert_id, year, stadium_id )\n# stadium ( stadium_id, name )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id",
    "difficulty": "hard",
    "question": "List all song names by singers above the average age.",
    "pred": "SELECT song_name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE singer.age > ( SELECT AVG(age) FROM singer );",
    "gold": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"
  },
  {
    "index": 16,
    "db_id": "concert_singer",
    "db_info": "# stadium ( capacity, highest, average, stadium_id, location, name, lowest )\n# concert ( stadium_id, concert_id, concert_name, theme, year )\n# singer_in_concert ( concert_id, singer_id )\n# singer ( song_release_year, singer_id, name, country, song_name, age, is_male )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id",
    "difficulty": "medium",
    "question": "What is the maximum capacity and the average of all stadiums ?",
    "pred": "SELECT MAX(capacity),  AVG(capacity)  FROM stadium",
    "gold": "select max(capacity), average from stadium"
  },
  {
    "index": 24,
    "db_id": "concert_singer",
    "db_info": "# concert ( stadium_id, concert_name, theme, concert_id, year )\n# stadium ( stadium_id, name, capacity, location, highest, lowest, average )\n# singer_in_concert ( concert_id, singer_id )\n# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id",
    "difficulty": "extra",
    "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
    "pred": "SELECT name, capacity from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year >= 2014 group by concert.stadium_id order by count ( * ) desc limit 1",
    "gold": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 25,
    "db_id": "concert_singer",
    "db_info": "# concert ( stadium_id )\n# stadium ( name, capacity )\n# concert.stadium_id = stadium.stadium_id",
    "difficulty": "extra",
    "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
    "pred": "SELECT stadium.name, stadium.capacity  FROM  concert JOIN stadium ON concert.stadium_id = stadium.stadium_id  GROUP BY  stadium.stadium_id  ORDER BY  COUNT(*) DESC  LIMIT 1",
    "gold": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1"
  },
  {
    "index": 28,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id )\n# concert ( stadium_id, concert_name )\n# singer_in_concert ( concert_id, singer_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.concert_id = concert.concert_id",
    "difficulty": "hard",
    "question": "Show the stadium names without any concert.",
    "pred": "SELECT stadium.stadium_id  FROM  stadium  LEFT JOIN  concert  ON  stadium.stadium_id = concert.stadium_id  WHERE  concert.stadium_id IS NULL",
    "gold": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)"
  },
  {
    "index": 36,
    "db_id": "concert_singer",
    "db_info": "# singer ( name, singer_id )\n# concert ( concert_id, concert_name )\n# singer_in_concert ( singer_id, concert_id )\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id",
    "difficulty": "medium",
    "question": "What are the names of the singers and number of concerts for each person?",
    "pred": "SELECT singer.name, COUNT(concert.concert_id)  FROM  singer  JOIN  singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  JOIN  concert ON singer_in_concert.concert_id = concert.concert_id  GROUP BY  singer.name;",
    "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"
  },
  {
    "index": 47,
    "db_id": "pets_1",
    "db_info": "# pets ( pet_age, petid )\n# has_pet ( petid, stuid )\n# student ( stuid, fname, lname, age, sex, major, advisor, city_code )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid",
    "difficulty": "medium",
    "question": "Find the weight of the youngest dog.",
    "pred": "SELECT The question asks for the weight of the youngest dog, but there seems to be no 'weight' or 'dog' column in the provided tables. Thus, the correct SQL cannot be provided based on the given tables and their properties.   Please provide the correct table schema that includes the dog's weight information for a proper SQL statement.",
    "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
  },
  {
    "index": 48,
    "db_id": "pets_1",
    "db_info": "# pets ( pet_age, weight )\n# has_pet ( petid, stuid )\n# student ( stuid, lname, fname, age, sex, major, advisor, city_code )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid",
    "difficulty": "medium",
    "question": "How much does the youngest dog weigh?",
    "pred": "SELECT weight from pets where pet_age = ( select min ( pet_age ) from pets );",
    "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
  },
  {
    "index": 66,
    "db_id": "pets_1",
    "db_info": "# student ( fname, stuid, lname, age, sex, major, advisor, city_code )\n# has_pet ( stuid, petid )\n# pets ( petid, pettype, pet_age, weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid",
    "difficulty": "extra",
    "question": "What is the first name of every student who has a dog but does not have a cat?",
    "pred": "SELECT fname  FROM  student  WHERE  stuid IN (      SELECT      stuid      FROM      has_pet      JOIN      pets      ON      has_pet.petid = pets.petid      WHERE      pets.pettype = 'Dog'  ) AND  stuid NOT IN (      SELECT      stuid      FROM      has_pet      JOIN      pets      ON      has_pet.petid = pets.petid      WHERE      pets.pettype = 'Cat'  )",
    "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
  },
  {
    "index": 68,
    "db_id": "pets_1",
    "db_info": "# pets ( pettype, pet_age, weight, petid )\n# has_pet ( stuid, petid )\n# student ( stuid, lname, fname, age, sex, major, advisor, city_code )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid",
    "difficulty": "medium",
    "question": "What type of pet is the youngest animal, and how much does it weigh?",
    "pred": "SELECT pettype, weight from pets order by pet_age asc, weight desc limit 1",
    "gold": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"
  },
  {
    "index": 83,
    "db_id": "pets_1",
    "db_info": "# student ( lname, stuid, fname, age, sex, major, advisor, city_code )\n# pets ( petid, pettype, pet_age, weight )",
    "difficulty": "hard",
    "question": "Find the last name of the student who has a cat that is age 3.",
    "pred": "SELECT lname  FROM  student  WHERE  stuid IN ( SELECT             stuid             FROM             student_pet             JOIN             pets             ON             student_pet.petid = pets.petid             WHERE             pets.pettype = 'cat'             AND             pets.pet_age = 3 )",
    "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"
  },
  {
    "index": 94,
    "db_id": "car_1",
    "db_info": "# car_makers ( fullname, id, maker, country )\n# model_list ( maker, modelid )\n# car_names ( makeid, model, make )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model",
    "difficulty": "medium",
    "question": "What is the full name of each car maker, along with its id and how many models it produces?",
    "pred": "SELECT car_makers.fullname , model_list.maker , count ( * ) from car_makers join model_list on car_makers.id = model_list.maker join car_names on car_names.makeid = model_list.modelid group by model_list.maker",
    "gold": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"
  },
  {
    "index": 99,
    "db_id": "car_1",
    "db_info": "# car_makers ( maker, fullname, country, id )\n# cars_data ( year, mpg, cylinders, edispl, horsepower, weight, accelerate, id )\n# model_list ( maker, model, modelid )\n# car_names ( model, makeid, make )\n# countries ( countryname, countryid )\n# continents ( continent, contid )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "extra",
    "question": "Find the name of the makers that produced some cars in the year of 1970?",
    "pred": "SELECT distinct car_makers.fullname  FROM  car_makers  JOIN model_list ON car_makers.id = model_list.maker  JOIN car_names ON model_list.modelid = car_names.makeid  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cars_data.year = 1970;",
    "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"
  },
  {
    "index": 102,
    "db_id": "car_1",
    "db_info": "# car_makers ( maker, country, fullname, id )\n# cars_data ( year, horsepower, mpg, cylinders, edispl, weight, accelerate, id )\n# car_names ( make, model, makeid )\n# model_list ( model, maker, modelid )\n# countries ( countryname, continent, countryid )\n# continents ( continent )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "extra",
    "question": "What is the maker of the carr produced in the earliest year and what year was it?",
    "pred": "SELECT car_makers.fullname,  cars_data.year  FROM  car_makers  JOIN model_list ON car_makers.id = model_list.maker  JOIN car_names ON model_list.model = car_names.model  JOIN cars_data ON car_names.makeid = cars_data.id  ORDER BY  cars_data.year  ASC LIMIT 1",
    "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"
  },
  {
    "index": 105,
    "db_id": "car_1",
    "db_info": "# continents ( contid )\n# countries ( countryname, continent )\n# car_makers ( id, maker, fullname, country )\n# model_list ( modelid, maker, model )\n# car_names ( makeid, model, make )\n# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "hard",
    "question": "How many car makers are there in each continents? List the continent name and the count.",
    "pred": "SELECT continents.contid, COUNT(DISTINCT car_makers.id)  FROM  continents  JOIN countries ON continents.contid = countries.continent  JOIN car_makers ON countries.countryname = car_makers.country  GROUP BY  continents.contid;",
    "gold": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"
  },
  {
    "index": 107,
    "db_id": "car_1",
    "db_info": "# countries ( countryname, countryid, continent )\n# car_makers ( maker, fullname, country )\n# continents ( continent, contid )\n# model_list ( modelid, maker, model )\n# car_names ( makeid, model, make )\n# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "extra",
    "question": "Which of the countries has the most car makers? List the country name.",
    "pred": "SELECT countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname order by count ( * ) desc limit 1",
    "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"
  },
  {
    "index": 108,
    "db_id": "car_1",
    "db_info": "# car_makers ( country, maker )\n# countries ( countryname, countryid )\n# continents ( continent )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid",
    "difficulty": "extra",
    "question": "What is the name of the country with the most car makers?",
    "pred": "SELECT countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname order by count ( * ) desc limit 1",
    "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"
  },
  {
    "index": 111,
    "db_id": "car_1",
    "db_info": "# car_makers ( maker, id )\n# model_list ( modelid, maker )\n# car_names ( makeid, model )\n# cars_data ( id, accelerate, mpg, cylinders, edispl, horsepower, weight, year )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "medium",
    "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
    "pred": "SELECT cars_data.accelerate  FROM  car_names  JOIN  cars_data  ON  car_names.makeid = cars_data.id  WHERE  car_names.model = 'amc hornet sportabout (sw)';",
    "gold": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"
  },
  {
    "index": 112,
    "db_id": "car_1",
    "db_info": "# cars_data ( accelerate, id, mpg, cylinders, edispl, horsepower, weight, year )\n# car_names ( makeid, model, make )\n# model_list ( modelid, maker, model )\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "medium",
    "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
    "pred": "SELECT cars_data.accelerate  FROM  cars_data  JOIN  car_names ON cars_data.id = car_names.makeid  JOIN  model_list ON car_names.model = model_list.model  WHERE  model_list.model = 'amc hornet sportabout (sw)'",
    "gold": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"
  },
  {
    "index": 114,
    "db_id": "car_1",
    "db_info": "# car_makers ( maker, country )\n# countries ( countryname )\n# car_makers.country = countries.countryid",
    "difficulty": "medium",
    "question": "What is the number of makers of care in France?",
    "pred": "SELECT count(*)  FROM  car_makers  JOIN  countries  ON  car_makers.country = countries.countryname  WHERE  countries.countryname = 'France'",
    "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"
  },
  {
    "index": 115,
    "db_id": "car_1",
    "db_info": "# car_makers ( country, id, maker, fullname )\n# model_list ( maker, model, modelid )\n# model_list.maker = car_makers.id",
    "difficulty": "hard",
    "question": "How many car models are produced in the usa?",
    "pred": "SELECT count(*)  FROM  car_makers  JOIN  model_list  ON  car_makers.id = model_list.maker  WHERE  car_makers.country = 'USA'",
    "gold": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"
  },
  {
    "index": 116,
    "db_id": "car_1",
    "db_info": "# countries ( countryname, countryid )\n# car_makers ( maker, country )\n# model_list ( model, maker )\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id",
    "difficulty": "hard",
    "question": "What is the count of the car models produced in the United States?",
    "pred": "SELECT COUNT(*)  FROM  model_list  JOIN  car_makers  ON  model_list.maker = car_makers.maker  JOIN  countries  ON  car_makers.country = countries.countryid  WHERE  countries.countryname = 'United States';",
    "gold": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"
  },
  {
    "index": 123,
    "db_id": "car_1",
    "db_info": "# car_makers ( maker, id, country, fullname )\n# countries ( countryname, countryid, continent )\n# continents ( contid )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid",
    "difficulty": "medium",
    "question": "What are the countries having at least one car maker? List name and id.",
    "pred": "SELECT distinct countries.countryname , countries.countryid from car_makers join countries on car_makers.country = countries.countryid",
    "gold": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;"
  },
  {
    "index": 129,
    "db_id": "car_1",
    "db_info": "# countries ( countryname, continent )\n# continents ( continent )\n# car_makers ( maker, fullname, country )\n# model_list ( maker, model )\n# car_names ( model, make )\n# cars_data ( mpg, cylinders, edispl, horsepower, weight, accelerate, year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "extra",
    "question": "Which countries in europe have at least 3 car manufacturers?",
    "pred": "SELECT countries.countryname  FROM  countries  JOIN  car_makers ON countries.countryname = car_makers.country  WHERE  countries.continent = 'Europe'  GROUP BY  countries.countryname  HAVING  COUNT(car_makers.maker) >= 3;",
    "gold": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"
  },
  {
    "index": 130,
    "db_id": "car_1",
    "db_info": "# continents ( contid )\n# countries ( countryname, continent )\n# car_makers ( maker, fullname, country )\n# model_list ( maker, model )\n# car_names ( makeid, model )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model",
    "difficulty": "extra",
    "question": "What are the names of all European countries with at least 3 manufacturers?",
    "pred": "SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryname = car_makers.country JOIN continents ON countries.continent = continents.contid WHERE continents.contid = 'Europe' GROUP BY countries.countryname HAVING count(car_makers.maker) >= 3;",
    "gold": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"
  },
  {
    "index": 131,
    "db_id": "car_1",
    "db_info": "# cars_data ( horsepower )\n# model_list ( modelid, maker )\n# car_makers ( id, maker )\n# car_names ( makeid, model, make )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "extra",
    "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
    "pred": "SELECT max(cars_data.horsepower),  car_makers.maker  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.modelid  JOIN car_makers ON model_list.maker = car_makers.id  WHERE cars_data.cylinders = 3 GROUP BY car_makers.maker;",
    "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"
  },
  {
    "index": 132,
    "db_id": "car_1",
    "db_info": "# cars_data ( horsepower, cylinders, id )\n# model_list ( maker, modelid, model )\n# car_makers ( maker, id, fullname, country )\n# model_list.maker = car_makers.id",
    "difficulty": "extra",
    "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
    "pred": "SELECT max ( cars_data.horsepower ), car_makers.fullname FROM cars_data  JOIN model_list ON cars_data.id = model_list.modelid  JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3 ORDER BY cars_data.horsepower DESC LIMIT 1;",
    "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"
  },
  {
    "index": 138,
    "db_id": "car_1",
    "db_info": "# car_makers ( maker )\n# model_list ( maker )\n# car_names ( model )\n# cars_data ( edispl, id )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "medium",
    "question": "What is the average edispl for all volvos?",
    "pred": "SELECT avg ( cars_data.edispl ) from cars_data join car_names on cars_data.id = car_names.rowid join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.rowid where car_makers.maker = 'volvo';",
    "gold": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"
  },
  {
    "index": 139,
    "db_id": "car_1",
    "db_info": "# cars_data ( cylinders )",
    "difficulty": "medium",
    "question": "What is the maximum accelerate for different number of cylinders?",
    "pred": "SELECT Cylinders, max(Acceleration)  FROM  cars_data  GROUP BY  Cylinders",
    "gold": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"
  },
  {
    "index": 142,
    "db_id": "car_1",
    "db_info": "# model_list ( modelid, maker, model )\n# car_names ( model, makeid, make )\n# car_makers ( country, id, maker, fullname )\n# countries ( continent, countryid, countryname )\n# continents ( continent, contid )\n# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "hard",
    "question": "What model has the most different versions?",
    "pred": "SELECT model_list.model FROM model_list GROUP BY model_list.model ORDER BY COUNT(model_list.model) DESC, model_list.model ASC LIMIT 1",
    "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"
  },
  {
    "index": 151,
    "db_id": "car_1",
    "db_info": "# car_makers ( maker, fullname, country )\n# model_list ( maker, model )\n# cars_data ( weight, id )\n# car_names ( makeid, model, make )\n# countries ( countryid, countryname, continent )\n# continents ( contid, continent )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "extra",
    "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
    "pred": "SELECT distinct model_list.model  FROM model_list  JOIN car_makers ON model_list.maker = car_makers.maker  JOIN car_names ON car_names.model = model_list.model  JOIN cars_data ON cars_data.id = car_names.makeid  WHERE car_makers.fullname = 'General Motors' OR cars_data.weight > 3500;",
    "gold": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"
  },
  {
    "index": 152,
    "db_id": "car_1",
    "db_info": "# car_makers ( maker, fullname, country, id )\n# model_list ( maker, model, modelid )\n# cars_data ( weight, id, mpg, cylinders, edispl, horsepower, accelerate, year )\n# model_list.maker = car_makers.id",
    "difficulty": "extra",
    "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
    "pred": "SELECT distinct model_list.model  FROM  model_list  JOIN  car_makers ON model_list.maker = car_makers.id  WHERE  car_makers.fullname = 'General Motors' OR model_list.modelid IN ( SELECT id FROM cars_data WHERE weight > 3500 )",
    "gold": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"
  },
  {
    "index": 154,
    "db_id": "car_1",
    "db_info": "# cars_data ( year, weight, id )\n# car_names ( makeid, model )\n# model_list ( modelid, maker )\n# car_makers ( id, maker, country )\n# countries ( countryid, countryname )\n# continents ( contid, continent )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "easy",
    "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
    "pred": "SELECT distinct year from cars_data where weight < 4000 intersect select distinct year from cars_data where weight > 3000",
    "gold": "select distinct year from cars_data where weight between 3000 and 4000;"
  },
  {
    "index": 158,
    "db_id": "car_1",
    "db_info": "# model_list ( modelid )\n# car_makers ( id, maker )\n# car_names ( makeid, model )\n# cars_data ( id, accelerate, cylinders )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "extra",
    "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
    "pred": "SELECT cars_data.cylinders  FROM  cars_data  JOIN  car_names ON cars_data.id = car_names.makeid  JOIN  model_list ON car_names.model = model_list.modelid  JOIN  car_makers ON model_list.maker = car_makers.id WHERE  car_makers.maker = 'volvo'  ORDER BY  cars_data.accelerate ASC  LIMIT 1;",
    "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"
  },
  {
    "index": 160,
    "db_id": "car_1",
    "db_info": "# cars_data ( accelerate, horsepower, id, mpg, cylinders, edispl, weight, year )\n# car_names ( makeid, model, make )\n# model_list ( modelid, maker, model )\n# car_makers ( id, maker, fullname, country )\n# countries ( countryid, countryname, continent )\n# continents ( contid, continent )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "hard",
    "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
    "pred": "SELECT count(*)  FROM  cars_data  WHERE  accelerate > (SELECT horsepower FROM cars_data ORDER BY horsepower DESC LIMIT 1);",
    "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"
  },
  {
    "index": 162,
    "db_id": "car_1",
    "db_info": "# countries ( countryid, countryname, continent )\n# car_makers ( id, maker, fullname, country )\n# car_makers.country = countries.countryid",
    "difficulty": "medium",
    "question": "What is the number of countries with more than 2 car makers ?",
    "pred": "SELECT count(*)  FROM  (   SELECT country    FROM car_makers    GROUP BY country    HAVING count(*) > 2 ) AS subquery",
    "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2"
  },
  {
    "index": 166,
    "db_id": "car_1",
    "db_info": "# cars_data ( horsepower, cylinders )\n# model_list ( model, maker )\n# car_makers ( maker, country )\n# model_list.maker = car_makers.id",
    "difficulty": "extra",
    "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
    "pred": "SELECT model_list.model  FROM  model_list  JOIN  cars_data ON model_list.model = cars_data.model  WHERE  cars_data.cylinders = 4  ORDER BY  cars_data.horsepower DESC  LIMIT 1;",
    "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"
  },
  {
    "index": 172,
    "db_id": "car_1",
    "db_info": "# cars_data ( weight, id, mpg, cylinders, edispl, horsepower, accelerate, year )\n# car_makers ( id, maker, fullname, country )\n# model_list ( modelid, maker, model )\n# model_list.maker = car_makers.id",
    "difficulty": "extra",
    "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
    "pred": "SELECT distinct model_list.model  FROM  model_list  JOIN  cars_data  ON  model_list.modelid = cars_data.id  WHERE  cars_data.weight < 3500  AND  model_list.maker NOT IN (SELECT id FROM car_makers WHERE fullname = 'Ford Motor Company')",
    "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"
  },
  {
    "index": 173,
    "db_id": "car_1",
    "db_info": "# countries ( countryname, countryid )\n# car_makers ( country, maker, id, fullname )\n# continents ( contid, continent )\n# model_list ( maker, modelid, model )\n# car_names ( model, makeid, make )\n# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "hard",
    "question": "What are the name of the countries where there is not a single car maker?",
    "pred": "SELECT countries.countryname  FROM  countries  LEFT JOIN  car_makers ON countries.countryid = car_makers.country  WHERE  car_makers.maker IS NULL;",
    "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"
  },
  {
    "index": 174,
    "db_id": "car_1",
    "db_info": "# countries ( countryname, countryid )\n# car_makers ( country, maker, id )\n# continents ( contid, continent )\n# model_list ( maker, model )\n# car_names ( model, makeid, make )\n# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "hard",
    "question": "What are the names of the countries with no car makers?",
    "pred": "SELECT countryname  FROM  countries  WHERE  countryid NOT IN (SELECT country FROM car_makers)",
    "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"
  },
  {
    "index": 175,
    "db_id": "car_1",
    "db_info": "# car_makers ( id, maker, fullname, country )\n# model_list ( modelid, maker, model )\n# car_names ( makeid, model, make )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model",
    "difficulty": "extra",
    "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
    "pred": "SELECT id, maker  FROM  car_makers  WHERE  id IN (     SELECT      maker      FROM      model_list      GROUP BY      maker      HAVING      COUNT(model) >= 2  )  AND  id IN (     SELECT      id      FROM      car_makers      GROUP BY      id      HAVING      COUNT(maker) > 3 )",
    "gold": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;"
  },
  {
    "index": 176,
    "db_id": "car_1",
    "db_info": "# car_makers ( id, maker, fullname, country )\n# model_list ( maker, modelid, model )\n# car_names ( makeid, model, make )\n# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "extra",
    "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
    "pred": "SELECT car_makers.id, car_makers.maker FROM  car_makers  JOIN  model_list ON car_makers.id = model_list.maker JOIN  car_names ON model_list.model = car_names.model GROUP BY  car_makers.id, car_makers.maker HAVING  COUNT(DISTINCT model_list.model) >= 2 AND COUNT(car_names.makeid) > 3;",
    "gold": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;"
  },
  {
    "index": 182,
    "db_id": "flight_2",
    "db_info": "# airlines ( abbreviation )\n# airports ( airportcode, airportname )\n# flights ( airline, sourceairport, destairport, flightno )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "easy",
    "question": "Which abbreviation corresponds to Jetblue Airways?",
    "pred": "SELECT abbreviation  FROM  airlines  WHERE  airlinename = 'JetBlue Airways';",
    "gold": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
  },
  {
    "index": 205,
    "db_id": "flight_2",
    "db_info": "# flights ( destairport, airline, flightno, sourceairport )\n# airports ( airportcode, airportname, city, country, countryabbrev )\n# airlines ( airline, abbreviation, country, uid )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "easy",
    "question": "How many flights have destination ATO?",
    "pred": "SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Atlanta';",
    "gold": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""
  },
  {
    "index": 206,
    "db_id": "flight_2",
    "db_info": "# flights ( destairport )\n# airports ( airportcode )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "easy",
    "question": "Count the number of flights into ATO.",
    "pred": "SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Athens';",
    "gold": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""
  },
  {
    "index": 210,
    "db_id": "flight_2",
    "db_info": "# flights ( destairport, flightno, airline, sourceairport )\n# airports ( airportcode, airportname, city, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "medium",
    "question": "Return the number of flights arriving in Aberdeen.",
    "pred": "SELECT count ( * ) from airports where city = 'Aberdeen';",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
  },
  {
    "index": 213,
    "db_id": "flight_2",
    "db_info": "# airlines ( airline, abbreviation, country, uid )\n# flights ( airline, flightno, sourceairport, destairport )",
    "difficulty": "medium",
    "question": "How many flights does airline 'JetBlue Airways' have?",
    "pred": "SELECT count ( * )  FROM  flights  JOIN  airlines  ON  flights.airline = airlines.abbreviation  WHERE  airlines.airline = 'JetBlue Airways';",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""
  },
  {
    "index": 215,
    "db_id": "flight_2",
    "db_info": "# flights ( airline, destairport )\n# airlines ( airline )",
    "difficulty": "medium",
    "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
    "pred": "SELECT count ( * ) from flights join airlines on flights.airline = airlines.airline where airlines.airline = 'United Airlines' and flights.destairport = 'ASY';",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""
  },
  {
    "index": 216,
    "db_id": "flight_2",
    "db_info": "# flights ( airline, flightno, sourceairport, destairport )\n# airlines ( airline, abbreviation, country )\n# airports ( airportcode, city, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "medium",
    "question": "Count the number of United Airlines flights arriving in ASY Airport.",
    "pred": "SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode join airlines on flights.airline = airlines.abbreviation where airlines.airline = 'United Airlines' and airports.airportname = 'Asbury Park Ocean Pkwy'",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""
  },
  {
    "index": 217,
    "db_id": "flight_2",
    "db_info": "# flights ( airline, sourceairport )\n# airlines ( airline )\n# airports ( airportcode )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "medium",
    "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
    "pred": "SELECT count ( * ) from flights join airports on flights.sourceairport = airports.airportcode join airlines on flights.airline = airlines.airline where airlines.airline = 'United Airlines' and airports.airportcode = 'AHD';",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""
  },
  {
    "index": 218,
    "db_id": "flight_2",
    "db_info": "# flights ( airline, flightno, sourceairport, destairport )\n# airports ( airportcode, city, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "medium",
    "question": "Return the number of United Airlines flights leaving from AHD Airport.",
    "pred": "SELECT count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Ardmore' and flights.airline = 'United Airlines';",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""
  },
  {
    "index": 219,
    "db_id": "flight_2",
    "db_info": "# airlines ( airline, abbreviation, country )\n# flights ( airline, flightno, sourceairport, destairport )\n# airports ( city, airportcode, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "hard",
    "question": "How many United Airlines flights go to City 'Aberdeen'?",
    "pred": "SELECT count ( * ) from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen' and flights.airline = 'United Airlines';",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""
  },
  {
    "index": 220,
    "db_id": "flight_2",
    "db_info": "# flights ( airline, flightno, sourceairport, destairport )\n# airlines ( airline, uid, abbreviation, country )\n# airports ( airportcode, city, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "hard",
    "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
    "pred": "SELECT count ( * ) from flights join airlines on flights.airline = airlines.abbreviation join airports on flights.destairport = airports.airportcode where airlines.airline = 'United Airlines' and airports.city = 'Aberdeen';",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""
  },
  {
    "index": 225,
    "db_id": "flight_2",
    "db_info": "# airports ( airportcode, city, airportname, country, countryabbrev )",
    "difficulty": "extra",
    "question": "What is the code of airport that has the highest number of flights?",
    "pred": "SELECT destairport  FROM  flights  GROUP BY  destairport  ORDER BY  COUNT(*) DESC  LIMIT 1;",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 226,
    "db_id": "flight_2",
    "db_info": "# flights ( destairport, sourceairport, airline )\n# airports ( airportcode, airportname, city, country )\n# airlines ( airline, abbreviation, country )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "extra",
    "question": "What is the airport code of the airport with the most flights?",
    "pred": "SELECT airportcode from airports join flights on airports.airportcode = flights.destairport group by airports.airportcode order by count ( * ) desc limit 1",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 227,
    "db_id": "flight_2",
    "db_info": "# flights ( destairport, sourceairport, airline, flightno )\n# airports ( airportcode, city, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "extra",
    "question": "What is the code of airport that has fewest number of flights?",
    "pred": "SELECT airports.airportcode from flights join airports on flights.sourceairport = airports.airportcode group by airports.airportcode order by count ( * ) asc limit 1",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"
  },
  {
    "index": 228,
    "db_id": "flight_2",
    "db_info": "# flights ( sourceairport, airline, flightno, destairport )\n# airports ( airportcode, airportname, city, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "extra",
    "question": "Give the code of the airport with the least flights.",
    "pred": "SELECT sourceairport  FROM  flights  GROUP BY  sourceairport  ORDER BY  COUNT(*) ASC  LIMIT 1;",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"
  },
  {
    "index": 229,
    "db_id": "flight_2",
    "db_info": "# flights ( airline, flightno, sourceairport, destairport )\n# airlines ( airline, uid, abbreviation, country )\n# airports ( airportname, airportcode, city, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "extra",
    "question": "Which airline has most number of flights?",
    "pred": "SELECT airline  FROM flights  GROUP BY airline  ORDER BY COUNT(*) DESC  LIMIT 1",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 230,
    "db_id": "flight_2",
    "db_info": "# flights ( airline, flightno, sourceairport, destairport )\n# airlines ( airline, uid, abbreviation, country )",
    "difficulty": "extra",
    "question": "What airline serves the most flights?",
    "pred": "SELECT flights.airline  FROM  flights  GROUP BY  flights.airline  ORDER BY  COUNT(*) DESC  LIMIT 1;",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 231,
    "db_id": "flight_2",
    "db_info": "# airlines ( abbreviation, country, airline )\n# flights ( airline, flightno, sourceairport, destairport )\n# airports ( airportcode, country, airportname, city, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "extra",
    "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
    "pred": "SELECT abbreviation, country from airlines group by airline order by count ( * ) asc limit 1;",
    "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"
  },
  {
    "index": 232,
    "db_id": "flight_2",
    "db_info": "# airlines ( abbreviation, country, airline, uid )\n# flights ( airline, sourceairport, destairport, flightno )\n# airports ( country, airportcode, airportname, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "extra",
    "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
    "pred": "SELECT abbreviation, country from airlines group by abbreviation, country order by count ( * ) asc limit 1",
    "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"
  },
  {
    "index": 233,
    "db_id": "flight_2",
    "db_info": "# flights ( sourceairport, airline, flightno )\n# airports ( airportcode, airportname, city )\n# airlines ( airline, uid, abbreviation )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "medium",
    "question": "What are airlines that have some flight departing from airport 'AHD'?",
    "pred": "SELECT distinct airlines.airline  FROM  airlines  JOIN  flights  ON  airlines.airline = flights.airline  JOIN  airports  ON  airports.airportcode = flights.sourceairport  WHERE  airports.airportcode = 'AHD';",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""
  },
  {
    "index": 234,
    "db_id": "flight_2",
    "db_info": "# flights ( sourceairport, airline, flightno, destairport )\n# airports ( airportcode, city, airportname, country, countryabbrev )\n# airlines ( airline, uid, abbreviation, country )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "medium",
    "question": "Which airlines have a flight with source airport AHD?",
    "pred": "SELECT airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'AHD';",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""
  },
  {
    "index": 235,
    "db_id": "flight_2",
    "db_info": "# airports ( airportcode, airportname, city, country, countryabbrev )\n# flights ( airline, flightno, sourceairport, destairport )\n# airlines ( airline, abbreviation, country, uid )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "medium",
    "question": "What are airlines that have flights arriving at airport 'AHD'?",
    "pred": "SELECT airlines.airline from airlines join flights on airlines.airline = flights.airline join airports on flights.sourceairport = airports.airportcode where airports.airportname = 'Downtown Airport';",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""
  },
  {
    "index": 236,
    "db_id": "flight_2",
    "db_info": "# flights ( destairport, airline, flightno, sourceairport )\n# airlines ( airline, uid, abbreviation, country )",
    "difficulty": "medium",
    "question": "Which airlines have a flight with destination airport AHD?",
    "pred": "SELECT distinct airline from flights where destairport = 'AHD';",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""
  },
  {
    "index": 237,
    "db_id": "flight_2",
    "db_info": "# airlines ( airline, abbreviation, country, uid )\n# flights ( airline, sourceairport, destairport, flightno )\n# airports ( airportcode, country, countryabbrev, city, airportname )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "extra",
    "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
    "pred": "SELECT airline from flights where destairport = 'APG' intersect select airline from flights where destairport = 'CVO';",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""
  },
  {
    "index": 238,
    "db_id": "flight_2",
    "db_info": "# flights ( airline, flightno, sourceairport, destairport )\n# airports ( airportcode, city, airportname, country, countryabbrev )\n# airlines ( airline, abbreviation, country, uid )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "extra",
    "question": "Which airlines have departing flights from both APG and CVO airports?",
    "pred": "SELECT airlines.airline from airlines join flights on airlines.airline = flights.airline join airports on airports.airportcode = flights.sourceairport where airports.city = 'Trenton' intersect select airlines.airline from airlines join flights on airlines.airline = flights.airline join airports on airports.airportcode = flights.sourceairport where airports.city = 'Corvallis';",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""
  },
  {
    "index": 239,
    "db_id": "flight_2",
    "db_info": "# airlines ( airline, abbreviation, country )\n# flights ( airline, flightno, sourceairport, destairport )\n# airports ( city, airportcode, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "extra",
    "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
    "pred": "SELECT airlines.airline from airlines join flights on airlines.abbreviation = flights.airline join airports on airports.airportcode = flights.sourceairport where airports.airportcode = 'CVO' except select airlines.airline from airlines join flights on airlines.abbreviation = flights.airline join airports on airports.airportcode = flights.sourceairport where airports.airportcode = 'APG';",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""
  },
  {
    "index": 240,
    "db_id": "flight_2",
    "db_info": "# flights ( airline, flightno, sourceairport, destairport )\n# airlines ( uid, airline, abbreviation, country )\n# airports ( city, airportcode, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "extra",
    "question": "Which airlines have departures from CVO but not from APG airports?",
    "pred": "SELECT airlines.airline from airlines join flights on airlines.airline = flights.airline join airports on airports.airportcode = flights.sourceairport where airports.city = 'Cordova' except select airlines.airline from airlines join flights on airlines.airline = flights.airline join airports on airports.airportcode = flights.sourceairport where airports.city = 'Marion';",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""
  },
  {
    "index": 241,
    "db_id": "flight_2",
    "db_info": "# airlines ( airline, uid, abbreviation, country )\n# flights ( airline, flightno, sourceairport, destairport )\n# airports ( city, airportcode, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "medium",
    "question": "Find all airlines that have at least 10 flights.",
    "pred": "SELECT airline  FROM  flights  GROUP BY  airline  HAVING  COUNT(*) >= 10;",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"
  },
  {
    "index": 242,
    "db_id": "flight_2",
    "db_info": "# airlines ( airline, abbreviation, country )\n# flights ( airline, flightno, sourceairport, destairport )",
    "difficulty": "medium",
    "question": "Which airlines have at least 10 flights?",
    "pred": "SELECT airline  FROM flights  GROUP BY airline  HAVING COUNT(*) >= 10",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"
  },
  {
    "index": 243,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid, airline, abbreviation, country )\n# flights ( airline, flightno, sourceairport, destairport )\n# airports ( city, airportcode, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "medium",
    "question": "Find all airlines that have fewer than 200 flights.",
    "pred": "SELECT airlines.airline  FROM  airlines  LEFT JOIN flights  ON airlines.uid = flights.airline  GROUP BY  airlines.airline  HAVING COUNT(flights.flightno) < 200",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"
  },
  {
    "index": 244,
    "db_id": "flight_2",
    "db_info": "# flights ( airline, flightno )\n# airlines ( uid, airline, abbreviation )\n# airports ( airportcode, airportname, country, countryabbrev, city )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "medium",
    "question": "Which airlines have less than 200 flights?",
    "pred": "SELECT airlines.airline FROM  flights JOIN airlines ON flights.airline = airlines.abbreviation GROUP BY airlines.airline HAVING COUNT(flights.flightno) < 200",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"
  },
  {
    "index": 246,
    "db_id": "flight_2",
    "db_info": "# flights ( flightno, airline, sourceairport, destairport )\n# airlines ( airline, abbreviation, country, uid )\n# airports ( airportcode, airportname, country, countryabbrev, city )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "medium",
    "question": "Which flight numbers correspond to United Airlines flights?",
    "pred": "SELECT flightno  FROM flights  INNER JOIN airlines  ON flights.airline = airlines.airline  WHERE airlines.airline = 'United Airlines'",
    "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""
  },
  {
    "index": 247,
    "db_id": "flight_2",
    "db_info": "# airports ( airportcode, airportname, city, country, countryabbrev )\n# flights ( flightno, airline, sourceairport, destairport )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "easy",
    "question": "What are flight numbers of flights departing from Airport \"APG\"?",
    "pred": "SELECT distinct flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.airportname = 'Phillips Army Air Field';",
    "gold": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
  },
  {
    "index": 249,
    "db_id": "flight_2",
    "db_info": "# flights ( flightno, destairport, airline, sourceairport )\n# airports ( airportcode, airportname, city, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "easy",
    "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
    "pred": "SELECT flightno from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Malabo';",
    "gold": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""
  },
  {
    "index": 250,
    "db_id": "flight_2",
    "db_info": "# flights ( flightno )",
    "difficulty": "easy",
    "question": "Give the flight numbers of flights landing at APG.",
    "pred": "SELECT flightno  FROM  flights  WHERE  flights.flightno IN (SELECT flightno FROM enroute WHERE facility = 'APG')",
    "gold": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""
  },
  {
    "index": 277,
    "db_id": "employee_hire_evaluation",
    "db_info": "# evaluation ( employee_id, year_awarded, bonus )\n# employee ( employee_id, name, age, city )\n# hiring ( employee_id, shop_id, start_from, is_full_time )\n# shop ( shop_id, name, location, district, number_products, manager_name )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id",
    "difficulty": "extra",
    "question": "find the name of employee who was awarded the most times in the evaluation.",
    "pred": "SELECT employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by employee.employee_id order by count ( * ) desc limit 1",
    "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 278,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id, name, age, city )\n# evaluation ( employee_id, year_awarded, bonus )\n# hiring ( shop_id, employee_id, start_from, is_full_time )\n# shop ( shop_id, name, location, district, number_products, manager_name )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id",
    "difficulty": "extra",
    "question": "Which employee received the most awards in evaluations? Give me the employee name.",
    "pred": "SELECT employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by employee.name order by count ( * ) desc limit 1",
    "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 294,
    "db_id": "employee_hire_evaluation",
    "db_info": "# shop ( number_products, location )",
    "difficulty": "hard",
    "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
    "pred": "SELECT location from shop where number_products < 3000 intersect select location from shop where number_products > 10000",
    "gold": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000"
  },
  {
    "index": 312,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# templates ( template_id, template_type_code, version_number, date_effective_from, date_effective_to, template_details )\n# documents ( document_id, template_id, document_name, document_description, other_details )\n# ref_template_types ( template_type_code, template_type_description )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id",
    "difficulty": "extra",
    "question": "Return the id and type code of the template that is used for the greatest number of documents.",
    "pred": "SELECT templates.template_id, templates.template_type_code  FROM  templates  JOIN  documents ON templates.template_id = documents.template_id  GROUP BY  templates.template_id, templates.template_type_code  ORDER BY  COUNT(documents.document_id) DESC  LIMIT 1;",
    "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 335,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# templates ( version_number, template_type_code, template_id )\n# ref_template_types ( template_type_code )\n# documents ( template_id, document_id )\n# paragraphs ( document_id, paragraph_text )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id",
    "difficulty": "medium",
    "question": "What the smallest version number and its template type code?",
    "pred": "SELECT min ( version_number ), template_type_code from templates group by template_type_code order by min ( version_number ) asc limit 1;",
    "gold": "SELECT min(Version_Number) ,  template_type_code FROM Templates"
  },
  {
    "index": 336,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )\n# ref_template_types ( template_type_code, template_type_description )\n# documents ( document_id, template_id, document_name, document_description, other_details )\n# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id",
    "difficulty": "medium",
    "question": "Return the lowest version number, along with its corresponding template type code.",
    "pred": "SELECT template_type_code, min ( version_number )  FROM templates  GROUP BY template_type_code;",
    "gold": "SELECT min(Version_Number) ,  template_type_code FROM Templates"
  },
  {
    "index": 354,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )\n# ref_template_types ( template_type_code, template_type_description )\n# documents ( document_id, template_id, document_name, document_description, other_details )\n# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id",
    "difficulty": "medium",
    "question": "Return the different descriptions for templates that have been used in a document.",
    "pred": "SELECT distinct ref_template_types.template_type_description  FROM      ref_template_types  JOIN      templates  ON      ref_template_types.template_type_code = templates.template_type_code  JOIN      documents  ON      templates.template_id = documents.template_id  WHERE      documents.document_name = 'Financial Report';",
    "gold": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"
  },
  {
    "index": 361,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# paragraphs ( paragraph_text, paragraph_id, document_id, other_details )\n# documents ( document_id, document_name, document_description, template_id, other_details )\n# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )\n# ref_template_types ( template_type_code, template_type_description )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id",
    "difficulty": "medium",
    "question": "Show paragraph details for paragraph with text 'Korea ' .",
    "pred": "SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%';",
    "gold": "select other_details from paragraphs where paragraph_text like 'korea'"
  },
  {
    "index": 362,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# paragraphs ( paragraph_text )\n# documents ( document_id, other_details )\n# templates ( template_id, template_details )\n# ref_template_types ( template_type_code, template_type_description )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id",
    "difficulty": "medium",
    "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
    "pred": "SELECT distinct paragraphs.paragraph_text, documents.other_details  FROM  documents  JOIN  paragraphs  ON  documents.document_id = paragraphs.document_id  WHERE  paragraphs.paragraph_text LIKE '%Korea %';",
    "gold": "select other_details from paragraphs where paragraph_text like 'korea'"
  },
  {
    "index": 404,
    "db_id": "course_teach",
    "db_info": "# teacher ( name )\n# course_arrange ( teacher_id, course_id )\n# course_arrange.teacher_id = teacher.teacher_id",
    "difficulty": "hard",
    "question": "What are the names of the people who teach math courses?",
    "pred": "SELECT teacher.name  FROM  teacher  JOIN  course_arrange ON teacher.teacher_id = course_arrange.teacher_id  JOIN  course ON course_arrange.course_id = course.course_id  WHERE  course.name = 'Math';",
    "gold": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""
  },
  {
    "index": 407,
    "db_id": "course_teach",
    "db_info": "# teacher ( teacher_id, name, age, hometown )\n# course ( course_id, course )\n# course_arrange ( course_id, teacher_id, grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id",
    "difficulty": "medium",
    "question": "Show names of teachers that teach at least two courses.",
    "pred": "SELECT teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count ( * ) >= 2",
    "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"
  },
  {
    "index": 408,
    "db_id": "course_teach",
    "db_info": "# teacher ( name, teacher_id, age, hometown )\n# course ( course_id, course )\n# course_arrange ( teacher_id, course_id, grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id",
    "difficulty": "medium",
    "question": "What are the names of the teachers who teach at least two courses?",
    "pred": "SELECT teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count ( * ) >= 2",
    "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"
  },
  {
    "index": 419,
    "db_id": "museum_visit",
    "db_info": "# visitor ( id, name, age, level_of_membership )\n# visit ( visitor_id, museum_id, num_of_ticket, total_spent )\n# visit.visitor_id = visitor.id",
    "difficulty": "medium",
    "question": "find the id, name and age for visitors who visited some museums more than once.",
    "pred": "SELECT visitor.id, visitor.name, visitor.age FROM visitor JOIN (     SELECT     visitor_id     FROM     visit     GROUP BY     visitor_id, museum_id     HAVING     COUNT(*) > 1 ) as repeat_visits ON visitor.id = repeat_visits.visitor_id",
    "gold": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1"
  },
  {
    "index": 420,
    "db_id": "museum_visit",
    "db_info": "# visit ( total_spent, museum_id, visitor_id, num_of_ticket )\n# visitor ( id, name, level_of_membership, age )\n# visit.visitor_id = visitor.id",
    "difficulty": "extra",
    "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
    "pred": "SELECT visitor.id, visitor.name, visitor.level_of_membership  FROM  visitor  JOIN  visit  ON  visitor.id = visit.visitor_id  GROUP BY  visitor.id  ORDER BY  SUM(visit.total_spent) DESC  LIMIT 1;",
    "gold": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1"
  },
  {
    "index": 433,
    "db_id": "wta_1",
    "db_info": "# players ( first_name, birth_date, player_id )\n# matches ( winner_name, winner_id, winner_ioc, winner_age )\n# rankings ( ranking_date, player_id )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id",
    "difficulty": "medium",
    "question": "List the first name and birth date of all players from the country with code USA.",
    "pred": "SELECT players.first_name, players.birth_date             FROM             players             JOIN             matches             ON             players.player_id = matches.winner_id             WHERE             matches.winner_ioc = 'USA'",
    "gold": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"
  },
  {
    "index": 434,
    "db_id": "wta_1",
    "db_info": "# players ( first_name, birth_date, player_id )\n# rankings ( player_id, ranking_date )\n# matches ( winner_id, loser_id, winner_name, loser_name, winner_age, loser_age )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id",
    "difficulty": "medium",
    "question": "What are the first names and birth dates of players from the USA?",
    "pred": "SELECT first_name, birth_date FROM  players WHERE  country = 'USA'",
    "gold": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"
  },
  {
    "index": 453,
    "db_id": "wta_1",
    "db_info": "# players ( first_name, country_code, player_id )\n# rankings ( player_id, ranking_date, ranking_points, ranking, tours )\n# rankings.player_id = players.player_id",
    "difficulty": "medium",
    "question": "Find the first name and country code of the oldest player.",
    "pred": "SELECT players.first_name, players.country_code  FROM players  JOIN (     SELECT player_id      FROM rankings      ORDER BY ranking_date ASC      LIMIT 1 ) AS oldest_player  ON players.player_id = oldest_player.player_id",
    "gold": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"
  },
  {
    "index": 454,
    "db_id": "wta_1",
    "db_info": "# players ( first_name, country_code, player_id )\n# rankings ( ranking_date, player_id, ranking_points, tours, ranking )\n# rankings.player_id = players.player_id",
    "difficulty": "medium",
    "question": "What is the first name and country code of the oldest player?",
    "pred": "SELECT players.first_name, players.country_code FROM players JOIN (SELECT player_id FROM rankings ORDER BY ranking_date ASC LIMIT 1) AS oldest_rankings ON players.player_id = oldest_rankings.player_id",
    "gold": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"
  },
  {
    "index": 458,
    "db_id": "wta_1",
    "db_info": "# players ( hand, first_name, last_name )\n# matches ( winner_id )\n# rankings ( player_id )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id",
    "difficulty": "medium",
    "question": "What are the full names of all left handed players, in order of birth date?",
    "pred": "SELECT distinct players.first_name, players.last_name  FROM players  WHERE players.hand = 'L'  ORDER BY players.dob ASC;",
    "gold": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"
  },
  {
    "index": 459,
    "db_id": "wta_1",
    "db_info": "# rankings ( player_id, ranking_date, ranking, ranking_points, tours )\n# players ( player_id, first_name, country_code, last_name )\n# matches ( winner_id, loser_id, tourney_id, tourney_name, tourney_date )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id",
    "difficulty": "hard",
    "question": "Find the first name and country code of the player who did the most number of tours.",
    "pred": "SELECT players.first_name, players.country_code  FROM players  JOIN rankings  ON players.player_id = rankings.player_id  GROUP BY players.player_id  ORDER BY SUM(rankings.tours) DESC  LIMIT 1",
    "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"
  },
  {
    "index": 460,
    "db_id": "wta_1",
    "db_info": "# players ( player_id, first_name, last_name, birth_date, country_code, hand )\n# rankings ( ranking_date, ranking, player_id, ranking_points, tours )\n# rankings.player_id = players.player_id",
    "difficulty": "hard",
    "question": "What is the first name and country code of the player with the most tours?",
    "pred": "SELECT players.first_name, players.country_code  FROM players  JOIN rankings  ON players.player_id = rankings.player_id  GROUP BY players.player_id  ORDER BY SUM(rankings.tours) DESC  LIMIT 1",
    "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"
  },
  {
    "index": 463,
    "db_id": "wta_1",
    "db_info": "# matches ( winner_name, winner_rank_points, winner_id )\n# players ( player_id )\n# rankings ( ranking_date, ranking, ranking_points, player_id )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id",
    "difficulty": "hard",
    "question": "Find the name and rank points of the winner who won the most times.",
    "pred": "SELECT winner_name , winner_rank_points from matches group by winner_id order by count ( * ) desc limit 1 ;",
    "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 464,
    "db_id": "wta_1",
    "db_info": "# matches ( winner_name, winner_id, winner_rank_points )\n# players ( player_id, first_name, last_name )\n# rankings ( player_id, ranking_points )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id",
    "difficulty": "hard",
    "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
    "pred": "SELECT players.first_name,  players.last_name,  rankings.ranking_points  FROM  players  JOIN  matches ON players.player_id = matches.winner_id  JOIN  rankings ON players.player_id = rankings.player_id  GROUP BY  players.player_id  ORDER BY  COUNT(matches.winner_id) DESC, rankings.ranking_points DESC LIMIT 1;",
    "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 469,
    "db_id": "wta_1",
    "db_info": "# players ( player_id, first_name, last_name, hand, birth_date, country_code )\n# rankings ( ranking_date, ranking, player_id, ranking_points, tours )\n# rankings.player_id = players.player_id",
    "difficulty": "medium",
    "question": "Find the average ranking for each player and their first name.",
    "pred": "SELECT players.first_name, players.player_id, AVG(rankings.ranking) AS average_ranking FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;",
    "gold": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
  },
  {
    "index": 480,
    "db_id": "wta_1",
    "db_info": "# rankings ( ranking_date, tours )\n# players ( player_id )\n# matches ( tourney_date )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id",
    "difficulty": "medium",
    "question": "How many total tours were there for each ranking date?",
    "pred": "SELECT ranking_date, COUNT(DISTINCT tours) FROM rankings GROUP BY ranking_date;",
    "gold": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"
  },
  {
    "index": 482,
    "db_id": "wta_1",
    "db_info": "# matches ( winner_id, loser_id, tourney_date, match_num, best_of, draw_size, round, score, surface, tourney_id, tourney_level, tourney_name, minutes )\n# players ( player_id, first_name, last_name, hand, birth_date, country_code )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id",
    "difficulty": "medium",
    "question": "How many matches were played in each year?",
    "pred": "SELECT COUNT(*),  SUBSTR(tourney_date, 1, 4) AS year  FROM matches  GROUP BY year;",
    "gold": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR"
  },
  {
    "index": 486,
    "db_id": "wta_1",
    "db_info": "# players ( hand, player_id, first_name, last_name, birth_date, country_code )\n# matches ( winner_hand, loser_hand, winner_id, loser_id, best_of, draw_size, loser_age, loser_entry, loser_ht, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_ht, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year )\n# rankings ( player_id, ranking_date, ranking, ranking_points, tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id",
    "difficulty": "medium",
    "question": "Find the number of left handed winners who participated in the WTA Championships.",
    "pred": "SELECT count ( distinct winner_name ) from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' and players.hand = 'L';",
    "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"
  },
  {
    "index": 487,
    "db_id": "wta_1",
    "db_info": "# matches ( winner_name, winner_ioc, winner_age, winner_rank_points )\n# players ( first_name, country_code, birth_date )\n# rankings ( ranking_points, player_id )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id",
    "difficulty": "hard",
    "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
    "pred": "SELECT players.first_name, players.country_code, players.birth_date  FROM  players  JOIN  matches ON players.player_id = matches.winner_id  JOIN  rankings ON players.player_id = rankings.player_id  ORDER BY  rankings.ranking_points DESC  LIMIT 1;",
    "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"
  },
  {
    "index": 493,
    "db_id": "battle_death",
    "db_info": "# battle ( name, date, result )\n# ship ( id )\n# death ( caused_by_ship_id )\n# ship.lost_in_battle = battle.id\n# death.caused_by_ship_id = ship.id",
    "difficulty": "medium",
    "question": "List the name, date and result of each battle.",
    "pred": "SELECT name, date, result  FROM  battle",
    "gold": "SELECT name ,  date FROM battle"
  },
  {
    "index": 500,
    "db_id": "battle_death",
    "db_info": "# death ( injured, caused_by_ship_id, id, note, killed )\n# ship ( id, name, tonnage, ship_type, location, disposition_of_ship, lost_in_battle )\n# death.caused_by_ship_id = ship.id",
    "difficulty": "extra",
    "question": "What is the ship id and name that caused most total injuries?",
    "pred": "SELECT ship.id, ship.name  FROM death  JOIN ship ON death.caused_by_ship_id = ship.id  GROUP BY ship.id, ship.name  ORDER BY SUM(death.injured) DESC  LIMIT 1",
    "gold": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 501,
    "db_id": "battle_death",
    "db_info": "# battle ( name )\n# ship ( lost_in_battle )\n# ship.lost_in_battle = battle.id",
    "difficulty": "medium",
    "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
    "pred": "SELECT DISTINCT name  FROM battle  WHERE name BETWEEN 'Kaloyan' AND 'Baldwin I';",
    "gold": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"
  },
  {
    "index": 505,
    "db_id": "battle_death",
    "db_info": "# battle ( name, result, bulgarian_commander )\n# ship ( lost_in_battle, name, location )\n# ship.lost_in_battle = battle.id",
    "difficulty": "extra",
    "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
    "pred": "SELECT name, result, bulgarian_commander  FROM  battle  WHERE  name NOT IN (      SELECT      battle.name      FROM      battle      JOIN      ship      ON      ship.lost_in_battle = battle.name      WHERE      ship.location = 'English Channel'  )",
    "gold": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'"
  },
  {
    "index": 526,
    "db_id": "student_transcripts_tracking",
    "db_info": "# courses ( course_id, course_name, course_description, other_details )\n# sections ( section_id, course_id, section_name, section_description, other_details )\n# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )\n# departments ( department_id, department_name, department_description, other_details )\n# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )\n# semesters ( semester_id, semester_name, semester_description, other_details )\n# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )\n# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )\n# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )\n# transcripts ( transcript_id, transcript_date, other_details )\n# transcript_contents ( student_course_id, transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id",
    "difficulty": "medium",
    "question": "What are the names and ids of every course with less than 2 sections?",
    "pred": "SELECT courses.course_name, courses.course_id  FROM  courses  LEFT JOIN  sections  ON  courses.course_id = sections.course_id  GROUP BY  courses.course_id, courses.course_name HAVING  COUNT(sections.section_id) < 2;",
    "gold": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"
  },
  {
    "index": 534,
    "db_id": "student_transcripts_tracking",
    "db_info": "# students ( student_id, first_name, middle_name, last_name, current_address_id, permanent_address_id, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )\n# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )\n# student_enrolment.student_id = students.student_id",
    "difficulty": "medium",
    "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
    "pred": "SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id, student_enrolment.semester_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2;",
    "gold": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"
  },
  {
    "index": 536,
    "db_id": "student_transcripts_tracking",
    "db_info": "# students ( first_name, middle_name, last_name, student_id, current_address_id, permanent_address_id, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )\n# degree_programs ( department_id, degree_program_id, degree_summary_name, degree_summary_description, other_details )",
    "difficulty": "hard",
    "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
    "pred": "SELECT first_name, middle_name, last_name  FROM students  JOIN degree_programs  ON students.student_id = degree_programs.degree_program_id  WHERE degree_programs.degree_summary_name = 'Bachelors';",
    "gold": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"
  },
  {
    "index": 537,
    "db_id": "student_transcripts_tracking",
    "db_info": "# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )\n# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )\n# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )\n# student_enrolment.student_id = students.student_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id",
    "difficulty": "extra",
    "question": "Find the kind of program which most number of students are enrolled in?",
    "pred": "SELECT degree_programs.degree_summary_name from student_enrolment join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id group by student_enrolment.degree_program_id order by count ( * ) desc limit 1",
    "gold": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 538,
    "db_id": "student_transcripts_tracking",
    "db_info": "# degree_programs ( degree_summary_name, degree_program_id )\n# student_enrolment ( degree_program_id, student_id )\n# students ( student_id )\n# student_enrolment.student_id = students.student_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id",
    "difficulty": "extra",
    "question": "What is the degree summary name that has the most number of students enrolled?",
    "pred": "SELECT degree_programs.degree_summary_name from student_enrolment join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id group by student_enrolment.degree_program_id order by count ( * ) desc limit 1;",
    "gold": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 539,
    "db_id": "student_transcripts_tracking",
    "db_info": "# student_enrolment ( degree_program_id, student_enrolment_id )\n# degree_programs ( degree_program_id, degree_summary_name, degree_summary_description )\n# students ( student_id )\n# student_enrolment_courses ( student_enrolment_id, course_id )\n# courses ( course_id )\n# semesters ( semester_id )\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id",
    "difficulty": "extra",
    "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
    "pred": "SELECT degree_programs.degree_program_id,  degree_programs.degree_summary_name  FROM  degree_programs  JOIN  student_enrolment  ON  degree_programs.degree_program_id = student_enrolment.degree_program_id  GROUP BY  degree_programs.degree_program_id,  degree_programs.degree_summary_name  ORDER BY  COUNT(student_enrolment.student_id) DESC  LIMIT 1;",
    "gold": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 542,
    "db_id": "student_transcripts_tracking",
    "db_info": "# students ( student_id, first_name, middle_name, last_name )\n# student_enrolment ( student_id, student_enrolment_id )\n# degree_programs ( degree_program_id )\n# departments ( department_id )\n# transcripts ( transcript_id )\n# transcript_contents ( student_course_id )\n# degree_programs.department_id = departments.department_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# transcript_contents.transcript_id = transcripts.transcript_id",
    "difficulty": "extra",
    "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
    "pred": "SELECT students.first_name ,  students.middle_name ,  students.last_name ,  student_enrolment.student_id ,  count(student_enrolment.student_id) AS number_of_enrollments FROM student_enrolment  JOIN students ON student_enrolment.student_id = students.student_id  GROUP BY student_enrolment.student_id  ORDER BY number_of_enrollments DESC  LIMIT 1;",
    "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 543,
    "db_id": "student_transcripts_tracking",
    "db_info": "# semesters ( semester_id, semester_name, semester_description, other_details )\n# student_enrolment ( semester_id, student_enrolment_id, degree_program_id, student_id, other_details )\n# student_enrolment.semester_id = semesters.semester_id",
    "difficulty": "hard",
    "question": "Which semesters do not have any student enrolled? List the semester name.",
    "pred": "SELECT semester_name from semesters except select semesters.semester_name from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id",
    "gold": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )"
  },
  {
    "index": 545,
    "db_id": "student_transcripts_tracking",
    "db_info": "# student_enrolment ( student_enrolment_id, student_id, degree_program_id, semester_id, other_details )\n# courses ( course_id, course_name, course_description, other_details )",
    "difficulty": "easy",
    "question": "What are all the course names of the courses which ever have students enrolled in?",
    "pred": "SELECT distinct courses.course_name  from courses  join student_enrolment on courses.course_id = student_enrolment.course_id",
    "gold": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"
  },
  {
    "index": 549,
    "db_id": "student_transcripts_tracking",
    "db_info": "# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# transcripts ( transcript_id , transcript_date , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id",
    "difficulty": "extra",
    "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
    "pred": "SELECT last_name  FROM  students  WHERE  current_address_id IN ( SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina' ) AND  student_id NOT IN ( SELECT student_id FROM student_enrolment )",
    "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
  },
  {
    "index": 550,
    "db_id": "student_transcripts_tracking",
    "db_info": "# students ( last_name, current_address_id, student_id, permanent_address_id, first_name, middle_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )\n# addresses ( address_id, state_province_county, line_1, line_2, line_3, city, zip_postcode, country, other_address_details )\n# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )\n# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id",
    "difficulty": "extra",
    "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
    "pred": "SELECT last_name  FROM students  WHERE current_address_id IN ( SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina' )  AND student_id NOT IN ( SELECT student_id FROM student_enrolment );",
    "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
  },
  {
    "index": 557,
    "db_id": "student_transcripts_tracking",
    "db_info": "# transcripts ( transcript_date, other_details )\n# students ( first_name, middle_name, last_name, date_first_registered )",
    "difficulty": "medium",
    "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
    "pred": "SELECT first_name , middle_name , last_name from students order by date_first_registered asc limit 1;",
    "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"
  },
  {
    "index": 558,
    "db_id": "student_transcripts_tracking",
    "db_info": "# students ( first_name, middle_name, last_name )",
    "difficulty": "medium",
    "question": "What is the first, middle, and last name of the earliest school graduate?",
    "pred": "SELECT students.first_name , students.middle_name , students.last_name  FROM students  JOIN school_life  ON students.first_name = school_life.first_name  AND students.middle_name = school_life.middle_name  AND students.last_name = school_life.last_name  ORDER BY school_life.graduation ASC  LIMIT 1;",
    "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"
  },
  {
    "index": 560,
    "db_id": "student_transcripts_tracking",
    "db_info": "# students ( first_name, permanent_address_id, current_address_id )\n# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country )\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id",
    "difficulty": "easy",
    "question": "What is the first name of the student whose permanent address is different from his or her current one?",
    "pred": "SELECT first_name from students join addresses on students.permanent_address_id = addresses.address_id join addresses b on students.current_address_id = b.address_id where addresses.line_1 != b.line_1",
    "gold": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id"
  },
  {
    "index": 562,
    "db_id": "student_transcripts_tracking",
    "db_info": "# students ( student_id, current_address_id, permanent_address_id, other_student_details )\n# addresses ( address_id, line_1, line_2, other_address_details )\n# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, other_details )\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id",
    "difficulty": "extra",
    "question": "What is the id, line 1, and line 2 of the address with the most students?",
    "pred": "SELECT addresses.address_id, addresses.line_1, addresses.line_2 from addresses join students on students.permanent_address_id = addresses.address_id group by addresses.address_id order by count ( * ) desc limit 1",
    "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 572,
    "db_id": "student_transcripts_tracking",
    "db_info": "# courses ( course_id, course_name, course_description, other_details )\n# transcripts ( transcript_id, transcript_date, other_details )\n# transcript_contents ( student_course_id, transcript_id )\n# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )\n# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )\n# sections ( section_id, course_id, section_name, section_description, other_details )\n# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )\n# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )\n# semesters ( semester_id, semester_name, semester_description, other_details )\n# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )\n# departments ( department_id, department_name, department_description, other_details )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id",
    "difficulty": "hard",
    "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
    "pred": "SELECT COUNT(*), student_course_id  FROM  student_enrolment_courses  JOIN  transcript_contents  ON  student_enrolment_courses.student_course_id = transcript_contents.student_course_id  GROUP BY  student_course_id  ORDER BY  COUNT(*) DESC  LIMIT 1;",
    "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 574,
    "db_id": "student_transcripts_tracking",
    "db_info": "# transcripts ( transcript_date, transcript_id )\n# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )\n# courses ( course_id, course_name, course_description, other_details )\n# departments ( department_id, department_name, department_description, other_details )\n# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )\n# sections ( section_id, course_id, section_name, section_description, other_details )\n# semesters ( semester_id, semester_name, semester_description, other_details )\n# students ( student_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id",
    "difficulty": "extra",
    "question": "What is the date and id of the transcript with the least number of results?",
    "pred": "SELECT transcript_date, transcript_id  FROM  transcripts  GROUP BY  transcript_id  HAVING  COUNT(*) = (SELECT MIN(COUNT(*)) FROM transcripts GROUP BY transcript_id) ORDER BY  transcript_date ASC LIMIT 1",
    "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "index": 575,
    "db_id": "student_transcripts_tracking",
    "db_info": "# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )\n# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )\n# semesters ( semester_id, semester_name, semester_description, other_details )",
    "difficulty": "extra",
    "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
    "pred": "SELECT semester_id  FROM degree_programs  WHERE degree_summary_name IN ('Master', 'Bachelor')  AND degree_program_id IN (SELECT degree_program_id FROM students);",
    "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"
  },
  {
    "index": 576,
    "db_id": "student_transcripts_tracking",
    "db_info": "# student_enrolment ( degree_program_id, semester_id, student_id )\n# degree_programs ( degree_program_id, department_id )\n# semesters ( semester_id, semester_name, semester_description )\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id",
    "difficulty": "extra",
    "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
    "pred": "SELECT semester_id  FROM  student_enrolment  INNER JOIN  degree_programs  ON  student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE  department_id IN ('Masters', 'Bachelors')  GROUP BY  semester_id  HAVING  COUNT(DISTINCT department_id) > 1;",
    "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"
  },
  {
    "index": 580,
    "db_id": "student_transcripts_tracking",
    "db_info": "# students ( last_name, first_name, middle_name, student_id, current_address_id, permanent_address_id, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )\n# addresses ( line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )\n# degree_programs ( degree_summary_name, degree_summary_description, other_details )\n# departments ( department_name, department_description, other_details )\n# courses ( course_name, course_description, other_details )\n# sections ( section_name, section_description, other_details )\n# semesters ( semester_name, semester_description, other_details )\n# student_enrolment ( other_details )\n# student_enrolment_courses (  )\n# transcripts ( transcript_date, other_details )\n# transcript_contents (  )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id",
    "difficulty": "easy",
    "question": "What other details can you tell me about students in reverse alphabetical order?",
    "pred": "SELECT * FROM students ORDER BY last_name DESC, first_name DESC, middle_name DESC;",
    "gold": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"
  },
  {
    "index": 610,
    "db_id": "tvshow",
    "db_info": "# cartoon ( title, channel, directed_by, written_by, original_air_date, production_code )\n# tv_channel ( series_name, id, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )\n# tv_series ( channel, id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id",
    "difficulty": "medium",
    "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
    "pred": "SELECT series_name  FROM tv_channel  WHERE  id IN ( SELECT channel FROM cartoon WHERE title = 'The Rise of the Blue Beetle' );",
    "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";"
  },
  {
    "index": 626,
    "db_id": "tvshow",
    "db_info": "# tv_series ( episode, air_date, channel, id, rating, share, 18_49_rating_share, viewers_m, weekly_rank )\n# tv_channel ( series_name, id, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )\n# cartoon ( channel, id, title, directed_by, written_by, original_air_date, production_code )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id",
    "difficulty": "medium",
    "question": "What is the episode for the TV series named \"Sky Radio\"?",
    "pred": "SELECT episode from tv_series where channel = ( select id from tv_channel where series_name = 'Sky Radio' )",
    "gold": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
  },
  {
    "index": 631,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( hight_definition_tv, package_option, id )\n# tv_series ( channel )\n# cartoon ( channel, title )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id",
    "difficulty": "medium",
    "question": "Find the package choice and series name of the TV channel that has high definition TV.",
    "pred": "SELECT tv_channel.package_option,  cartoon.title  FROM tv_channel  JOIN cartoon  ON tv_channel.id = cartoon.channel  WHERE tv_channel.hight_definition_tv = 1",
    "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""
  },
  {
    "index": 632,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( hight_definition_tv, package_option, id, series_name )\n# tv_series ( channel, id )\n# cartoon ( channel, title, id )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id",
    "difficulty": "medium",
    "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
    "pred": "SELECT tv_channel.package_option,  tv_channel.series_name  FROM tv_channel  JOIN tv_series  ON tv_channel.id = tv_series.channel  WHERE tv_channel.hight_definition_tv = 'Yes';",
    "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""
  },
  {
    "index": 639,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( language, pixel_aspect_ratio_par )\n# tv_series ( channel )\n# cartoon ( channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id",
    "difficulty": "medium",
    "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
    "pred": "SELECT pixel_aspect_ratio_par, language FROM tv_channel WHERE language != 'English'",
    "gold": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"
  },
  {
    "index": 642,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, pay_per_view_ppv, package_option )\n# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )\n# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id",
    "difficulty": "easy",
    "question": "What are the ids of all tv channels that have more than 2 TV channels?",
    "pred": "SELECT id  FROM  tv_channel  GROUP BY  id  HAVING  COUNT(id) > 2",
    "gold": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"
  },
  {
    "index": 700,
    "db_id": "voter_1",
    "db_info": "# contestants ( contestant_number )\n# votes ( contestant_number, state, phone_number )\n# area_code_state ( area_code, state )\n# votes.contestant_number = contestants.contestant_number\n# votes.state = area_code_state.state",
    "difficulty": "extra",
    "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
    "pred": "SELECT area_code_state.area_code  FROM  area_code_state  WHERE  state IN (     SELECT      votes.state      FROM      votes      JOIN      contestants      ON      votes.contestant_number = contestants.contestant_number      WHERE      contestants.contestant_number = 'Tabatha Gehling'     INTERSECT      SELECT      votes.state      FROM      votes      JOIN      contestants      ON      votes.contestant_number = contestants.contestant_number      WHERE      contestants.contestant_number = 'Kelly Clauss' )",
    "gold": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'"
  },
  {
    "index": 712,
    "db_id": "world_1",
    "db_info": "# countrylanguage ( language, countrycode )\n# city ( countrycode )\n# country ( code, name )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "Which language is the most popular in Aruba?",
    "pred": "SELECT language from countrylanguage where countrycode = 'ABW' order by percentage desc limit 1;",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"
  },
  {
    "index": 713,
    "db_id": "world_1",
    "db_info": "# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# countrylanguage ( language, countrycode, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "What language is predominantly spoken in Aruba?",
    "pred": "SELECT language  FROM  countrylanguage  WHERE  countrycode = 'ABW'  AND  isofficial = 'T'",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"
  },
  {
    "index": 719,
    "db_id": "world_1",
    "db_info": "# country ( continent, name, lifeexpectancy )\n# countrylanguage ( countrycode )\n# countrylanguage.countrycode = country.code",
    "difficulty": "easy",
    "question": "How long is the people's average life expectancy in Central Africa?",
    "pred": "SELECT avg(lifeexpectancy) FROM country WHERE continent = 'Africa' AND name = 'Central Africa'",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""
  },
  {
    "index": 738,
    "db_id": "world_1",
    "db_info": "# country ( code, name, governmentform )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "medium",
    "question": "How many official languages does Afghanistan have?",
    "pred": "SELECT count ( * ) from countrylanguage where countrycode = 'AFG' and isofficial = 'T';",
    "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""
  },
  {
    "index": 739,
    "db_id": "world_1",
    "db_info": "# country ( name, code, governmentform, continent, population, capital )\n# countrylanguage ( language, countrycode, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "medium",
    "question": "How many official languages are spoken in Afghanistan?",
    "pred": "SELECT count ( * ) from countrylanguage where isofficial = 'T' and countrycode = 'AFG'",
    "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""
  },
  {
    "index": 741,
    "db_id": "world_1",
    "db_info": "# country ( name )\n# countrylanguage ( countrycode, language )\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "Give the name of the nation that uses the greatest amount of languages.",
    "pred": "SELECT country.name  FROM  country  JOIN  countrylanguage  ON  country.name = countrylanguage.countrycode  GROUP BY  country.name  ORDER BY  COUNT(*) DESC  LIMIT 1",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "index": 744,
    "db_id": "world_1",
    "db_info": "# countrylanguage ( language, countrycode )\n# country ( code, name )\n# city ( countrycode )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code",
    "difficulty": "easy",
    "question": "How many countries speak both English and Dutch?",
    "pred": "SELECT COUNT(*)  FROM  (   SELECT countrycode    FROM countrylanguage    WHERE language = 'English'      INTERSECT       SELECT countrycode    FROM countrylanguage    WHERE language = 'Dutch' ) AS intersection;",
    "gold": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"
  },
  {
    "index": 745,
    "db_id": "world_1",
    "db_info": "# countrylanguage ( language, countrycode, isofficial, percentage )\n# country ( name, code, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# countrylanguage.countrycode = country.code",
    "difficulty": "easy",
    "question": "What is the number of nations that use English and Dutch?",
    "pred": "SELECT COUNT(DISTINCT countrycode) FROM  countrylanguage WHERE  language IN ('English', 'Dutch')",
    "gold": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"
  },
  {
    "index": 755,
    "db_id": "world_1",
    "db_info": "# country ( name, governmentform, code, population, continent, indepyear, capital, region, surfacearea, lifeexpectancy, gnp, gnpold, localname, headofstate, code2 )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "Which countries have either English or Dutch as an official language?",
    "pred": "SELECT country.name  FROM  countrylanguage  JOIN  country  ON  countrylanguage.countrycode = country.code  WHERE  (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch')  AND  countrylanguage.isofficial = 'T';",
    "gold": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\""
  },
  {
    "index": 756,
    "db_id": "world_1",
    "db_info": "# country ( continent )\n# countrylanguage ( language, percentage, countrycode )\n# city ( countrycode )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "Which language is the most popular on the Asian continent?",
    "pred": "SELECT language from countrylanguage join country on countrylanguage.countrycode = country.code where country.continent = 'Asia' group by countrylanguage.language order by sum ( countrylanguage.percentage ) desc limit 1;",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1"
  },
  {
    "index": 760,
    "db_id": "world_1",
    "db_info": "# city ( population, name, countrycode, district, id )\n# country ( population, code, name, capital, continent, region )\n# countrylanguage ( language, countrycode, isofficial, percentage )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "Find the city with the largest population that uses English.",
    "pred": "SELECT city.name  FROM  city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE  countrylanguage.language = 'English'  ORDER BY  city.population DESC  LIMIT 1;",
    "gold": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1"
  },
  {
    "index": 764,
    "db_id": "world_1",
    "db_info": "# country ( lifeexpectancy, name, code )\n# countrylanguage ( language, countrycode, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "What is average life expectancy in the countries where English is not the official language?",
    "pred": "SELECT avg(lifeexpectancy)  FROM country  WHERE code NOT IN      (SELECT countrycode       FROM countrylanguage       WHERE isofficial = 'T'       AND language = 'English')",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"
  },
  {
    "index": 765,
    "db_id": "world_1",
    "db_info": "# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "Give the mean life expectancy of countries in which English is not the official language.",
    "pred": "SELECT avg(lifeexpectancy) FROM  country WHERE  code NOT IN (      SELECT      countrycode      FROM      countrylanguage      WHERE      language = 'English'      AND      isofficial = 'T' )",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"
  },
  {
    "index": 766,
    "db_id": "world_1",
    "db_info": "# city ( population )\n# country ( population, code )\n# countrylanguage ( percentage, countrycode )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "What is the total number of people living in the nations that do not use English?",
    "pred": "SELECT sum(population)  FROM country  WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
    "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"
  },
  {
    "index": 767,
    "db_id": "world_1",
    "db_info": "# country ( population, code, name, continent, surfacearea, indepyear, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "How many people live in countries that do not speak English?",
    "pred": "SELECT SUM(population)  FROM  country  WHERE  code NOT IN      (     SELECT      countrycode      FROM      countrylanguage      WHERE      language = 'English'      AND      isofficial = 'T'     )",
    "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"
  },
  {
    "index": 772,
    "db_id": "world_1",
    "db_info": "# country ( name, surfacearea, continent, code )\n# city ( countrycode, name )\n# city.countrycode = country.code",
    "difficulty": "hard",
    "question": "What are the countries that have greater surface area than any country in Europe?",
    "pred": "SELECT name  FROM  country  WHERE  surfacearea > ( SELECT MAX ( surfacearea ) FROM country WHERE continent = 'Europe' );",
    "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"
  },
  {
    "index": 773,
    "db_id": "world_1",
    "db_info": "# country ( surfacearea, name, continent, code, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# city ( countrycode, id, name, district, population )\n# city.countrycode = country.code",
    "difficulty": "hard",
    "question": "Which countries have greater area than that of any country in Europe?",
    "pred": "SELECT name  FROM  country  WHERE  surfacearea > ( SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe' )",
    "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"
  },
  {
    "index": 777,
    "db_id": "world_1",
    "db_info": "# country ( name, continent, population, region, surfacearea, indepyear, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code, code2 )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
    "pred": "SELECT name  FROM  country  WHERE  continent = 'Asia' AND population > ( SELECT MAX(population) FROM country WHERE continent = 'Africa' );",
    "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")"
  },
  {
    "index": 778,
    "db_id": "world_1",
    "db_info": "# country ( code, name, population, continent, region, surfacearea, indepyear, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "hard",
    "question": "What are the country codes for countries that do not speak English?",
    "pred": "SELECT code  FROM  country  WHERE  code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
    "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
  },
  {
    "index": 779,
    "db_id": "world_1",
    "db_info": "# country ( code, name, governmentform, continent, region, population, capital )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "hard",
    "question": "Return the country codes for countries that do not speak English.",
    "pred": "SELECT code  FROM  country  WHERE  code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English');",
    "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
  },
  {
    "index": 780,
    "db_id": "world_1",
    "db_info": "# country ( code )\n# countrylanguage ( countrycode, language )\n# countrylanguage.countrycode = country.code",
    "difficulty": "easy",
    "question": "What are the country codes of countries where people use languages other than English?",
    "pred": "SELECT code  FROM  country  WHERE  code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'english');",
    "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""
  },
  {
    "index": 782,
    "db_id": "world_1",
    "db_info": "# country ( code, name, continent, region, governmentform, population )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "hard",
    "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
    "pred": "SELECT code  FROM  country  WHERE  code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')  AND  governmentform != 'Republic';",
    "gold": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
  },
  {
    "index": 784,
    "db_id": "world_1",
    "db_info": "# countrylanguage ( countrycode, language, isofficial, percentage )\n# city ( name, countrycode, district, population )\n# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "Which cities are in European countries where English is not the official language?",
    "pred": "SELECT name  FROM city  WHERE countrycode IN (     SELECT country.code      FROM country      JOIN countrylanguage ON country.code = countrylanguage.countrycode      WHERE country.continent = 'Europe'      AND NOT EXISTS (         SELECT 1          FROM countrylanguage cl2          WHERE cl2.countrycode = country.code          AND cl2.language = 'English'          AND cl2.isofficial = 'T'     ) )",
    "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
  },
  {
    "index": 785,
    "db_id": "world_1",
    "db_info": "# city ( name, countrycode, district, population, id )\n# countrylanguage ( countrycode, language, isofficial, percentage )",
    "difficulty": "extra",
    "question": "What are the names of cities in Europe for which English is not the official language?",
    "pred": "SELECT city.name  FROM  city  JOIN  countrylanguage  ON  city.countrycode = countrylanguage.countrycode  JOIN  country  ON  city.countrycode = country.code  WHERE  country.continent = 'Europe'  AND  (countrylanguage.language != 'English' OR countrylanguage.isofficial = 'F');",
    "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
  },
  {
    "index": 816,
    "db_id": "world_1",
    "db_info": "# country ( code, name, population, continent, region, surfacearea, indepyear, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "medium",
    "question": "What is the language spoken by the largest percentage of people in each country?",
    "pred": "SELECT country.name, countrylanguage.language, MAX(countrylanguage.percentage) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY countrylanguage.percentage DESC;",
    "gold": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode"
  },
  {
    "index": 817,
    "db_id": "world_1",
    "db_info": "# country ( code, name, continent, population, indepyear, governmentform, headofstate, capital )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# city ( countrycode )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code",
    "difficulty": "medium",
    "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
    "pred": "SELECT country.code AS countrycode,  countrylanguage.language  FROM country  JOIN countrylanguage  ON country.code = countrylanguage.countrycode  WHERE (countrylanguage.percentage) IN  (SELECT MAX(percentage) FROM countrylanguage GROUP BY countrycode);",
    "gold": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode"
  },
  {
    "index": 818,
    "db_id": "world_1",
    "db_info": "# countrylanguage ( language, isofficial, percentage )\n# country ( population, name, code )\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
    "pred": "SELECT count(*) FROM ( SELECT     country.name FROM     country     JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE     language = 'Spanish' GROUP BY     country.name HAVING     MAX(percentage) ) AS SpanishSpeakingCountries",
    "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
  },
  {
    "index": 819,
    "db_id": "world_1",
    "db_info": "# countrylanguage ( language, isofficial, percentage, countrycode )\n# country ( name, code, population )\n# city ( countrycode )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
    "pred": "SELECT COUNT(*)  FROM countrylanguage  WHERE language = 'Spanish' AND isofficial = 'T';",
    "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
  },
  {
    "index": 820,
    "db_id": "world_1",
    "db_info": "# country ( code, name, population, region, surfacearea, continent, indepyear, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "medium",
    "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
    "pred": "SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' ORDER BY percentage DESC LIMIT 1;",
    "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
  },
  {
    "index": 821,
    "db_id": "world_1",
    "db_info": "# countrylanguage ( language, isofficial, percentage )\n# country ( code, name, continent, region )\n# countrylanguage.countrycode = country.code",
    "difficulty": "medium",
    "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
    "pred": "SELECT country.code  FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish' AND countrylanguage.isofficial = 'T';",
    "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
  },
  {
    "index": 842,
    "db_id": "orchestra",
    "db_info": "# conductor ( name, conductor_id, age, nationality, year_of_work )\n# orchestra ( conductor_id, orchestra_id, orchestra, record_company, year_of_founded, major_record_format )\n# orchestra.conductor_id = conductor.conductor_id",
    "difficulty": "medium",
    "question": "Show the names of conductors that have conducted more than one orchestras.",
    "pred": "SELECT conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.name having count ( * ) > 1;",
    "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"
  },
  {
    "index": 844,
    "db_id": "orchestra",
    "db_info": "# conductor ( name, age, nationality, year_of_work )\n# orchestra ( conductor_id, orchestra, record_company, year_of_founded, major_record_format )\n# orchestra.conductor_id = conductor.conductor_id",
    "difficulty": "extra",
    "question": "Show the name of the conductor that has conducted the most number of orchestras.",
    "pred": "SELECT conductor.name  FROM  conductor  JOIN  orchestra  ON  conductor.conductor_id = orchestra.conductor_id  GROUP BY  conductor.name  ORDER BY  COUNT(orchestra.orchestra) DESC  LIMIT 1",
    "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "index": 890,
    "db_id": "network_1",
    "db_info": "# highschooler ( name, id )\n# friend ( student_id, friend_id )\n# likes ( student_id, liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
    "difficulty": "hard",
    "question": "Show the names of all of the high schooler Kyle's friends.",
    "pred": "SELECT highschooler.name  FROM  friend  JOIN  highschooler  ON  friend.friend_id = highschooler.id  WHERE  friend.student_id = ( SELECT id FROM highschooler WHERE name = 'Kyle' )",
    "gold": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""
  },
  {
    "index": 891,
    "db_id": "network_1",
    "db_info": "# highschooler ( name, id )\n# friend ( friend_id, student_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id",
    "difficulty": "hard",
    "question": "Return the names of friends of the high school student Kyle.",
    "pred": "SELECT highschooler.name  FROM  friend  JOIN  highschooler  ON  friend.friend_id = highschooler.id  WHERE  friend.student_id = ( SELECT id FROM highschooler WHERE name = 'Kyle' )",
    "gold": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""
  },
  {
    "index": 893,
    "db_id": "network_1",
    "db_info": "# highschooler ( id, name )\n# friend ( student_id, friend_id )\n# likes ( student_id, liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
    "difficulty": "medium",
    "question": "Count the number of friends Kyle has.",
    "pred": "SELECT count ( * ) from friend where student_id = ( select id from highschooler where name = 'Kyle' )",
    "gold": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
  },
  {
    "index": 896,
    "db_id": "network_1",
    "db_info": "# highschooler ( name, id, grade )\n# friend ( student_id, friend_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id",
    "difficulty": "hard",
    "question": "Show names of all high school students who do not have any friends.",
    "pred": "SELECT name from highschooler where id not in ( select student_id from friend )",
    "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"
  },
  {
    "index": 897,
    "db_id": "network_1",
    "db_info": "# highschooler ( name, id, grade )\n# friend ( friend_id, student_id )\n# likes ( liked_id, student_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
    "difficulty": "hard",
    "question": "What are the names of students who have no friends?",
    "pred": "SELECT name from highschooler where id not in ( select student_id from friend )",
    "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"
  },
  {
    "index": 900,
    "db_id": "network_1",
    "db_info": "# highschooler ( name, id )\n# friend ( student_id, friend_id )\n# likes ( student_id, liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
    "difficulty": "hard",
    "question": "Show name of all students who have some friends and also are liked by someone else.",
    "pred": "SELECT name  FROM  highschooler  WHERE  id IN (  SELECT  friend.student_id  FROM  friend  JOIN  likes  ON  friend.student_id = likes.liked_id)  AND  id IN (  SELECT  likes.liked_id  FROM  likes  JOIN  friend  ON  likes.student_id = friend.student_id)",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"
  },
  {
    "index": 901,
    "db_id": "network_1",
    "db_info": "# highschooler ( name, id )\n# friend ( student_id, friend_id )\n# likes ( student_id, liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
    "difficulty": "hard",
    "question": "What are the names of high schoolers who both have friends and are liked?",
    "pred": "SELECT highschooler.name  FROM  highschooler  WHERE  highschooler.id IN  (SELECT friend.student_id FROM friend)  AND  highschooler.id IN  (SELECT likes.liked_id FROM likes)",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"
  },
  {
    "index": 905,
    "db_id": "network_1",
    "db_info": "# highschooler ( name, id, grade )\n# likes ( student_id, liked_id )\n# friend ( student_id, friend_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
    "difficulty": "medium",
    "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
    "pred": "SELECT highschooler.name, COUNT(*)  FROM  highschooler  JOIN  likes ON highschooler.id = likes.liked_id  GROUP BY  highschooler.name;",
    "gold": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
  },
  {
    "index": 907,
    "db_id": "network_1",
    "db_info": "# likes ( student_id, liked_id )\n# highschooler ( id, name, grade )\n# friend ( student_id, friend_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
    "difficulty": "extra",
    "question": "Give the name of the student with the most likes.",
    "pred": "SELECT highschooler.name  FROM  likes  JOIN  highschooler  ON  likes.liked_id = highschooler.id  GROUP BY  highschooler.name  ORDER BY  COUNT(*) DESC  LIMIT 1",
    "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 911,
    "db_id": "network_1",
    "db_info": "# highschooler ( grade, id, name )\n# friend ( student_id, friend_id )\n# likes ( student_id, liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
    "difficulty": "hard",
    "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
    "pred": "SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id WHERE highschooler.grade > 5 GROUP BY highschooler.name HAVING COUNT(friend.friend_id) >= 2",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2"
  },
  {
    "index": 913,
    "db_id": "network_1",
    "db_info": "# likes ( student_id, liked_id )\n# highschooler ( name, id )\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
    "difficulty": "medium",
    "question": "Return the number of likes that the high schooler named Kyle has.",
    "pred": "SELECT count ( * ) from likes join highschooler on likes.liked_id = highschooler.id where highschooler.name = 'Kyle';",
    "gold": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
  },
  {
    "index": 925,
    "db_id": "dog_kennels",
    "db_info": "# dogs ( name, owner_id )\n# owners ( owner_id )\n# treatments ( dog_id, cost_of_treatment )\n# charges ( charge_amount )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# treatments.dog_id = dogs.dog_id",
    "difficulty": "hard",
    "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
    "pred": "SELECT distinct dogs.name  FROM dogs  JOIN treatments ON dogs.dog_id = treatments.dog_id  GROUP BY dogs.name  HAVING SUM(treatments.cost_of_treatment) <= 1000",
    "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )"
  },
  {
    "index": 929,
    "db_id": "dog_kennels",
    "db_info": "# professionals ( professional_id, role_code, email_address, first_name, last_name, street, city, state, zip_code, home_phone, cell_number )\n# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )\n# treatments.professional_id = professionals.professional_id",
    "difficulty": "extra",
    "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
    "pred": "SELECT professional_id ,  role_code ,  email_address  FROM professionals  WHERE professional_id NOT IN (SELECT professional_id FROM treatments)  AND (role_code = 'Employee' OR role_code = 'Veterenarian');",
    "gold": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"
  },
  {
    "index": 930,
    "db_id": "dog_kennels",
    "db_info": "# owners ( owner_id, first_name, last_name )\n# dogs ( owner_id, dog_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id",
    "difficulty": "extra",
    "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
    "pred": "SELECT owners.owner_id, owners.first_name, owners.last_name  FROM  owners  JOIN  dogs  ON  owners.owner_id = dogs.owner_id  GROUP BY  owners.owner_id, owners.first_name, owners.last_name ORDER BY  COUNT(dogs.owner_id) DESC  LIMIT 1;",
    "gold": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 934,
    "db_id": "dog_kennels",
    "db_info": "# dogs ( breed_code, name )\n# breeds ( breed_code, breed_name )\n# treatments ( dog_id, treatment_type_code )\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id",
    "difficulty": "extra",
    "question": "What is the name of the breed with the most dogs?",
    "pred": "SELECT breeds.breed_name from dogs join breeds on dogs.breed_code = breeds.breed_code group by dogs.breed_code order by count ( * ) desc limit 1",
    "gold": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 935,
    "db_id": "dog_kennels",
    "db_info": "# dogs ( breed_code, owner_id )\n# breeds ( breed_code )\n# owners ( owner_id )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.breed_code = breeds.breed_code",
    "difficulty": "extra",
    "question": "Which breed do the most dogs have? Give me the breed name.",
    "pred": "SELECT breed_name from dogs join breeds on dogs.breed_code = breeds.breed_code group by breeds.breed_code order by count ( * ) desc limit 1;",
    "gold": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 937,
    "db_id": "dog_kennels",
    "db_info": "# treatments ( cost_of_treatment, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment )\n# dogs ( owner_id, dog_id, name, breed_code, size_code )\n# owners ( owner_id, last_name, first_name )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# treatments.dog_id = dogs.dog_id",
    "difficulty": "extra",
    "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
    "pred": "SELECT owners.owner_id,  owners.last_name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  JOIN treatments ON dogs.dog_id = treatments.dog_id  GROUP BY owners.owner_id, owners.last_name  ORDER BY SUM(treatments.cost_of_treatment) DESC  LIMIT 1;",
    "gold": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 940,
    "db_id": "dog_kennels",
    "db_info": "# owners ( owner_id, zip_code )\n# dogs ( owner_id, dog_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id",
    "difficulty": "extra",
    "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
    "pred": "SELECT owners.owner_id, owners.zip_code  FROM  owners  JOIN  dogs  ON  owners.owner_id = dogs.owner_id  GROUP BY  owners.owner_id  ORDER BY  SUM (dogs.weight) DESC  LIMIT 1;",
    "gold": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"
  },
  {
    "index": 944,
    "db_id": "dog_kennels",
    "db_info": "# professionals ( first_name, last_name )\n# treatments ( professional_id, cost_of_treatment )\n# treatments.professional_id = professionals.professional_id",
    "difficulty": "extra",
    "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
    "pred": "SELECT distinct professionals.first_name, professionals.last_name  FROM professionals  JOIN treatments  ON professionals.professional_id = treatments.professional_id  WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);",
    "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"
  },
  {
    "index": 945,
    "db_id": "dog_kennels",
    "db_info": "# professionals ( professional_id, role_code, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )\n# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )\n# treatments.professional_id = professionals.professional_id",
    "difficulty": "extra",
    "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
    "pred": "SELECT distinct professionals.first_name, professionals.last_name  FROM  professionals  JOIN  treatments  ON  professionals.professional_id = treatments.professional_id  WHERE  treatments.cost_of_treatment < ( SELECT AVG (cost_of_treatment) FROM treatments )",
    "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"
  },
  {
    "index": 955,
    "db_id": "dog_kennels",
    "db_info": "# dogs ( breed_code, name, date_of_birth, date_arrived, date_adopted, date_departed )\n# breeds ( breed_code, breed_name )\n# treatments ( dog_id, date_of_treatment )\n# treatment_types ( treatment_type_code )\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code",
    "difficulty": "extra",
    "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
    "pred": "SELECT dogs.name, treatments.date_of_treatment  FROM dogs  JOIN treatments ON dogs.dog_id = treatments.dog_id  JOIN breeds ON dogs.breed_code = breeds.breed_code  WHERE breeds.breed_code = ( SELECT breed_code FROM breeds GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1 );",
    "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"
  },
  {
    "index": 960,
    "db_id": "dog_kennels",
    "db_info": "# dogs ( age, owner_id, dog_id, abandoned_yn, breed_code, size_code, name, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )\n# owners ( owner_id, last_name, first_name, street, city, state, zip_code, email_address, home_phone, cell_number )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id",
    "difficulty": "extra",
    "question": "List the last name of the owner owning the youngest dog.",
    "pred": "SELECT owners.last_name  FROM  owners  JOIN  dogs  ON  owners.owner_id = dogs.owner_id  WHERE  dogs.date_of_birth = ( SELECT MAX(date_of_birth) FROM dogs);",
    "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"
  },
  {
    "index": 961,
    "db_id": "dog_kennels",
    "db_info": "# dogs ( owner_id, date_of_birth, abandoned_yn, breed_code, size_code, name, age, gender, weight, date_arrived, date_adopted, date_departed )\n# owners ( owner_id, last_name, first_name, street, city, state, zip_code, email_address, home_phone, cell_number )\n# breeds ( breed_code, breed_name )\n# sizes ( size_code, size_description )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code",
    "difficulty": "extra",
    "question": "Who owns the youngest dog? Give me his or her last name.",
    "pred": "SELECT owners.last_name  FROM  owners  JOIN  dogs  ON  owners.owner_id = dogs.owner_id  WHERE  dogs.date_of_birth = ( SELECT MAX( date_of_birth ) FROM dogs )",
    "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"
  },
  {
    "index": 981,
    "db_id": "dog_kennels",
    "db_info": "# owners ( owner_id, first_name, last_name, email_address, street, city, state, zip_code, home_phone, cell_number )\n# dogs ( owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id",
    "difficulty": "extra",
    "question": "Find the number of owners who do not own any dogs at this moment.",
    "pred": "SELECT count(*)  FROM  owners  WHERE  owner_id NOT IN (SELECT owner_id FROM dogs WHERE date_adopted IS NOT NULL AND date_departed IS NULL)",
    "gold": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )"
  },
  {
    "index": 990,
    "db_id": "dog_kennels",
    "db_info": "# charges ( charge_type, charge_amount )",
    "difficulty": "medium",
    "question": "How much does each charge type costs? List both charge type and amount.",
    "pred": "SELECT charge_type , sum ( charge_amount ) from charges group by charge_type",
    "gold": "SELECT charge_type ,  charge_amount FROM Charges"
  },
  {
    "index": 996,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code, breed_name )\n# sizes ( size_code, size_description )\n# dogs ( breed_code, size_code )\n# treatments ( dog_id )\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id",
    "difficulty": "medium",
    "question": "What are all the possible breed type and size type combinations?",
    "pred": "SELECT breeds.breed_name, sizes.size_description  FROM  dogs  JOIN  breeds ON dogs.breed_code = breeds.breed_code  JOIN  sizes ON dogs.size_code = sizes.size_code  GROUP BY  breeds.breed_name, sizes.size_description",
    "gold": "SELECT DISTINCT breed_code ,  size_code FROM dogs"
  },
  {
    "index": 997,
    "db_id": "dog_kennels",
    "db_info": "# dogs ( breed_code, size_code, dog_id, owner_id, abandoned_yn, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )\n# breeds ( breed_code, breed_name )\n# sizes ( size_code, size_description )\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code",
    "difficulty": "medium",
    "question": "Find the distinct breed type and size type combinations for dogs.",
    "pred": "SELECT DISTINCT breeds.breed_name, sizes.size_description FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN sizes ON dogs.size_code = sizes.size_code;",
    "gold": "SELECT DISTINCT breed_code ,  size_code FROM dogs"
  },
  {
    "index": 999,
    "db_id": "dog_kennels",
    "db_info": "# professionals ( first_name )\n# treatments ( professional_id )\n# treatments.professional_id = professionals.professional_id",
    "difficulty": "medium",
    "question": "What are each professional's first name and description of the treatment they have performed?",
    "pred": "SELECT distinct professionals.first_name, treatments.description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id;",
    "gold": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"
  },
  {
    "index": 1008,
    "db_id": "singer",
    "db_info": "# singer ( birth_year, singer_id )\n# song ( singer_id, title, sales, highest_position, song_id )\n# song.singer_id = singer.singer_id",
    "difficulty": "medium",
    "question": "Show the name of singers whose birth year is either 1948 or 1949?",
    "pred": "SELECT singer_id  FROM  singer  WHERE  birth_year IN (1948, 1949)",
    "gold": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"
  },
  {
    "index": 1032,
    "db_id": "real_estate_properties",
    "db_info": "# properties ( property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details )\n# ref_property_types ( property_type_code, property_type_description )\n# properties.property_type_code = ref_property_types.property_type_code",
    "difficulty": "medium",
    "question": "Show the property type descriptions of properties belonging to that code.",
    "pred": "SELECT ref_property_types.property_type_description  FROM  ref_property_types  INNER JOIN properties  ON ref_property_types.property_type_code = properties.property_type_code  WHERE properties.property_name = 'The Grove';",
    "gold": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code"
  },
  {
    "index": 1033,
    "db_id": "real_estate_properties",
    "db_info": "# properties ( property_name, property_type_code, room_count )\n# ref_property_types ( property_type_code )\n# other_available_features ( feature_name )\n# ref_feature_types ( feature_type_code )\n# other_property_features ( property_id, feature_id, property_feature_description )\n# other_available_features.feature_type_code = ref_feature_types.feature_type_code\n# properties.property_type_code = ref_property_types.property_type_code\n# other_property_features.property_id = properties.property_id\n# other_property_features.feature_id = other_available_features.feature_id",
    "difficulty": "hard",
    "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
    "pred": "SELECT property_name  FROM properties  WHERE (property_type_code = 'house' OR property_type_code = 'apartment') AND room_count > 1",
    "gold": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1"
  }
]