[
  {
    "index": 3,
    "db_id": "concert_singer",
    "db_info": "| singer: name, country, age, singer_id, song_name, song_release_year, is_male | singer_in_concert: singer_id, concert_id | concert: concert_id, concert_name, theme, stadium_id, year | stadium: stadium_id, location, name, capacity, highest, lowest, average | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id | concert.stadium_id = stadium.stadium_id |",
    "difficulty": "medium",
    "question": "What are the names, countries, and ages for every singer in descending order of age?",
    "pred": "SELECT name,        country,        age FROM singer ORDER BY age ASC",
    "gold": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"
  },
  {
    "index": 8,
    "db_id": "concert_singer",
    "db_info": "| singer: country, age, singer_id, name, song_name, song_release_year, is_male | singer_in_concert: singer_id, concert_id | concert: concert_id, stadium_id, concert_name, theme, year | stadium: stadium_id, location, name, capacity, highest, lowest, average | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id | concert.stadium_id = stadium.stadium_id |",
    "difficulty": "medium",
    "question": "What are all distinct countries where singers above age 20 are from?",
    "pred": "SELECT song_name,        song_release_year FROM singer ORDER BY age ASC LIMIT 10",
    "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"
  },
  {
    "index": 17,
    "db_id": "concert_singer",
    "db_info": "| stadium: capacity, stadium_id, name, location, highest, lowest, average | singer: singer_id | concert: stadium_id, concert_id | singer_in_concert: concert_id, singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id |",
    "difficulty": "medium",
    "question": "What is the average and maximum capacities for all stadiums ?",
    "pred": "SELECT MAX (capacity), AVG (average) FROM stadium",
    "gold": "select max(capacity), average from stadium"
  },
  {
    "index": 19,
    "db_id": "concert_singer",
    "db_info": "| stadium: average, name, capacity, stadium_id, highest, lowest, location | concert: stadium_id, concert_id, concert_name, theme, year | singer: singer_id, name, country, song_name, song_release_year, age, is_male | singer_in_concert: singer_id, concert_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id |",
    "difficulty": "medium",
    "question": "What is the name and capacity for the stadium with the highest average attendance?",
    "pred": "SELECT name,        capacity FROM stadium GROUP BY name ORDER BY AVG (attendance) DESC LIMIT 1",
    "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"
  },
  {
    "index": 20,
    "db_id": "concert_singer",
    "db_info": "| concert: year, concert_id, concert_name, theme, stadium_id | singer_in_concert: concert_id | singer: | stadium: |",
    "difficulty": "medium",
    "question": "How many concerts are there in year 2014 or 2015?",
    "pred": "SELECT stadium.name,        stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.stadium_id ORDER BY AVG (concert.attendance) DESC LIMIT 1",
    "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"
  },
  {
    "index": 24,
    "db_id": "concert_singer",
    "db_info": "| concert: year, stadium_id, concert_id, concert_name, theme | stadium: name, capacity, stadium_id, location, highest, lowest, average | singer_in_concert: concert_id, singer_id | singer: singer_id, name, country, song_name, song_release_year, age, is_male | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id |",
    "difficulty": "medium",
    "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
    "pred": "SELECT stadium.stadium_id,        COUNT (*) FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.stadium_id",
    "gold": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id"
  },
  {
    "index": 25,
    "db_id": "concert_singer",
    "db_info": "| stadium: stadium_id, name, capacity, location, highest, lowest, average | concert: stadium_id, year, concert_id, concert_name, theme | singer_in_concert: concert_id, singer_id | singer: singer_id, name, country, song_name, song_release_year, age, is_male | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id |",
    "difficulty": "extra",
    "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
    "pred": "SELECT stadium.name,        stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year >= 2014 GROUP BY concert.stadium_id ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 26,
    "db_id": "concert_singer",
    "db_info": "| concert: year, concert_id | singer_in_concert: concert_id |",
    "difficulty": "extra",
    "question": "Which year has most number of concerts?",
    "pred": "SELECT stadium.name,        stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year > 2013 GROUP BY concert.stadium_id ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1"
  },
  {
    "index": 32,
    "db_id": "concert_singer",
    "db_info": "| stadium: name, stadium_id | concert: stadium_id, year | singer_in_concert: | singer: | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id |",
    "difficulty": "hard",
    "question": "What are the names of all stadiums that did not have a concert in 2014?",
    "pred": "SELECT name FROM stadium WHERE stadium_id NOT IN     (SELECT stadium_id      FROM concert      WHERE YEAR = 2014 )",
    "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"
  },
  {
    "index": 34,
    "db_id": "concert_singer",
    "db_info": "| concert: concert_name, theme, concert_id, stadium_id | singer_in_concert: concert_id, singer_id | singer: name, singer_id | stadium: stadium_id |",
    "difficulty": "medium",
    "question": "What are the names , themes , and number of singers for every concert ?",
    "pred": "SELECT concert.concert_name,        concert.theme,        COUNT (*) FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name,          concert.theme",
    "gold": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id"
  },
  {
    "index": 36,
    "db_id": "concert_singer",
    "db_info": "| singer: name, singer_id, country, song_name, song_release_year, age, is_male | singer_in_concert: singer_id, concert_id | concert: concert_id, concert_name, theme, stadium_id, year | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id | concert.stadium_id = stadium.stadium_id |",
    "difficulty": "medium",
    "question": "What are the names of the singers and number of concerts for each person?",
    "pred": "SELECT singer.name,        COUNT (*) FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name",
    "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"
  },
  {
    "index": 37,
    "db_id": "concert_singer",
    "db_info": "| concert: year, concert_id | singer_in_concert: concert_id, singer_id | singer: singer_id, name | stadium: stadium_id | singer: country, song_name, song_release_year, age, is_male | concert: concert_name, theme, stadium_id | stadium: location, name, capacity, highest, lowest, average |",
    "difficulty": "medium",
    "question": "List all singer names in concerts in year 2014.",
    "pred": "SELECT singer.name,        COUNT (*) FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name",
    "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"
  },
  {
    "index": 41,
    "db_id": "concert_singer",
    "db_info": "| stadium: name, stadium_id, location, capacity, highest, lowest, average | concert: year, stadium_id, concert_id, concert_name, theme | singer: singer_id, song_release_year, name, country, age, is_male, song_name | singer_in_concert: concert_id, singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id |",
    "difficulty": "medium",
    "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
    "pred": "SELECT singer.name,        singer.country FROM singer JOIN song ON singer.song_name = song.title WHERE song.title like '%Hey%'",
    "gold": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"
  },
  {
    "index": 44,
    "db_id": "concert_singer",
    "db_info": "| stadium: capacity, stadium_id, location, name, highest, lowest, average | concert: stadium_id, concert_id, concert_name, theme, year | singer_in_concert: concert_id, singer_id | singer: singer_id, name, country, song_name, song_release_year, age, is_male | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id |",
    "difficulty": "hard",
    "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
    "pred": "SELECT COUNT (*) FROM stadium WHERE capacity =     (SELECT MAX (capacity)      FROM stadium)",
    "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)"
  },
  {
    "index": 45,
    "db_id": "concert_singer",
    "db_info": "| pets: weight, petid | has_pet: petid, stuid | student: stuid |",
    "difficulty": "hard",
    "question": "Find the number of pets whose weight is heavier than 10.",
    "pred": "SELECT COUNT (*) FROM stadium WHERE capacity =     (SELECT MAX (capacity)      FROM stadium)",
    "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)"
  },
  {
    "index": 48,
    "db_id": "pets_1",
    "db_info": "| student: stuid, age, lname, fname, sex, major, advisor, city_code | has_pet: stuid, petid | pets: weight, pet_age, pettype, petid | has_pet.stuid = student.stuid | has_pet.petid = pets.petid |",
    "difficulty": "medium",
    "question": "How much does the youngest dog weigh?",
    "pred": "SELECT weight FROM pets WHERE pet_age =     (SELECT MIN (pet_age)      FROM pets)",
    "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
  },
  {
    "index": 49,
    "db_id": "pets_1",
    "db_info": "| pets: weight, pettype, petid | has_pet: petid, stuid | student: stuid |",
    "difficulty": "medium",
    "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
    "pred": "SELECT weight FROM pets WHERE pet_age =     (SELECT MIN (pet_age)      FROM pets)",
    "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
  },
  {
    "index": 55,
    "db_id": "pets_1",
    "db_info": "| pets: pettype, petid, pet_age, weight | has_pet: petid, stuid | student: stuid, lname, fname, age, sex, major, advisor, city_code |",
    "difficulty": "hard",
    "question": "Find the number of distinct type of pets.",
    "pred": "SELECT COUNT (*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE student.sex = 'F'   AND has_pet.pettype = 'Dog'",
    "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"
  },
  {
    "index": 63,
    "db_id": "pets_1",
    "db_info": "| student: stuid | has_pet: stuid, petid | pets: petid, pettype |",
    "difficulty": "extra",
    "question": "Find the id of students who do not have a cat pet.",
    "pred": "SELECT major,        age FROM student WHERE stuid NOT IN     (SELECT stuid      FROM has_pet      JOIN pets ON has_pet.petid = pets.petid      WHERE pets.pettype = 'cat' ) EXCEPT SELECT major,        age FROM student WHERE stuid IN     (SELECT stuid      FROM has_pet      JOIN pets ON has_pet.petid = pets.petid      WHERE pets.pettype!= 'cat' )",
    "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
  },
  {
    "index": 66,
    "db_id": "pets_1",
    "db_info": "| student: fname, stuid | has_pet: stuid, petid | pets: petid, pettype | has_pet.stuid = student.stuid | has_pet.petid = pets.petid |",
    "difficulty": "extra",
    "question": "What is the first name of every student who has a dog but does not have a cat?",
    "pred": "SELECT student.fname,        student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE has_pet.petid = 'dog' EXCEPT SELECT student.fname,        student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE has_pet.petid = 'cat'",
    "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
  },
  {
    "index": 67,
    "db_id": "pets_1",
    "db_info": "| student: stuid | has_pet: stuid, petid | pets: petid, pet_age, pettype, weight |",
    "difficulty": "extra",
    "question": "Find the type and weight of the youngest pet.",
    "pred": "SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' EXCEPT SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat'",
    "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
  },
  {
    "index": 76,
    "db_id": "pets_1",
    "db_info": "| student: stuid, fname, age, lname, sex, major, advisor, city_code | has_pet: stuid, petid | pets: petid, pettype, pet_age, weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid |",
    "difficulty": "medium",
    "question": "What are the different first names and ages of the students who do have pets?",
    "pred": "SELECT fname,        age FROM student WHERE stuid IN     (SELECT stuid      FROM has_pet)",
    "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"
  },
  {
    "index": 77,
    "db_id": "pets_1",
    "db_info": "| student: stuid, lname, fname, age, sex, major, advisor, city_code | has_pet: stuid, petid | pets: petid, pettype, pet_age, weight | has_pet.stuid=student.stuid | has_pet.petid=pets.petid |",
    "difficulty": "medium",
    "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
    "pred": "SELECT DISTINCT student.fname,                 student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE has_pet.petid!= '0'",
    "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"
  },
  {
    "index": 79,
    "db_id": "pets_1",
    "db_info": "| student: stuid, lname, fname, age, sex, major, advisor, city_code | has_pet: stuid, petid | pets: petid, pettype, pet_age, weight |",
    "difficulty": "medium",
    "question": "Find the number of pets for each student who has any pet and student id.",
    "pred": "SELECT has_pet.petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE student.lname = 'Smith'   AND student.fname = 'Alice'",
    "gold": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"
  },
  {
    "index": 80,
    "db_id": "pets_1",
    "db_info": "| student: stuid | has_pet: stuid, petid | pets: petid |",
    "difficulty": "medium",
    "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
    "pred": "SELECT stuid,        COUNT (*) FROM has_pet JOIN student ON has_pet.stuid = student.stuid GROUP BY stuid",
    "gold": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid"
  },
  {
    "index": 81,
    "db_id": "pets_1",
    "db_info": "| student: stuid, fname, sex, lname, age, major, advisor, city_code | has_pet: stuid, petid | pets: petid, pettype, pet_age, weight | has_pet.stuid = student.stuid | has_pet.petid = pets.petid |",
    "difficulty": "medium",
    "question": "Find the first name and gender of student who have more than one pet.",
    "pred": "SELECT stuid FROM has_pet GROUP BY stuid ORDER BY COUNT (*) DESC LIMIT 10",
    "gold": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid"
  },
  {
    "index": 94,
    "db_id": "car_1",
    "db_info": "| car_makers: id, fullname, maker, country | model_list: maker, modelid, model | countries: countryid, countryname, continent | continents: contid, continent | car_names: makeid, model, make | cars_data: id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "medium",
    "question": "What is the full name of each car maker, along with its id and how many models it produces?",
    "pred": "SELECT car_makers.fullname,        COUNT (*) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id",
    "gold": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"
  },
  {
    "index": 96,
    "db_id": "car_1",
    "db_info": "| cars_data: horsepower, id | car_names: makeid, model | model_list: model, modelid, maker | car_makers: id | countries: countryid | continents: contid | cars_data.id = car_names.makeid | car_names.model = model_list.model | model_list.maker = car_makers.id | car_makers.country = countries.countryid | countries.continent = continents.contid |",
    "difficulty": "hard",
    "question": "What is the model of the car with the smallest amount of horsepower?",
    "pred": "SELECT model FROM cars_data ORDER BY horsepower ASC LIMIT 1",
    "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"
  },
  {
    "index": 97,
    "db_id": "car_1",
    "db_info": "| cars_data: weight, id | car_names: model, makeid | model_list: model, maker | car_makers: id | countries: | continents: |",
    "difficulty": "hard",
    "question": "Find the model of the car whose weight is below the average weight.",
    "pred": "SELECT model FROM cars_data ORDER BY horsepower ASC LIMIT 1",
    "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"
  },
  {
    "index": 98,
    "db_id": "car_1",
    "db_info": "| cars_data: weight, id | car_names: model, makeid | model_list: model, modelid, maker | car_makers: id | countries: countryid, countryname, continent | continents: contid, continent | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "extra",
    "question": "What is the model for the car with a weight smaller than the average?",
    "pred": "SELECT model FROM cars_data WHERE weight <     (SELECT AVG (weight)      FROM cars_data)",
    "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"
  },
  {
    "index": 99,
    "db_id": "car_1",
    "db_info": "| car_makers: id, maker, country, fullname | cars_data: id, year, mpg, cylinders, edispl, horsepower, weight, accelerate | model_list: maker, modelid, model | car_names: makeid, model, make | countries: countryid, countryname, continent | continents: contid, continent | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "extra",
    "question": "Find the name of the makers that produced some cars in the year of 1970?",
    "pred": "SELECT model FROM cars_data WHERE weight <     (SELECT AVG (weight)      FROM cars_data)",
    "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"
  },
  {
    "index": 100,
    "db_id": "car_1",
    "db_info": "| car_makers: maker, id, country | model_list: maker, modelid | car_names: model, makeid | cars_data: id, year | countries: countryid, continent | continents: contid, continent | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid | countries.continent = continents.contid |",
    "difficulty": "extra",
    "question": "What is the name of the different car makers who produced a car in 1970?",
    "pred": "SELECT car_makers.fullname FROM car_makers JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year = 1970",
    "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"
  },
  {
    "index": 101,
    "db_id": "car_1",
    "db_info": "| `car_makers`: `id`, `maker`, `fullname`, `country` | `model_list`: `modelid`, `maker`, `model` | `car_names`: `makeid`, `model`, `make` | `cars_data`: `id`, `mpg`, `cylinders`, `edispl`, `horsepower`, `weight`, `accelerate`, `year` | `continents`: `contid`, `continent` | `countries`: `countryid`, `countryname`, `continent` | `countries.continent` = `continents.contid` | `car_makers.country` = `countries.countryid` | `model_list.maker` = `car_makers.id` | `car_names.model` = `model_list.model` | `cars_data.id` = `car_names.makeid` |",
    "difficulty": "extra",
    "question": "Find the make and production time of the cars that were produced in the earliest year?",
    "pred": "SELECT DISTINCT car_makers.maker FROM car_makers JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year = 1970",
    "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"
  },
  {
    "index": 102,
    "db_id": "car_1",
    "db_info": "| `car_makers`: `id`, `maker`, `fullname`, `country` | `cars_data`: `id`, `mpg`, `cylinders`, `edispl`, `horsepower`, `weight`, `accelerate`, `year` | `model_list`: `modelid`, `maker`, `model` | `car_names`: `makeid`, `model`, `make` | `countries`: `countryid`, `countryname`, `continent` | `continents`: `contid`, `continent` | `car_makers.country = countries.countryid` | `model_list.maker = car_makers.id` | `car_names.model = model_list.model` | `cars_data.id = car_names.makeid` |",
    "difficulty": "extra",
    "question": "What is the maker of the carr produced in the earliest year and what year was it?",
    "pred": "SELECT car_makers.maker,        cars_data.year FROM cars_data JOIN car_makers ON cars_data.id = car_makers.id ORDER BY cars_data.year ASC LIMIT 10",
    "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"
  },
  {
    "index": 103,
    "db_id": "car_1",
    "db_info": "| model_list: model, maker | cars_data: year, id | car_names: model, makeid | car_makers: id | countries: countryid, countryname, continent | continents: contid, continent | model_list.maker = car_makers.id | cars_data.id = car_names.makeid | countries.continent = continents.contid | car_makers.country = countries.countryid |",
    "difficulty": "extra",
    "question": "Which distinct car models are the produced after 1980?",
    "pred": "SELECT cars_data.id,        cars_data.year FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY cars_data.year ASC LIMIT 1",
    "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"
  },
  {
    "index": 104,
    "db_id": "car_1",
    "db_info": "| continents: continent, contid | countries: continent, countryname, countryid | car_makers: id, maker, fullname, country | model_list: model, maker, modelid | car_names: model, makeid, make | cars_data: year, id, mpg, edispl, horsepower, weight, accelerate | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "hard",
    "question": "What are the different models for the cards produced after 1980?",
    "pred": "SELECT DISTINCT model FROM model_list WHERE YEAR > 1980",
    "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"
  },
  {
    "index": 106,
    "db_id": "car_1",
    "db_info": "| continents: contid, continent | countries: countryid, countryname, continent | car_makers: maker, country, id, fullname | model_list: modelid, maker, model | car_names: makeid, model, make | cars_data: id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "hard",
    "question": "What is the name of each continent and how many car makers are there in each one?",
    "pred": "SELECT countries.continent,        COUNT (*) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.continent",
    "gold": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"
  },
  {
    "index": 107,
    "db_id": "car_1",
    "db_info": "| countries: countryname, countryid, continent | car_makers: maker, country, id, fullname | continents: contid, continent | model_list: maker, modelid, model | car_names: makeid, model, make | cars_data: id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "hard",
    "question": "Which of the countries has the most car makers? List the country name.",
    "pred": "SELECT continents.continent,        COUNT (*) FROM continents JOIN car_makers ON continents.contid = car_makers.country GROUP BY continents.continent",
    "gold": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"
  },
  {
    "index": 108,
    "db_id": "car_1",
    "db_info": "| car_makers: maker, country | countries: countryid, countryname | continents: contid | model_list: maker | car_names: model | cars_data: id | car_makers.country = countries.countryid | countries.continent = continents.contid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "extra",
    "question": "What is the name of the country with the most car makers?",
    "pred": "SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"
  },
  {
    "index": 109,
    "db_id": "car_1",
    "db_info": "| car_makers: maker, fullname, id, country | model_list: maker, modelid, model | countries: countryid | continents: contid | car_names: makeid | cars_data: id |",
    "difficulty": "extra",
    "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
    "pred": "SELECT country FROM car_makers GROUP BY country ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"
  },
  {
    "index": 110,
    "db_id": "car_1",
    "db_info": "| car_makers: maker, id, fullname, country | model_list: maker, model | car_names: model, makeid, make | countries: countryid, countryname, continent | continents: contid, continent | cars_data: id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "medium",
    "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
    "pred": "SELECT maker,        COUNT (*) FROM model_list GROUP BY maker",
    "gold": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;"
  },
  {
    "index": 112,
    "db_id": "car_1",
    "db_info": "| car_names: make, makeid | cars_data: accelerate, id | model_list: model, modelid, maker | car_makers: id, maker | countries: countryid | continents: contid, continent |",
    "difficulty": "medium",
    "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
    "pred": "SELECT accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.model = 'amc hornet sportabout'   AND car_names.make = 'honda'",
    "gold": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"
  },
  {
    "index": 113,
    "db_id": "car_1",
    "db_info": "| car_makers: country, maker, id, fullname | countries: countryname, countryid | continents: contid, continent | model_list: maker, modelid, model | car_names: model, makeid | cars_data: id | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "medium",
    "question": "How many car makers are there in france?",
    "pred": "SELECT cars_data.accelerate FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.maker WHERE car_makers.maker = 'AMC HORNET SPORT'   AND model_list.model = 'Sportabout 350'",
    "gold": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"
  },
  {
    "index": 114,
    "db_id": "car_1",
    "db_info": "| car_makers: maker, country, id | countries: countryname, countryid | model_list: maker, modelid | continents: contid, continent | car_names: makeid, model, make | cars_data: id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "medium",
    "question": "What is the number of makers of care in France?",
    "pred": "SELECT COUNT (DISTINCT maker) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'France'",
    "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"
  },
  {
    "index": 115,
    "db_id": "car_1",
    "db_info": "| countries: countryname, countryid | car_makers: maker, country, id | model_list: model, maker | car_names: model, makeid, make | continents: contid, continent | cars_data: id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "medium",
    "question": "How many car models are produced in the usa?",
    "pred": "SELECT COUNT (*) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'France'   AND car_makers.maker = 'Toyota'",
    "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"
  },
  {
    "index": 116,
    "db_id": "car_1",
    "db_info": "| countries: countryname, countryid | model_list: maker, modelid |",
    "difficulty": "hard",
    "question": "What is the count of the car models produced in the United States?",
    "pred": "SELECT COUNT (DISTINCT model) FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.accelerate > 18   AND cars_data.year >= 2005   AND car_names.make = 'Toyota'",
    "gold": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"
  },
  {
    "index": 117,
    "db_id": "car_1",
    "db_info": "| cars_data: mpg, cylinders, id | car_names: makeid, model, make | model_list: modelid, maker, model | car_makers: id, maker, fullname, country | countries: countryid, countryname, continent | continents: contid, continent | cars_data.id=car_names.makeid | model_list.maker=car_makers.id | car_makers.country=countries.countryid | countries.continent=continents.contid |",
    "difficulty": "hard",
    "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
    "pred": "SELECT COUNT (*) FROM countries JOIN model_list ON countries.countryid = model_list.modelid WHERE countries.countryname = 'United States'",
    "gold": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"
  },
  {
    "index": 122,
    "db_id": "car_1",
    "db_info": "| car_makers: maker, id, fullname, country | model_list: model, maker, modelid | car_names: model, make, makeid | countries: countryid, countryname, continent | continents: contid, continent | cars_data: id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "medium",
    "question": "What are the makers and models?",
    "pred": "SELECT maker,        model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id ORDER BY maker ASC,          model ASC",
    "gold": "SELECT Maker ,  Model FROM MODEL_LIST;"
  },
  {
    "index": 124,
    "db_id": "car_1",
    "db_info": "| car_makers: id, country | countries: countryid, countryname | continents: contid | model_list: maker | car_names: makeid, model | cars_data: id | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "medium",
    "question": "What are the names and ids of all countries with at least one car maker?",
    "pred": "SELECT country,        id FROM car_makers GROUP BY country HAVING COUNT (*) >= 1",
    "gold": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;"
  },
  {
    "index": 125,
    "db_id": "car_1",
    "db_info": "| cars_data: horsepower, id, mpg, cylinders, edispl, weight, accelerate, year | car_names: makeid, model, make | model_list: model, modelid, maker | car_makers: id, maker, fullname, country | countries: countryid, countryname, continent | continents: contid, continent | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "medium",
    "question": "What is the number of the cars with horsepower more than 150?",
    "pred": "SELECT car_makers.country,        car_makers.id FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.country HAVING COUNT (*) >= 1",
    "gold": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;"
  },
  {
    "index": 130,
    "db_id": "car_1",
    "db_info": "| continents: contid, continent | countries: countryname, continent | car_makers: country, id | model_list: modelid, maker | car_names: makeid, model, make | cars_data: id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "extra",
    "question": "What are the names of all European countries with at least 3 manufacturers?",
    "pred": "SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT (*) >= 3",
    "gold": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"
  },
  {
    "index": 131,
    "db_id": "car_1",
    "db_info": "| cars_data: cylinders, horsepower, id, mpg, edispl, weight, accelerate, year | car_names: make, model, makeid | model_list: model, maker, modelid | car_makers: maker, id, fullname, country | countries: countryid, countryname, continent | continents: contid, continent | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "extra",
    "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
    "pred": "SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT (*) >= 3",
    "gold": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"
  },
  {
    "index": 132,
    "db_id": "car_1",
    "db_info": "| model_list: model, maker | cars_data: cylinders, horsepower, id | car_names: make, model, makeid | car_makers: id | continents: contid | countries: countryid, continent | car_makers: maker, fullname, country |",
    "difficulty": "extra",
    "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
    "pred": "SELECT MAX (cars_data.horsepower), car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.cylinders = 3 GROUP BY car_names.make HAVING COUNT (*) >= 1",
    "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"
  },
  {
    "index": 133,
    "db_id": "car_1",
    "db_info": "| cars_data: mpg, id | car_names: model, makeid | model_list: model, maker | car_makers: id | continents: contid | countries: countryid | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "extra",
    "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
    "pred": "SELECT cars_data.horsepower,        model_list.maker FROM cars_data JOIN model_list ON cars_data.id = model_list.model WHERE cars_data.cylinders = 3 GROUP BY model_list.maker ORDER BY MAX (cars_data.horsepower) DESC LIMIT 1",
    "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"
  },
  {
    "index": 134,
    "db_id": "car_1",
    "db_info": "| cars_data: mpg, id, cylinders, edispl, horsepower, weight, accelerate, year | car_names: model, makeid | model_list: model, modelid, maker | car_makers: id, maker, fullname, country | countries: countryid, countryname, continent | continents: contid, continent | cars_data.id = car_names.makeid | car_names.model = model_list.model | model_list.maker = car_makers.id | car_makers.country = countries.countryid | countries.continent = continents.contid |",
    "difficulty": "hard",
    "question": "What is the car model with the highest mpg ?",
    "pred": "SELECT model FROM cars_data ORDER BY mpg DESC LIMIT 1",
    "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;"
  },
  {
    "index": 135,
    "db_id": "car_1",
    "db_info": "| cars_data: year, horsepower, id | car_names: makeid, model | model_list: modelid, maker | car_makers: id | countries: countryid | continents: contid | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "hard",
    "question": "What is the average horsepower of the cars before 1980?",
    "pred": "SELECT model FROM cars_data ORDER BY mpg DESC LIMIT 1",
    "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;"
  },
  {
    "index": 139,
    "db_id": "car_1",
    "db_info": "| cars_data: accelerate, cylinders, id, mpg, edispl, horsepower, weight, year | car_names: makeid, model, make | model_list: model, maker, modelid | car_makers: id, maker, fullname, country | countries: countryid, countryname, continent | continents: contid, continent | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "medium",
    "question": "What is the maximum accelerate for different number of cylinders?",
    "pred": "SELECT AVG (cars_data.edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.model = 'volvo'   OR car_names.model = saab'",
    "gold": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"
  },
  {
    "index": 141,
    "db_id": "car_1",
    "db_info": "| model_list: modelid, maker, model | car_names: makeid, model, make | car_makers: id, maker, fullname, country | countries: countryid, countryname, continent | continents: contid, continent | cars_data: id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "medium",
    "question": "Which model has the most version(make) of cars?",
    "pred": "SELECT MAX (accelerate) FROM cars_data GROUP BY cylinders",
    "gold": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"
  },
  {
    "index": 143,
    "db_id": "car_1",
    "db_info": "| cars_data: cylinders, id | car_names: makeid, model | model_list: modelid, maker | car_makers: id | countries: countryid, continent | continents: contid | cars_data.id = car_names.makeid | car_names.model = model_list.model | model_list.maker = car_makers.id | car_makers.country = countries.countryid | countries.continent = continents.contid |",
    "difficulty": "hard",
    "question": "How many cars have more than 4 cylinders?",
    "pred": "SELECT model FROM model_list GROUP BY model ORDER BY COUNT (DISTINCT maker) DESC LIMIT 1",
    "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"
  },
  {
    "index": 149,
    "db_id": "car_1",
    "db_info": "| car_makers: id, fullname, maker, country | model_list: maker, modelid, model |",
    "difficulty": "medium",
    "question": "Which makers designed more than 3 car models? List full name and the id.",
    "pred": "SELECT COUNT (*) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker WHERE car_makers.maker = 'American Motor Company'",
    "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"
  },
  {
    "index": 150,
    "db_id": "car_1",
    "db_info": "| car_makers: id, maker | model_list: maker, model | car_names: model | continents: contid, continent | countries: countryid, countryname, continent | cars_data: id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "medium",
    "question": "What are the names and ids of all makers with more than 3 models?",
    "pred": "SELECT maker,        model FROM model_list GROUP BY maker HAVING COUNT (*) > 3",
    "gold": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"
  },
  {
    "index": 151,
    "db_id": "car_1",
    "db_info": "| car_makers: fullname, maker, id, country | model_list: model, maker | cars_data: weight, id | car_names: model, makeid | countries: countryid, countryname, continent | continents: contid, continent | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "medium",
    "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
    "pred": "SELECT car_makers.maker,        car_makers.id FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id HAVING COUNT (*) > 3",
    "gold": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"
  },
  {
    "index": 152,
    "db_id": "car_1",
    "db_info": "| car_makers: maker, id, fullname, country | model_list: model, maker | car_names: model, make, makeid | cars_data: weight, id, mpg, cylinders, edispl, horsepower, accelerate, year | continents: contid, continent | countries: countryid, countryname, continent | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "extra",
    "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
    "pred": "SELECT DISTINCT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = 'General Motors'   OR cars_data.weight > 3500",
    "gold": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"
  },
  {
    "index": 153,
    "db_id": "car_1",
    "db_info": "| cars_data: weight, year, id, mpg, cylinders, edispl, horsepower, accelerate | car_names: makeid, model, make | model_list: maker, modelid, model | car_makers: id, maker, fullname, country | countries: countryid, continent, countryname | continents: contid, continent | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "extra",
    "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
    "pred": "SELECT DISTINCT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = 'General Motors' UNION SELECT DISTINCT model FROM cars_data WHERE weight > 3500",
    "gold": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"
  },
  {
    "index": 155,
    "db_id": "car_1",
    "db_info": "| cars_data: accelerate, horsepower, id, mpg, cylinders, edispl, weight, year | car_names: makeid, model, make | model_list: modelid, maker, model | car_makers: id, maker, fullname, country | countries: continent, countryid, countryname | continents: contid, continent | cars_data.id = car_names.makeid | car_names.model = model_list.model | model_list.maker = car_makers.id | car_makers.country = countries.countryid | countries.continent = continents.contid |",
    "difficulty": "easy",
    "question": "What is the horsepower of the car with the largest accelerate?",
    "pred": "SELECT DISTINCT YEAR FROM cars_data WHERE weight < 4000 INTERSECT   SELECT DISTINCT YEAR   FROM cars_data WHERE weight > 3000",
    "gold": "select distinct year from cars_data where weight between 3000 and 4000;"
  },
  {
    "index": 159,
    "db_id": "car_1",
    "db_info": "| cars_data: accelerate, horsepower, id | car_names: makeid, model, make | model_list: model, modelid, maker | car_makers: id, maker, fullname, country | countries: countryid, countryname, continent | continents: contid, continent |",
    "difficulty": "extra",
    "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
    "pred": "SELECT cylinders FROM cars_data WHERE accelerate = '3'   AND model = 'volvo' ORDER BY cylinders ASC LIMIT 1",
    "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"
  },
  {
    "index": 160,
    "db_id": "car_1",
    "db_info": "| cars_data: accelerate, horsepower, id | car_names: makeid, model | model_list: model, modelid, maker | car_makers: id, maker, fullname, country | countries: countryid, countryname, continent | continents: contid, continent | cars_data.id = car_names.makeid | car_names.model = model_list.model | model_list.maker = car_makers.id | car_makers.country = countries.countryid | countries.continent = continents.contid |",
    "difficulty": "hard",
    "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
    "pred": "SELECT COUNT (*) FROM cars_data WHERE accelerate >     (SELECT MAX (accelerate)      FROM cars_data)",
    "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"
  },
  {
    "index": 161,
    "db_id": "car_1",
    "db_info": "| car_makers: country, id, maker, fullname | countries: countryid, countryname, continent | model_list: modelid, maker, model | car_names: makeid, model, make | cars_data: id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | continents: contid, continent | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "hard",
    "question": "How many countries has more than 2 car makers ?",
    "pred": "SELECT COUNT (*) FROM cars_data WHERE accelerate >     (SELECT MAX (accelerate)      FROM cars_data)",
    "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"
  },
  {
    "index": 167,
    "db_id": "car_1",
    "db_info": "| cars_data: horsepower, cylinders | car_names: makeid, model | model_list: modelid, maker | car_makers: id, fullname |",
    "difficulty": "extra",
    "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
    "pred": "SELECT car_names.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cylinders = 4 GROUP BY car_names.model ORDER BY SUM (cars_data.horsepower) DESC LIMIT 1",
    "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"
  },
  {
    "index": 168,
    "db_id": "car_1",
    "db_info": "| car_makers: id, maker, fullname, country | cars_data: cylinders, horsepower, id, mpg, edispl, weight, accelerate, year | model_list: maker, modelid, model | car_names: makeid, model, make | countries: countryid, countryname, continent | continents: contid, continent | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "extra",
    "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
    "pred": "SELECT makeid,        makename FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.modelid WHERE horsepower >     (SELECT MIN (_)      FROM _) EXCEPT SELECT car_names.makeid,        car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.modelid GROUP BY car_names.makeid HAVING COUNT (*) > 3",
    "gold": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;"
  },
  {
    "index": 169,
    "db_id": "car_1",
    "db_info": "| cars_data: mpg, cylinders, year, id, edispl, horsepower, weight, accelerate | car_names: makeid, model | model_list: model, maker | car_makers: id | countries: countryid | continents: contid | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "extra",
    "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
    "pred": "SELECT id,        maker FROM cars_data WHERE horsepower <     (SELECT MIN (horsepower)      FROM cars_data)",
    "gold": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;"
  },
  {
    "index": 170,
    "db_id": "car_1",
    "db_info": "| cars_data: mpg, cylinders, year, id | car_names: makeid, model | model_list: model, maker | car_makers: id, country | countries: countryid, continent | continents: contid, continent | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "medium",
    "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
    "pred": "SELECT MAX (mpg) FROM cars_data WHERE cylinders = 8   AND YEAR < 1980",
    "gold": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980"
  },
  {
    "index": 172,
    "db_id": "car_1",
    "db_info": "| model_list: model, maker, modelid | car_makers: id, maker, fullname, country | cars_data: weight, id, mpg, cylinders, edispl, horsepower, accelerate, year | car_names: makeid, model, make | countries: countryid, countryname, continent | continents: contid, continent | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "extra",
    "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
    "pred": "SELECT model FROM model_list WHERE weight < 3500 EXCEPT SELECT model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN car_makers ON car_names.makeid = car_makers.id WHERE car_makers.maker = 'Ford Motor Company'",
    "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"
  },
  {
    "index": 173,
    "db_id": "car_1",
    "db_info": "| countries: countryname, countryid, continent | car_makers: country, id, maker, fullname | continents: contid, continent | model_list: modelid, maker, model | car_names: makeid, model, make | cars_data: id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "extra",
    "question": "What are the name of the countries where there is not a single car maker?",
    "pred": "SELECT DISTINCT model FROM model_list WHERE weight < 3500 EXCEPT SELECT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.maker = 'Ford'   AND model_list.weight >= 3500",
    "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"
  },
  {
    "index": 174,
    "db_id": "car_1",
    "db_info": "| car_makers: country, id, maker, fullname | countries: countryid, countryname, continent | continents: contid, continent | model_list: maker, modelid, model | car_names: makeid, model, make | cars_data: id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "hard",
    "question": "What are the names of the countries with no car makers?",
    "pred": "SELECT DISTINCT _ FROM _ EXCEPT SELECT DISTINCT _ FROM _",
    "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"
  },
  {
    "index": 175,
    "db_id": "car_1",
    "db_info": "| car_makers: maker, id, fullname, country | model_list: modelid, maker, model | countries: countryid, countryname, continent | continents: contid, continent | car_names: makeid, model, make | cars_data: id, mpg, cylinders, edispl, horsepower, weight, accelerate, year |",
    "difficulty": "hard",
    "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
    "pred": "SELECT _ FROM _ WHERE _ NOT IN     (SELECT DISTINCT _      FROM _)",
    "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"
  },
  {
    "index": 176,
    "db_id": "car_1",
    "db_info": "| car_makers: id, maker, fullname, country | model_list: maker, modelid | cars_data: id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | car_names: makeid, model, make | countries: countryid, countryname, continent | continents: contid, continent | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "extra",
    "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
    "pred": "SELECT maker FROM model_list GROUP BY maker HAVING COUNT (*) >= 2 UNION SELECT maker FROM car_makers GROUP BY maker HAVING COUNT (*) > 3",
    "gold": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;"
  },
  {
    "index": 177,
    "db_id": "car_1",
    "db_info": "| countries: countryid, countryname, continent | car_makers: maker, fullname, id, country | model_list: maker, model | car_names: model, makeid | cars_data: id | continents: contid, continent | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "extra",
    "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
    "pred": "SELECT maker FROM model_list GROUP BY maker HAVING COUNT (*) >= 2 UNION SELECT maker FROM cars_data GROUP BY maker HAVING COUNT (*) > 3",
    "gold": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;"
  },
  {
    "index": 178,
    "db_id": "car_1",
    "db_info": "| countries: countryid, countryname, continent | car_makers: id, maker, fullname, country | model_list: maker, model | car_names: model, makeid | continents: continent, contid | cars_data: id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | countries.continent = continents.contid | car_makers.country = countries.countryid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid |",
    "difficulty": "extra",
    "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
    "pred": "SELECT countryid,        countryname FROM countries WHERE countryid IN     (SELECT DISTINCT country      FROM car_makers      GROUP BY country      HAVING COUNT (*) > 3) UNION SELECT countries.countryid,        countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.fullname like '%fiat%'",
    "gold": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';"
  },
  {
    "index": 179,
    "db_id": "car_1",
    "db_info": "| airlines: airline, country, uid, abbreviation | airports: country, city, airportcode, airportname, countryabbrev | flights: airline, flightno, sourceairport, destairport |",
    "difficulty": "extra",
    "question": "Which country does Airline \"JetBlue Airways\" belong to?",
    "pred": "SELECT countryid,        countryname FROM countries WHERE countryid IN     (SELECT DISTINCT country      FROM car_makers      GROUP BY country      HAVING COUNT (*) > 3) UNION SELECT countries.countryid,        countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.maker = 'FCA'   AND countries.countryid!= 'USA'",
    "gold": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';"
  },
  {
    "index": 183,
    "db_id": "flight_2",
    "db_info": "| airlines: country, airline, abbreviation, uid | airports: city, airportcode, airportname, country, countryabbrev | flights: airline, flightno, sourceairport, destairport |",
    "difficulty": "easy",
    "question": "List all airline names and their abbreviations in \"USA\".",
    "pred": "SELECT airline FROM airlines WHERE airline = 'JetBlue Airways'",
    "gold": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
  },
  {
    "index": 194,
    "db_id": "flight_2",
    "db_info": "| airlines: abbreviation, airline, uid, country | airports: city, airportcode, airportname, country, countryabbrev | flights: airline, flightno, sourceairport, destairport |",
    "difficulty": "easy",
    "question": "Give the airline with abbreviation 'UAL'.",
    "pred": "SELECT * FROM airlines WHERE abbreviation = 'UAL'",
    "gold": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""
  },
  {
    "index": 195,
    "db_id": "flight_2",
    "db_info": "| airlines: country, airline, uid, abbreviation | airports: city, airportcode, airportname, country, countryabbrev | flights: airline, flightno, sourceairport, destairport |",
    "difficulty": "easy",
    "question": "How many airlines are from USA?",
    "pred": "SELECT * FROM airlines WHERE airline = 'UAL'",
    "gold": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""
  },
  {
    "index": 204,
    "db_id": "flight_2",
    "db_info": "| flights: sourceairport, flightno, airline | airports: airportcode, city, airportname, country, countryabbrev | airlines: uid, airline, abbreviation, country | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode |",
    "difficulty": "easy",
    "question": "Count the number of flights departing from 'APG'.",
    "pred": "SELECT COUNT (*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Albuquerque'   AND airports.country = 'USA'   AND flights.airline = 'American Airlines'",
    "gold": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
  },
  {
    "index": 205,
    "db_id": "flight_2",
    "db_info": "| flights: destairport, airline, flightno, sourceairport | airports: airportcode, city, airportname, country, countryabbrev | airlines: uid, airline, abbreviation, country |",
    "difficulty": "easy",
    "question": "How many flights have destination ATO?",
    "pred": "SELECT COUNT (*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Albuquerque'   AND airports.country = 'USA'   AND flights.airline = 'American Airlines'",
    "gold": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
  },
  {
    "index": 206,
    "db_id": "flight_2",
    "db_info": "| flights: destairport, airline, flightno | airports: airportcode, city, airportname, country, countryabbrev | airlines: uid, airline, abbreviation, country |",
    "difficulty": "easy",
    "question": "Count the number of flights into ATO.",
    "pred": "SELECT COUNT (*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Ato'   AND airports.country = 'Papua New Guinea'",
    "gold": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""
  },
  {
    "index": 207,
    "db_id": "flight_2",
    "db_info": "| airports: city, airportcode, airportname, country, countryabbrev | flights: sourceairport, destairport, flightno, airline | airlines: uid, airline, abbreviation, country | flights.sourceairport = airports.airportcode | flights.destairport = airports.airportcode |",
    "difficulty": "easy",
    "question": "How many flights depart from City Aberdeen?",
    "pred": "SELECT COUNT (*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Ato'   AND airports.country = 'Papua New Guinea'",
    "gold": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""
  },
  {
    "index": 209,
    "db_id": "flight_2",
    "db_info": "| airports: city, airportcode, airportname, country, countryabbrev | flights: destairport, flightno, airline, sourceairport | airlines: uid, airline, abbreviation, country |",
    "difficulty": "medium",
    "question": "How many flights arriving in Aberdeen city?",
    "pred": "SELECT COUNT (*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'   AND flights.flightno!= 'NA'",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
  },
  {
    "index": 211,
    "db_id": "flight_2",
    "db_info": "| airlines: uid, airline, abbreviation, country | airports: city, airportcode, airportname, country, countryabbrev | flights: sourceairport, destairport, flightno, airline | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode |",
    "difficulty": "medium",
    "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
    "pred": "SELECT COUNT (*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'   AND flights.destairport!= 'Aberdeen'",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
  },
  {
    "index": 212,
    "db_id": "flight_2",
    "db_info": "| flights: sourceairport, destairport, flightno | airports: city, airportcode | airlines: uid, airline, abbreviation, country |",
    "difficulty": "hard",
    "question": "How many flights fly from Aberdeen to Ashley?",
    "pred": "SELECT COUNT (*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'   AND airports.city = 'Ashley'",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""
  },
  {
    "index": 213,
    "db_id": "flight_2",
    "db_info": "| airlines: airline, uid, abbreviation, country | airports: airportcode, city, airportname, country, countryabbrev | flights: airline, flightno, sourceairport, destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode |",
    "difficulty": "hard",
    "question": "How many flights does airline 'JetBlue Airways' have?",
    "pred": "SELECT COUNT (*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'   AND airports.city = 'Ashley'",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""
  },
  {
    "index": 215,
    "db_id": "flight_2",
    "db_info": "| airlines: airline, uid | airports: airportcode, city | flights: airline, destairport | flights.sourceairport = airports.airportcode | flights.destairport = airports.airportcode |",
    "difficulty": "medium",
    "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
    "pred": "SELECT COUNT (*) FROM flights JOIN airlines ON flights.airline = airlines.id WHERE airlines.name = 'JetBlue Airways'",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""
  },
  {
    "index": 216,
    "db_id": "flight_2",
    "db_info": "| flights: destairport, airline, flightno, sourceairport | airlines: uid, abbreviation, airline, country | airports: airportcode, city, airportname, country, countryabbrev | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode |",
    "difficulty": "medium",
    "question": "Count the number of United Airlines flights arriving in ASY Airport.",
    "pred": "SELECT COUNT (*) FROM flights JOIN airports ON flights.destairport = airports.airportcode JOIN airlines ON flights.airline = airlines.uid WHERE airports.city = 'Austin'   AND airlines.airline = 'United Airlines'",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""
  },
  {
    "index": 217,
    "db_id": "flight_2",
    "db_info": "| flights: airline, sourceairport, flightno, destairport | airlines: airline, uid, abbreviation, country | airports: airportcode, city, airportname, country, countryabbrev | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode |",
    "difficulty": "medium",
    "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
    "pred": "SELECT COUNT (*) FROM flights JOIN airports ON flights.destairport = airports.airportcode JOIN airlines ON flights.airline = airlines.uid WHERE airports.city = 'Austin'   AND airlines.airline = 'United Airlines'",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""
  },
  {
    "index": 218,
    "db_id": "flight_2",
    "db_info": "| flights: sourceairport, airline, destairport, flightno | airlines: airline, uid, abbreviation, country | airports: airportcode, city, airportname, country, countryabbrev |",
    "difficulty": "medium",
    "question": "Return the number of United Airlines flights leaving from AHD Airport.",
    "pred": "SELECT COUNT (*) FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE airlines.abbreviation = 'UA'   AND flights.sourceairport = 'AHD'",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""
  },
  {
    "index": 219,
    "db_id": "flight_2",
    "db_info": "| flights: airline, destairport, flightno, sourceairport | airlines: airline, uid, abbreviation, country | airports: city, airportcode, airportname, country, countryabbrev | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode |",
    "difficulty": "medium",
    "question": "How many United Airlines flights go to City 'Aberdeen'?",
    "pred": "SELECT COUNT (*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Austin'   AND airlines.airline = 'United Airlines'",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""
  },
  {
    "index": 220,
    "db_id": "flight_2",
    "db_info": "| flights: destairport, airline, flightno, sourceairport | airlines: airline, uid, abbreviation, country | airports: airportcode, city, airportname, country, countryabbrev |",
    "difficulty": "hard",
    "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
    "pred": "SELECT COUNT (*) FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE airlines.country = 'United States'   AND airports.city = 'Aberdeen'   AND flights.airline = 'United Airlines'",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""
  },
  {
    "index": 221,
    "db_id": "flight_2",
    "db_info": "| flights: destairport, flightno | airports: airportcode, city | airlines: | flights.destairport = airports.airportcode |",
    "difficulty": "hard",
    "question": "Which city has most number of arriving flights?",
    "pred": "SELECT COUNT (*) FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE airlines.abbreviation = 'UA'   AND flights.destairport = 'ABERDEEN'",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""
  },
  {
    "index": 223,
    "db_id": "flight_2",
    "db_info": "| flights: sourceairport, airline, flightno, destairport | airports: airportcode, city, airportname, country, countryabbrev | airlines: uid, airline, abbreviation, country |",
    "difficulty": "extra",
    "question": "Which city has most number of departing flights?",
    "pred": "SELECT city FROM airports GROUP BY city ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 224,
    "db_id": "flight_2",
    "db_info": "| flights: sourceairport, destairport, airline | airports: city, airportcode, airportname, country, countryabbrev | airlines: uid, airline, abbreviation, country | flights.sourceairport = airports.airportcode |",
    "difficulty": "extra",
    "question": "Which city is the most frequent source airport?",
    "pred": "SELECT city FROM airports JOIN flights ON airports.airportcode = flights.destairport GROUP BY city ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 226,
    "db_id": "flight_2",
    "db_info": "| flights: destairport, sourceairport | airports: airportcode | airlines: uid | flights.destairport=airports.airportcode | flights.sourceairport=airports.airportcode |",
    "difficulty": "extra",
    "question": "What is the airport code of the airport with the most flights?",
    "pred": "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 227,
    "db_id": "flight_2",
    "db_info": "| flights: destairport, sourceairport, flightno, airline | airports: airportcode, airportname, city, country, countryabbrev | airlines: uid, airline, abbreviation, country | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode |",
    "difficulty": "extra",
    "question": "What is the code of airport that has fewest number of flights?",
    "pred": "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 228,
    "db_id": "flight_2",
    "db_info": "| flights: destairport, sourceairport, flightno | airports: airportcode |",
    "difficulty": "extra",
    "question": "Give the code of the airport with the least flights.",
    "pred": "SELECT airports.airportcode FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY airports.airportcode ORDER BY COUNT (*) ASC LIMIT 1",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"
  },
  {
    "index": 229,
    "db_id": "flight_2",
    "db_info": "| flights: airline, flightno | airlines: uid, airline, abbreviation, country | airports: city, airportcode, airportname, country, countryabbrev | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode |",
    "difficulty": "extra",
    "question": "Which airline has most number of flights?",
    "pred": "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT (*) ASC LIMIT 1",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"
  },
  {
    "index": 230,
    "db_id": "flight_2",
    "db_info": "| airlines: airline, uid, country, abbreviation | airports: airportcode, city, airportname, country, countryabbrev | flights: airline, flightno, sourceairport, destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode |",
    "difficulty": "extra",
    "question": "What airline serves the most flights?",
    "pred": "SELECT airline FROM flights GROUP BY airline ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 231,
    "db_id": "flight_2",
    "db_info": "| airlines: airline, abbreviation, country, uid | flights: airline, flightno, sourceairport, destairport | airports: airportcode, country, countryabbrev, city, airportname |",
    "difficulty": "extra",
    "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
    "pred": "SELECT airline FROM flights GROUP BY airline ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 232,
    "db_id": "flight_2",
    "db_info": "| airlines: abbreviation, country, airline, uid | flights: airline, flightno, sourceairport, destairport | airports: airportcode, country, city, airportname, countryabbrev |",
    "difficulty": "extra",
    "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
    "pred": "SELECT airlines.abbreviation,        airlines.country FROM flights JOIN airlines ON flights.airline = airlines.uid GROUP BY flights.airline ORDER BY COUNT (*) ASC LIMIT 1",
    "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"
  },
  {
    "index": 233,
    "db_id": "flight_2",
    "db_info": "| flights: sourceairport, airline, flightno, destairport | airports: airportcode, city, airportname, country, countryabbrev | airlines: airline, uid, abbreviation, country | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode |",
    "difficulty": "extra",
    "question": "What are airlines that have some flight departing from airport 'AHD'?",
    "pred": "SELECT airlines.country,        airlines.abbreviation FROM flights JOIN airlines ON flights.airline = airlines.uid GROUP BY flights.airline ORDER BY COUNT (*) ASC LIMIT 1",
    "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"
  },
  {
    "index": 234,
    "db_id": "flight_2",
    "db_info": "| flights: sourceairport, airline, flightno, destairport | airlines: uid, airline, abbreviation, country | airports: airportcode, airportname, city, country, countryabbrev | flights.sourceairport = airports.airportcode | airlines.airline = flights.airline |",
    "difficulty": "medium",
    "question": "Which airlines have a flight with source airport AHD?",
    "pred": "SELECT airline FROM flights WHERE sourceairport = 'AHD'",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""
  },
  {
    "index": 235,
    "db_id": "flight_2",
    "db_info": "| airlines: airline, uid, abbreviation, country | airports: airportcode, airportname, city, country, countryabbrev | flights: destairport, airline, flightno, sourceairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode |",
    "difficulty": "medium",
    "question": "What are airlines that have flights arriving at airport 'AHD'?",
    "pred": "SELECT airline FROM flights WHERE sourceairport = 'AHD'",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""
  },
  {
    "index": 236,
    "db_id": "flight_2",
    "db_info": "| flights: destairport, airline, flightno, sourceairport | airports: airportcode, city, airportname, country, countryabbrev | airlines: uid, airline, abbreviation, country | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode | flights.airline=airlines.uid |",
    "difficulty": "medium",
    "question": "Which airlines have a flight with destination airport AHD?",
    "pred": "SELECT airline FROM flights WHERE destairport = 'AHD'",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""
  },
  {
    "index": 237,
    "db_id": "flight_2",
    "db_info": "| airlines: uid, airline, abbreviation, country | flights: sourceairport, destairport, airline | airports: airportcode, city, airportname, country, countryabbrev | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode |",
    "difficulty": "medium",
    "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
    "pred": "SELECT airline FROM flights WHERE destairport = 'AHD'",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""
  },
  {
    "index": 238,
    "db_id": "flight_2",
    "db_info": "| airlines: airline, uid, abbreviation, country | airports: airportcode, city, airportname, country, countryabbrev | flights: airline, sourceairport, flightno, destairport | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode |",
    "difficulty": "extra",
    "question": "Which airlines have departing flights from both APG and CVO airports?",
    "pred": "SELECT airline FROM flights WHERE sourceairport = 'APG' INTERSECT   SELECT airline   FROM flights WHERE sourceairport = 'CVO'",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""
  },
  {
    "index": 239,
    "db_id": "flight_2",
    "db_info": "| flights: sourceairport, airline, destairport, flightno | airports: airportcode, city, airportname, country, countryabbrev | airlines: uid, airline, abbreviation, country |",
    "difficulty": "extra",
    "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
    "pred": "SELECT airline FROM flights WHERE sourceairport = 'APG' INTERSECT   SELECT airline   FROM flights WHERE sourceairport = 'CVO'",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""
  },
  {
    "index": 240,
    "db_id": "flight_2",
    "db_info": "| airlines: uid, airline | airports: airportcode, airportname, city | flights: sourceairport, destairport, airline |",
    "difficulty": "extra",
    "question": "Which airlines have departures from CVO but not from APG airports?",
    "pred": "SELECT airline FROM flights WHERE sourceairport = 'CVO' EXCEPT SELECT airline FROM flights WHERE sourceairport = 'APG'",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""
  },
  {
    "index": 241,
    "db_id": "flight_2",
    "db_info": "| flights: airline, flightno, sourceairport, destairport | airlines: uid, airline, abbreviation, country | airports: city, airportcode, airportname, country, countryabbrev | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode |",
    "difficulty": "extra",
    "question": "Find all airlines that have at least 10 flights.",
    "pred": "SELECT airline FROM flights WHERE sourceairport = 'CVO' EXCEPT SELECT airline FROM flights WHERE sourceairport = 'APG'",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""
  },
  {
    "index": 242,
    "db_id": "flight_2",
    "db_info": "| airlines: airline, uid | flights: airline, flightno, sourceairport, destairport | airports: airportcode, airportname, city, country, countryabbrev | flights.sourceairport = airports.airportcode | flights.destairport = airports.airportcode |",
    "difficulty": "medium",
    "question": "Which airlines have at least 10 flights?",
    "pred": "SELECT airline FROM flights GROUP BY airline HAVING COUNT (*) >= 10",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"
  },
  {
    "index": 243,
    "db_id": "flight_2",
    "db_info": "| flights: airline, flightno, sourceairport, destairport | airlines: uid, airline, abbreviation, country | airports: airportcode, city, airportname, country, countryabbrev |",
    "difficulty": "medium",
    "question": "Find all airlines that have fewer than 200 flights.",
    "pred": "SELECT airline FROM flights GROUP BY airline HAVING COUNT (*) >= 10",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"
  },
  {
    "index": 244,
    "db_id": "flight_2",
    "db_info": "| flights: airline, flightno | airlines: uid, airline |",
    "difficulty": "medium",
    "question": "Which airlines have less than 200 flights?",
    "pred": "SELECT airline FROM flights GROUP BY airline HAVING COUNT (*) < 200",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"
  },
  {
    "index": 245,
    "db_id": "flight_2",
    "db_info": "| flights: airline, flightno, sourceairport, destairport | airlines: uid, airline, abbreviation, country | airports: airportcode, city, airportname, country, countryabbrev | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode |",
    "difficulty": "medium",
    "question": "What are flight numbers of Airline \"United Airlines\"?",
    "pred": "SELECT airline FROM flights GROUP BY airline HAVING COUNT (*) < 200",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"
  },
  {
    "index": 249,
    "db_id": "flight_2",
    "db_info": "| airlines: uid, airline, abbreviation, country | airports: airportcode, airportname, city, country, countryabbrev | flights: destairport, flightno, airline, sourceairport | flights.destairport = airports.airportcode | flights.airline = airlines.uid |",
    "difficulty": "easy",
    "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
    "pred": "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Albuquerque'   AND airports.country = 'USA'   AND flights.airline = 'American Airlines'",
    "gold": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
  },
  {
    "index": 250,
    "db_id": "flight_2",
    "db_info": "| flights: destairport, flightno | airports: airportcode | airlines: uid |",
    "difficulty": "easy",
    "question": "Give the flight numbers of flights landing at APG.",
    "pred": "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname = 'APG'   AND airports.country = 'United States'",
    "gold": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""
  },
  {
    "index": 251,
    "db_id": "flight_2",
    "db_info": "| flights: sourceairport, flightno, airline, destairport | airports: city, airportcode, airportname, country, countryabbrev | airlines: uid, airline, abbreviation, country |",
    "difficulty": "easy",
    "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
    "pred": "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname = 'Alaska Pine Gap'   OR airports.airportname = 'Portland International Airport'",
    "gold": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""
  },
  {
    "index": 253,
    "db_id": "flight_2",
    "db_info": "| airlines: airline, uid, abbreviation, country | airports: city, airportcode, airportname, country, countryabbrev | flights: flightno, destairport, sourceairport, airline |",
    "difficulty": "medium",
    "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
    "pred": "SELECT flightno FROM flights WHERE sourceairport = 'ABR'",
    "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
  },
  {
    "index": 254,
    "db_id": "flight_2",
    "db_info": "| flights: destairport, flightno, airline, sourceairport | airports: city, airportcode, airportname, country, countryabbrev | airlines: uid, airline, abbreviation, country |",
    "difficulty": "medium",
    "question": "Give the flight numbers of flights arriving in Aberdeen.",
    "pred": "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'   AND flights.destairport!= airports.airportcode",
    "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
  },
  {
    "index": 255,
    "db_id": "flight_2",
    "db_info": "| airports: city, airportcode | flights: destairport |",
    "difficulty": "medium",
    "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
    "pred": "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'   AND flights.destairport!= 'London Heathrow'",
    "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
  },
  {
    "index": 257,
    "db_id": "flight_2",
    "db_info": "| airports: airportname, airportcode | flights: destairport, sourceairport | airlines: uid, airline, abbreviation, country | airports: city, country, countryabbrev | flights: airline, flightno |",
    "difficulty": "hard",
    "question": "Find the name of airports which do not have any flight in and out.",
    "pred": "SELECT COUNT (*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'   OR airports.city = 'Abilene'",
    "gold": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\""
  },
  {
    "index": 258,
    "db_id": "flight_2",
    "db_info": "| airports: airportcode, airportname, city, country, countryabbrev | flights: destairport, sourceairport, airline, flightno | airlines: uid, airline, abbreviation, country |",
    "difficulty": "hard",
    "question": "Which airports do not have departing or arriving flights?",
    "pred": "SELECT airportname FROM airports WHERE airportname NOT IN     (SELECT sourceairport      FROM flights      UNION SELECT destairport      FROM flights)",
    "gold": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"
  },
  {
    "index": 259,
    "db_id": "flight_2",
    "db_info": "| employee: employee_id, name, age, city | shop: shop_id, name, location, district, number_products, manager_name | hiring: shop_id, employee_id, start_from, is_full_time | evaluation: employee_id, year_awarded, bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id |",
    "difficulty": "hard",
    "question": "How many employees are there?",
    "pred": "SELECT airportcode FROM airports EXCEPT SELECT sourceairport FROM flights",
    "gold": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"
  },
  {
    "index": 264,
    "db_id": "employee_hire_evaluation",
    "db_info": "| employee: employee_id, city | hiring: employee_id | evaluation: employee_id | shop: shop_id |",
    "difficulty": "medium",
    "question": "Count the number of employees for each city.",
    "pred": "SELECT COUNT (*), employee.city FROM employee JOIN hiring ON employee.employee_id = hiring.employee_id GROUP BY employee.city",
    "gold": "SELECT count(*) ,  city FROM employee GROUP BY city"
  },
  {
    "index": 271,
    "db_id": "employee_hire_evaluation",
    "db_info": "| shop: number_products, shop_id, name, location, district, manager_name | employee: employee_id, name, age, city | hiring: shop_id, employee_id, start_from, is_full_time | evaluation: employee_id, year_awarded, bonus |",
    "difficulty": "medium",
    "question": "find the minimum and maximum number of products of all stores.",
    "pred": "SELECT shop.manager_name,        shop.district FROM shop JOIN product ON shop.shop_id = product.shop_id GROUP BY shop.shop_id ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"
  },
  {
    "index": 280,
    "db_id": "employee_hire_evaluation",
    "db_info": "| evaluation: bonus, employee_id, year_awarded | employee: name, employee_id, age, city | hiring: employee_id, shop_id, start_from, is_full_time | shop: shop_id, name, location, district, number_products, manager_name | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id |",
    "difficulty": "hard",
    "question": "Which employee received the biggest bonus? Give me the employee name.",
    "pred": "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY evaluation.employee_id ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"
  },
  {
    "index": 288,
    "db_id": "employee_hire_evaluation",
    "db_info": "| employee: employee_id | shop: name, shop_id | hiring: employee_id, shop_id | evaluation: |",
    "difficulty": "medium",
    "question": "For each shop, return the number of employees working there and the name of the shop.",
    "pred": "SELECT shop.name,        COUNT (*) FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY hiring.shop_id",
    "gold": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"
  },
  {
    "index": 292,
    "db_id": "employee_hire_evaluation",
    "db_info": "| hiring: employee_id, shop_id, start_from, is_full_time | employee: employee_id, name, age, city | shop: shop_id, name, location, district, number_products, manager_name | evaluation: employee_id, year_awarded, bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id |",
    "difficulty": "easy",
    "question": "What is all the information about hiring?",
    "pred": "SELECT * FROM hiring JOIN employee ON hiring.employee_id = employee.employee_id",
    "gold": "SELECT * FROM hiring"
  },
  {
    "index": 293,
    "db_id": "employee_hire_evaluation",
    "db_info": "| shop: district, number_products, shop_id, name, location, manager_name | employee: employee_id, name, age, city | hiring: shop_id, employee_id, start_from, is_full_time | evaluation: employee_id, year_awarded, bonus | hiring.employee_id = employee.employee_id | hiring.shop_id = shop.shop_id | evaluation.employee_id = employee.employee_id |",
    "difficulty": "easy",
    "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
    "pred": "SELECT * FROM hiring JOIN employee ON hiring.employee_id = employee.employee_id",
    "gold": "SELECT * FROM hiring"
  },
  {
    "index": 312,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "| ref_template_types: template_type_code, template_type_description | templates: template_id, template_type_code, version_number, date_effective_from, date_effective_to, template_details | documents: template_id, document_id, document_name, document_description, other_details | paragraphs: document_id, paragraph_id, paragraph_text, other_details |",
    "difficulty": "extra",
    "question": "Return the id and type code of the template that is used for the greatest number of documents.",
    "pred": "SELECT documents.template_id,        documents.template_id FROM documents JOIN templates ON documents.template_id = templates.template_id GROUP BY documents.template_id ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 313,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "| templates: template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents: template_id, document_id, document_name, document_description, other_details | ref_template_types: template_type_code, template_type_description | paragraphs: document_id, paragraph_id, paragraph_text, other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id |",
    "difficulty": "extra",
    "question": "Show ids for all templates that are used by more than one document.",
    "pred": "SELECT template_id,        template_type_code FROM documents GROUP BY template_id ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 322,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "| ref_template_types: template_type_code, template_type_description | templates: template_type_code, template_id, version_number, date_effective_from, date_effective_to, template_details | documents: template_id, document_id, document_name, document_description, other_details | paragraphs: document_id, paragraph_id, paragraph_text, other_details | templates.template_type_code=ref_template_types.template_type_code | documents.template_id=templates.template_id | paragraphs.document_id=documents.document_id |",
    "difficulty": "easy",
    "question": "What are the different template type codes?",
    "pred": "SELECT DISTINCT template_type_code FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code",
    "gold": "SELECT DISTINCT template_type_code FROM Templates"
  },
  {
    "index": 323,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "| templates: template_id, template_type_code | ref_template_types: template_type_code |",
    "difficulty": "easy",
    "question": "What are the ids of templates with template type code PP or PPT?",
    "pred": "SELECT DISTINCT template_type_code FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code",
    "gold": "SELECT DISTINCT template_type_code FROM Templates"
  },
  {
    "index": 327,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "| ref_template_types: template_type_code, template_type_description | templates: version_number, template_type_code, template_id, date_effective_from, date_effective_to, template_details | documents: document_id, template_id, document_name, document_description, other_details | paragraphs: paragraph_id, document_id, paragraph_text, other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id |",
    "difficulty": "easy",
    "question": "What is the version number and template type code for the template with version number later than 5?",
    "pred": "SELECT COUNT (*) FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_description = 'CV'",
    "gold": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""
  },
  {
    "index": 328,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "| templates: version_number, template_type_code | ref_template_types: template_type_code |",
    "difficulty": "medium",
    "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
    "pred": "SELECT templates.version_number,        templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id WHERE templates.version_number > 5",
    "gold": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"
  },
  {
    "index": 336,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "| ref_template_types: template_type_code, template_type_description | templates: version_number, template_type_code, template_id, date_effective_from, date_effective_to, template_details | documents: template_id, document_id, document_name, document_description, other_details | paragraphs: document_id, paragraph_id, paragraph_text, other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id |",
    "difficulty": "medium",
    "question": "Return the lowest version number, along with its corresponding template type code.",
    "pred": "SELECT MIN (templates.version_number), templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_type_code ORDER BY COUNT (*) ASC LIMIT 1",
    "gold": "SELECT min(Version_Number) ,  template_type_code FROM Templates"
  },
  {
    "index": 344,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "| ref_template_types: template_type_code, template_type_description | templates: template_type_code, template_id, date_effective_from, date_effective_to, version_number, template_details | documents: template_id, document_id, document_name, document_description, other_details | paragraphs: document_id, paragraph_id, paragraph_text, other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id |",
    "difficulty": "extra",
    "question": "Return the code of the template type that is most commonly used in documents.",
    "pred": "SELECT documents.template_id,        ref_template_types.template_type_description FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code GROUP BY documents.template_id ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 346,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "| ref_template_types: template_type_code, template_type_description | templates: template_type_code, template_id, version_number, date_effective_from, date_effective_to, template_details | documents: template_id, document_id, document_name, document_description, other_details | paragraphs: paragraph_id, document_id, paragraph_text, other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id |",
    "difficulty": "hard",
    "question": "What are the codes of template types that are not used for any document?",
    "pred": "SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN     (SELECT template_type_code      FROM documents)",
    "gold": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"
  },
  {
    "index": 347,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "| ref_template_types: template_type_code, template_type_description | templates: template_type_code, template_id, version_number, date_effective_from, date_effective_to, template_details | documents: document_id, template_id, document_name, document_description, other_details | paragraphs: paragraph_id, document_id, paragraph_text, other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id |",
    "difficulty": "hard",
    "question": "Show all template type codes and descriptions.",
    "pred": "SELECT template_type_code FROM ref_template_types EXCEPT SELECT templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id",
    "gold": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"
  },
  {
    "index": 354,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "| ref_template_types: template_type_code, template_type_description | templates: template_type_code, template_id, version_number, date_effective_from, date_effective_to, template_details | documents: template_id, document_id, document_name, document_description, other_details | paragraphs: document_id, paragraph_id, paragraph_text, other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id |",
    "difficulty": "medium",
    "question": "Return the different descriptions for templates that have been used in a document.",
    "pred": "SELECT DISTINCT ref_template_types.template_type_description FROM ref_template_types JOIN documents ON ref_template_types.template_type_code = documents.template_id GROUP BY ref_template_types.template_type_description HAVING COUNT (*) > 1000",
    "gold": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"
  },
  {
    "index": 355,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "| ref_template_types: template_type_code, template_type_description | templates: template_id, template_type_code, version_number, date_effective_from, date_effective_to, template_details | documents: document_id, template_id, document_name, document_description, other_details | paragraphs: paragraph_id, document_id, paragraph_text, other_details | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id |",
    "difficulty": "medium",
    "question": "What are the template ids with template type description \"Presentation\".",
    "pred": "SELECT DISTINCT templates.template_details FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Investment Proposal'   AND templates.date_effective_to > '2014-06-30 00:00:00'",
    "gold": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"
  },
  {
    "index": 357,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "| paragraphs: paragraph_id, document_id, paragraph_text, other_details | documents: document_id, template_id, document_name, document_description, other_details | templates: template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | ref_template_types: template_type_code, template_type_description | condensed_tables: paragraphs.document_id = documents.document_id, documents.template_id = templates.template_id, templates.template_type_code = ref_template_types.template_type_code |",
    "difficulty": "medium",
    "question": "How many paragraphs in total?",
    "pred": "SELECT template_id FROM templates WHERE template_details = 'Presentation'",
    "gold": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""
  },
  {
    "index": 362,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "| paragraphs: paragraph_text, paragraph_id, other_details, document_id | documents: document_id, template_id, document_name, document_description, other_details | templates: template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | ref_template_types: template_type_code, template_type_description | paragraphs.document_id = documents.document_id | documents.template_id = templates.template_id | templates.template_type_code = ref_template_types.template_type_code |",
    "difficulty": "medium",
    "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
    "pred": "SELECT other_details FROM paragraphs WHERE paragraph_text like '%Korea %'",
    "gold": "select other_details from paragraphs where paragraph_text like 'korea'"
  },
  {
    "index": 363,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "| documents: document_name, document_id, template_id, document_description, other_details | paragraphs: document_id, paragraph_id, paragraph_text, other_details | templates: template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | ref_template_types: template_type_code, template_type_description | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id | templates.template_type_code = ref_template_types.template_type_code |",
    "difficulty": "medium",
    "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
    "pred": "SELECT other_details FROM paragraphs WHERE other_details like '%Korea %'",
    "gold": "select other_details from paragraphs where paragraph_text like 'korea'"
  },
  {
    "index": 370,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "| documents: document_id, document_name, template_id | paragraphs: paragraph_id, document_id | templates: template_id | ref_template_types: template_type_code | templates.template_type_code = ref_template_types.template_type_code | documents.template_id = templates.template_id | paragraphs.document_id = documents.document_id |",
    "difficulty": "medium",
    "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
    "pred": "SELECT document_id,        document_name,        COUNT (*) FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id",
    "gold": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"
  },
  {
    "index": 374,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "| paragraphs: document_id, paragraph_id, paragraph_text, other_details | documents: document_id, document_name, template_id, document_description, other_details | templates: template_id, template_type_code, version_number, date_effective_from, date_effective_to, template_details | ref_template_types: template_type_code, template_type_description | paragraphs.document_id = documents.document_id | documents.template_id = templates.template_id | templates.template_type_code = ref_template_types.template_type_code |",
    "difficulty": "extra",
    "question": "Return the id and name of the document with the most paragraphs.",
    "pred": "SELECT document_id,        document_name FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id GROUP BY document_id ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 381,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "| teacher: teacher_id, name, age, hometown | course: course_id, starting_date, course | course_arrange: course_id, teacher_id, grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id |",
    "difficulty": "hard",
    "question": "How many teachers are there?",
    "pred": "SELECT document_id FROM paragraphs WHERE paragraph_text like '%Brazil%'   OR paragraph_text like '%Ireland%'",
    "gold": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'"
  },
  {
    "index": 382,
    "db_id": "course_teach",
    "db_info": "| teacher: teacher_id, name, age, hometown | course: course_id, staring_date, course | course_arrange: course_id, teacher_id, grade |",
    "difficulty": "easy",
    "question": "What is the total count of teachers?",
    "pred": "SELECT COUNT (*) FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id",
    "gold": "SELECT count(*) FROM teacher"
  },
  {
    "index": 388,
    "db_id": "course_teach",
    "db_info": "| teacher: hometown, name, teacher_id | course: course_id, staring_date, course | course_arrange: course_id, teacher_id, grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id |",
    "difficulty": "easy",
    "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
    "pred": "SELECT name FROM teacher WHERE hometown!= 'Little Lever Urban District'",
    "gold": "select name from teacher where hometown != \"little lever urban district\""
  },
  {
    "index": 389,
    "db_id": "course_teach",
    "db_info": "| teacher: name, age, teacher_id, hometown | course: course_id, starting_date, course | course_arrange: teacher_id, course_id, grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id |",
    "difficulty": "easy",
    "question": "Show the name of teachers aged either 32 or 33?",
    "pred": "SELECT name FROM teacher WHERE hometown!= 'Little Lever Urban District'",
    "gold": "select name from teacher where hometown != \"little lever urban district\""
  },
  {
    "index": 404,
    "db_id": "course_teach",
    "db_info": "| course: course, course_id, staring_date | teacher: name, teacher_id, age, hometown | course_arrange: teacher_id, course_id, grade | course_arrange.teacher_id = teacher.teacher_id | course_arrange.course_id = course.course_id |",
    "difficulty": "hard",
    "question": "What are the names of the people who teach math courses?",
    "pred": "SELECT teacher.name FROM course JOIN course_arrange ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id WHERE course.course = math'   AND course_arrange.grade!= 3",
    "gold": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""
  },
  {
    "index": 405,
    "db_id": "course_teach",
    "db_info": "| teacher: name, teacher_id, age, hometown | course_arrange: teacher_id, course_id, grade | course: course_id, staring_date, course |",
    "difficulty": "hard",
    "question": "Show names of teachers and the number of courses they teach.",
    "pred": "SELECT teacher.name FROM course_arrange JOIN course ON course_arrange.course_id = course.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id WHERE course.course = math'",
    "gold": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""
  },
  {
    "index": 409,
    "db_id": "course_teach",
    "db_info": "| teacher: name, teacher_id, age, hometown | course_arrange: teacher_id, course_id, grade | course: course_id, starting_date, course |",
    "difficulty": "medium",
    "question": "List the names of teachers who have not been arranged to teach courses.",
    "pred": "SELECT teacher.name FROM course_arrange JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id GROUP BY course_arrange.teacher_id HAVING COUNT (*) >= 2",
    "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"
  },
  {
    "index": 413,
    "db_id": "museum_visit",
    "db_info": "| museum: museum_id, name, num_of_staff, open_year | visitor: level_of_membership, age, id, name | visit: visitor_id, museum_id, num_of_ticket, total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id |",
    "difficulty": "medium",
    "question": "What is the average age of the visitors whose membership level is not higher than 4?",
    "pred": "SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership ASC",
    "gold": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC"
  },
  {
    "index": 415,
    "db_id": "museum_visit",
    "db_info": "| museum: museum_id, num_of_staff, name | visitor: id | visit: museum_id, visitor_id |",
    "difficulty": "medium",
    "question": "Find the id and name of the museum that has the most staff members?",
    "pred": "SELECT name,        level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age ASC",
    "gold": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC"
  },
  {
    "index": 421,
    "db_id": "museum_visit",
    "db_info": "| museum: museum_id, name, num_of_staff, open_year | visitor: id, name, level_of_membership, age | visit: museum_id, visitor_id, num_of_ticket, total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id |",
    "difficulty": "extra",
    "question": "What are the id and name of the museum visited most times?",
    "pred": "SELECT visitor.id,        visitor.name,        visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id ORDER BY visit.total_spent DESC LIMIT 1",
    "gold": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1"
  },
  {
    "index": 424,
    "db_id": "museum_visit",
    "db_info": "| visit: num_of_ticket, museum_id, visitor_id, total_spent | visitor: id, name, level_of_membership, age | museum: museum_id, name, num_of_staff, open_year | visit.visitor_id=visitor.id | visit.museum_id=museum.museum_id |",
    "difficulty": "hard",
    "question": "What are the average and maximum number of tickets bought in all visits?",
    "pred": "SELECT visitor.name,        visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visit.visitor_id ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"
  },
  {
    "index": 426,
    "db_id": "museum_visit",
    "db_info": "| museum: museum_id, open_year, name, num_of_staff | visitor: id, name, level_of_membership, age | visit: museum_id, visitor_id, num_of_ticket, total_spent | visit.visitor_id = visitor.id | visit.museum_id = museum.museum_id |",
    "difficulty": "medium",
    "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
    "pred": "SELECT SUM (visit.total_spent) FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visitor.level_of_membership = 'Member'   AND visit.total_spent > 5000",
    "gold": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"
  },
  {
    "index": 437,
    "db_id": "wta_1",
    "db_info": "| players: player_id | matches: winner_rank, winner_id, match_num | rankings: player_id, ranking |",
    "difficulty": "medium",
    "question": "Find the average rank of winners in all matches.",
    "pred": "SELECT AVG (winner_age), 'Winner',                          AVG (loser_age), 'Loser' FROM matches GROUP BY 1",
    "gold": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"
  },
  {
    "index": 440,
    "db_id": "wta_1",
    "db_info": "| matches: loser_rank, loser_id | players: player_id | rankings: ranking, player_id |",
    "difficulty": "easy",
    "question": "What is the best rank of losers across all matches?",
    "pred": "SELECT MAX (loser_rank) FROM matches WHERE loser_rank < 100",
    "gold": "SELECT min(loser_rank) FROM matches"
  },
  {
    "index": 441,
    "db_id": "wta_1",
    "db_info": "| players: country_code, player_id | matches: winner_id, loser_id | rankings: player_id |",
    "difficulty": "easy",
    "question": "find the number of distinct country codes of all players.",
    "pred": "SELECT loser_rank FROM matches GROUP BY loser_rank ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT min(loser_rank) FROM matches"
  },
  {
    "index": 448,
    "db_id": "wta_1",
    "db_info": "| players: player_id, first_name, last_name, hand, birth_date, country_code | matches: year, winner_id, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed | rankings: ranking_date, ranking, player_id, ranking_points, tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id |",
    "difficulty": "hard",
    "question": "What are the names of players who won in both 2013 and 2016?",
    "pred": "SELECT players.first_name,        players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.year = 2013 INTERSECT   SELECT players.first_name,          players.last_name   FROM players   JOIN matches ON players.player_id = matches.winner_id WHERE matches.year = 2016",
    "gold": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016"
  },
  {
    "index": 449,
    "db_id": "wta_1",
    "db_info": "| matches: year, match_num, tourney_id, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, minutes, round, score, surface, tourney_date, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed | players: player_id, first_name, last_name, hand, birth_date, country_code | rankings: ranking_date, ranking, player_id, ranking_points, tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id |",
    "difficulty": "hard",
    "question": "List the number of all matches who played in years of 2013 or 2016.",
    "pred": "SELECT players.first_name,        players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.year = 2013 INTERSECT   SELECT players.first_name,          players.last_name   FROM players   JOIN matches ON players.player_id = matches.winner_id WHERE matches.year = 2016",
    "gold": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016"
  },
  {
    "index": 452,
    "db_id": "wta_1",
    "db_info": "| players: player_id, first_name, country_code, last_name, hand, birth_date | matches: winner_id, tourney_name, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, winner_age, winner_entry, winner_hand, winner_ht, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings: player_id, ranking_date, ranking, ranking_points, tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id |",
    "difficulty": "extra",
    "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
    "pred": "SELECT players.country_code,        players.first_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championship' INTERSECT   SELECT players.country_code,          players.first_name   FROM players   JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open'",
    "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"
  },
  {
    "index": 453,
    "db_id": "wta_1",
    "db_info": "| players: first_name, country_code, birth_date, player_id | matches: None | rankings: None |",
    "difficulty": "extra",
    "question": "Find the first name and country code of the oldest player.",
    "pred": "SELECT players.first_name,        players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = 'WTA Championship' INTERSECT   SELECT players.first_name,          players.country_code   FROM players   JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = 'Australian Open'",
    "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"
  },
  {
    "index": 454,
    "db_id": "wta_1",
    "db_info": "| players: birth_date, first_name, country_code, player_id, last_name, hand | matches: winner_id, loser_id, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings: player_id, ranking_date, ranking, ranking_points, tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id |",
    "difficulty": "medium",
    "question": "What is the first name and country code of the oldest player?",
    "pred": "SELECT first_name,        country_code FROM players ORDER BY birth_date DESC LIMIT 1",
    "gold": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"
  },
  {
    "index": 455,
    "db_id": "wta_1",
    "db_info": "| players: first_name, last_name, birth_date, player_id, hand, country_code | matches: winner_id, loser_id, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings: player_id, ranking_date, ranking, ranking_points, tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id |",
    "difficulty": "medium",
    "question": "List the first and last name of all players in the order of birth date.",
    "pred": "SELECT first_name,        country_code FROM players ORDER BY birth_date DESC LIMIT 1",
    "gold": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"
  },
  {
    "index": 460,
    "db_id": "wta_1",
    "db_info": "| rankings: tours, player_id | players: first_name, country_code, player_id |",
    "difficulty": "hard",
    "question": "What is the first name and country code of the player with the most tours?",
    "pred": "SELECT players.first_name,        players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"
  },
  {
    "index": 461,
    "db_id": "wta_1",
    "db_info": "| matches: year, match_num | players: player_id | rankings: not relevant | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id |",
    "difficulty": "hard",
    "question": "Find the year that has the most number of matches.",
    "pred": "SELECT players.first_name,        players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY rankings.player_id ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"
  },
  {
    "index": 464,
    "db_id": "wta_1",
    "db_info": "| players: player_id, first_name, last_name, hand, birth_date, country_code | matches: winner_id, winner_rank_points, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_ioc, winner_name, winner_rank, winner_seed, year | rankings: player_id, ranking_points, ranking_date, ranking, tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id |",
    "difficulty": "hard",
    "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
    "pred": "SELECT matches.winner_name,        matches.winner_rank_points FROM matches JOIN rankings ON matches.winner_id = rankings.player_id GROUP BY matches.winner_id ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 465,
    "db_id": "wta_1",
    "db_info": "| players: player_id, first_name, last_name | matches: winner_id, winner_rank_points, tourney_name, winner_name | rankings: player_id, ranking_points | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id |",
    "difficulty": "hard",
    "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
    "pred": "SELECT players.first_name,        players.last_name,        rankings.ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON rankings.tourney_id = matches.tourney_id GROUP BY rankings.player_id ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 466,
    "db_id": "wta_1",
    "db_info": "| players: player_id, first_name, last_name | matches: winner_id, winner_rank_points, tourney_name | rankings: player_id, ranking_points | matches.winner_id = players.player_id | rankings.player_id = players.player_id |",
    "difficulty": "hard",
    "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
    "pred": "SELECT players.first_name,        players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open' ORDER BY matches.winner_rank_points DESC LIMIT 1",
    "gold": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"
  },
  {
    "index": 467,
    "db_id": "wta_1",
    "db_info": "| matches: minutes, winner_id, winner_name, loser_id, loser_name | players: player_id, first_name, last_name | rankings: player_id |",
    "difficulty": "hard",
    "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
    "pred": "SELECT players.first_name,        players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open' GROUP BY matches.winner_id ORDER BY SUM (matches.winner_rank_points) DESC LIMIT 1",
    "gold": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"
  },
  {
    "index": 469,
    "db_id": "wta_1",
    "db_info": "| players: player_id, first_name | matches: winner_id, loser_id, winner_rank, loser_rank | rankings: player_id, ranking |",
    "difficulty": "medium",
    "question": "Find the average ranking for each player and their first name.",
    "pred": "SELECT players.first_name,        players.last_name,        players.first_name,        players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id OR players.player_id = matches.loser_id ORDER BY minutes DESC LIMIT 1",
    "gold": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"
  },
  {
    "index": 472,
    "db_id": "wta_1",
    "db_info": "| players: player_id, first_name, last_name, hand, birth_date, country_code | rankings: ranking_date, ranking, player_id, ranking_points, tours | matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id |",
    "difficulty": "medium",
    "question": "What are the first names of all players, and their total ranking points?",
    "pred": "SELECT rankings.player_id,        players.first_name,        rankings.ranking_points FROM rankings JOIN players ON rankings.player_id = players.player_id",
    "gold": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
  },
  {
    "index": 480,
    "db_id": "wta_1",
    "db_info": "| rankings: ranking_date, tours, player_id, ranking_points, ranking | players: player_id, first_name, last_name, hand, birth_date, country_code | matches: tourney_id, winner_id, loser_id, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id |",
    "difficulty": "medium",
    "question": "How many total tours were there for each ranking date?",
    "pred": "SELECT ranking_date,        COUNT (*) FROM rankings GROUP BY ranking_date",
    "gold": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"
  },
  {
    "index": 481,
    "db_id": "wta_1",
    "db_info": "| matches: year, match_num, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed | players: player_id, first_name, last_name, hand, birth_date, country_code | rankings: player_id, ranking_date, ranking, ranking_points, tours |",
    "difficulty": "medium",
    "question": "Find the number of matches happened in each year.",
    "pred": "SELECT ranking_date,        COUNT (*) FROM rankings GROUP BY ranking_date",
    "gold": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"
  },
  {
    "index": 484,
    "db_id": "wta_1",
    "db_info": "| players: player_id, first_name, last_name, birth_date, hand, country_code | matches: winner_id, winner_age, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_entry, winner_hand, winner_ht, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings: player_id, ranking, ranking_date, ranking_points, tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id |",
    "difficulty": "medium",
    "question": "What are the names and ranks of the three youngest winners across all matches?",
    "pred": "SELECT players.first_name,        players.last_name,        rankings.ranking FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.ranking ASC LIMIT 3 WHERE players.player_id NOT IN     (SELECT winner_id      FROM matches      ORDER BY winner_age ASC      LIMIT 3)",
    "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"
  },
  {
    "index": 485,
    "db_id": "wta_1",
    "db_info": "| players: player_id, hand | matches: winner_id, tourney_name |",
    "difficulty": "medium",
    "question": "How many different winners both participated in the WTA Championships and were left handed?",
    "pred": "SELECT players.first_name,        players.last_name,        rankings.ranking FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.ranking ASC LIMIT 3 WHERE players.player_id NOT IN     (SELECT winner_id      FROM matches      ORDER BY winner_age ASC      LIMIT 3)",
    "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"
  },
  {
    "index": 486,
    "db_id": "wta_1",
    "db_info": "| players: hand, player_id, first_name, last_name, birth_date, country_code | matches: winner_id, winner_hand, tourney_name, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, winner_age, winner_entry, winner_ht, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings: player_id, ranking_date, ranking, ranking_points, tours |",
    "difficulty": "medium",
    "question": "Find the number of left handed winners who participated in the WTA Championships.",
    "pred": "SELECT COUNT (DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championship' INTERSECT   SELECT COUNT (DISTINCT winner_id)   FROM players WHERE hand = 'Left'",
    "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"
  },
  {
    "index": 487,
    "db_id": "wta_1",
    "db_info": "| players: player_id, first_name, birth_date, country_code, last_name, hand | matches: winner_id, winner_rank_points, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_ioc, winner_name, winner_rank, winner_seed, year | rankings: player_id, ranking_points, ranking_date, ranking, tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id |",
    "difficulty": "medium",
    "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
    "pred": "SELECT COUNT (*) FROM   (SELECT winner_id    FROM matches    WHERE tourney_name = 'WTA Championship'      AND winner_hand = 'L' ) WHERE winner_id!= 0",
    "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"
  },
  {
    "index": 488,
    "db_id": "wta_1",
    "db_info": "| players: player_id, first_name, country_code, birth_date, last_name, hand | matches: winner_id, winner_rank_points, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_ioc, winner_name, winner_rank, winner_seed, year | rankings: ranking_date, ranking, player_id, ranking_points, tours | matches.winner_id = players.player_id | matches.loser_id = players.player_id | rankings.player_id = players.player_id |",
    "difficulty": "hard",
    "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
    "pred": "SELECT players.first_name,        players.country_code,        players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.ranking_points DESC LIMIT 1",
    "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"
  },
  {
    "index": 489,
    "db_id": "wta_1",
    "db_info": "| players: hand, player_id, first_name, last_name, birth_date, country_code | matches: loser_id, winner_id, best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings: player_id, ranking_date, ranking, ranking_points, tours |",
    "difficulty": "hard",
    "question": "Find the number of players for each hand type.",
    "pred": "SELECT players.first_name,        players.country_code,        players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY rankings.player_id ORDER BY SUM (rankings.ranking_points) DESC LIMIT 1",
    "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"
  },
  {
    "index": 490,
    "db_id": "wta_1",
    "db_info": "| players: hand, player_id | matches: loser_hand, winner_hand | rankings: player_id |",
    "difficulty": "medium",
    "question": "How many players are there for each hand type?",
    "pred": "SELECT winner_hand,        COUNT (*) FROM matches GROUP BY winner_hand",
    "gold": "SELECT count(*) ,  hand FROM players GROUP BY hand"
  },
  {
    "index": 491,
    "db_id": "wta_1",
    "db_info": "| ship: disposition_of_ship, id, name, ship_type, lost_in_battle, tonnage, location | battle: id, name, date, bulgarian_commander, latin_commander, result | death: id, note, caused_by_ship_id, killed, injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id |",
    "difficulty": "medium",
    "question": "How many ships ended up being 'Captured'?",
    "pred": "SELECT winner_hand,        COUNT (*) FROM matches GROUP BY winner_hand UNION SELECT loser_hand,        COUNT (*) FROM matches GROUP BY loser_hand",
    "gold": "SELECT count(*) ,  hand FROM players GROUP BY hand"
  },
  {
    "index": 494,
    "db_id": "battle_death",
    "db_info": "| battle: id | ship: lost_in_battle, id | death: caused_by_ship_id, killed |",
    "difficulty": "medium",
    "question": "What is maximum and minimum death toll caused each time?",
    "pred": "SELECT name, date, RESULT FROM battle",
    "gold": "SELECT name ,  date FROM battle"
  },
  {
    "index": 495,
    "db_id": "battle_death",
    "db_info": "| death: injured, caused_by_ship_id, id, note, killed | ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship | battle: id, name, date, bulgarian_commander, latin_commander, result |",
    "difficulty": "medium",
    "question": "What is the average number of injuries caused each time?",
    "pred": "SELECT MAX (death.death), MIN (death.death) FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.lost_in_battle = 'Yorktown'",
    "gold": "SELECT max(killed) ,  min(killed) FROM death"
  },
  {
    "index": 496,
    "db_id": "battle_death",
    "db_info": "| ship: tonnage, id, lost_in_battle, name, ship_type, location, disposition_of_ship | death: caused_by_ship_id, killed, injured, id, note | battle: id, result | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id |",
    "difficulty": "easy",
    "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
    "pred": "SELECT AVG (injured), id FROM death GROUP BY id",
    "gold": "SELECT avg(injured) FROM death"
  },
  {
    "index": 497,
    "db_id": "battle_death",
    "db_info": "| battle: bulgarian_commander, name, result, id, date, latin_commander | ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship | death: caused_by_ship_id, id, note, killed, injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id |",
    "difficulty": "medium",
    "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
    "pred": "SELECT * FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'",
    "gold": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"
  },
  {
    "index": 499,
    "db_id": "battle_death",
    "db_info": "| battle: id, name | death: caused_by_ship_id, killed | ship: lost_in_battle, id |",
    "difficulty": "medium",
    "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
    "pred": "SELECT id,        name FROM battle JOIN ship ON battle.id = ship.id WHERE ship.ship_type = 'Brig'   AND ship.lost_in_battle = 1",
    "gold": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"
  },
  {
    "index": 500,
    "db_id": "battle_death",
    "db_info": "| `ship`: `id`, `name`, `lost_in_battle` | `death`: `caused_by_ship_id`, `injured` | `battle`: `id` | `ship.lost_in_battle = battle.id` | `death.caused_by_ship_id = ship.id` |",
    "difficulty": "hard",
    "question": "What is the ship id and name that caused most total injuries?",
    "pred": "SELECT battle.id,        battle.name FROM death JOIN ship ON death.killed = ship.id JOIN battle ON ship.lost_in_battle = battle.id GROUP BY ship.lost_in_battle HAVING SUM (death.killed) > 10",
    "gold": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10"
  },
  {
    "index": 501,
    "db_id": "battle_death",
    "db_info": "| battle: name, bulgarian_commander, latin_commander, id, date, result | ship: id, lost_in_battle, name, tonnage, ship_type, location, disposition_of_ship | death: id, caused_by_ship_id, note, killed, injured | ship.lost_in_battle = battle.id | death.caused_by_ship_id = ship.id |",
    "difficulty": "extra",
    "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
    "pred": "SELECT death.caused_by_ship_id,        ship.name FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY death.caused_by_ship_id ORDER BY SUM (death.injured) DESC LIMIT 1",
    "gold": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 502,
    "db_id": "battle_death",
    "db_info": "| battle: result, id, name, date, bulgarian_commander, latin_commander | ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship | death: caused_by_ship_id, id, note, killed, injured |",
    "difficulty": "medium",
    "question": "How many different results are there for the battles?",
    "pred": "SELECT DISTINCT battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE battle.bulgarian_commander BETWEEN 'Kaloyan' AND 'Baldwin I'   OR battle.latin_commander BETWEEN 'Kaloyan' AND 'Baldwin I'",
    "gold": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"
  },
  {
    "index": 504,
    "db_id": "battle_death",
    "db_info": "| battle: id, name, date, bulgarian_commander, latin_commander, result | ship: name, id, lost_in_battle, tonnage, ship_type, location, disposition_of_ship | death: caused_by_ship_id, id, note, killed, injured | ship.lost_in_battle=battle.id | death.caused_by_ship_id=ship.id |",
    "difficulty": "extra",
    "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
    "pred": "SELECT COUNT (*) FROM ship WHERE tonnage = 225   AND id NOT IN     (SELECT id      FROM ship      WHERE lost_in_battle = 'no' )",
    "gold": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );"
  },
  {
    "index": 506,
    "db_id": "battle_death",
    "db_info": "| death: note, id, killed, injured, caused_by_ship_id | ship: id, lost_in_battle | battle: id |",
    "difficulty": "extra",
    "question": "What are the notes of the death events which has substring 'East'?",
    "pred": "SELECT battle.name,        battle.result,        battle.bulgarian_commander FROM ship JOIN battle ON ship.lost_in_battle = battle.id WHERE ship.disposition_of_ship = 'English Channel'   AND ship.ship_type!= 'Ship'",
    "gold": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'"
  },
  {
    "index": 512,
    "db_id": "student_transcripts_tracking",
    "db_info": "| courses: course_description, course_name, course_id | departments: department_name, department_id | degree_programs: department_id | sections: course_id | addresses:  address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | degree_programs: degree_program_id , degree_summary_name , degree_summary_description , other_details | sections: section_id , section_name, section_description, other_details | semesters: semester_id , semester_name , semester_description , other_details | students: student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses: student_course_id , student_enrolment_id | transcripts: transcript_id, transcript_date, other_details | transcript_contents: student_course_id, transcript_id |",
    "difficulty": "easy",
    "question": "What are the descriptions for all the math courses?",
    "pred": "SELECT course_description FROM courses WHERE course_name = 'Math'",
    "gold": "SELECT course_description FROM Courses WHERE course_name  =  'math'"
  },
  {
    "index": 513,
    "db_id": "student_transcripts_tracking",
    "db_info": "| addresses: zip_postcode, city, address_id, line_1, line_2, line_3, state_province_county, country, other_address_details | courses: course_id, course_name, course_description, other_details | departments: department_id, department_name, department_description, other_details | degree_programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections: section_id, course_id, section_name, section_description, other_details | semesters: semester_id, semester_name, semester_description, other_details | students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses: student_course_id, course_id, student_enrolment_id | transcripts: transcript_id, transcript_date, other_details | transcript_contents: student_course_id, transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id |",
    "difficulty": "easy",
    "question": "What is the zip code of the address in the city Port Chelsea?",
    "pred": "SELECT course_description FROM courses WHERE course_name like '%Math%'",
    "gold": "SELECT course_description FROM Courses WHERE course_name  =  'math'"
  },
  {
    "index": 514,
    "db_id": "student_transcripts_tracking",
    "db_info": "| addresses: city, zip_postcode, line_1, line_2, line_3, state_province_county, country, other_address_details, address_id | courses: course_id, course_name, course_description, other_details | departments: department_id, department_name, department_description, other_details | degree_programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections: section_id, course_id, section_name, section_description, other_details | semesters: semester_id, semester_name, semester_description, other_details | students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses: student_course_id, course_id, student_enrolment_id | transcripts: transcript_id, transcript_date, other_details | transcript_contents: student_course_id, transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id |",
    "difficulty": "easy",
    "question": "What is the zip code for Port Chelsea?",
    "pred": "SELECT addresses.zip_postcode FROM addresses JOIN students ON addresses.address_id = students.current_address_id WHERE addresses.city = 'Port Chelsea'   AND students.first_name = 'Susan'   AND students.last_name = 'Brown'",
    "gold": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"
  },
  {
    "index": 515,
    "db_id": "student_transcripts_tracking",
    "db_info": "| degree_programs: degree_program_id, department_id | departments: department_id, department_name |",
    "difficulty": "easy",
    "question": "Which department offers the most number of degrees? List department name and id.",
    "pred": "SELECT zip_postcode FROM addresses WHERE line_1 = 'Port Chelsea'   AND city = 'London'   AND country = 'UK'",
    "gold": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"
  },
  {
    "index": 516,
    "db_id": "student_transcripts_tracking",
    "db_info": "| degree_programs: degree_program_id, department_id | departments: department_id, department_name |",
    "difficulty": "extra",
    "question": "What is the name and id of the department with the most number of degrees ?",
    "pred": "SELECT department_name,        department_id FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY degree_programs.department_id ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 517,
    "db_id": "student_transcripts_tracking",
    "db_info": "| departments: department_id, department_name | degree_programs: department_id, degree_program_id |",
    "difficulty": "extra",
    "question": "How many departments offer any degree?",
    "pred": "SELECT departments.department_name,        degrees.degree_program_id FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id JOIN degrees ON degree_programs.degree_program_id = degrees.degree_program_id GROUP BY departments.department_name ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1"
  },
  {
    "index": 518,
    "db_id": "student_transcripts_tracking",
    "db_info": "| departments: department_id, department_name, department_description, other_details | degree_programs: department_id, degree_program_id, degree_summary_name, degree_summary_description, other_details |",
    "difficulty": "easy",
    "question": "How many different departments offer degrees?",
    "pred": "SELECT COUNT (DISTINCT department_id) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id WHERE degrees_offered > 0",
    "gold": "SELECT count(DISTINCT department_id) FROM Degree_Programs"
  },
  {
    "index": 519,
    "db_id": "student_transcripts_tracking",
    "db_info": "| degree_programs: degree_summary_name |",
    "difficulty": "easy",
    "question": "How many different degree names are offered?",
    "pred": "SELECT COUNT (DISTINCT department_id) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id",
    "gold": "SELECT count(DISTINCT department_id) FROM Degree_Programs"
  },
  {
    "index": 521,
    "db_id": "student_transcripts_tracking",
    "db_info": "| departments: department_id, department_name | degree_programs: degree_program_id, department_id |",
    "difficulty": "easy",
    "question": "How many degrees does the engineering department offer?",
    "pred": "SELECT COUNT (DISTINCT degrees) FROM student",
    "gold": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"
  },
  {
    "index": 522,
    "db_id": "student_transcripts_tracking",
    "db_info": "| departments: department_name, department_id | degree_programs: department_id, degree_program_id |",
    "difficulty": "medium",
    "question": "How many degrees does the engineering department have?",
    "pred": "SELECT COUNT (*) FROM departments JOIN degree_programs JOIN departments ON degree_programs.department_id = departments.department_id",
    "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"
  },
  {
    "index": 523,
    "db_id": "student_transcripts_tracking",
    "db_info": "| sections: section_name, section_description, section_id, course_id, other_details |",
    "difficulty": "medium",
    "question": "What are the names and descriptions of all the sections?",
    "pred": "SELECT COUNT (*) FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id WHERE departments.department_name = 'Engineering'",
    "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"
  },
  {
    "index": 527,
    "db_id": "student_transcripts_tracking",
    "db_info": "| sections: section_name, section_id, course_id, section_description, other_details | addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses: course_id, course_name, course_description, other_details | departments: department_id, department_name, department_description, other_details | degree_programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | semesters: semester_id, semester_name, semester_description, other_details | students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses: student_course_id, course_id, student_enrolment_id | transcripts: transcript_id, transcript_date, other_details | transcript_contents: student_course_id, transcript_id |",
    "difficulty": "medium",
    "question": "List the section_name in reversed lexicographical order.",
    "pred": "SELECT courses.course_name,        courses.course_id FROM courses JOIN sections ON courses.course_id = sections.course_id GROUP BY courses.course_id HAVING COUNT (*) < 2",
    "gold": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"
  },
  {
    "index": 531,
    "db_id": "student_transcripts_tracking",
    "db_info": "| departments: department_name, department_description, department_id, other_details |",
    "difficulty": "extra",
    "question": "What is the description of the department whose name has the substring the computer?",
    "pred": "SELECT semester_name,        semester_id FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semester_id ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 534,
    "db_id": "student_transcripts_tracking",
    "db_info": "| students: student_id, first_name, middle_name, last_name, current_address_id, permanent_address_id, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details | degree_programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | semesters: semester_id, semester_name, semester_description, other_details | student_enrolment_courses: student_course_id, course_id, student_enrolment_id | courses: course_id, course_name, course_description, other_details | sections: section_id, course_id, section_name, section_description, other_details | departments: department_id, department_name, department_description, other_details | addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | transcripts: transcript_id, transcript_date, other_details | transcript_contents: student_course_id, transcript_id |",
    "difficulty": "medium",
    "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
    "pred": "SELECT students.first_name,        students.middle_name,        students.last_name,        student_enrolment.student_enrolment_id FROM student_enrolment JOIN students ON student_enrolment.student_id = students.student_id WHERE student_enrolment.degree_program_id = '2' GROUP BY student_enrolment.student_id HAVING COUNT (*) = 2",
    "gold": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"
  },
  {
    "index": 535,
    "db_id": "student_transcripts_tracking",
    "db_info": "| students: student_id, first_name, middle_name, last_name | degree_programs: degree_program_id | student_enrolment: student_id, degree_program_id | addresses: address_id | courses: course_id | departments: department_id | sections: section_id | semesters: semester_id | student_enrolment_courses: student_course_id, course_id, student_enrolment_id | transcripts: transcript_id | transcript_contents: student_course_id, transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id |",
    "difficulty": "medium",
    "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
    "pred": "SELECT students.first_name,        students.middle_name,        students.last_name,        student_enrolment.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.degree_program_id = '2'   AND student_enrolment.semester_id = '1'",
    "gold": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"
  },
  {
    "index": 536,
    "db_id": "student_transcripts_tracking",
    "db_info": "| students: student_id, first_name, middle_name, last_name, current_address_id, permanent_address_id, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | degree_programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | student_enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details | addresses: address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses: course_id , course_name , course_description , other_details | departments: department_id , department_name , department_description , other_details | sections: section_id , course_id , section_name , section_description , other_details | semesters: semester_id , semester_name , semester_description , other_details | student_enrolment_courses: student_course_id , course_id , student_enrolment_id | transcripts: transcript_id , transcript_date , other_details | transcript_contents: student_course_id , transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id |",
    "difficulty": "hard",
    "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
    "pred": "SELECT students.first_name,        students.middle_name,        students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_level = 'Bachelor'",
    "gold": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"
  },
  {
    "index": 537,
    "db_id": "student_transcripts_tracking",
    "db_info": "| student_enrolment: student_enrolment_id, degree_program_id, student_id | degree_programs: degree_program_id, degree_summary_name, department_id | students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | semesters: semester_id, semester_name, semester_description, other_details | student_enrolment_courses: student_course_id, course_id, student_enrolment_id | courses: course_id, course_name, course_description, other_details | departments: department_id, department_name, department_description, other_details | transcripts: transcript_id, transcript_date, other_details | transcript_contents: student_course_id, transcript_id | addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id |",
    "difficulty": "hard",
    "question": "Find the kind of program which most number of students are enrolled in?",
    "pred": "SELECT students.first_name,        students.middle_name,        students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Bachelor of Science'   OR degree_programs.degree_summary_name = 'Master of Business Administration'",
    "gold": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"
  },
  {
    "index": 538,
    "db_id": "student_transcripts_tracking",
    "db_info": "| student_enrolment: student_id, degree_program_id, semester_id, student_enrolment_id, other_details | degree_programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | transcripts: transcript_id, transcript_date, other_details | transcript_contents: student_course_id, transcript_id | addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses: course_id, course_name, course_description, other_details | departments: department_id, department_name, department_description, other_details | sections: section_id, course_id, section_name, section_description, other_details | semesters: semester_id, semester_name, semester_description, other_details | student_enrolment_courses: student_course_id, course_id, student_enrolment_id | student_enrolment.student_id = students.student_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id |",
    "difficulty": "extra",
    "question": "What is the degree summary name that has the most number of students enrolled?",
    "pred": "SELECT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY courses.course_name ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 542,
    "db_id": "student_transcripts_tracking",
    "db_info": "| students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses: student_course_id, course_id, student_enrolment_id | addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses: course_id, course_name, course_description, other_details | departments: department_id, department_name, department_description, other_details | degree_programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections: section_id, course_id, section_name, section_description, other_details | semesters: semester_id, semester_name, semester_description, other_details | transcripts: transcript_id, transcript_date, other_details | transcript_contents: student_course_id, transcript_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id |",
    "difficulty": "extra",
    "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
    "pred": "SELECT students.student_id,        students.first_name,        students.middle_name,        students.last_name,        COUNT (*) FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 543,
    "db_id": "student_transcripts_tracking",
    "db_info": "| semesters: semester_name, semester_id | student_enrolment: semester_id, student_id | students: student_id | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id |",
    "difficulty": "extra",
    "question": "Which semesters do not have any student enrolled? List the semester name.",
    "pred": "SELECT students.first_name,        students.middle_name,        students.last_name,        students.student_id,        COUNT (*) FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 546,
    "db_id": "student_transcripts_tracking",
    "db_info": "| courses: course_id, course_name | student_enrolment_courses: course_id, student_enrolment_id | student_enrolment: student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id |",
    "difficulty": "easy",
    "question": "What are the names of all courses that have some students enrolled?",
    "pred": "SELECT course_name FROM courses WHERE course_id IN     (SELECT course_id      FROM student_enrolment_courses      JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id)",
    "gold": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"
  },
  {
    "index": 547,
    "db_id": "student_transcripts_tracking",
    "db_info": "| courses: course_id, course_name | student_enrolment_courses: student_course_id, course_id, student_enrolment_id | addresses: address_id | sections: section_id, course_id | semesters: semester_id | students: student_id, current_address_id, permanent_address_id | student_enrolment: student_enrolment_id, degree_program_id, semester_id, student_id | transcripts: transcript_id | transcript_contents: student_course_id, transcript_id | departments: department_id | degree_programs: degree_program_id, department_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | degree_programs.department_id = departments.department_id |",
    "difficulty": "easy",
    "question": "What's the name of the course with most number of enrollments?",
    "pred": "SELECT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY courses.course_name HAVING COUNT (*) > 1000",
    "gold": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"
  },
  {
    "index": 550,
    "db_id": "student_transcripts_tracking",
    "db_info": "| students: last_name, current_address_id | addresses: address_id, state_province_county | student_enrolment: student_id, degree_program_id | students.current_address_id = addresses.address_id |",
    "difficulty": "extra",
    "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
    "pred": "SELECT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE addresses.state_province_county = 'North Carolina' EXCEPT SELECT students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id",
    "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
  },
  {
    "index": 551,
    "db_id": "student_transcripts_tracking",
    "db_info": "| Transcripts: transcript_id, transcript_date, other_details | Student_enrolment_courses: student_course_id, course_id, student_enrolment_id | Transcript_contents: student_course_id, transcript_id | Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | Courses: course_id, course_name, course_description, other_details | Departments: department_id, department_name, department_description, other_details | Degree_programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | Sections: section_id, course_id, section_name, section_description, other_details | Semesters: semester_id, semester_name, semester_description, other_details | Students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | Student_enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details | Degree_programs.department_id = departments.department_id | Sections.course_id = courses.course_id | Students.permanent_address_id = addresses.address_id | Students.current_address_id = addresses.address_id | Student_enrolment.student_id = students.student_id | Student_enrolment.semester_id = semesters.semester_id | Student_enrolment.degree_program_id = degree_programs.degree_program_id | Student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | Student_enrolment_courses.course_id = courses.course_id | Transcript_contents.transcript_id = transcripts.transcript_id | Transcript_contents.student_course_id = student_enrolment_courses.student_course_id |",
    "difficulty": "extra",
    "question": "Show the date and id of the transcript with at least 2 course results.",
    "pred": "SELECT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE addresses.state_province_county = 'North Carolina' EXCEPT SELECT students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degrees ON student_enrolment.degree_id = degrees.degree_id JOIN department_locations ON degrees.department_id = department_locations.department_id WHERE department_locations.location = 'Charlotte Hall'   AND degrees.degree_code!= 'PHIL'",
    "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
  },
  {
    "index": 558,
    "db_id": "student_transcripts_tracking",
    "db_info": "| students: date_first_registered, first_name, middle_name, last_name, student_id | transcripts: transcript_date, transcript_id | transcript_contents: transcript_id, student_course_id | student_enrolment: student_id | student_enrolment_courses: student_enrolment_id, course_id | addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses: course_id, course_name, course_description, other_details | departments: department_id, department_name, department_description, other_details | degree_programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections: section_id, course_id, section_name, section_description, other_details | semesters: semester_id, semester_name, semester_description, other_details | students.current_address_id = addresses.address_id | students.permanent_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id |",
    "difficulty": "medium",
    "question": "What is the first, middle, and last name of the earliest school graduate?",
    "pred": "SELECT first_name,        middle_name,        last_name FROM students WHERE date_left_university <= '2004-05-26' ORDER BY date_left_university ASC LIMIT 1",
    "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"
  },
  {
    "index": 559,
    "db_id": "student_transcripts_tracking",
    "db_info": "| students: current_address_id, permanent_address_id, first_name, student_id | addresses: address_id | courses: course_id | departments: department_id | degree_programs: degree_program_id, department_id | sections: section_id, course_id | semesters: semester_id | student_enrolment: student_enrolment_id, degree_program_id, semester_id, student_id | student_enrolment_courses: student_course_id, course_id, student_enrolment_id | transcripts: transcript_id | transcript_contents: student_course_id, transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id |",
    "difficulty": "medium",
    "question": "Whose permanent address is different from his or her current address? List his or her first name.",
    "pred": "SELECT first_name,        middle_name,        last_name FROM students WHERE date_first_registered <= '2004-08-09' ORDER BY date_first_registered ASC LIMIT 1",
    "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"
  },
  {
    "index": 560,
    "db_id": "student_transcripts_tracking",
    "db_info": "| students: first_name , current_address_id , permanent_address_id | addresses: address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses: course_id , course_name , course_description , other_details | departments: department_id , department_name , department_description , other_details | degree_programs: degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections: section_id , course_id , section_name , section_description , other_details | semesters: semester_id , semester_name , semester_description , other_details | student_enrolment: student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses: student_course_id , course_id , student_enrolment_id | transcripts: transcript_id , transcript_date , other_details | transcript_contents: student_course_id , transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id |",
    "difficulty": "easy",
    "question": "What is the first name of the student whose permanent address is different from his or her current one?",
    "pred": "SELECT first_name FROM students WHERE permanent_address_id!=     (SELECT permanent_address_id      FROM students      WHERE student_id = '10' )",
    "gold": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id"
  },
  {
    "index": 561,
    "db_id": "student_transcripts_tracking",
    "db_info": "| students: current_address_id, student_id | addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | students.current_address_id = addresses.address_id |",
    "difficulty": "easy",
    "question": "Which address holds the most number of students currently? List the address id and all lines.",
    "pred": "SELECT first_name FROM students WHERE permanent_address_id!=     (SELECT current_address_id      FROM students      WHERE first_name = 'Susan' )",
    "gold": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id"
  },
  {
    "index": 562,
    "db_id": "student_transcripts_tracking",
    "db_info": "| students: current_address_id, student_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses: course_id, course_name, course_description, other_details | departments: department_id, department_name, department_description, other_details | degree_programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections: section_id, course_id, section_name, section_description, other_details | semesters: semester_id, semester_name, semester_description, other_details | student_enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses: student_course_id, course_id, student_enrolment_id | transcripts: transcript_id, transcript_date, other_details | transcript_contents: student_course_id, transcript_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id |",
    "difficulty": "extra",
    "question": "What is the id, line 1, and line 2 of the address with the most students?",
    "pred": "SELECT addresses.address_id,        addresses.line_1,        addresses.line_2,        addresses.line_3 FROM addresses JOIN students ON addresses.address_id = students.current_address_id GROUP BY addresses.address_id ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 572,
    "db_id": "student_transcripts_tracking",
    "db_info": "| student_enrolment_courses: course_id, student_enrolment_id, student_course_id | transcript_contents: student_course_id, transcript_id | addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses: course_id, course_name, course_description, other_details | departments: department_id, department_name, department_description, other_details | degree_programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections: section_id, course_id, section_name, section_description, other_details | semesters: semester_id, semester_name, semester_description, other_details | students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details | transcripts: transcript_id, transcript_date, other_details | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id |",
    "difficulty": "hard",
    "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
    "pred": "SELECT COUNT (*), student_enrolment_courses.student_course_id FROM student_enrolment_courses JOIN transcript_contents ON student_enrolment_courses.student_course_id = transcript_contents.student_course_id GROUP BY transcript_contents.student_course_id ORDER BY COUNT (*) DESC LIMIT 10",
    "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 573,
    "db_id": "student_transcripts_tracking",
    "db_info": "| transcripts: transcript_id, transcript_date | transcript_contents: transcript_id, student_course_id | transcript_contents.transcript_id = transcripts.transcript_id |",
    "difficulty": "hard",
    "question": "Show the date of the transcript which shows the least number of results, also list the id.",
    "pred": "SELECT MAX (course_id), course_id FROM student_enrolment_courses GROUP BY course_id",
    "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 576,
    "db_id": "student_transcripts_tracking",
    "db_info": "| degree_programs: degree_program_id, degree_summary_name, department_id | student_enrollment: student_enrolment_id, degree_program_id, semester_id, student_id | semesters: semester_id | degree_programs.department_id = departments.department_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.student_id = students.student_id |",
    "difficulty": "extra",
    "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
    "pred": "SELECT semester_id FROM student_enrolment JOIN degrees ON student_enrolment.degree_program_id = degrees.degree_program_id WHERE degrees.degree_type = 'Master' INTERSECT   SELECT semester_id   FROM student_enrolment   JOIN degrees ON student_enrolment.degree_program_id = degrees.degree_program_id WHERE degrees.degree_type = 'Bachelor'",
    "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"
  },
  {
    "index": 577,
    "db_id": "student_transcripts_tracking",
    "db_info": "| students: student_id, current_address_id | addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses: course_id, course_name, course_description, other_details | departments: department_id, department_name, department_description, other_details | degree_programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections: section_id, course_id, section_name, section_description, other_details | semesters: semester_id, semester_name, semester_description, other_details | student_enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses: student_course_id, course_id, student_enrolment_id | transcripts: transcript_id, transcript_date, other_details | transcript_contents: student_course_id, transcript_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id |",
    "difficulty": "extra",
    "question": "How many different addresses do the students currently live?",
    "pred": "SELECT semester_id FROM student_enrollment WHERE degree_program_id = 1 INTERSECT   SELECT semester_id   FROM student_enrollment WHERE degree_program_id = 2",
    "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"
  },
  {
    "index": 578,
    "db_id": "student_transcripts_tracking",
    "db_info": "| addresses: line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details, address_id | students: current_address_id, permanent_address_id, student_id | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id |",
    "difficulty": "easy",
    "question": "What are the different addresses that have students living there?",
    "pred": "SELECT COUNT (DISTINCT current_address_id) FROM students WHERE current_address_id!= 0",
    "gold": "SELECT count(DISTINCT current_address_id) FROM Students"
  },
  {
    "index": 579,
    "db_id": "student_transcripts_tracking",
    "db_info": "| students: first_name, middle_name, last_name, student_id, current_address_id, permanent_address_id, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details |",
    "difficulty": "easy",
    "question": "List all the student details in reversed lexicographical order.",
    "pred": "SELECT DISTINCT addresses.line_1,                 addresses.city,                 addresses.zip_postcode FROM addresses JOIN students ON addresses.address_id = students.current_address_id WHERE addresses.line_1!= ''   AND addresses.city!= ''   AND addresses.zip_postcode!= ''",
    "gold": "SELECT count(DISTINCT current_address_id) FROM Students"
  },
  {
    "index": 580,
    "db_id": "student_transcripts_tracking",
    "db_info": "| students: last_name, student_id, first_name, middle_name, current_address_id, permanent_address_id, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment: student_id, degree_program_id, semester_id, student_enrolment_id, other_details | student_enrolment_courses: student_enrolment_id, course_id, student_course_id | courses: course_id, course_name, course_description, other_details | addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | degree_programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | departments: department_id, department_name, department_description, other_details | sections: section_id, course_id, section_name, section_description, other_details | semesters: semester_id, semester_name, semester_description, other_details | transcripts: transcript_id, transcript_date, other_details | transcript_contents: student_course_id, transcript_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id |",
    "difficulty": "easy",
    "question": "What other details can you tell me about students in reverse alphabetical order?",
    "pred": "SELECT * FROM students ORDER BY last_name DESC",
    "gold": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"
  },
  {
    "index": 581,
    "db_id": "student_transcripts_tracking",
    "db_info": "| sections: section_id, section_name, section_description, other_details, course_id | courses: course_id, course_name, course_description, other_details | addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | departments: department_id, department_name, department_description, other_details | degree_programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | semesters: semester_id, semester_name, semester_description, other_details | students: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses: student_course_id, course_id, student_enrolment_id | transcripts: transcript_id, transcript_date, other_details | transcript_contents: student_course_id, transcript_id |",
    "difficulty": "easy",
    "question": "Describe the section h.",
    "pred": "SELECT other_student_details FROM students ORDER BY first_name DESC",
    "gold": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"
  },
  {
    "index": 584,
    "db_id": "student_transcripts_tracking",
    "db_info": "| students: student_id, permanent_address_id, first_name, cell_mobile_number, middle_name, last_name | addresses: address_id, country, state_province_county, city, line_1, line_2, line_3, other_address_details, zip_postcode | courses: course_id, course_name, course_description, other_details | departments: department_id, department_name, department_description, other_details | degree_programs: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections: section_id, course_id, section_name, section_description, other_details | semesters: semester_id, semester_name, semester_description, other_details | student_enrolment: student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses: student_course_id, course_id, student_enrolment_id | transcripts: transcript_id, transcript_date, other_details | transcript_contents: student_course_id, transcript_id | degree_programs.department_id = departments.department_id | sections.course_id = courses.course_id | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id | student_enrolment.semester_id = semesters.semester_id | student_enrolment.degree_program_id = degree_programs.degree_program_id | student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id | student_enrolment_courses.course_id = courses.course_id | transcript_contents.transcript_id = transcripts.transcript_id | transcript_contents.student_course_id = student_enrolment_courses.student_course_id |",
    "difficulty": "hard",
    "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
    "pred": "SELECT first_name FROM students WHERE permanent_address_id =     (SELECT address_id      FROM addresses      WHERE country = 'Haiti' ) UNION SELECT first_name FROM students WHERE cell_mobile_number = '09700166582'",
    "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'"
  },
  {
    "index": 585,
    "db_id": "student_transcripts_tracking",
    "db_info": "| cartoon: title, channel, id, directed_by, written_by, original_air_date, production_code | tv_channel: series_name, id, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series: id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank | cartoon.channel = tv_channel.id |",
    "difficulty": "hard",
    "question": "List the title of all cartoons in alphabetical order.",
    "pred": "SELECT first_name FROM students WHERE permanent_address_id =     (SELECT address_id      FROM addresses      WHERE country = 'Haiti' ) UNION SELECT first_name FROM students WHERE cell_mobile_number = '09700166582'",
    "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'"
  },
  {
    "index": 591,
    "db_id": "tvshow",
    "db_info": "| cartoon: title, directed_by, original_air_date, channel | tv_series: air_date, channel | tv_channel: id |",
    "difficulty": "easy",
    "question": "list all cartoon titles and their directors ordered by their air date",
    "pred": "SELECT COUNT (*) FROM cartoon JOIN writer ON cartoon.written_by = writer.name WHERE writer.name = 'Joseph Kuhn'",
    "gold": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";"
  },
  {
    "index": 595,
    "db_id": "tvshow",
    "db_info": "| tv_channel: country, id, series_name, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series: channel, id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank | cartoon: channel, id, title, directed_by, written_by, original_air_date, production_code | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id |",
    "difficulty": "medium",
    "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
    "pred": "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' UNION SELECT title FROM cartoon WHERE directed_by = 'Brandon Vietti'",
    "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";"
  },
  {
    "index": 604,
    "db_id": "tvshow",
    "db_info": "| tv_channel: language, id, series_name, country, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series: channel, id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank | cartoon: channel, id, title, directed_by, written_by, original_air_date, production_code | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id |",
    "difficulty": "easy",
    "question": "How many TV Channels use the English language?",
    "pred": "SELECT COUNT (*) FROM tv_channel WHERE LANGUAGE = 'english'",
    "gold": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";"
  },
  {
    "index": 605,
    "db_id": "tvshow",
    "db_info": "| tv_channel: language, id | tv_series: channel | cartoon: channel |",
    "difficulty": "easy",
    "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
    "pred": "SELECT COUNT (*) FROM tv_channel WHERE LANGUAGE = 'english'",
    "gold": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";"
  },
  {
    "index": 611,
    "db_id": "tvshow",
    "db_info": "| tv_channel: series_name, id, content, country, language, pixel_aspect_ratio_par, high_definition_tv, pay_per_view_ppv, package_option | tv_series: channel, id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank | cartoon: title, channel, id, directed_by, written_by, original_air_date, production_code |",
    "difficulty": "medium",
    "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
    "pred": "SELECT tv_channel.series_name FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.title = 'The Rise of the Blue Beetle'",
    "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";"
  },
  {
    "index": 612,
    "db_id": "tvshow",
    "db_info": "| cartoon: title, channel, id, directed_by, written_by, original_air_date, production_code | tv_channel: series_name, id, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series: channel, id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank | cartoon.channel = tv_channel.id |",
    "difficulty": "medium",
    "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
    "pred": "SELECT cartoon.title FROM cartoon JOIN tv_series ON cartoon.channel = tv_series.channel WHERE tv_series.episode = 'Cartoon'   AND tv_series.series_name = 'Sky Radio'",
    "gold": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
  },
  {
    "index": 613,
    "db_id": "tvshow",
    "db_info": "| tv_series: episode, rating, id, channel, air_date, share, 18_49_rating_share, viewers_m, weekly_rank | tv_channel: id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | cartoon: id, title, directed_by, written_by, original_air_date, production_code, channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id |",
    "difficulty": "medium",
    "question": "List the Episode of all TV series sorted by rating.",
    "pred": "SELECT cartoon.title FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio'   AND tv_channel.content = 'Cartoons'",
    "gold": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
  },
  {
    "index": 618,
    "db_id": "tvshow",
    "db_info": "| tv_series: share, id, channel | tv_channel: id |",
    "difficulty": "medium",
    "question": "What is the maximum and minimum share for the TV series?",
    "pred": "SELECT MIN (18_49_rating_share), MAX (18_49_rating_share) FROM tv_series",
    "gold": "SELECT max(SHARE) , min(SHARE) FROM TV_series;"
  },
  {
    "index": 621,
    "db_id": "tvshow",
    "db_info": "| tv_series: episode, weekly_rank, id, air_date, rating, share, 18_49_rating_share, viewers_m, channel | tv_channel: id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | cartoon: title, channel, directed_by, written_by, original_air_date, production_code, id | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id |",
    "difficulty": "easy",
    "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
    "pred": "SELECT original_air_date FROM cartoon WHERE title = 'A Love of a Lifetime'",
    "gold": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
  },
  {
    "index": 625,
    "db_id": "tvshow",
    "db_info": "| tv_channel: series_name, id, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series: channel, episode, id, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank | cartoon: id, title, directed_by, written_by, original_air_date, production_code, channel |",
    "difficulty": "medium",
    "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
    "pred": "SELECT tv_channel.series_name FROM cartoon JOIN tv_channel ON cartoon.id = tv_channel.id WHERE cartoon.title = 'A Love of a Lifetime'",
    "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";"
  },
  {
    "index": 627,
    "db_id": "tvshow",
    "db_info": "| cartoon: directed_by, id, title, written_by, original_air_date, production_code, channel | tv_series: channel, id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank | tv_channel: id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option |",
    "difficulty": "medium",
    "question": "Find the number of cartoons directed by each of the listed directors.",
    "pred": "SELECT episode FROM tv_series WHERE series_name = 'Sky Radio'",
    "gold": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
  },
  {
    "index": 633,
    "db_id": "tvshow",
    "db_info": "| tv_channel: country, id, series_name, content, language, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series: id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon: id, title, directed_by, written_by, original_air_date, production_code, channel | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id |",
    "difficulty": "medium",
    "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
    "pred": "SELECT package_option,        series_name FROM tv_channel WHERE high_definition_tv = 'yes'",
    "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""
  },
  {
    "index": 634,
    "db_id": "tvshow",
    "db_info": "| cartoon: written_by, title, channel | tv_channel: country, id | tv_series: channel |",
    "difficulty": "medium",
    "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
    "pred": "SELECT tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey'   AND cartoon.original_air_date >= 2005   OR cartoon.title = 'The Lost Symbol'   AND cartoon.original_air_date < 2005",
    "gold": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
  },
  {
    "index": 635,
    "db_id": "tvshow",
    "db_info": "| tv_channel: country, id | cartoon: written_by, channel, id | tv_series: channel, id | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id |",
    "difficulty": "medium",
    "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
    "pred": "SELECT country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.title = cartoon.title AND cartoon.written_by = 'Todd Casey'",
    "gold": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
  },
  {
    "index": 637,
    "db_id": "tvshow",
    "db_info": "| cartoon: directed_by, channel | tv_channel: id, series_name, country |",
    "difficulty": "hard",
    "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
    "pred": "SELECT country FROM tv_channel WHERE series_name!= 'cartoons'   AND written_by!= 'Todd Casey' EXCEPT SELECT country FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.written_by = 'Todd Casey'",
    "gold": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
  },
  {
    "index": 638,
    "db_id": "tvshow",
    "db_info": "| tv_channel: series_name, country, id, content, language, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series: channel, id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank | cartoon: directed_by, channel, id, title, written_by, original_air_date, production_code | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id |",
    "difficulty": "extra",
    "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
    "pred": "SELECT tv_channel.series_name,        tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = 'Ben Jones'   OR cartoon.directed_by = 'Michael Chang'",
    "gold": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"
  },
  {
    "index": 640,
    "db_id": "tvshow",
    "db_info": "| tv_channel: language, pixel_aspect_ratio_par, country, id, series_name, content, hight_definition_tv, pay_per_view_ppv, package_option | tv_series: channel, id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank | cartoon: channel, id, title, directed_by, written_by, original_air_date, production_code | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id |",
    "difficulty": "medium",
    "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
    "pred": "SELECT pixel_aspect_ratio_par,        country FROM tv_channel WHERE LANGUAGE!= 'english'",
    "gold": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"
  },
  {
    "index": 641,
    "db_id": "tvshow",
    "db_info": "| tv_channel: id, country, series_name, language, content, pixel_aspect_ratio_par, high_definition_tv, pay_per_view_ppv, package_option | tv_series: channel, id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank | cartoon: channel, id, title, directed_by, written_by, original_air_date, production_code | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id |",
    "difficulty": "medium",
    "question": "find id of the tv channels that from the countries where have more than two tv channels.",
    "pred": "SELECT pixel_aspect_ratio_par,        country FROM tv_channel WHERE LANGUAGE!= 'english'",
    "gold": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"
  },
  {
    "index": 643,
    "db_id": "tvshow",
    "db_info": "| tv_channel: id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series: channel, id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank | cartoon: channel, directed_by, title, id, written_by, original_air_date, production_code | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id |",
    "difficulty": "easy",
    "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
    "pred": "SELECT id FROM tv_channel GROUP BY id HAVING COUNT (*) > 2",
    "gold": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"
  },
  {
    "index": 646,
    "db_id": "tvshow",
    "db_info": "| tv_channel: id, package_option, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv | tv_series: channel, id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank | cartoon: directed_by, channel, id, title, written_by, original_air_date, production_code | tv_series.channel = tv_channel.id | cartoon.channel = tv_channel.id |",
    "difficulty": "hard",
    "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
    "pred": "SELECT package_option FROM tv_channel EXCEPT SELECT tv_channel.package_option FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.directed_by = 'Ben Jones'",
    "gold": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')"
  },
  {
    "index": 647,
    "db_id": "tvshow",
    "db_info": "| poker_player: poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people: people_id, nationality, name, birth_date, height | poker_player.people_id = people.people_id |",
    "difficulty": "hard",
    "question": "How many poker players are there?",
    "pred": "SELECT package_option FROM tv_channel WHERE series_name!= 'cartoon' EXCEPT SELECT package_option FROM cartoon WHERE directed_by = 'Ben Jones'",
    "gold": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')"
  },
  {
    "index": 650,
    "db_id": "poker_player",
    "db_info": "| poker_player: earnings, poker_player_id, people_id, final_table_made, best_finish, money_rank | people: people_id |",
    "difficulty": "easy",
    "question": "What are the earnings of poker players, ordered descending by value?",
    "pred": "SELECT earnings FROM poker_player WHERE poker_player_id > 10 ORDER BY earnings DESC",
    "gold": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"
  },
  {
    "index": 654,
    "db_id": "poker_player",
    "db_info": "| poker_player : earnings, poker_player_id, people_id, final_table_made, best_finish, money_rank | people : people_id, nationality, name, birth_date, height |",
    "difficulty": "easy",
    "question": "Return the average earnings across all poker players.",
    "pred": "SELECT AVG (earnings) FROM poker_player WHERE final_table_made = 'Yes'",
    "gold": "SELECT avg(Earnings) FROM poker_player"
  },
  {
    "index": 661,
    "db_id": "poker_player",
    "db_info": "| poker_player: earnings, people_id, poker_player_id, final_table_made, best_finish, money_rank | people: name, people_id, nationality, birth_date, height | poker_player.people_id = people.people_id |",
    "difficulty": "easy",
    "question": "What are the names of poker players whose earnings is higher than 300000?",
    "pred": "SELECT people.name FROM people JOIN poker_player ON people.people_id = poker_player.people_id WHERE poker_player.final_table_made = 'yes'   AND poker_player.best_finish!= 'no'",
    "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"
  },
  {
    "index": 668,
    "db_id": "poker_player",
    "db_info": "| poker_player: money_rank, people_id, poker_player_id, final_table_made, best_finish, earnings | people: height, people_id, nationality, name, birth_date |",
    "difficulty": "hard",
    "question": "Return the money rank of the poker player with the greatest height.",
    "pred": "SELECT money_rank FROM poker_player ORDER BY height DESC LIMIT 1",
    "gold": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
  },
  {
    "index": 692,
    "db_id": "voter_1",
    "db_info": "| contestants: contestant_name, contestant_number | votes: contestant_number, vote_id, phone_number, state, created | area_code_state: state, area_code |",
    "difficulty": "easy",
    "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
    "pred": "SELECT MAX (created) FROM votes JOIN area_code_state ON votes.state = area_code_state.state WHERE area_code_state.area_code = 9   AND area_code_state.state = 'CA'",
    "gold": "SELECT max(created) FROM votes WHERE state  =  'CA'"
  },
  {
    "index": 697,
    "db_id": "voter_1",
    "db_info": "| contestants: contestant_number, contestant_name | votes: contestant_number, vote_id, phone_number, state, created | area_code_state: state, area_code | votes.contestant_number = contestants.contestant_number | votes.state = area_code_state.state |",
    "difficulty": "medium",
    "question": "How many contestants did not get voted?",
    "pred": "SELECT COUNT (*) FROM area_code_state JOIN votes ON area_code_state.area_code = votes.state WHERE area_code_state.state = 'NY'   OR area_code_state.state = 'CA'",
    "gold": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'"
  },
  {
    "index": 701,
    "db_id": "voter_1",
    "db_info": "| contestants: contestant_name, contestant_number | votes: contestant_number, vote_id, phone_number, state, created | area_code_state: area_code, state |",
    "difficulty": "extra",
    "question": "Return the names of the contestants whose names contain the substring 'Al' .",
    "pred": "SELECT area_code_state.area_code FROM area_code_state JOIN votes ON area_code_state.area_code = votes.state JOIN contestants ON votes.contestant_number = contestants.contestant_number WHERE contestants.contestant_name = 'Tabatha Gehling' INTERSECT   SELECT area_code_state.area_code   FROM area_code_state   JOIN votes ON area_code_state.area_code = votes.state   JOIN contestants ON votes.contestant_number = contestants.contestant_number WHERE contestants.contestant_name = 'Kelly Clauss'",
    "gold": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'"
  },
  {
    "index": 708,
    "db_id": "world_1",
    "db_info": "| city: name, countrycode, id, district, population | country: continent, code, name, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | sqlite_sequence: name, seq | countrylanguage: countrycode, language, isofficial, percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code |",
    "difficulty": "easy",
    "question": "Which continent is Anguilla in?",
    "pred": "SELECT SUM (country.surfacearea) FROM country JOIN country ON country.region = 'Carribean' AND country.code!= country.code2",
    "gold": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""
  },
  {
    "index": 712,
    "db_id": "world_1",
    "db_info": "| city: countrycode, id, name, district, population | country: name, code, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage: language, percentage, countrycode, isofficial | sqlite_sequence: name, seq |",
    "difficulty": "medium",
    "question": "Which language is the most popular in Aruba?",
    "pred": "SELECT region FROM country WHERE code = 'KAB'",
    "gold": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""
  },
  {
    "index": 713,
    "db_id": "world_1",
    "db_info": "| countrylanguage: countrycode, language, isofficial, percentage | country: name, code | city: countrycode | sqlite_sequence: | country.code = countrylanguage.countrycode |",
    "difficulty": "extra",
    "question": "What language is predominantly spoken in Aruba?",
    "pred": "SELECT LANGUAGE FROM countrylanguage WHERE countrycode = 'ABW' GROUP BY LANGUAGE ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"
  },
  {
    "index": 714,
    "db_id": "world_1",
    "db_info": "| country: name, population, lifeexpectancy |",
    "difficulty": "extra",
    "question": "What are the population and life expectancies in Brazil?",
    "pred": "SELECT LANGUAGE FROM countrylanguage WHERE countrycode = 'ABW'   AND isofficial = 1",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"
  },
  {
    "index": 720,
    "db_id": "world_1",
    "db_info": "| country: lifeexpectancy, name, continent | city: id, name, countrycode, district, population | sqlite_sequence: name, seq | countrylanguage: countrycode, language, isofficial, percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code |",
    "difficulty": "easy",
    "question": "What is the name of country that has the shortest life expectancy in Asia?",
    "pred": "SELECT AVG (lifeexpectancy) FROM country WHERE continent = 'Africa'",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""
  },
  {
    "index": 724,
    "db_id": "world_1",
    "db_info": "| country: lifeexpectancy, continent, governmentform, name, code, region, surfacearea, indepyear, population, gnp, gnpold, localname, headofstate, capital, code2 | city: countrycode, id, name, district, population | countrylanguage: countrycode, language, isofficial, percentage |",
    "difficulty": "medium",
    "question": "What is the average life expectancy in African countries that are republics?",
    "pred": "SELECT continent,        MAX (gnp) FROM country WHERE continent = 'Asia' GROUP BY continent",
    "gold": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""
  },
  {
    "index": 726,
    "db_id": "world_1",
    "db_info": "| country: continent, surfacearea, name, code | city: countrycode | sqlite_sequence: name, seq | countrycode: code2, region, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital | countrylanguage: countrycode, language, isofficial, percentage | city: id , name , district , population |",
    "difficulty": "medium",
    "question": "What is the total surface area of the continents Asia and Europe?",
    "pred": "SELECT AVG (country.lifeexpectancy) FROM country JOIN city ON country.code = city.countrycode WHERE country.continent = 'Africa'   AND country.governmentform = 'Republic'",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\""
  },
  {
    "index": 729,
    "db_id": "world_1",
    "db_info": "| city: district, population | sqlite_sequence: name, seq | country: code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage: countrycode, language, isofficial, percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code |",
    "difficulty": "easy",
    "question": "What is the total population of Gelderland district?",
    "pred": "SELECT population FROM city WHERE district = 'Gelderland'",
    "gold": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""
  },
  {
    "index": 731,
    "db_id": "world_1",
    "db_info": "| city: countrycode, population | country: gnp, population, name, code | countrylanguage: countrycode | sqlite_sequence: name, seq | city.countrycode = country.code | countrylanguage.countrycode = country.code |",
    "difficulty": "medium",
    "question": "Give the mean GNP and total population of nations which are considered US territory.",
    "pred": "SELECT AVG (gnp), SUM (population) FROM country WHERE governmentform = 'United States of America'",
    "gold": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""
  },
  {
    "index": 732,
    "db_id": "world_1",
    "db_info": "| countrylanguage: language, countrycode | country: code | city: id, name, countrycode, district, population | sqlite_sequence: name, seq |",
    "difficulty": "medium",
    "question": "How many unique languages are spoken in the world?",
    "pred": "SELECT AVG (gnp), SUM (population) FROM country WHERE code = 'USA'",
    "gold": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""
  },
  {
    "index": 737,
    "db_id": "world_1",
    "db_info": "| countrylanguage: language, countrycode | country: name, code | city: id, name, countrycode, district, population | sqlite_sequence: name, seq |",
    "difficulty": "medium",
    "question": "How many languages are spoken in Aruba?",
    "pred": "SELECT SUM (percentage) FROM countrylanguage WHERE countrycode = 'ABW'",
    "gold": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""
  },
  {
    "index": 738,
    "db_id": "world_1",
    "db_info": "| countrylanguage: countrycode, language, isofficial | country: code, name | city: id, name, countrycode, district, population | sqlite_sequence: name, seq | countrylanguage.countrycode = country.code |",
    "difficulty": "medium",
    "question": "How many official languages does Afghanistan have?",
    "pred": "SELECT COUNT (*) FROM countrylanguage WHERE countrycode = 'ABW'",
    "gold": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""
  },
  {
    "index": 739,
    "db_id": "world_1",
    "db_info": "| country: name, code | countrylanguage: countrycode, language, isofficial | countrylanguage.countrycode = country.code |",
    "difficulty": "medium",
    "question": "How many official languages are spoken in Afghanistan?",
    "pred": "SELECT COUNT (*) FROM country WHERE name = 'Afghanistan'   AND isofficial = 1",
    "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""
  },
  {
    "index": 740,
    "db_id": "world_1",
    "db_info": "| country: name, code | countrylanguage: countrycode, language | city: id, name, countrycode, district, population | sqlite_sequence: name, seq | countrylanguage.countrycode=country.code | city.countrycode=country.code |",
    "difficulty": "medium",
    "question": "What is name of the country that speaks the largest number of languages?",
    "pred": "SELECT COUNT (*) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = 'Afghanistan'   AND countrylanguage.isofficial = 1",
    "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""
  },
  {
    "index": 743,
    "db_id": "world_1",
    "db_info": "| countrylanguage: language, countrycode | country: continent, code, name | city: countrycode, id | sqlite_sequence: name, seq | city: name, district, population | country: region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 |",
    "difficulty": "extra",
    "question": "Which continent speaks the most languages?",
    "pred": "SELECT continent FROM country GROUP BY continent ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "index": 745,
    "db_id": "world_1",
    "db_info": "| countrylanguage: language, countrycode | country: code, name |",
    "difficulty": "easy",
    "question": "What is the number of nations that use English and Dutch?",
    "pred": "SELECT COUNT (*) FROM countrylanguage WHERE LANGUAGE = 'english' INTERSECT   SELECT COUNT (*)   FROM countrylanguage WHERE LANGUAGE = 'dutch'",
    "gold": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"
  },
  {
    "index": 746,
    "db_id": "world_1",
    "db_info": "| country: name, code | countrylanguage: language, isofficial, countrycode | city: countrycode | sqlite_sequence: | city.countrycode = country.code | countrylanguage.countrycode = country.code |",
    "difficulty": "easy",
    "question": "What are the names of nations speak both English and French?",
    "pred": "SELECT COUNT (*) FROM countrylanguage WHERE LANGUAGE = 'english' INTERSECT   SELECT COUNT (*)   FROM countrylanguage WHERE LANGUAGE = 'dutch'",
    "gold": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"
  },
  {
    "index": 747,
    "db_id": "world_1",
    "db_info": "| country: name, code | countrylanguage: language, countrycode |",
    "difficulty": "extra",
    "question": "Give the names of nations that speak both English and French.",
    "pred": "SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'english' INTERSECT   SELECT country.name   FROM country   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'french'",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""
  },
  {
    "index": 748,
    "db_id": "world_1",
    "db_info": "| countrylanguage: language, isofficial, countrycode | country: name, code |",
    "difficulty": "extra",
    "question": "What are the names of nations where both English and French are official languages?",
    "pred": "SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'english' INTERSECT   SELECT country.name   FROM country   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'french'",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""
  },
  {
    "index": 749,
    "db_id": "world_1",
    "db_info": "| country: name, code | countrylanguage: language, isofficial, countrycode | city: id, name, countrycode, district, population | sqlite_sequence: name, seq | city.countrycode = country.code | countrylanguage.countrycode = country.code |",
    "difficulty": "extra",
    "question": "Give the names of countries with English and French as official languages.",
    "pred": "SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'T'   AND countrylanguage.language = 'english' INTERSECT   SELECT country.name   FROM country   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'T'   AND countrylanguage.language = 'french'",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\""
  },
  {
    "index": 750,
    "db_id": "world_1",
    "db_info": "| countrylanguage: language, countrycode | country: continent, code | city: id, name, countrycode, district, population | sqlite_sequence: name, seq |",
    "difficulty": "extra",
    "question": "What is the number of distinct continents where Chinese is spoken?",
    "pred": "SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'T'   AND countrylanguage.language = 'english' INTERSECT   SELECT country.name   FROM country   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'T'   AND countrylanguage.language = 'french'",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\""
  },
  {
    "index": 753,
    "db_id": "world_1",
    "db_info": "| countrylanguage: language, countrycode, isofficial, percentage | country: region, code | city: countrycode |",
    "difficulty": "hard",
    "question": "Which regions speak Dutch or English?",
    "pred": "SELECT region FROM country WHERE code = 'USA' UNION SELECT region FROM country WHERE code = 'NLD'",
    "gold": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\""
  },
  {
    "index": 754,
    "db_id": "world_1",
    "db_info": "| country: code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage: countrycode, language, isofficial, percentage | city: countrycode, id, name, district, population | sqlite_sequence: name, seq | city.countrycode = country.code | countrylanguage.countrycode = country.code |",
    "difficulty": "hard",
    "question": "What are the countries where either English or Dutch is the official language ?",
    "pred": "SELECT region FROM country WHERE code = 'NLD' INTERSECT   SELECT region   FROM country WHERE code = 'USA'",
    "gold": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\""
  },
  {
    "index": 756,
    "db_id": "world_1",
    "db_info": "| country: continent, code | countrylanguage: language, percentage, countrycode | country: name, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | city: id, name, district, population, countrycode | sqlite_sequence: name, seq | city.countrycode = country.code | countrylanguage.countrycode = country.code |",
    "difficulty": "extra",
    "question": "Which language is the most popular on the Asian continent?",
    "pred": "SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'T'   AND countrylanguage.language = 'English'   OR countrylanguage.language = 'Dutch'",
    "gold": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\""
  },
  {
    "index": 758,
    "db_id": "world_1",
    "db_info": "| country: governmentform, name, code, region, continent, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, headofstate, capital, code2 | countrylanguage: language, countrycode, isofficial, percentage | city: id, name, countrycode, district, population | sqlite_sequence: name, seq | countrylanguage.countrycode = country.code | city.countrycode = country.code |",
    "difficulty": "extra",
    "question": "Which languages are spoken by only one country in republic governments?",
    "pred": "SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.region = 'Asia' GROUP BY countrylanguage.language ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1"
  },
  {
    "index": 759,
    "db_id": "world_1",
    "db_info": "| country: governmentform, code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, headofstate, capital, code2 | countrylanguage: language, countrycode, isofficial, percentage | city: countrycode, id, name, district, population | sqlite_sequence: name, seq | countrylanguage.countrycode = country.code | city.countrycode = country.code |",
    "difficulty": "hard",
    "question": "What languages are only used by a single country with a republic government?",
    "pred": "SELECT LANGUAGE FROM countrylanguage WHERE isofficial = 'Yes'   AND countrycode IN     (SELECT code      FROM country      WHERE governmentform = 'Republic' ) GROUP BY LANGUAGE HAVING COUNT (*) = 1",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1"
  },
  {
    "index": 760,
    "db_id": "world_1",
    "db_info": "| city: population, name, countrycode | country: code | countrylanguage: language, countrycode | sqlite_sequence: name, seq |",
    "difficulty": "hard",
    "question": "Find the city with the largest population that uses English.",
    "pred": "SELECT LANGUAGE FROM countrylanguage WHERE isofficial = 'T' GROUP BY countrycode HAVING COUNT (*) = 1",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1"
  },
  {
    "index": 761,
    "db_id": "world_1",
    "db_info": "| city: name, population, countrycode, id, district | countrylanguage: language, countrycode | country: code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | sqlite_sequence: name, seq | city.countrycode = country.code | countrylanguage.countrycode = country.code |",
    "difficulty": "extra",
    "question": "What is the most populace city that speaks English?",
    "pred": "SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'english' ORDER BY city.population DESC LIMIT 1",
    "gold": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1"
  },
  {
    "index": 762,
    "db_id": "world_1",
    "db_info": "| country: continent, surfacearea, name, population, lifeexpectancy | city: | sqlite_sequence: | countrylanguage: |",
    "difficulty": "extra",
    "question": "Find the name, population and expected life length of asian country with the largest area?",
    "pred": "SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'english' ORDER BY city.population DESC LIMIT 1",
    "gold": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1"
  },
  {
    "index": 764,
    "db_id": "world_1",
    "db_info": "| country: code, lifeexpectancy, name, continent, region, surfacearea, indepyear, population, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage: countrycode, isofficial, language, percentage | city: id, name, countrycode, district, population | sqlite_sequence: name, seq | country.code = city.countrycode | country.code = countrylanguage.countrycode |",
    "difficulty": "hard",
    "question": "What is average life expectancy in the countries where English is not the official language?",
    "pred": "SELECT name,        population,        lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY population DESC LIMIT 1",
    "gold": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"
  },
  {
    "index": 765,
    "db_id": "world_1",
    "db_info": "| country: lifeexpectancy, code |",
    "difficulty": "extra",
    "question": "Give the mean life expectancy of countries in which English is not the official language.",
    "pred": "###",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"
  },
  {
    "index": 766,
    "db_id": "world_1",
    "db_info": "| countrylanguage: language, isofficial, countrycode | country: code, population, name |",
    "difficulty": "extra",
    "question": "What is the total number of people living in the nations that do not use English?",
    "pred": "###",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"
  },
  {
    "index": 767,
    "db_id": "world_1",
    "db_info": "| countrylanguage: language, isofficial, countrycode | country: population, code, name | city: countrycode, name | city.countrycode = country.code | countrylanguage.countrycode = country.code |",
    "difficulty": "extra",
    "question": "How many people live in countries that do not speak English?",
    "pred": "SELECT SUM (population) FROM country WHERE code NOT IN     (SELECT countrycode      FROM countrylanguage      WHERE LANGUAGE = 'english' )",
    "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"
  },
  {
    "index": 768,
    "db_id": "world_1",
    "db_info": "| country: headofstate, name, code, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, capital, code2 | countrylanguage: language, isofficial, countrycode, percentage | city: countrycode, id, name, district, population | sqlite_sequence: name, seq | city.countrycode = country.code | countrylanguage.countrycode = country.code |",
    "difficulty": "extra",
    "question": "What is the official language spoken in the country whose head of state is Beatrix?",
    "pred": "SELECT COUNT (*) FROM country WHERE code NOT IN     (SELECT countrycode      FROM countrylanguage      WHERE LANGUAGE = 'english' )",
    "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"
  },
  {
    "index": 769,
    "db_id": "world_1",
    "db_info": "| country: headofstate, code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, capital, code2 | countrylanguage: language, isofficial, countrycode, percentage | city: id, name, countrycode, district, population | sqlite_sequence: name, seq | countrylanguage.countrycode = country.code | city.countrycode = country.code |",
    "difficulty": "medium",
    "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
    "pred": "SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.headofstate = 'Beatrix'   AND countrylanguage.isofficial = 1",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\""
  },
  {
    "index": 770,
    "db_id": "world_1",
    "db_info": "| country: indepyear, code | countrylanguage: isofficial, language, countrycode | city: countrycode | sqlite_sequence: seq, name |",
    "difficulty": "medium",
    "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
    "pred": "SELECT countrylanguage.isofficial FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.headofstate = 'Beatrix'   AND countrylanguage.isofficial = 1",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\""
  },
  {
    "index": 771,
    "db_id": "world_1",
    "db_info": "| country: indepyear, code, name, continent, region, surfacearea, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage: countrycode, language, isofficial, percentage | city: id, name, countrycode, district, population | sqlite_sequence: name, seq | country.code = city.countrycode = countrylanguage.countrycode |",
    "difficulty": "medium",
    "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
    "pred": "SELECT COUNT (DISTINCT countrylanguage.countrycode) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.indepyear < 1930",
    "gold": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""
  },
  {
    "index": 772,
    "db_id": "world_1",
    "db_info": "| country: name, continent, surfacearea, code | countrylanguage: countrycode | city: id | sqlite_sequence: name |",
    "difficulty": "medium",
    "question": "What are the countries that have greater surface area than any country in Europe?",
    "pred": "SELECT COUNT (DISTINCT LANGUAGE) FROM countrylanguage WHERE isofficial = 'T'   AND indepyear < 1930",
    "gold": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""
  },
  {
    "index": 773,
    "db_id": "world_1",
    "db_info": "| country: continent, surfacearea, name, code | city: | sqlite_sequence: | countrylanguage: |",
    "difficulty": "hard",
    "question": "Which countries have greater area than that of any country in Europe?",
    "pred": "SELECT name FROM country WHERE surfacearea >     (SELECT MAX (surfacearea)      FROM country      WHERE continent = 'Europe' )",
    "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"
  },
  {
    "index": 774,
    "db_id": "world_1",
    "db_info": "| country: continent, population, name, code, region, surfacearea, indepyear, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | city: id, name, countrycode, district, population | sqlite_sequence: name, seq | countrylanguage: countrycode, language, isofficial, percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code |",
    "difficulty": "hard",
    "question": "What are the African countries that have a  population less than any country in Asia?",
    "pred": "SELECT name FROM country WHERE surfacearea >     (SELECT MAX (surfacearea)      FROM country      WHERE continent = 'Europe' )",
    "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"
  },
  {
    "index": 775,
    "db_id": "world_1",
    "db_info": "| country: population, continent, name | city: | countrylanguage: | sqlite_sequence: |",
    "difficulty": "extra",
    "question": "Which African countries have a smaller population than that of any country in Asia?",
    "pred": "SELECT * FROM country WHERE continent = 'Africa'   AND population <     (SELECT MAX (population)      FROM country      WHERE continent = 'Asia' )",
    "gold": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")"
  },
  {
    "index": 776,
    "db_id": "world_1",
    "db_info": "| country: continent, name, population, code | countrylanguage: countrycode | city: id, name, countrycode, district, population | sqlite_sequence: name, seq |",
    "difficulty": "extra",
    "question": "Which Asian countries have a population that is larger than any country in Africa?",
    "pred": "SELECT * FROM country WHERE continent = 'Africa'   AND population <     (SELECT MIN (population)      FROM country      WHERE continent = 'Asia' )",
    "gold": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")"
  },
  {
    "index": 777,
    "db_id": "world_1",
    "db_info": "| country: name, continent, population, code, region, surfacearea, indepyear, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | city: id, name, countrycode, district, population | countrylanguage: countrycode, language, isofficial, percentage | sqlite_sequence: name, seq | city.countrycode = country.code |",
    "difficulty": "extra",
    "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
    "pred": "SELECT * FROM country WHERE population >     (SELECT MAX (population)      FROM country      WHERE continent = 'Africa' )   AND continent = 'Asia'",
    "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")"
  },
  {
    "index": 778,
    "db_id": "world_1",
    "db_info": "| countrylanguage: language, countrycode, isofficial | country: code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | city: id, name, countrycode, district, population | sqlite_sequence: name, seq | countrylanguage.countrycode = country.code | city.countrycode = country.code |",
    "difficulty": "extra",
    "question": "What are the country codes for countries that do not speak English?",
    "pred": "SELECT * FROM country WHERE continent = 'Asia'   AND population >     (SELECT MAX (population)      FROM country      WHERE continent = 'Africa' )",
    "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")"
  },
  {
    "index": 779,
    "db_id": "world_1",
    "db_info": "| countrylanguage: language, countrycode | country: code |",
    "difficulty": "hard",
    "question": "Return the country codes for countries that do not speak English.",
    "pred": "SELECT countrycode FROM country WHERE code!= 'USA' EXCEPT SELECT countrycode FROM countrylanguage WHERE LANGUAGE = 'english'   AND isofficial = 1",
    "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
  },
  {
    "index": 780,
    "db_id": "world_1",
    "db_info": "| countrylanguage: language, countrycode | country: code |",
    "difficulty": "hard",
    "question": "What are the country codes of countries where people use languages other than English?",
    "pred": "SELECT countrycode FROM countrylanguage WHERE LANGUAGE!= 'english' EXCEPT SELECT countrycode FROM countrylanguage WHERE LANGUAGE = 'english'",
    "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
  },
  {
    "index": 781,
    "db_id": "world_1",
    "db_info": "| country: code, name | city: countrycode | countrylanguage: countrycode, language | sqlite_sequence: name, seq |",
    "difficulty": "easy",
    "question": "Give the country codes for countries in which people speak langauges that are not English.",
    "pred": "SELECT countrycode FROM countrylanguage EXCEPT SELECT countrycode FROM countrylanguage WHERE LANGUAGE = 'english'",
    "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""
  },
  {
    "index": 782,
    "db_id": "world_1",
    "db_info": "| country: code, name, governmentform | countrylanguage: language, countrycode | city: countrycode | sqlite_sequence: name, seq | city.countrycode = country.code | countrylanguage.countrycode = country.code |",
    "difficulty": "easy",
    "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
    "pred": "SELECT countrycode FROM countrylanguage WHERE LANGUAGE!= 'english' EXCEPT SELECT countrycode FROM countrylanguage WHERE LANGUAGE = 'english'",
    "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""
  },
  {
    "index": 783,
    "db_id": "world_1",
    "db_info": "| country: governmentform, name, code | countrylanguage: language, isofficial, countrycode | city: countrycode |",
    "difficulty": "hard",
    "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
    "pred": "SELECT code FROM country WHERE governmentform!= 'Republic' EXCEPT SELECT countrycode FROM countrylanguage WHERE LANGUAGE = 'english'",
    "gold": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
  },
  {
    "index": 784,
    "db_id": "world_1",
    "db_info": "| city: name, countrycode, id, district, population | country: continent, code, name, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage: language, isofficial, countrycode, percentage | city.countrycode = country.code | countrylanguage.countrycode = country.code |",
    "difficulty": "hard",
    "question": "Which cities are in European countries where English is not the official language?",
    "pred": "SELECT code FROM country WHERE governmentform!= 'Republic' EXCEPT SELECT countrycode FROM countrylanguage WHERE LANGUAGE = 'english'",
    "gold": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
  },
  {
    "index": 785,
    "db_id": "world_1",
    "db_info": "| city: name, countrycode | country: continent, code | countrylanguage: language, isOfficial, countrycode | city.countrycode = country.code | countrylanguage.countrycode = country.code |",
    "difficulty": "extra",
    "question": "What are the names of cities in Europe for which English is not the official language?",
    "pred": "SELECT name FROM city WHERE countrycode = 'EU' EXCEPT SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'F'   AND countrylanguage.language = 'en'",
    "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
  },
  {
    "index": 786,
    "db_id": "world_1",
    "db_info": "| country: continent, code, name | countrylanguage: language, isofficial, countrycode | city: name, countrycode |",
    "difficulty": "extra",
    "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
    "pred": "SELECT name FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = 'Europe' EXCEPT SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isOfficial = 1   AND countrylanguage.language = 'english'   AND country.continent = 'Europe'",
    "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
  },
  {
    "index": 788,
    "db_id": "world_1",
    "db_info": "| country: population, name, indepyear, surfacearea, code, continent, region, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | city: countrycode, id, name, district, population | countrylanguage: countrycode, language, isofficial, percentage | sqlite_sequence: seq, name | city.countrycode = country.code | countrylanguage.countrycode = country.code |",
    "difficulty": "hard",
    "question": "What are the name, independence year, and surface area of the country with the smallest population?",
    "pred": "SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'T'   AND countrylanguage.language = 'Chinese' INTERSECT   SELECT DISTINCT city.name   FROM city   JOIN country ON city.countrycode = country.code   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia'",
    "gold": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\""
  },
  {
    "index": 795,
    "db_id": "world_1",
    "db_info": "| city: population, district, id, name, countrycode | country: none | countrylanguage: none | sqlite_sequence: none |",
    "difficulty": "extra",
    "question": "How many cities in each district have a population that is above the average population across all cities?",
    "pred": "SELECT COUNT (*), district FROM city WHERE population >     (SELECT AVG (population)      FROM city) GROUP BY district HAVING AVG (population) <=   (SELECT AVG (population)    FROM city)",
    "gold": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District"
  },
  {
    "index": 798,
    "db_id": "world_1",
    "db_info": "| country: lifeexpectancy, continent, population |",
    "difficulty": "medium",
    "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
    "pred": "SELECT governmentform,        SUM (population) FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform",
    "gold": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"
  },
  {
    "index": 799,
    "db_id": "world_1",
    "db_info": "| country: continent, population, lifeexpectancy, code, name, region, surfacearea, indepyear, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | city: countrycode, id, name, district, population | countrylanguage: countrycode, language, isofficial, percentage | sqlite_sequence: name, seq |",
    "difficulty": "medium",
    "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
    "pred": "SELECT AVG (lifeexpectancy), SUM (population) FROM country GROUP BY continent HAVING AVG (lifeexpectancy) < 72",
    "gold": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"
  },
  {
    "index": 811,
    "db_id": "world_1",
    "db_info": "| country: continent, surfacearea, population, code, name, region, indepyear, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | city: id, name, countrycode, district, population | sqlite_sequence: name, seq | countrylanguage: countrycode, language, isofficial, percentage |",
    "difficulty": "hard",
    "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
    "pred": "SELECT SUM (population), AVG (surfacearea) FROM country WHERE continent = 'North America'   AND surfacearea > 3000",
    "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000"
  },
  {
    "index": 812,
    "db_id": "world_1",
    "db_info": "| city: population, name, id, countrycode, district | sqlite_sequence: name, seq | country: code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage: countrycode, language, isofficial, percentage | city.countrycode=country.code | countrylanguage.countrycode=country.code |",
    "difficulty": "hard",
    "question": "What are the cities whose population is between 160000 and 900000?",
    "pred": "SELECT SUM (population), AVG (surfacearea) FROM country WHERE continent = 'North America'   AND surfacearea > 3000",
    "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000"
  },
  {
    "index": 816,
    "db_id": "world_1",
    "db_info": "| countrylanguage: language, percentage, countrycode, isofficial | country: name, code, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | city: countrycode, id, name, district, population | sqlite_sequence: name, seq | countrylanguage.countrycode = country.code | city.countrycode = country.code |",
    "difficulty": "hard",
    "question": "What is the language spoken by the largest percentage of people in each country?",
    "pred": "SELECT LANGUAGE FROM countrylanguage GROUP BY countrycode ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 817,
    "db_id": "world_1",
    "db_info": "| country: code, name | countrylanguage: countrycode, language, percentage | city: countrycode |",
    "difficulty": "medium",
    "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
    "pred": "SELECT countrylanguage.language,        countrylanguage.countrycode FROM country JOIN city ON country.code = city.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY countrylanguage.countrycode ORDER BY SUM (countrylanguage.percentage) DESC LIMIT 1",
    "gold": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode"
  },
  {
    "index": 818,
    "db_id": "world_1",
    "db_info": "| countrylanguage: language, countrycode, percentage, isofficial | country: name, code | city: id, name, countrycode, district, population | sqlite_sequence: name, seq |",
    "difficulty": "medium",
    "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
    "pred": "SELECT country.name,        countrylanguage.language,        MAX (countrylanguage.percentage) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY MAX (countrylanguage.percentage) DESC",
    "gold": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode"
  },
  {
    "index": 819,
    "db_id": "world_1",
    "db_info": "| countrylanguage: language, isofficial, countrycode | country: code |",
    "difficulty": "extra",
    "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
    "pred": "SELECT COUNT (*) FROM countrylanguage WHERE LANGUAGE = 'Spanish'   AND percentage =     (SELECT MAX (percentage)      FROM countrylanguage      WHERE LANGUAGE = 'Spanish' )",
    "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
  },
  {
    "index": 820,
    "db_id": "world_1",
    "db_info": "| countrylanguage: language, percentage, countrycode | country: code, name |",
    "difficulty": "extra",
    "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
    "pred": "SELECT COUNT (*) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish'   AND countrylanguage.isofficial = 1",
    "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
  },
  {
    "index": 821,
    "db_id": "world_1",
    "db_info": "| countrylanguage: language, countrycode, isofficial, percentage | country: code, name |",
    "difficulty": "medium",
    "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
    "pred": "SELECT countrycode FROM countrylanguage ORDER BY percentage DESC LIMIT 1",
    "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
  },
  {
    "index": 822,
    "db_id": "world_1",
    "db_info": "| conductor: conductor_id, name, age, nationality, year_of_work | orchestra: conductor_id, orchestra_id, orchestra, record_company, year_of_founded, major_record_format | performance: performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show: show_id, performance_id, if_first_show, result, attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id |",
    "difficulty": "medium",
    "question": "How many conductors are there?",
    "pred": "SELECT countrycode FROM countrylanguage WHERE LANGUAGE = 'Spanish'   AND isofficial = 1",
    "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
  },
  {
    "index": 839,
    "db_id": "orchestra",
    "db_info": "| Conductor: conductor_id, name, year_of_work, age, nationality | Orchestra: conductor_id, orchestra_id, orchestra, record_company, year_of_founded, major_record_format | Performance: performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | Show: show_id, performance_id, if_first_show, result, attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id |",
    "difficulty": "medium",
    "question": "What is the name of the conductor who has worked the greatest number of years?",
    "pred": "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"
  },
  {
    "index": 840,
    "db_id": "orchestra",
    "db_info": "| conductor: name, conductor_id, age, nationality, year_of_work | orchestra: orchestra, conductor_id, orchestra_id, record_company, year_of_founded, major_record_format | performance: performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show: show_id, performance_id, if_first_show, result, attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id |",
    "difficulty": "medium",
    "question": "Show the names of conductors and the orchestras they have conducted.",
    "pred": "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"
  },
  {
    "index": 844,
    "db_id": "orchestra",
    "db_info": "| conductor: conductor_id, name, age, nationality, year_of_work | orchestra: conductor_id, orchestra_id, orchestra, record_company, year_of_founded, major_record_format | performance: orchestra_id, performance_id, type, date, official_ratings_(millions), weekly_rank, share | show: performance_id, show_id, if_first_show, result, attendance |",
    "difficulty": "medium",
    "question": "Show the name of the conductor that has conducted the most number of orchestras.",
    "pred": "SELECT conductor.name FROM orchestra JOIN conductor ON orchestra.conductor_id = conductor.conductor_id GROUP BY orchestra.orchestra_id HAVING COUNT (*) > 1",
    "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"
  },
  {
    "index": 845,
    "db_id": "orchestra",
    "db_info": "| conductor: name, conductor_id, age, nationality, year_of_work | orchestra: conductor_id, orchestra_id, orchestra, record_company, year_of_founded, major_record_format | performance: orchestra_id, performance_id, type, date, official_ratings_(millions), weekly_rank, share | show: performance_id, show_id, if_first_show, result, attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id |",
    "difficulty": "extra",
    "question": "What is the name of the conductor who has conducted the most orchestras?",
    "pred": "SELECT orchestra.conductor_id,        orchestra.orchestra FROM orchestra JOIN conductor ON orchestra.conductor_id = conductor.conductor_id GROUP BY orchestra.conductor_id ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "index": 852,
    "db_id": "orchestra",
    "db_info": "| orchestra: record_company, orchestra_id | performance: orchestra_id, performance_id | show: performance_id, show_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id |",
    "difficulty": "medium",
    "question": "List the record company shared by the most number of orchestras.",
    "pred": "SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"
  },
  {
    "index": 853,
    "db_id": "orchestra",
    "db_info": "| orchestra: record_company, orchestra_id, conductor_id, orchestra, year_of_founded, major_record_format | conductor: conductor_id, name, age, nationality, year_of_work | performance: orchestra_id, performance_id, type, date, official_ratings_(millions), weekly_rank, share | show: performance_id, show_id, if_first_show, result, attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id |",
    "difficulty": "hard",
    "question": "What is the record company used by the greatest number of orchestras?",
    "pred": "SELECT orchestra.record_company FROM orchestra JOIN performance ON orchestra.orchestra_id = performance.orchestra_id GROUP BY orchestra.record_company ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "index": 854,
    "db_id": "orchestra",
    "db_info": "| orchestra: orchestra, orchestra_id, conductor_id, record_company, year_of_founded, major_record_format | performance: orchestra_id, performance_id, type, date, official_ratings_(millions), weekly_rank, share | conductor: conductor_id, name, age, nationality, year_of_work | show: show_id, performance_id, if_first_show, result, attendance | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id | orchestra.conductor_id = conductor.conductor_id |",
    "difficulty": "hard",
    "question": "List the names of orchestras that have no performance.",
    "pred": "SELECT orchestra.record_company FROM orchestra JOIN performance ON orchestra.orchestra_id = performance.orchestra_id GROUP BY orchestra.record_company ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "index": 855,
    "db_id": "orchestra",
    "db_info": "| orchestra: orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance: performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | conductor: conductor_id, name, age, nationality, year_of_work | show: performance_id, show_id, if_first_show, result, attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id |",
    "difficulty": "hard",
    "question": "What are the orchestras that do not have any performances?",
    "pred": "SELECT orchestra.orchestra FROM orchestra JOIN performance ON orchestra.orchestra_id = performance.orchestra_id WHERE performance.orchestra_id NOT IN     (SELECT orchestra_id      FROM performance)",
    "gold": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"
  },
  {
    "index": 861,
    "db_id": "orchestra",
    "db_info": "| orchestra: year_of_founded, orchestra_id, conductor_id, orchestra, record_company, major_record_format | performance: orchestra_id, performance_id, type, date, official_ratings_(millions), weekly_rank, share | conductor: conductor_id, name, age, nationality, year_of_work | show: show_id, performance_id, if_first_show, result, attendance | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id |",
    "difficulty": "medium",
    "question": "What are years of founding for orchestras that have had more than a single performance?",
    "pred": "SELECT orchestra.year_of_founded FROM orchestra JOIN performance ON orchestra.orchestra_id = performance.orchestra_id GROUP BY orchestra.year_of_founded HAVING COUNT (*) > 1",
    "gold": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1"
  },
  {
    "index": 862,
    "db_id": "orchestra",
    "db_info": "| highschooler: id, name, grade | friend: student_id, friend_id | likes: student_id, liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id |",
    "difficulty": "medium",
    "question": "How many high schoolers are there?",
    "pred": "SELECT orchestra.year_of_founded FROM orchestra JOIN performance ON orchestra.orchestra_id = performance.orchestra_id GROUP BY orchestra.year_of_founded HAVING COUNT (*) > 1",
    "gold": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1"
  },
  {
    "index": 863,
    "db_id": "network_1",
    "db_info": "| highschooler: id, grade, name | friend: student_id, friend_id | likes: student_id, liked_id |",
    "difficulty": "easy",
    "question": "Count the number of high schoolers.",
    "pred": "SELECT COUNT (*) FROM highschooler WHERE grade = 10",
    "gold": "SELECT count(*) FROM Highschooler"
  },
  {
    "index": 864,
    "db_id": "network_1",
    "db_info": "| highschooler: name, grade, id | friend: | likes: |",
    "difficulty": "easy",
    "question": "Show the names and grades of each high schooler.",
    "pred": "SELECT COUNT (*) FROM highschooler WHERE grade = 10",
    "gold": "SELECT count(*) FROM Highschooler"
  },
  {
    "index": 867,
    "db_id": "network_1",
    "db_info": "| highschooler: grade, id, name | friend: student_id, friend_id | likes: student_id, liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id |",
    "difficulty": "easy",
    "question": "What is the grade of each high schooler?",
    "pred": "SELECT DISTINCT grade FROM highschooler WHERE grade!= 10",
    "gold": "SELECT grade FROM Highschooler"
  },
  {
    "index": 877,
    "db_id": "network_1",
    "db_info": "| highschooler: grade, id, name | friend: student_id, friend_id | likes: student_id, liked_id |",
    "difficulty": "medium",
    "question": "How many high schoolers are in each grade?",
    "pred": "SELECT COUNT (*), grade FROM highschooler WHERE grade >= 10 GROUP BY grade",
    "gold": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade"
  },
  {
    "index": 884,
    "db_id": "network_1",
    "db_info": "| highschooler: id, name, grade | friend: student_id, friend_id | likes: student_id, liked_id |",
    "difficulty": "medium",
    "question": "Show the names of high school students and their corresponding number of friends.",
    "pred": "SELECT COUNT (*), highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.name",
    "gold": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id"
  },
  {
    "index": 885,
    "db_id": "network_1",
    "db_info": "| highschooler: id, name, grade | friend: student_id, friend_id | likes: student_id, liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id |",
    "difficulty": "medium",
    "question": "What are the names of the high schoolers and how many friends does each have?",
    "pred": "SELECT highschooler.name,        COUNT (*) FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.name ORDER BY COUNT (*) DESC LIMIT 10",
    "gold": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
  },
  {
    "index": 886,
    "db_id": "network_1",
    "db_info": "| highschooler: id, name, grade | friend: friend_id, student_id | likes: student_id, liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id |",
    "difficulty": "medium",
    "question": "What is the name of the high schooler who has the greatest number of friends?",
    "pred": "SELECT highschooler.name,        COUNT (*) FROM friend JOIN highschooler ON friend.student_id = highschooler.id GROUP BY highschooler.name",
    "gold": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
  },
  {
    "index": 891,
    "db_id": "network_1",
    "db_info": "| highschooler: name, id, grade | friend: student_id, friend_id |",
    "difficulty": "hard",
    "question": "Return the names of friends of the high school student Kyle.",
    "pred": "SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id WHERE highschooler.name = 'Kyle'   AND friend.friend_id!= 1026854937",
    "gold": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""
  },
  {
    "index": 892,
    "db_id": "network_1",
    "db_info": "| highschooler: name, id, grade | friend: friend_id, student_id | likes: - |",
    "difficulty": "hard",
    "question": "How many friends does the high school student Kyle have?",
    "pred": "SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id WHERE highschooler.name = 'Kyle'   AND friend.friend_id!= 1026854937",
    "gold": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""
  },
  {
    "index": 893,
    "db_id": "network_1",
    "db_info": "| highschooler: name, id, grade | friend: friend_id, student_id |",
    "difficulty": "medium",
    "question": "Count the number of friends Kyle has.",
    "pred": "SELECT COUNT (*) FROM friend JOIN highschooler ON friend.student_id = highschooler.id WHERE highschooler.grade = 10   AND highschooler.name = 'Kyle'",
    "gold": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
  },
  {
    "index": 894,
    "db_id": "network_1",
    "db_info": "| highschooler: id, name, grade | friend: student_id, friend_id | likes: student_id, liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id |",
    "difficulty": "medium",
    "question": "Show ids of all students who do not have any friends.",
    "pred": "SELECT COUNT (*) FROM friend JOIN highschooler ON friend.student_id = highschooler.id WHERE highschooler.name = 'Kyle'   AND highschooler.grade = 10",
    "gold": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
  },
  {
    "index": 896,
    "db_id": "network_1",
    "db_info": "| highschooler : id, name, grade | friend : student_id, friend_id |",
    "difficulty": "hard",
    "question": "Show names of all high school students who do not have any friends.",
    "pred": "SELECT id FROM highschooler WHERE grade!= 10 NOT IN     (SELECT student_id      FROM friend)",
    "gold": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"
  },
  {
    "index": 897,
    "db_id": "network_1",
    "db_info": "| highschooler: id, name, grade | friend: student_id, friend_id | likes: student_id, liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id |",
    "difficulty": "hard",
    "question": "What are the names of students who have no friends?",
    "pred": "SELECT name FROM highschooler WHERE id NOT IN     (SELECT student_id      FROM friend)",
    "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"
  },
  {
    "index": 898,
    "db_id": "network_1",
    "db_info": "| highschooler: id | friend: friend_id, student_id | likes: liked_id, student_id |",
    "difficulty": "hard",
    "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
    "pred": "SELECT name FROM highschooler WHERE id NOT IN     (SELECT student_id      FROM friend)",
    "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"
  },
  {
    "index": 899,
    "db_id": "network_1",
    "db_info": "| highschooler: id, name, grade | friend: student_id, friend_id | likes: student_id, liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id |",
    "difficulty": "hard",
    "question": "What are the ids of students who both have friends and are liked?",
    "pred": "SELECT friend.student_id FROM friend JOIN likes ON friend.friend_id = likes.liked_id WHERE likes.student_id!= 1 INTERSECT   SELECT likes.student_id   FROM likes   JOIN likes ON likes.student_id = likes.liked_id WHERE likes.student_id!= 1",
    "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"
  },
  {
    "index": 900,
    "db_id": "network_1",
    "db_info": "| highschooler: id, name | friend: friend_id, student_id | likes: student_id, liked_id |",
    "difficulty": "hard",
    "question": "Show name of all students who have some friends and also are liked by someone else.",
    "pred": "SELECT student_id FROM likes WHERE liked_id IN     (SELECT friend.friend_id      FROM friend      JOIN likes ON friend.student_id = likes.student_id) INTERSECT   SELECT student_id   FROM likes   JOIN friend ON likes.student_id = friend.student_id WHERE friend.friend_id!= likes.liked_id",
    "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"
  },
  {
    "index": 901,
    "db_id": "network_1",
    "db_info": "| highschooler: id, name, grade | friend: student_id, friend_id | likes: student_id, liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id |",
    "difficulty": "hard",
    "question": "What are the names of high schoolers who both have friends and are liked?",
    "pred": "SELECT name FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON likes.liked_id = friend.friend_id WHERE highschooler.name!= 'Alice' INTERSECT   SELECT highschooler.name   FROM highschooler   JOIN likes ON highschooler.id = likes.student_id WHERE highschooler.name!= 'Bob'",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"
  },
  {
    "index": 902,
    "db_id": "network_1",
    "db_info": "| likes : student_id, liked_id | highschooler : id, name, grade | friend : student_id, friend_id |",
    "difficulty": "hard",
    "question": "Count the number of likes for each student id.",
    "pred": "SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id JOIN highschooler ON highschooler.id = likes.liked_id WHERE highschooler.grade = 10 INTERSECT   SELECT highschooler.name   FROM highschooler   JOIN friend ON highschooler.id = friend.student_id   JOIN highschooler ON highschooler.id = friend.friend_id WHERE highschooler.grade = 10",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"
  },
  {
    "index": 905,
    "db_id": "network_1",
    "db_info": "| highschooler: name, id, grade | likes: student_id, liked_id | friend: student_id, friend_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id |",
    "difficulty": "medium",
    "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
    "pred": "SELECT highschooler.name,        COUNT (*) FROM highschooler JOIN likes ON highschooler.id = likes.student_id WHERE likes.liked_id!= 'null' GROUP BY highschooler.name ORDER BY COUNT (*) DESC LIMIT 10",
    "gold": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
  },
  {
    "index": 906,
    "db_id": "network_1",
    "db_info": "| highschooler: name, id, grade | likes: student_id, liked_id | friend: student_id, friend_id | likes.student_id = highschooler.id |",
    "difficulty": "medium",
    "question": "What is the name of the high schooler who has the greatest number of likes?",
    "pred": "SELECT highschooler.name,        COUNT (*) FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY likes.student_id ORDER BY COUNT (*) DESC LIMIT 10",
    "gold": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
  },
  {
    "index": 907,
    "db_id": "network_1",
    "db_info": "| highschooler: name, id, grade | likes: liked_id, student_id | friend: friend_id, student_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id |",
    "difficulty": "extra",
    "question": "Give the name of the student with the most likes.",
    "pred": "SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.liked_id GROUP BY likes.liked_id ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 911,
    "db_id": "network_1",
    "db_info": "| highschooler: id, name, grade | friend: student_id, friend_id | likes: student_id, liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id |",
    "difficulty": "hard",
    "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
    "pred": "SELECT name FROM highschooler JOIN friend ON highschooler.id = friend.student_id WHERE grade > 5 GROUP BY friend.student_id HAVING COUNT (*) >= 2 INTERSECT SELECT name FROM highschooler JOIN friend ON highschooler.id = friend.friend_id WHERE grade > 5 GROUP BY friend.friend_id HAVING COUNT (*) >= 2",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2"
  },
  {
    "index": 912,
    "db_id": "network_1",
    "db_info": "| highschooler: name, id | likes: student_id | friend: ... | highschooler.id = likes.student_id | highschooler.friend_id = friend.student_id |",
    "difficulty": "hard",
    "question": "How many likes does Kyle have?",
    "pred": "SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id WHERE highschooler.grade > 5 GROUP BY highschooler.name HAVING COUNT (*) >= 2",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2"
  },
  {
    "index": 914,
    "db_id": "network_1",
    "db_info": "| highschooler: id, grade, name | friend: student_id, friend_id | likes: none |",
    "difficulty": "medium",
    "question": "Find the average grade of all students who have some friends.",
    "pred": "SELECT COUNT (*) FROM highschooler JOIN likes ON highschooler.id = likes.student_id WHERE highschooler.name = 'Kyle'   AND likes.type = 1",
    "gold": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
  },
  {
    "index": 915,
    "db_id": "network_1",
    "db_info": "| highschooler: grade, id, name | friend: student_id, friend_id | likes: student_id, liked_id |",
    "difficulty": "hard",
    "question": "What is the average grade of students who have friends?",
    "pred": "SELECT AVG (grade) FROM highschooler WHERE id IN     (SELECT student_id      FROM friend      GROUP BY student_id      HAVING COUNT (*) >= 3)",
    "gold": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
  },
  {
    "index": 916,
    "db_id": "network_1",
    "db_info": "| highschooler: grade, id, name | friend: student_id, friend_id | likes: student_id, liked_id |",
    "difficulty": "hard",
    "question": "Find the minimum grade of students who have no friends.",
    "pred": "SELECT AVG (grade) FROM highschooler WHERE id IN     (SELECT student_id      FROM friend      GROUP BY student_id      HAVING COUNT (*) >= 2)",
    "gold": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
  },
  {
    "index": 918,
    "db_id": "network_1",
    "db_info": "| owners: state, city, owner_id, first_name, last_name, street, zip_code, email_address, home_phone, cell_number | professionals: state, city, professional_id, role_code, first_name, street, zip_code, last_name, email_address, home_phone, cell_number | dogs: owner_id, dog_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | breeds: breed_code, breed_name | sizes: size_code, size_description | treatment_types: treatment_type_code, treatment_type_description | charges: charge_id, charge_type, charge_amount | treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | dogs.owner_id = owners.owner_id | treatments.professional_id = professionals.professional_id |",
    "difficulty": "extra",
    "question": "Which states have both owners and professionals living there?",
    "pred": "SELECT grade FROM highschooler WHERE id NOT IN     (SELECT student_id      FROM friend)",
    "gold": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
  },
  {
    "index": 921,
    "db_id": "dog_kennels",
    "db_info": "| dogs: dog_id, age | treatments: treatment_id, dog_id | breeds: breed_code, breed_name | charges: charge_id, charge_type, charge_amount | sizes: size_code, size_description | treatment_types: treatment_type_code, treatment_type_description | owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs: abandoned_yn, breed_code, size_code, name, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | dogs.owner_id = owners.owner_id |",
    "difficulty": "hard",
    "question": "Find the average age of the dogs who went through treatments.",
    "pred": "SELECT AVG (dogs.age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.date_of_treatment > '2016-03-25'   AND treatments.date_of_treatment < '2017-04-08'   AND treatments.dog_id IN     (SELECT treatments.dog_id      FROM treatments      GROUP BY treatments.dog_id      HAVING COUNT (*) >= 2)",
    "gold": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )"
  },
  {
    "index": 922,
    "db_id": "dog_kennels",
    "db_info": "| professionals: professional_id, state, last_name, cell_number, role_code, first_name, street, city, zip_code, email_address, home_phone | treatments: professional_id, treatment_type_code, date_of_treatment, treatment_id, dog_id, cost_of_treatment | owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | breeds: breed_code, breed_name | charges: charge_id, charge_type, charge_amount | sizes: size_code, size_description | treatment_types: treatment_type_code, treatment_type_description | dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code |",
    "difficulty": "hard",
    "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
    "pred": "SELECT AVG (dogs.age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.outcome_code = 'A'   OR treatments.outcome_code = 'T'",
    "gold": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )"
  },
  {
    "index": 924,
    "db_id": "dog_kennels",
    "db_info": "| treatments: cost_of_treatment, dog_id | dogs: name, dog_id | breeds: breed_code, breed_name | charges: charge_id, charge_type, charge_amount | sizes: size_code, size_description | treatment_types: treatment_type_code, treatment_type_description | owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments.dog_id = dogs.dog_id | dogs.breed_code = breeds.breed_code | dogs.size_code = sizes.size_code | treatments.treatment_type_code = treatment_types.treatment_type_code |",
    "difficulty": "extra",
    "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
    "pred": "SELECT professional_id,        last_name,        cell_number FROM professionals WHERE state = 'Indiana' UNION SELECT professional_id,        last_name,        cell_number FROM treatments GROUP BY professional_id HAVING COUNT (*) > 2",
    "gold": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"
  },
  {
    "index": 925,
    "db_id": "dog_kennels",
    "db_info": "| dogs: dog_id, owner_id, name | owners: owner_id | treatments: treatment_id, dog_id, cost_of_treatment | breeds: breed_code | sizes: size_code | treatment_types: treatment_type_code | charges: charge_id, charge_amount | professionals: professional_id | treatments.dog_id = dogs.dog_id | dogs.owner_id = owners.owner_id | treatsments.treatment_type_code = treatment_types.treatment_type_code | dogs.breed_code = breeds.breed_code | dogs.size_code = sizes.size_code | treatments.professional_id = professionals.professional_id |",
    "difficulty": "hard",
    "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
    "pred": "SELECT dogs.name FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.cost_of_treatment <= 1000 EXCEPT SELECT dogs.name FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.dog_id HAVING SUM (treatments.cost_of_treatment) > 1000",
    "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )"
  },
  {
    "index": 926,
    "db_id": "dog_kennels",
    "db_info": "| owners: first_name, owner_id | professionals: first_name, professional_id | dogs: name, dog_id, owner_id, breed_code, size_code | treatments: dog_id, professional_id | breeds: breed_code, breed_name | sizes: size_code, size_description | treatment_types: treatment_type_code, treatment_type_description | charges: charge_id, charge_type, charge_amount | dogs.owner_id=owners.owner_id | treatments.dog_id=dogs.dog_id | treatments.professional_id=professionals.professional_id | dogs.size_code=sizes.size_code | dogs.breed_code=breeds.breed_code | treatments.treatment_type_code=treatment_types.treatment_type_code |",
    "difficulty": "hard",
    "question": "Which first names are used for professionals or owners but are not used as dog names?",
    "pred": "SELECT name FROM dogs WHERE owner_id!= 'A'   AND owner_id!= 'B' EXCEPT SELECT dogs.name FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.dog_id HAVING SUM (treatments.cost_of_treatment) > 1000",
    "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )"
  },
  {
    "index": 927,
    "db_id": "dog_kennels",
    "db_info": "| owners: first_name, owner_id | professionals: first_name, professional_id | dogs: name, owner_id, breed_code, size_code | treatments: dog_id, professional_id, treatment_type_code | breeds: breed_code, breed_name | sizes: size_code, size_description | treatment_types: treatment_type_code, treatment_type_description | charges: charge_id, charge_type, charge_amount | dogs.owner_id = owners.owner_id | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.treatment_type_code = treatment_types.treatment_type_code |",
    "difficulty": "hard",
    "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
    "pred": "SELECT first_name FROM professionals EXCEPT SELECT owners.first_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.name!= 'fido'",
    "gold": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"
  },
  {
    "index": 929,
    "db_id": "dog_kennels",
    "db_info": "| professionals: professional_id, role_code, email_address | treatments: professional_id, dog_id | dogs: dog_id | owners: owner_id, email_address | treatment_types: treatment_type_code, treatment_type_description | sizes: size_code, size_description | charges: charge_id, charge_type, charge_amount | breeds: breed_code, breed_name | dogs.owner_id = owners.owner_id | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code | dogs.breed_code = breeds.breed_code | dogs.size_code = sizes.size_code |",
    "difficulty": "extra",
    "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
    "pred": "SELECT * FROM professionals WHERE professional_id NOT IN     (SELECT professional_id      FROM treatments)",
    "gold": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"
  },
  {
    "index": 936,
    "db_id": "dog_kennels",
    "db_info": "| treatments: cost_of_treatment, dog_id, treatment_id, professional_id, treatment_type_code, date_of_treatment | dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | owners: owner_id, last_name, first_name, street, city, state, zip_code, email_address, home_phone, cell_number | breeds: breed_code, breed_name | sizes: size_code, size_description | treatment_types: treatment_type_code, treatment_type_description | professionals: professional_id, role_code, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs.owner_id = owners.owner_id | treatments.dog_id = dogs.dog_id |",
    "difficulty": "extra",
    "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
    "pred": "SELECT breeds.breed_name FROM breeds JOIN dogs ON breeds.breed_code = dogs.breed_code GROUP BY dogs.breed_code ORDER BY COUNT (*) DESC LIMIT 1",
    "gold": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 937,
    "db_id": "dog_kennels",
    "db_info": "| treatments: cost_of_treatment, dog_id | dogs: owner_id, dog_id | owners: owner_id, last_name | breeds: breed_code, breed_name | charges: charge_id, charge_type, charge_amount | sizes: size_code, size_description | treatment_types: treatment_type_code, treatment_type_description | professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments.dog_id = dogs.dog_id | dogs.owner_id = owners.owner_id |",
    "difficulty": "extra",
    "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
    "pred": "SELECT owners.owner_id,        owners.last_name FROM owners JOIN treatments ON owners.owner_id = treatments.professional_id GROUP BY owners.owner_id ORDER BY SUM (treatments.cost_of_treatment) DESC LIMIT 1",
    "gold": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 938,
    "db_id": "dog_kennels",
    "db_info": "| treatments: cost_of_treatment, treatment_type_code, treatment_id, dog_id, professional_id, date_of_treatment | treatment_types: treatment_type_description, treatment_type_code | dogs: dog_id | professionals: professional_id | charges: charge_id, charge_type, charge_amount | sizes: size_code, size_description | breeds: breed_code, breed_name | owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code |",
    "difficulty": "extra",
    "question": "What is the description of the treatment type that costs the least money in total?",
    "pred": "SELECT dogs.owner_id,        owners.last_name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.owner_id ORDER BY SUM (treatments.cost_of_treatment) DESC LIMIT 1",
    "gold": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 945,
    "db_id": "dog_kennels",
    "db_info": "| treatments: treatment_id, dog_id, professional_id, cost_of_treatment | professionals: professional_id, first_name, last_name | treatments.professional_id = professionals.professional_id |",
    "difficulty": "extra",
    "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
    "pred": "SELECT professionals.first_name,        professionals.last_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.cost_of_treatment <     (SELECT AVG (cost_of_treatment)      FROM treatments)",
    "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"
  },
  {
    "index": 946,
    "db_id": "dog_kennels",
    "db_info": "| treatments: date_of_treatment, professional_id, treatment_id, cost_of_treatment, treatment_type_code | professionals: first_name, professional_id, role_code, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | breeds: breed_code, breed_name | charges: charge_id, charge_type, charge_amount | sizes: size_code, size_description | treatment_types: treatment_type_code, treatment_type_description | owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code |",
    "difficulty": "extra",
    "question": "List the date of each treatment, together with the first name of the professional who operated it.",
    "pred": "SELECT professionals.first_name,        professionals.last_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.cost_of_treatment <     (SELECT AVG (cost_of_treatment)      FROM treatments)",
    "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"
  },
  {
    "index": 955,
    "db_id": "dog_kennels",
    "db_info": "| breeds: breed_code, breed_name | dogs: dog_id, breed_code, name, date_arrived, date_adopted, date_departed | treatments: dog_id, date_of_treatment | owners: owner_id | sizes: size_code | charges: charge_id | professionals: professional_id | treatment_types: treatment_type_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code |",
    "difficulty": "extra",
    "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
    "pred": "SELECT dogs.name,        treatments.date_of_treatment FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id ORDER BY dogs.breed_code ASC LIMIT 1",
    "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"
  },
  {
    "index": 956,
    "db_id": "dog_kennels",
    "db_info": "| owners: state, first_name, owner_id | dogs: name, owner_id | breeds: breed_code , breed_name | charges: charge_id, charge_type, charge_amount | sizes: size_code, size_description | treatment_types: treatment_type_code, treatment_type_description | professionals: professional_id, role_code, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments: treatment_id, dog_id , professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | dogs.owner_id = owners.owner_id | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code | dogs.breed_code = breeds.breed_code | dogs.size_code = sizes.size_code |",
    "difficulty": "extra",
    "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
    "pred": "SELECT dogs.name,        treatments.date_of_treatment FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.dog_id ORDER BY COUNT (*) ASC LIMIT 10",
    "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"
  },
  {
    "index": 958,
    "db_id": "dog_kennels",
    "db_info": "| dogs: date_arrived, date_departed, dog_id | treatments: treatment_id, dog_id | treatment_types: treatment_type_code, treatment_type_description | owners: owner_id | professionals: professional_id | sizes: size_code, size_description | breeds: breed_code, breed_name | charges: charge_id, charge_type, charge_amount | dogs.dog_id = treatments.dog_id | treatments.treatment_type_code = treatment_types.treatment_type_code |",
    "difficulty": "medium",
    "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
    "pred": "SELECT owners.first_name,        dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'Virginia' INTERSECT   SELECT owners.first_name,          dogs.name   FROM owners   JOIN dogs ON owners.owner_id = dogs.owner_id   JOIN addresses ON owners.owner_id = addresses.owner_id WHERE addresses.state = 'Virginia'",
    "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"
  },
  {
    "index": 959,
    "db_id": "dog_kennels",
    "db_info": "| treatments: dog_id, date_of_treatment, treatment_id, professional_id, treatment_type_code, cost_of_treatment | dogs: dog_id, date_arrived, date_departed, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_adopted | owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | sizes: size_code, size_description | breeds: breed_code, breed_name | professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatment_types: treatment_type_code, treatment_type_description | charges: charge_id, charge_type, charge_amount | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code |",
    "difficulty": "medium",
    "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
    "pred": "SELECT treatments.date_arrived,        treatments.date_departed FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code WHERE treatment_types.treatment_type_description = 'Vaccine'   OR treatment_types.treatment_type_description = 'Transplant'",
    "gold": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"
  },
  {
    "index": 960,
    "db_id": "dog_kennels",
    "db_info": "| dogs: dog_id, owner_id, age, date_of_birth, breed_code, size_code, name, gender, weight, date_arrived, date_adopted, date_departed, abandoned_yn | owners: owner_id, last_name, first_name, street, city, state, zip_code, email_address, home_phone, cell_number | breeds: breed_code, breed_name | sizes: size_code, size_description | treatment_types: treatment_type_code, treatment_type_description | professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | charges: charge_id, charge_type, charge_amount | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code |",
    "difficulty": "medium",
    "question": "List the last name of the owner owning the youngest dog.",
    "pred": "SELECT date_of_treatment,        date_of_treatment FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id WHERE treatments.treatment_type_code = 'Vaccine'   OR treatments.treatment_type_code = 'Pet Transplant'",
    "gold": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"
  },
  {
    "index": 961,
    "db_id": "dog_kennels",
    "db_info": "| dogs: age, owner_id, dog_id, abandoned_yn, breed_code, size_code, name, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | owners: owner_id, last_name, first_name, street, city, state, zip_code, email_address, home_phone, cell_number | breeds: breed_code, breed_name | sizes: size_code, size_description | treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | charges: charge_id, charge_type, charge_amount | treatment_types: treatment_type_code, treatment_type_description | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id |",
    "difficulty": "extra",
    "question": "Who owns the youngest dog? Give me his or her last name.",
    "pred": "SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id ORDER BY dogs.age ASC LIMIT 1",
    "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"
  },
  {
    "index": 962,
    "db_id": "dog_kennels",
    "db_info": "| professionals: state, email_address, professional_id, role_code, first_name, street, city, zip_code, last_name, home_phone, cell_number |",
    "difficulty": "extra",
    "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
    "pred": "SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id ORDER BY dogs.age ASC LIMIT 1",
    "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"
  },
  {
    "index": 967,
    "db_id": "dog_kennels",
    "db_info": "| dogs: dog_id | treatments: treatment_id, dog_id | breeds: breed_code | sizes: size_code | owners: owner_id | professionals: professional_id | treatment_types: treatment_type_code | charges: charge_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code |",
    "difficulty": "easy",
    "question": "Count the number of dogs that went through a treatment.",
    "pred": "SELECT COUNT (*) FROM treatments WHERE dog_id NOT IN     (SELECT dog_id      FROM treatments)",
    "gold": "SELECT count(DISTINCT dog_id) FROM Treatments"
  },
  {
    "index": 968,
    "db_id": "dog_kennels",
    "db_info": "| professionals: professional_id | treatments: professional_id, dog_id, treatment_id | dogs: dog_id | breeds: | charges: | sizes: | treatment_types: | owners: | treatments.professional_id = professionals.professional_id | treatments.dog_id = dogs.dog_id |",
    "difficulty": "easy",
    "question": "How many professionals have performed any treatment to dogs?",
    "pred": "SELECT COUNT (*) FROM treatments WHERE treatment_type_code = 'Vaccine'   OR treatment_type_code = 'Surgery'",
    "gold": "SELECT count(DISTINCT dog_id) FROM Treatments"
  },
  {
    "index": 970,
    "db_id": "dog_kennels",
    "db_info": "| professionals: city, role_code, first_name, street, state, professional_id, last_name, zip_code, email_address, home_phone, cell_number |",
    "difficulty": "easy",
    "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
    "pred": "SELECT COUNT (*) FROM professionals WHERE professional_id IN     (SELECT professional_id      FROM treatments      GROUP BY professional_id      HAVING COUNT (*) > 10)",
    "gold": "SELECT count(DISTINCT professional_id) FROM Treatments"
  },
  {
    "index": 987,
    "db_id": "dog_kennels",
    "db_info": "| dogs: age, dog_id | breeds: breed_code | sizes: size_code | owners: owner_id | charges: charge_id, charge_type, charge_amount | treatment_types: treatment_type_code, treatment_type_description | professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code |",
    "difficulty": "easy",
    "question": "Compute the average age of all the dogs.",
    "pred": "SELECT AVG (age) FROM dogs WHERE gender = 'Male'   OR gender = 'Female'",
    "gold": "SELECT avg(age) FROM Dogs"
  },
  {
    "index": 989,
    "db_id": "dog_kennels",
    "db_info": "| dogs: age, dog_id, owner_id, breed_code, size_code, name, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed, abandoned_yn | owners: owner_id | sizes: size_code | breeds: breed_code | treatments: dog_id | professionals: professional_id | treatment_types: treatment_type_code | charges: charge_id | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code |",
    "difficulty": "easy",
    "question": "Tell me the age of the oldest dog.",
    "pred": "SELECT age FROM dogs WHERE age =     (SELECT MAX (age)      FROM dogs)",
    "gold": "SELECT max(age) FROM Dogs"
  },
  {
    "index": 990,
    "db_id": "dog_kennels",
    "db_info": "| charges: charge_type, charge_amount, charge_id | breeds: breed_code, breed_name | sizes: size_code, size_description | treatment_types: treatment_type_code, treatment_type_description | owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code |",
    "difficulty": "easy",
    "question": "How much does each charge type costs? List both charge type and amount.",
    "pred": "SELECT age FROM dogs WHERE age =     (SELECT MAX (age)      FROM dogs)",
    "gold": "SELECT max(age) FROM Dogs"
  },
  {
    "index": 991,
    "db_id": "dog_kennels",
    "db_info": "| charges: charge_type, charge_amount | breeds: breed_code, breed_name | sizes: size_code, size_description | treatment_types: treatment_type_code, treatment_type_description | dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | dogs.breed_code = breeds.breed_code | dogs.size_code = sizes.size_code | dogs.owner_id = owners.owner_id | treatments.dog_id = dogs.dog_id | treatments.treatment_type_code = treatment_types.treatment_type_code | treatments.professional_id = professionals.professional_id |",
    "difficulty": "medium",
    "question": "List each charge type and its amount.",
    "pred": "SELECT charge_type,        SUM (charge_amount) FROM charges GROUP BY charge_type ORDER BY SUM (charge_amount) ASC",
    "gold": "SELECT charge_type ,  charge_amount FROM Charges"
  },
  {
    "index": 992,
    "db_id": "dog_kennels",
    "db_info": "| charges: charge_amount, charge_type, charge_id | breeds: breed_name, breed_code | dogs: name, dog_id, owner_id, abandoned_yn, breed_code, size_code, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | owners: first_name, owner_id, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | sizes: size_description, size_code | treatment_types: treatment_type_description, treatment_type_code | professionals: professional_id, role_code, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | treatments: cost_of_treatment, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id |",
    "difficulty": "medium",
    "question": "How much does the most expensive charge type costs?",
    "pred": "SELECT charge_type,        SUM (charge_amount) FROM charges GROUP BY charge_type ORDER BY SUM (charge_amount) ASC",
    "gold": "SELECT charge_type ,  charge_amount FROM Charges"
  },
  {
    "index": 993,
    "db_id": "dog_kennels",
    "db_info": "| charges: charge_id, charge_type, charge_amount | breeds: breed_code, breed_name | sizes: size_code, size_description | treatment_types: treatment_type_code, treatment_type_description | owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code |",
    "difficulty": "easy",
    "question": "What is the charge amount of the most expensive charge type?",
    "pred": "SELECT MAX (charge_amount) FROM charges WHERE charge_type = 'Most Expensive'",
    "gold": "SELECT max(charge_amount) FROM Charges"
  },
  {
    "index": 997,
    "db_id": "dog_kennels",
    "db_info": "| dogs: breed_code, size_code | breeds: breed_code, breed_name | sizes: size_code, size_description |",
    "difficulty": "medium",
    "question": "Find the distinct breed type and size type combinations for dogs.",
    "pred": "SELECT breed_name,        size_description FROM breeds JOIN sizes ON breeds.breed_code = dogs.breed_code JOIN dogs ON dogs.size_code = sizes.size_code UNION SELECT breed_name,        size_description FROM breeds JOIN sizes ON breeds.breed_code = dogs.breed_code JOIN dogs ON dogs.size_code = sizes.size_code",
    "gold": "SELECT DISTINCT breed_code ,  size_code FROM dogs"
  },
  {
    "index": 998,
    "db_id": "dog_kennels",
    "db_info": "| professionals: first_name, professional_id | treatments: professional_id, treatment_type_code | treatment_types: treatment_type_description, treatment_type_code | owners: owner_id | dogs: dog_id, owner_id, breed_code, size_code | breeds: breed_code | sizes: size_code | charges: charge_id | treatments.professional_id = professionals.professional_id | treatments.treatment_type_code = treatment_types.treatment_type_code | dogs.owner_id = owners.owner_id | dogs.size_code = sizes.size_code | dogs.breed_code = breeds.breed_code | treatments.dog_id = dogs.dog_id |",
    "difficulty": "medium",
    "question": "List the first name of all the professionals along with the description of the treatment they have done.",
    "pred": "SELECT DISTINCT breeds.breed_name,                 sizes.size_description FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN sizes ON dogs.size_code = sizes.size_code",
    "gold": "SELECT DISTINCT breed_code ,  size_code FROM dogs"
  },
  {
    "index": 1000,
    "db_id": "dog_kennels",
    "db_info": "| singer: singer_id, name, birth_year, net_worth_millions, citizenship | song: song_id, singer_id, title, sales, highest_position | song.singer_id = singer.singer_id |",
    "difficulty": "medium",
    "question": "How many singers are there?",
    "pred": "SELECT professionals.first_name,        treatments.treatment_type_code FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id",
    "gold": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"
  },
  {
    "index": 1023,
    "db_id": "singer",
    "db_info": "| singer: singer_id, name, birth_year, net_worth_millions, citizenship | song: singer_id, title, sales, highest_position | song.singer_id = singer.singer_id |",
    "difficulty": "medium",
    "question": "What are the names of the singers that have more than one songs?",
    "pred": "SELECT singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id GROUP BY song.singer_id HAVING COUNT (*) > 1",
    "gold": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
  },
  {
    "index": 1024,
    "db_id": "singer",
    "db_info": "| singer: name, singer_id, birth_year, net_worth_millions, citizenship | song: sales, singer_id, song_id, title, highest_position | song.singer_id = singer.singer_id |",
    "difficulty": "medium",
    "question": "Show the names of singers and the total sales of their songs.",
    "pred": "SELECT singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id GROUP BY song.singer_id HAVING COUNT (*) > 1",
    "gold": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
  },
  {
    "index": 1028,
    "db_id": "singer",
    "db_info": "| singer: birth_year, citizenship, singer_id, name, net_worth_millions | song: singer_id, song_id, title, sales, highest_position | song.singer_id = singer.singer_id |",
    "difficulty": "hard",
    "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
    "pred": "SELECT singer.sname FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.title NOT IN     (SELECT title      FROM song)",
    "gold": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"
  },
  {
    "index": 1033,
    "db_id": "real_estate_properties",
    "db_info": "| properties: room_count, property_type_code, property_name | ref_property_types: property_type_code, property_type_description | properties.property_type_code = ref_property_types.property_type_code |",
    "difficulty": "medium",
    "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
    "pred": "SELECT ref_property_types.property_type_description FROM ref_property_types JOIN properties ON ref_property_types.property_type_code = properties.property_type_code WHERE properties.property_type_code = 'Single Family'   OR properties.property_type_code = 'Multi Family'",
    "gold": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code"
  }
]