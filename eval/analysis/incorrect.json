[
  {
    "index": 6,
    "db_id": "concert_singer",
    "db_info": "# singer ( name, song_release_year, age )\n# concert ( stadium_id )\n# singer_in_concert ( concert_id, singer_id )\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id",
    "difficulty": "medium",
    "question": "Show the name and the release year of the song by the youngest singer.",
    "pred": "SELECT singer.name, singer.song_release_year  FROM  singer  WHERE  singer.age = (SELECT MIN(age) FROM singer);",
    "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"
  },
  {
    "index": 7,
    "db_id": "concert_singer",
    "db_info": "# singer ( age, name, song_release_year )",
    "difficulty": "medium",
    "question": "What are the names and release years for all the songs of the youngest singer?",
    "pred": "SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer);",
    "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"
  },
  {
    "index": 12,
    "db_id": "concert_singer",
    "db_info": "# singer ( age, name, singer_id )\n# singer_in_concert ( singer_id, concert_id )\n# concert ( concert_id, year, stadium_id )\n# stadium ( stadium_id, name )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id",
    "difficulty": "hard",
    "question": "List all song names by singers above the average age.",
    "pred": "SELECT The question asks for song names, but there's no reference to a 'song' table or 'song.name' in the provided tables and their properties. Therefore, it's difficult to provide a corrected SQL query. Please provide complete and correct table information.",
    "gold": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"
  },
  {
    "index": 16,
    "db_id": "concert_singer",
    "db_info": "# stadium ( capacity, highest, average, stadium_id, location, name, lowest )\n# concert ( stadium_id, concert_id, concert_name, theme, year )\n# singer_in_concert ( concert_id, singer_id )\n# singer ( song_release_year, singer_id, name, country, song_name, age, is_male )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id",
    "difficulty": "medium",
    "question": "What is the maximum capacity and the average of all stadiums ?",
    "pred": "SELECT MAX(capacity) AS max_capacity,  AVG(capacity) AS average_capacity  FROM stadium;",
    "gold": "select max(capacity), average from stadium"
  },
  {
    "index": 23,
    "db_id": "concert_singer",
    "db_info": "# stadium ( stadium_id, location, name, capacity, highest, lowest, average )\n# concert ( concert_id, concert_name, theme, stadium_id, year )\n# singer_in_concert ( concert_id, singer_id )\n# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id",
    "difficulty": "medium",
    "question": "For each stadium, how many concerts play there?",
    "pred": "SELECT stadium.name, COUNT(concert.concert_id)  FROM  stadium  LEFT JOIN  concert  ON  stadium.stadium_id = concert.stadium_id  GROUP BY  stadium.name;",
    "gold": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id"
  },
  {
    "index": 24,
    "db_id": "concert_singer",
    "db_info": "# concert ( stadium_id, concert_name, theme, concert_id, year )\n# stadium ( stadium_id, name, capacity, location, highest, lowest, average )\n# singer_in_concert ( concert_id, singer_id )\n# singer ( singer_id, name, country, song_name, song_release_year, age, is_male )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id",
    "difficulty": "extra",
    "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
    "pred": "SELECT stadium.name, stadium.capacity FROM     stadium INNER JOIN     concert ON concert.stadium_id = stadium.stadium_id WHERE     concert.year >= 2014 GROUP BY     stadium.name, stadium.capacity ORDER BY     COUNT(concert.concert_id) DESC LIMIT 1;",
    "gold": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 25,
    "db_id": "concert_singer",
    "db_info": "# concert ( stadium_id )\n# stadium ( name, capacity )\n# concert.stadium_id = stadium.stadium_id",
    "difficulty": "extra",
    "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
    "pred": "SELECT stadium.name, stadium.capacity FROM     stadium JOIN     concert ON concert.stadium_id = stadium.stadium_id WHERE     concert.year > 2013 GROUP BY     stadium.name, stadium.capacity ORDER BY     COUNT(concert.stadium_id) DESC LIMIT 1;",
    "gold": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1"
  },
  {
    "index": 31,
    "db_id": "concert_singer",
    "db_info": "# stadium ( name, location, capacity, highest, lowest, average )\n# concert ( concert_name, theme, stadium_id, concert_id, year )\n# concert.stadium_id = stadium.stadium_id",
    "difficulty": "hard",
    "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
    "pred": "SELECT s.name  FROM  stadium s  WHERE  s.name NOT IN (  SELECT  c.stadium_id  FROM  concert c  WHERE  c.year = 2014 );",
    "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"
  },
  {
    "index": 32,
    "db_id": "concert_singer",
    "db_info": "# stadium ( name, stadium_id, location, capacity, highest, lowest, average )\n# concert ( stadium_id, concert_id, concert_name, theme, year )\n# concert.stadium_id = stadium.stadium_id",
    "difficulty": "hard",
    "question": "What are the names of all stadiums that did not have a concert in 2014?",
    "pred": "SELECT name  FROM  stadium  WHERE  stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = '2014');",
    "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"
  },
  {
    "index": 33,
    "db_id": "concert_singer",
    "db_info": "# concert ( concert_name, theme )\n# singer_in_concert ( concert_id, singer_id )\n# singer ( name, song_name, song_release_year, country, age, is_male )\n# stadium ( name, location, capacity )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id",
    "difficulty": "medium",
    "question": "Show the name and theme for all concerts and the number of singers in each concert.",
    "pred": "SELECT concert.concert_name,  concert.theme,  COUNT(singer_in_concert.singer_id) as singer_count   FROM concert   JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id   GROUP BY concert.concert_name, concert.theme;",
    "gold": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id"
  },
  {
    "index": 35,
    "db_id": "concert_singer",
    "db_info": "# singer ( name, country )\n# singer_in_concert ( concert_id, singer_id )\n# concert ( concert_id, concert_name, stadium_id )\n# stadium ( stadium_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id",
    "difficulty": "medium",
    "question": "List singer names and number of concerts for each singer.",
    "pred": "SELECT singer.name, COUNT(concert.concert_id)  FROM  singer  JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  JOIN concert ON singer_in_concert.concert_id = concert.concert_id  GROUP BY singer.name;",
    "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"
  },
  {
    "index": 42,
    "db_id": "concert_singer",
    "db_info": "# concert ( concert_name, stadium_id, year )\n# stadium ( name, location )\n# singer_in_concert ( concert_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.concert_id = concert.concert_id",
    "difficulty": "extra",
    "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
    "pred": "SELECT stadium.name, stadium.location FROM     stadium WHERE     stadium.stadium_id IN (         SELECT             concert.stadium_id         FROM             concert         WHERE             concert.year = 2014     )     AND stadium.stadium_id IN (         SELECT             concert.stadium_id         FROM             concert         WHERE             concert.year = 2015     );",
    "gold": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015"
  },
  {
    "index": 47,
    "db_id": "pets_1",
    "db_info": "# pets ( pet_age, petid )\n# has_pet ( petid, stuid )\n# student ( stuid, fname, lname, age, sex, major, advisor, city_code )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid",
    "difficulty": "medium",
    "question": "Find the weight of the youngest dog.",
    "pred": "SELECT There seems to be a misunderstanding in the question. The table pets does not have a weight column. And, the query is trying to select the minimum age of pet owned by a male student, not the weight of the youngest dog. The question and provided tables need clarification for providing correct SQL.   If the pets table has a weight column and we want to find the weight of the youngest pet (not necessarily a dog as there's no indication of pet type in the given tables), the SQL would be:  ```sql SELECT pets.weight FROM pets WHERE pets.pet_age = (SELECT MIN(pet_age) FROM pets); ```  If the pets table has a weight column and a type column, and we want to find the weight of the youngest dog, the SQL would be:  ```sql SELECT pets.weight FROM pets WHERE pets.pet_age = (SELECT MIN(pet_age) FROM pets WHERE type = 'dog'); ```  If we need to find the minimum age of pet owned by a male student, the SQL would be:  ```sql SELECT MIN(pets.pet_age) FROM pets INNER JOIN has_pet ON pets.petid = has_pet.petid INNER JOIN student ON has_pet.stuid = student.stuid WHERE student.sex = 'M'; ```",
    "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
  },
  {
    "index": 48,
    "db_id": "pets_1",
    "db_info": "# pets ( pet_age, weight )\n# has_pet ( petid, stuid )\n# student ( stuid, lname, fname, age, sex, major, advisor, city_code )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid",
    "difficulty": "medium",
    "question": "How much does the youngest dog weigh?",
    "pred": "SELECT MIN(weight) as weight  FROM  pets JOIN  has_pet ON pets.petid = has_pet.petid WHERE  pet_age IN (     SELECT      MIN(pet_age)      FROM      pets );",
    "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
  },
  {
    "index": 58,
    "db_id": "pets_1",
    "db_info": "# student ( fname, stuid, lname, age, sex, major, advisor, city_code )\n# has_pet ( stuid, petid )\n# pets ( pettype, petid, pet_age, weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid",
    "difficulty": "extra",
    "question": "What are the first names of every student who has a cat or dog as a pet?",
    "pred": "SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype IN ('cat', 'dog') GROUP BY student.fname;",
    "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"
  },
  {
    "index": 59,
    "db_id": "pets_1",
    "db_info": "# student ( fname, stuid, lname )\n# has_pet ( stuid, petid )\n# pets ( pettype, petid )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid",
    "difficulty": "extra",
    "question": "Find the first name of students who have both cat and dog pets .",
    "pred": "SELECT student.fname FROM   student INNER JOIN   has_pet ON student.stuid = has_pet.stuid INNER JOIN   pets ON has_pet.petid = pets.petid WHERE   pets.pettype = 'cat'   AND student.stuid IN (     SELECT       stuid     FROM       has_pet     INNER JOIN       pets ON has_pet.petid = pets.petid     WHERE       pets.pettype = 'dog'   );",
    "gold": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'"
  },
  {
    "index": 60,
    "db_id": "pets_1",
    "db_info": "# student ( fname, stuid, lname, age, sex, major, advisor, city_code )\n# has_pet ( stuid, petid )\n# pets ( petid, pettype, pet_age, weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid",
    "difficulty": "extra",
    "question": "What are the students' first names who have both cats and dogs as pets?",
    "pred": "SELECT student.fname FROM     student INNER JOIN     has_pet ON student.stuid = has_pet.stuid INNER JOIN     pets ON has_pet.petid = pets.petid WHERE     pets.pettype = 'cat'     AND student.fname IN (         SELECT             student.fname         FROM             student         INNER JOIN             has_pet ON student.stuid = has_pet.stuid         INNER JOIN             pets ON has_pet.petid = pets.petid         WHERE             pets.pettype = 'dog'     );",
    "gold": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'"
  },
  {
    "index": 67,
    "db_id": "pets_1",
    "db_info": "# pets ( pettype, pet_age, weight, petid )\n# has_pet ( stuid, petid )\n# student ( stuid, lname, fname, age, sex, major, advisor, city_code )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid",
    "difficulty": "medium",
    "question": "Find the type and weight of the youngest pet.",
    "pred": "SELECT pets.pettype, pets.weight FROM     pets WHERE     pet_age = (         SELECT             MIN(pet_age)         FROM             pets     );",
    "gold": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"
  },
  {
    "index": 75,
    "db_id": "pets_1",
    "db_info": "# student ( fname, age, stuid, lname )\n# has_pet ( stuid, petid )\n# pets ( pet_age, petid, pettype, weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid",
    "difficulty": "medium",
    "question": "Find the first name and age of students who have a pet.",
    "pred": "SELECT student.fname, student.age  FROM student  WHERE student.stuid IN (SELECT stuid FROM has_pet);",
    "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"
  },
  {
    "index": 81,
    "db_id": "pets_1",
    "db_info": "# student ( fname, sex )\n# has_pet ( stuid )\n# has_pet.stuid = student.stuid",
    "difficulty": "medium",
    "question": "Find the first name and gender of student who have more than one pet.",
    "pred": "SELECT student.fname, student.sex     FROM student     JOIN has_pet ON student.stuid = has_pet.stuid     GROUP BY student.fname, student.sex     HAVING COUNT(has_pet.stuid) > 1;",
    "gold": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"
  },
  {
    "index": 82,
    "db_id": "pets_1",
    "db_info": "# student ( fname, sex, stuid, lname, age, major, advisor, city_code )\n# has_pet ( stuid, petid )\n# pets ( petid, pettype, pet_age, weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid",
    "difficulty": "medium",
    "question": "What is the first name and gender of the all the students who have more than one pet?",
    "pred": "SELECT student.fname, student.sex FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.fname, student.sex HAVING COUNT(has_pet.petid) > 1;",
    "gold": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"
  },
  {
    "index": 83,
    "db_id": "pets_1",
    "db_info": "# student ( lname, stuid, fname, age, sex, major, advisor, city_code )\n# pets ( petid, pettype, pet_age, weight )",
    "difficulty": "hard",
    "question": "Find the last name of the student who has a cat that is age 3.",
    "pred": "SELECT student.lname FROM  student INNER JOIN  pets ON student.stuid = pets.petid WHERE  pets.pettype = 'cat' AND pets.pet_age = 3;",
    "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"
  },
  {
    "index": 84,
    "db_id": "pets_1",
    "db_info": "# student ( lname, stuid, fname, age, sex, major, advisor, city_code )\n# has_pet ( stuid, petid )\n# pets ( petid, pettype, pet_age, weight )\n# has_pet.stuid = student.stuid\n# has_pet.petid = pets.petid",
    "difficulty": "hard",
    "question": "What is the last name of the student who has a cat that is 3 years old?",
    "pred": "SELECT student.lname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pet_age = 3 LIMIT 1;",
    "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"
  },
  {
    "index": 99,
    "db_id": "car_1",
    "db_info": "# car_makers ( maker, fullname, country, id )\n# cars_data ( year, mpg, cylinders, edispl, horsepower, weight, accelerate, id )\n# model_list ( maker, model, modelid )\n# car_names ( model, makeid, make )\n# countries ( countryname, countryid )\n# continents ( continent, contid )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "extra",
    "question": "Find the name of the makers that produced some cars in the year of 1970?",
    "pred": "SELECT DISTINCT car_makers.fullname  FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker  JOIN car_names ON model_list.model = car_names.model  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cars_data.year = 1970;",
    "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"
  },
  {
    "index": 100,
    "db_id": "car_1",
    "db_info": "# cars_data ( year, id, mpg, cylinders, edispl, horsepower, weight, accelerate )\n# car_makers ( maker, id, fullname, country )\n# model_list ( modelid, maker, model )\n# car_names ( makeid, model, make )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "extra",
    "question": "What is the name of the different car makers who produced a car in 1970?",
    "pred": "SELECT DISTINCT car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970;",
    "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"
  },
  {
    "index": 101,
    "db_id": "car_1",
    "db_info": "# cars_data ( year, id )\n# car_names ( makeid, make, model )\n# model_list ( modelid, maker )\n# car_makers ( id, maker, fullname, country )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "extra",
    "question": "Find the make and production time of the cars that were produced in the earliest year?",
    "pred": "SELECT car_names.make || ' ' || car_names.model AS 'Make and Model',  MIN(cars_data.year) AS 'Earliest Production Year' FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.modelid INNER JOIN car_makers ON model_list.maker = car_makers.id GROUP BY car_names.make, car_names.model ORDER BY 'Earliest Production Year' ASC;",
    "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"
  },
  {
    "index": 102,
    "db_id": "car_1",
    "db_info": "# car_makers ( maker, country, fullname, id )\n# cars_data ( year, horsepower, mpg, cylinders, edispl, weight, accelerate, id )\n# car_names ( make, model, makeid )\n# model_list ( model, maker, modelid )\n# countries ( countryname, continent, countryid )\n# continents ( continent )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "extra",
    "question": "What is the maker of the carr produced in the earliest year and what year was it?",
    "pred": "SELECT car_makers.maker, MIN(cars_data.year) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY car_makers.maker ORDER BY MIN(cars_data.year) ASC LIMIT 1;",
    "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"
  },
  {
    "index": 105,
    "db_id": "car_1",
    "db_info": "# continents ( contid )\n# countries ( countryname, continent )\n# car_makers ( id, maker, fullname, country )\n# model_list ( modelid, maker, model )\n# car_names ( makeid, model, make )\n# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "hard",
    "question": "How many car makers are there in each continents? List the continent name and the count.",
    "pred": "SELECT continents.contid AS continent,  COUNT(DISTINCT car_makers.id) AS count  FROM  continents  JOIN countries ON continents.contid = countries.continent  JOIN car_makers ON countries.countryname = car_makers.country  GROUP BY continents.contid;",
    "gold": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"
  },
  {
    "index": 106,
    "db_id": "car_1",
    "db_info": "# continents ( continent )\n# countries ( continent, countryname )\n# car_makers ( country, maker, fullname )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid",
    "difficulty": "hard",
    "question": "What is the name of each continent and how many car makers are there in each one?",
    "pred": "SELECT continents.continent, COUNT(DISTINCT car_makers.maker) AS car_makers_count  FROM  continents  LEFT JOIN countries ON continents.continent = countries.continent  LEFT JOIN car_makers ON countries.countryname = car_makers.country  GROUP BY continents.continent;",
    "gold": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"
  },
  {
    "index": 107,
    "db_id": "car_1",
    "db_info": "# countries ( countryname, countryid, continent )\n# car_makers ( maker, fullname, country )\n# continents ( continent, contid )\n# model_list ( modelid, maker, model )\n# car_names ( makeid, model, make )\n# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "extra",
    "question": "Which of the countries has the most car makers? List the country name.",
    "pred": "SELECT countries.countryname FROM     countries JOIN     car_makers ON countries.countryid = car_makers.country GROUP BY     countries.countryname ORDER BY     COUNT(DISTINCT car_makers.maker) DESC LIMIT 1;",
    "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"
  },
  {
    "index": 108,
    "db_id": "car_1",
    "db_info": "# car_makers ( country, maker )\n# countries ( countryname, countryid )\n# continents ( continent )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid",
    "difficulty": "extra",
    "question": "What is the name of the country with the most car makers?",
    "pred": "SELECT countries.countryname FROM     countries JOIN     car_makers ON car_makers.country = countries.countryid GROUP BY     countries.countryname ORDER BY     COUNT(car_makers.maker) DESC LIMIT 1;",
    "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"
  },
  {
    "index": 109,
    "db_id": "car_1",
    "db_info": "# car_makers ( id, maker, fullname, country )\n# model_list ( modelid, maker, model )\n# car_names ( makeid, model, make )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model",
    "difficulty": "medium",
    "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
    "pred": "SELECT car_makers.fullname, COUNT(model_list.modelid) FROM  model_list JOIN  car_makers  ON  model_list.maker = car_makers.id GROUP BY  car_makers.fullname;",
    "gold": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;"
  },
  {
    "index": 111,
    "db_id": "car_1",
    "db_info": "# car_makers ( maker, id )\n# model_list ( modelid, maker )\n# car_names ( makeid, model )\n# cars_data ( id, accelerate, mpg, cylinders, edispl, horsepower, weight, year )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "medium",
    "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
    "pred": "SELECT cars_data.accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE car_names.model = 'amc hornet sportabout (sw)';",
    "gold": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"
  },
  {
    "index": 112,
    "db_id": "car_1",
    "db_info": "# cars_data ( accelerate, id, mpg, cylinders, edispl, horsepower, weight, year )\n# car_names ( makeid, model, make )\n# model_list ( modelid, maker, model )\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "medium",
    "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
    "pred": "SELECT cars_data.accelerate  FROM  cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  WHERE  car_names.make = 'amc'  AND model_list.model = 'hornet sportabout (sw)';",
    "gold": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"
  },
  {
    "index": 115,
    "db_id": "car_1",
    "db_info": "# car_makers ( country, id, maker, fullname )\n# model_list ( maker, model, modelid )\n# model_list.maker = car_makers.id",
    "difficulty": "hard",
    "question": "How many car models are produced in the usa?",
    "pred": "SELECT COUNT(*)  FROM  model_list  WHERE  maker IN (SELECT id FROM car_makers WHERE country = 'USA');",
    "gold": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"
  },
  {
    "index": 121,
    "db_id": "car_1",
    "db_info": "# car_makers ( maker, id, fullname, country )\n# model_list ( modelid, maker, model )\n# car_names ( makeid, model, make )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model",
    "difficulty": "medium",
    "question": "What are all the makers and models?",
    "pred": "SELECT car_makers.maker,  model_list.model  FROM car_makers  JOIN model_list  ON car_makers.id = model_list.maker;",
    "gold": "SELECT Maker ,  Model FROM MODEL_LIST;"
  },
  {
    "index": 122,
    "db_id": "car_1",
    "db_info": "# continents ( contid, continent )\n# countries ( countryname, countryid, continent )\n# car_makers ( id, maker, country )\n# model_list ( modelid, maker, model )\n# car_names ( makeid, model, make )\n# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "medium",
    "question": "What are the makers and models?",
    "pred": "SELECT cm.maker, ml.model  FROM  car_makers cm   JOIN  model_list ml  ON  cm.id = ml.maker",
    "gold": "SELECT Maker ,  Model FROM MODEL_LIST;"
  },
  {
    "index": 130,
    "db_id": "car_1",
    "db_info": "# continents ( contid )\n# countries ( countryname, continent )\n# car_makers ( maker, fullname, country )\n# model_list ( maker, model )\n# car_names ( makeid, model )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model",
    "difficulty": "extra",
    "question": "What are the names of all European countries with at least 3 manufacturers?",
    "pred": "SELECT countries.countryname  FROM  countries  JOIN  continents ON countries.continent = continents.contid  WHERE  continents.continent = 'Europe'  AND  countries.countryname IN (        SELECT      car_makers.country        FROM      car_makers        GROUP BY      car_makers.country        HAVING      COUNT(DISTINCT car_makers.maker) >= 3  );",
    "gold": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"
  },
  {
    "index": 131,
    "db_id": "car_1",
    "db_info": "# cars_data ( horsepower )\n# model_list ( modelid, maker )\n# car_makers ( id, maker )\n# car_names ( makeid, model, make )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "extra",
    "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
    "pred": "SELECT MAX(cars_data.horsepower), car_makers.maker   FROM cars_data   JOIN car_names ON cars_data.id = car_names.makeid   JOIN model_list ON car_names.model = model_list.modelid   JOIN car_makers ON model_list.maker = car_makers.id   WHERE cars_data.cylinders = 3;",
    "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"
  },
  {
    "index": 132,
    "db_id": "car_1",
    "db_info": "# cars_data ( horsepower, cylinders, id )\n# model_list ( maker, modelid, model )\n# car_makers ( maker, id, fullname, country )\n# model_list.maker = car_makers.id",
    "difficulty": "extra",
    "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
    "pred": "SELECT MAX(cars_data.horsepower) AS max_horsepower, car_makers.fullname AS make FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3 GROUP BY car_makers.fullname ORDER BY max_horsepower DESC LIMIT 1;",
    "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"
  },
  {
    "index": 137,
    "db_id": "car_1",
    "db_info": "# model_list ( modelid, maker, model )\n# car_names ( makeid, model, make )\n# car_makers ( id, maker, fullname, country )\n# cars_data ( id, edispl, mpg, cylinders, horsepower, weight, accelerate, year )\n# countries ( countryid, countryname, continent )\n# continents ( contid, continent )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "medium",
    "question": "What is the average edispl of the cars of model volvo?",
    "pred": "SELECT AVG(edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.maker = 'volvo';",
    "gold": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"
  },
  {
    "index": 138,
    "db_id": "car_1",
    "db_info": "# car_makers ( maker )\n# model_list ( maker )\n# car_names ( model )\n# cars_data ( edispl, id )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "medium",
    "question": "What is the average edispl for all volvos?",
    "pred": "SELECT AVG(cars_data.edispl) FROM     cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE     car_makers.maker = 'volvo';",
    "gold": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"
  },
  {
    "index": 141,
    "db_id": "car_1",
    "db_info": "# model_list ( modelid, model )\n# car_makers ( id, maker )\n# car_names ( makeid, model )\n# countries ( countryid, countryname )\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model",
    "difficulty": "hard",
    "question": "Which model has the most version(make) of cars?",
    "pred": "SELECT model_list.model  FROM  model_list  JOIN  car_names  ON  model_list.modelid = car_names.model  GROUP BY  model_list.model  HAVING  COUNT(DISTINCT car_names.makeid) =  ( SELECT  MAX(make_count)  FROM  ( SELECT  COUNT(DISTINCT makeid) as make_count  FROM  car_names  GROUP BY  model ) );",
    "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"
  },
  {
    "index": 142,
    "db_id": "car_1",
    "db_info": "# model_list ( modelid, maker, model )\n# car_names ( model, makeid, make )\n# car_makers ( country, id, maker, fullname )\n# countries ( continent, countryid, countryname )\n# continents ( continent, contid )\n# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "hard",
    "question": "What model has the most different versions?",
    "pred": "SELECT model FROM model_list  GROUP BY model  ORDER BY COUNT(DISTINCT modelid) DESC  LIMIT 1;",
    "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"
  },
  {
    "index": 147,
    "db_id": "car_1",
    "db_info": "# car_makers ( fullname, id )\n# model_list ( modelid, maker, model )\n# car_names ( makeid, model, make )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model",
    "difficulty": "medium",
    "question": "How many car models were produced by the maker with full name American Motor Company?",
    "pred": "SELECT COUNT(DISTINCT model_list.model) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model WHERE car_makers.fullname = 'American Motor Company';",
    "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"
  },
  {
    "index": 151,
    "db_id": "car_1",
    "db_info": "# car_makers ( maker, fullname, country )\n# model_list ( maker, model )\n# cars_data ( weight, id )\n# car_names ( makeid, model, make )\n# countries ( countryid, countryname, continent )\n# continents ( contid, continent )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "extra",
    "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
    "pred": "SELECT DISTINCT model_list.model   FROM      car_makers   JOIN      model_list  ON      car_makers.maker = model_list.maker   JOIN      car_names  ON      model_list.model = car_names.model JOIN     cars_data ON     car_names.makeid = cars_data.id WHERE      car_makers.fullname = 'General Motors' OR cars_data.weight > 3500;",
    "gold": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"
  },
  {
    "index": 152,
    "db_id": "car_1",
    "db_info": "# car_makers ( maker, fullname, country, id )\n# model_list ( maker, model, modelid )\n# cars_data ( weight, id, mpg, cylinders, edispl, horsepower, accelerate, year )\n# model_list.maker = car_makers.id",
    "difficulty": "extra",
    "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
    "pred": "SELECT DISTINCT model_list.model  FROM  model_list  JOIN car_makers ON model_list.maker = car_makers.id  LEFT JOIN cars_data ON model_list.modelid = cars_data.id  WHERE  car_makers.fullname = 'General Motors' OR cars_data.weight > 3500;",
    "gold": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"
  },
  {
    "index": 154,
    "db_id": "car_1",
    "db_info": "# cars_data ( year, weight, id )\n# car_names ( makeid, model )\n# model_list ( modelid, maker )\n# car_makers ( id, maker, country )\n# countries ( countryid, countryname )\n# continents ( contid, continent )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "easy",
    "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
    "pred": "SELECT DISTINCT year FROM     cars_data WHERE     weight < 4000     OR weight > 3000;",
    "gold": "select distinct year from cars_data where weight between 3000 and 4000;"
  },
  {
    "index": 157,
    "db_id": "car_1",
    "db_info": "# model_list ( model )\n# car_names ( model )\n# cars_data ( cylinders, accelerate )\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "extra",
    "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
    "pred": "SELECT MIN(cars_data.cylinders)  FROM  car_names  JOIN model_list ON car_names.model = model_list.model  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE car_names.model = 'volvo'  AND cars_data.accelerate = (     SELECT MIN(accelerate)      FROM cars_data      JOIN car_names ON cars_data.id = car_names.makeid      WHERE car_names.model = 'volvo' );",
    "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"
  },
  {
    "index": 158,
    "db_id": "car_1",
    "db_info": "# model_list ( modelid )\n# car_makers ( id, maker )\n# car_names ( makeid, model )\n# cars_data ( id, accelerate, cylinders )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "extra",
    "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
    "pred": "SELECT cars_data.cylinders FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker  JOIN car_names ON model_list.modelid = car_names.makeid  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE car_makers.maker = 'volvo'  ORDER BY cars_data.accelerate ASC  LIMIT 1;",
    "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"
  },
  {
    "index": 160,
    "db_id": "car_1",
    "db_info": "# cars_data ( accelerate, horsepower, id, mpg, cylinders, edispl, weight, year )\n# car_names ( makeid, model, make )\n# model_list ( modelid, maker, model )\n# car_makers ( id, maker, fullname, country )\n# countries ( countryid, countryname, continent )\n# continents ( contid, continent )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "hard",
    "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
    "pred": "SELECT COUNT(*)  FROM  cars_data  WHERE  accelerate > (     SELECT      horsepower      FROM      cars_data      ORDER BY      horsepower DESC      LIMIT 1 )",
    "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"
  },
  {
    "index": 161,
    "db_id": "car_1",
    "db_info": "# countries ( countryname, continent )\n# car_makers ( country )\n# car_makers.country = countries.countryid",
    "difficulty": "medium",
    "question": "How many countries has more than 2 car makers ?",
    "pred": "SELECT COUNT(countries.countryname) FROM countries INNER JOIN car_makers ON countries.countryname = car_makers.country GROUP BY countries.countryname HAVING COUNT(car_makers.country) > 2;",
    "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2"
  },
  {
    "index": 162,
    "db_id": "car_1",
    "db_info": "# countries ( countryid, countryname, continent )\n# car_makers ( id, maker, fullname, country )\n# car_makers.country = countries.countryid",
    "difficulty": "medium",
    "question": "What is the number of countries with more than 2 car makers ?",
    "pred": "SELECT COUNT(*)  FROM  (     SELECT      countries.countryid          FROM      countries          JOIN      car_makers      ON      car_makers.country = countries.countryid          GROUP BY      countries.countryid          HAVING      COUNT(car_makers.id) > 2  ) AS countries_with_more_than_2_car_makers;",
    "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2"
  },
  {
    "index": 166,
    "db_id": "car_1",
    "db_info": "# cars_data ( horsepower, cylinders )\n# model_list ( model, maker )\n# car_makers ( maker, country )\n# model_list.maker = car_makers.id",
    "difficulty": "extra",
    "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
    "pred": "SELECT model_list.model FROM cars_data JOIN model_list ON cars_data.horsepower = model_list.model JOIN car_makers ON model_list.maker = car_makers.maker WHERE cars_data.cylinders = 4 GROUP BY model_list.model ORDER BY cars_data.horsepower DESC LIMIT 1",
    "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"
  },
  {
    "index": 169,
    "db_id": "car_1",
    "db_info": "# cars_data ( mpg, cylinders, year, id, edispl, horsepower, weight, accelerate )\n# model_list ( maker, modelid, model )",
    "difficulty": "medium",
    "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
    "pred": "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980;",
    "gold": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980"
  },
  {
    "index": 172,
    "db_id": "car_1",
    "db_info": "# cars_data ( weight, id, mpg, cylinders, edispl, horsepower, accelerate, year )\n# car_makers ( id, maker, fullname, country )\n# model_list ( modelid, maker, model )\n# model_list.maker = car_makers.id",
    "difficulty": "extra",
    "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
    "pred": "SELECT model_list.model  FROM  model_list  JOIN cars_data ON model_list.modelid = cars_data.id  JOIN car_makers ON model_list.maker = car_makers.id  WHERE cars_data.weight < 3500 AND car_makers.maker != 'Ford Motor Company';",
    "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"
  },
  {
    "index": 173,
    "db_id": "car_1",
    "db_info": "# countries ( countryname, countryid )\n# car_makers ( country, maker, id, fullname )\n# continents ( contid, continent )\n# model_list ( maker, modelid, model )\n# car_names ( model, makeid, make )\n# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "hard",
    "question": "What are the name of the countries where there is not a single car maker?",
    "pred": "SELECT countryname  FROM  countries  WHERE  countryid NOT IN (SELECT DISTINCT country FROM car_makers);",
    "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"
  },
  {
    "index": 174,
    "db_id": "car_1",
    "db_info": "# countries ( countryname, countryid )\n# car_makers ( country, maker, id )\n# continents ( contid, continent )\n# model_list ( maker, model )\n# car_names ( model, makeid, make )\n# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )\n# countries.continent = continents.contid\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "hard",
    "question": "What are the names of the countries with no car makers?",
    "pred": "SELECT countries.countryname  FROM  countries  WHERE  countries.countryid NOT IN (SELECT car_makers.country FROM car_makers WHERE car_makers.country IS NOT NULL);",
    "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"
  },
  {
    "index": 175,
    "db_id": "car_1",
    "db_info": "# car_makers ( id, maker, fullname, country )\n# model_list ( modelid, maker, model )\n# car_names ( makeid, model, make )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model",
    "difficulty": "extra",
    "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
    "pred": "SELECT car_makers.id, car_makers.maker   FROM  car_makers   JOIN  model_list  ON  car_makers.id = model_list.maker   GROUP BY  car_makers.id, car_makers.maker   HAVING  COUNT(DISTINCT model_list.modelid) >= 2;",
    "gold": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;"
  },
  {
    "index": 176,
    "db_id": "car_1",
    "db_info": "# car_makers ( id, maker, fullname, country )\n# model_list ( maker, modelid, model )\n# car_names ( makeid, model, make )\n# cars_data ( id, mpg, cylinders, edispl, horsepower, weight, accelerate, year )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "extra",
    "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
    "pred": "SELECT car_makers.id, car_makers.maker   FROM  car_makers   INNER JOIN model_list ON model_list.maker = car_makers.id   INNER JOIN car_names ON car_names.model = model_list.model   GROUP BY car_makers.id, car_makers.maker   HAVING COUNT(DISTINCT model_list.modelid) >= 2 AND COUNT(car_names.makeid) > 3;",
    "gold": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;"
  },
  {
    "index": 178,
    "db_id": "car_1",
    "db_info": "# countries ( countryid, countryname )\n# car_makers ( id, maker, country )\n# model_list ( modelid, maker, model )\n# car_names ( makeid, model, make )\n# cars_data ( id )\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid",
    "difficulty": "extra",
    "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
    "pred": "SELECT countries.countryid, countries.countryname  FROM  countries  WHERE  countries.countryid IN (     SELECT      car_makers.country      FROM      car_makers      GROUP BY      car_makers.country      HAVING      COUNT(car_makers.id) > 3)  OR  countries.countryid IN (     SELECT      car_makers.country      FROM      car_makers      JOIN      model_list ON model_list.maker = car_makers.id      JOIN      car_names ON car_names.model = model_list.modelid      WHERE      car_names.make = 'fiat')",
    "gold": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';"
  },
  {
    "index": 182,
    "db_id": "flight_2",
    "db_info": "# airlines ( abbreviation )\n# airports ( airportcode, airportname )\n# flights ( airline, sourceairport, destairport, flightno )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "easy",
    "question": "Which abbreviation corresponds to Jetblue Airways?",
    "pred": "SELECT abbreviation FROM airlines WHERE abbreviation LIKE '%JetBlue%';",
    "gold": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
  },
  {
    "index": 210,
    "db_id": "flight_2",
    "db_info": "# flights ( destairport, flightno, airline, sourceairport )\n# airports ( airportcode, airportname, city, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "medium",
    "question": "Return the number of flights arriving in Aberdeen.",
    "pred": "SELECT COUNT(*) FROM flights WHERE destairport = 'Aberdeen';",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
  },
  {
    "index": 213,
    "db_id": "flight_2",
    "db_info": "# airlines ( airline, abbreviation, country, uid )\n# flights ( airline, flightno, sourceairport, destairport )",
    "difficulty": "medium",
    "question": "How many flights does airline 'JetBlue Airways' have?",
    "pred": "SELECT COUNT(*) as count FROM flights  WHERE airline = 'JetBlue Airways';",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""
  },
  {
    "index": 215,
    "db_id": "flight_2",
    "db_info": "# flights ( airline, destairport )\n# airlines ( airline )",
    "difficulty": "medium",
    "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
    "pred": "SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY';",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""
  },
  {
    "index": 216,
    "db_id": "flight_2",
    "db_info": "# flights ( airline, flightno, sourceairport, destairport )\n# airlines ( airline, abbreviation, country )\n# airports ( airportcode, city, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "medium",
    "question": "Count the number of United Airlines flights arriving in ASY Airport.",
    "pred": "SELECT COUNT(*)  FROM flights  WHERE airline = 'United Airlines' AND destairport = 'ASY';",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""
  },
  {
    "index": 217,
    "db_id": "flight_2",
    "db_info": "# flights ( airline, sourceairport )\n# airlines ( airline )\n# airports ( airportcode )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "medium",
    "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
    "pred": "SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""
  },
  {
    "index": 218,
    "db_id": "flight_2",
    "db_info": "# flights ( airline, flightno, sourceairport, destairport )\n# airports ( airportcode, city, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "medium",
    "question": "Return the number of United Airlines flights leaving from AHD Airport.",
    "pred": "SELECT COUNT(*)  FROM flights  WHERE airline = 'United Airlines'  AND sourceairport = 'AHD';",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""
  },
  {
    "index": 219,
    "db_id": "flight_2",
    "db_info": "# airlines ( airline, abbreviation, country )\n# flights ( airline, flightno, sourceairport, destairport )\n# airports ( city, airportcode, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "hard",
    "question": "How many United Airlines flights go to City 'Aberdeen'?",
    "pred": "SELECT COUNT(*) FROM   flights JOIN   airlines ON flights.airline = airlines.abbreviation JOIN   airports ON flights.destairport = airports.airportcode WHERE   airlines.airline = 'United Airlines'   AND airports.city = 'Aberdeen';",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""
  },
  {
    "index": 220,
    "db_id": "flight_2",
    "db_info": "# flights ( airline, flightno, sourceairport, destairport )\n# airlines ( airline, uid, abbreviation, country )\n# airports ( airportcode, city, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "hard",
    "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
    "pred": "SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'Aberdeen';",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""
  },
  {
    "index": 225,
    "db_id": "flight_2",
    "db_info": "# airports ( airportcode, city, airportname, country, countryabbrev )",
    "difficulty": "extra",
    "question": "What is the code of airport that has the highest number of flights?",
    "pred": "SELECT airportcode  FROM  flights  GROUP BY  airportcode  ORDER BY  COUNT(*) DESC  LIMIT 1;",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 226,
    "db_id": "flight_2",
    "db_info": "# flights ( destairport, sourceairport, airline )\n# airports ( airportcode, airportname, city, country )\n# airlines ( airline, abbreviation, country )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "extra",
    "question": "What is the airport code of the airport with the most flights?",
    "pred": "SELECT flights.destairport AS airportcode  FROM  flights  GROUP BY  flights.destairport  ORDER BY  COUNT(*) DESC  LIMIT 1;",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 228,
    "db_id": "flight_2",
    "db_info": "# flights ( sourceairport, airline, flightno, destairport )\n# airports ( airportcode, airportname, city, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "extra",
    "question": "Give the code of the airport with the least flights.",
    "pred": "SELECT airportcode FROM     airports WHERE     airportcode IN (         SELECT             destairport         FROM             flights         UNION ALL         SELECT             sourceairport         FROM             flights     ) GROUP BY     airportcode ORDER BY     COUNT(*) ASC LIMIT 1;",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"
  },
  {
    "index": 229,
    "db_id": "flight_2",
    "db_info": "# flights ( airline, flightno, sourceairport, destairport )\n# airlines ( airline, uid, abbreviation, country )\n# airports ( airportname, airportcode, city, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "extra",
    "question": "Which airline has most number of flights?",
    "pred": "SELECT flights.airline, COUNT(*) FROM  flights  GROUP BY  flights.airline  ORDER BY  COUNT(*) DESC  LIMIT 1;",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 230,
    "db_id": "flight_2",
    "db_info": "# flights ( airline, flightno, sourceairport, destairport )\n# airlines ( airline, uid, abbreviation, country )",
    "difficulty": "extra",
    "question": "What airline serves the most flights?",
    "pred": "SELECT airline  FROM  flights  GROUP BY  airline  ORDER BY  COUNT(*) DESC  LIMIT 1;",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 231,
    "db_id": "flight_2",
    "db_info": "# airlines ( abbreviation, country, airline )\n# flights ( airline, flightno, sourceairport, destairport )\n# airports ( airportcode, country, airportname, city, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "extra",
    "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
    "pred": "SELECT a.abbreviation, a.country  FROM airlines a  WHERE a.airline = (     SELECT f.airline      FROM flights f     GROUP BY f.airline      ORDER BY COUNT(*) ASC     LIMIT 1 );",
    "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"
  },
  {
    "index": 232,
    "db_id": "flight_2",
    "db_info": "# airlines ( abbreviation, country, airline, uid )\n# flights ( airline, sourceairport, destairport, flightno )\n# airports ( country, airportcode, airportname, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "extra",
    "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
    "pred": "SELECT abbreviation, country  FROM airlines  WHERE abbreviation = (     SELECT airline     FROM (         SELECT airline, COUNT(*) AS num_flights         FROM flights         GROUP BY airline         ORDER BY num_flights ASC         LIMIT 1     ) AS min_flights ) LIMIT 1;",
    "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"
  },
  {
    "index": 233,
    "db_id": "flight_2",
    "db_info": "# flights ( sourceairport, airline, flightno )\n# airports ( airportcode, airportname, city )\n# airlines ( airline, uid, abbreviation )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "medium",
    "question": "What are airlines that have some flight departing from airport 'AHD'?",
    "pred": "SELECT airlines.airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airlines ON flights.airline = airlines.airline WHERE airports.airportcode = 'AHD';",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""
  },
  {
    "index": 234,
    "db_id": "flight_2",
    "db_info": "# flights ( sourceairport, airline, flightno, destairport )\n# airports ( airportcode, city, airportname, country, countryabbrev )\n# airlines ( airline, uid, abbreviation, country )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "medium",
    "question": "Which airlines have a flight with source airport AHD?",
    "pred": "SELECT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE flights.sourceairport = 'AHD';",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""
  },
  {
    "index": 235,
    "db_id": "flight_2",
    "db_info": "# airports ( airportcode, airportname, city, country, countryabbrev )\n# flights ( airline, flightno, sourceairport, destairport )\n# airlines ( airline, abbreviation, country, uid )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "medium",
    "question": "What are airlines that have flights arriving at airport 'AHD'?",
    "pred": "SELECT airlines.airline FROM   airlines JOIN flights ON airlines.airline = flights.airline JOIN airports ON flights.destairport = airports.airportcode WHERE   airports.airportcode = 'AHD';",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""
  },
  {
    "index": 236,
    "db_id": "flight_2",
    "db_info": "# flights ( destairport, airline, flightno, sourceairport )\n# airlines ( airline, uid, abbreviation, country )",
    "difficulty": "medium",
    "question": "Which airlines have a flight with destination airport AHD?",
    "pred": "SELECT airline FROM     airlines WHERE     airline IN (         SELECT             airline         FROM             flights         WHERE             destairport = 'AHD'     );",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""
  },
  {
    "index": 237,
    "db_id": "flight_2",
    "db_info": "# airlines ( airline, abbreviation, country, uid )\n# flights ( airline, sourceairport, destairport, flightno )\n# airports ( airportcode, country, countryabbrev, city, airportname )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "extra",
    "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
    "pred": "SELECT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport = 'APG' AND flights.destairport = 'CVO' GROUP BY airlines.airline HAVING COUNT(DISTINCT flights.sourceairport) = 2;",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""
  },
  {
    "index": 238,
    "db_id": "flight_2",
    "db_info": "# flights ( airline, flightno, sourceairport, destairport )\n# airports ( airportcode, city, airportname, country, countryabbrev )\n# airlines ( airline, abbreviation, country, uid )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "extra",
    "question": "Which airlines have departing flights from both APG and CVO airports?",
    "pred": "SELECT airlines.airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airlines ON flights.airline = airlines.airline WHERE airports.city = 'APG' INTERSECT SELECT airlines.airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airlines ON flights.airline = airlines.airline WHERE airports.city = 'CVO';",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""
  },
  {
    "index": 239,
    "db_id": "flight_2",
    "db_info": "# airlines ( airline, abbreviation, country )\n# flights ( airline, flightno, sourceairport, destairport )\n# airports ( city, airportcode, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "extra",
    "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
    "pred": "SELECT airlines.airline FROM   airlines JOIN   flights ON airlines.airline = flights.airline JOIN   airports ON flights.destairport = airports.airportcode WHERE   airports.airportcode = 'CVO' EXCEPT SELECT   airlines.airline FROM   airlines JOIN   flights ON airlines.airline = flights.airline JOIN   airports ON flights.destairport = airports.airportcode WHERE   airports.airportcode = 'APG';",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""
  },
  {
    "index": 240,
    "db_id": "flight_2",
    "db_info": "# flights ( airline, flightno, sourceairport, destairport )\n# airlines ( uid, airline, abbreviation, country )\n# airports ( city, airportcode, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "extra",
    "question": "Which airlines have departures from CVO but not from APG airports?",
    "pred": "SELECT airlines.airline FROM   airlines WHERE   airline IN (     SELECT       airline     FROM       flights       JOIN airports ON flights.sourceairport = airports.airportcode     WHERE       airports.city = 'CVO'   )   AND airline NOT IN (     SELECT       airline     FROM       flights       JOIN airports ON flights.sourceairport = airports.airportcode     WHERE       airports.city = 'APG'   )",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""
  },
  {
    "index": 241,
    "db_id": "flight_2",
    "db_info": "# airlines ( airline, uid, abbreviation, country )\n# flights ( airline, flightno, sourceairport, destairport )\n# airports ( city, airportcode, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "medium",
    "question": "Find all airlines that have at least 10 flights.",
    "pred": "SELECT airline  FROM  (     SELECT      airline      FROM      flights      GROUP BY      airline      HAVING      COUNT(*) >= 10  ) AS flight_counts;",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"
  },
  {
    "index": 242,
    "db_id": "flight_2",
    "db_info": "# airlines ( airline, abbreviation, country )\n# flights ( airline, flightno, sourceairport, destairport )",
    "difficulty": "medium",
    "question": "Which airlines have at least 10 flights?",
    "pred": "SELECT airline  FROM  flights  GROUP BY  airline  HAVING  COUNT(flightno) >= 10;",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"
  },
  {
    "index": 243,
    "db_id": "flight_2",
    "db_info": "# airlines ( uid, airline, abbreviation, country )\n# flights ( airline, flightno, sourceairport, destairport )\n# airports ( city, airportcode, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "medium",
    "question": "Find all airlines that have fewer than 200 flights.",
    "pred": "SELECT airline  FROM airlines  WHERE uid IN (          SELECT airline          FROM flights          GROUP BY airline          HAVING COUNT(*) < 200 );",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"
  },
  {
    "index": 244,
    "db_id": "flight_2",
    "db_info": "# flights ( airline, flightno )\n# airlines ( uid, airline, abbreviation )\n# airports ( airportcode, airportname, country, countryabbrev, city )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "medium",
    "question": "Which airlines have less than 200 flights?",
    "pred": "SELECT airline  FROM  airlines  WHERE  airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200);",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"
  },
  {
    "index": 246,
    "db_id": "flight_2",
    "db_info": "# flights ( flightno, airline, sourceairport, destairport )\n# airlines ( airline, abbreviation, country, uid )\n# airports ( airportcode, airportname, country, countryabbrev, city )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "medium",
    "question": "Which flight numbers correspond to United Airlines flights?",
    "pred": "SELECT flightno  FROM  flights  JOIN  airlines  ON  flights.airline = airlines.airline  WHERE  airlines.airline = 'United Airlines';",
    "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""
  },
  {
    "index": 250,
    "db_id": "flight_2",
    "db_info": "# flights ( flightno )",
    "difficulty": "easy",
    "question": "Give the flight numbers of flights landing at APG.",
    "pred": "SELECT flightno  FROM  flights  WHERE  landing = 'APG';",
    "gold": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""
  },
  {
    "index": 256,
    "db_id": "flight_2",
    "db_info": "# flights ( destairport, sourceairport, airline, flightno )\n# airports ( airportcode, city, airportname, country, countryabbrev )\n# flights.destairport = airports.airportcode\n# flights.sourceairport = airports.airportcode",
    "difficulty": "hard",
    "question": "How many flights land in Aberdeen or Abilene?",
    "pred": "SELECT COUNT(*) FROM flights WHERE destairport IN ('Aberdeen', 'Abilene');",
    "gold": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\""
  },
  {
    "index": 277,
    "db_id": "employee_hire_evaluation",
    "db_info": "# evaluation ( employee_id, year_awarded, bonus )\n# employee ( employee_id, name, age, city )\n# hiring ( employee_id, shop_id, start_from, is_full_time )\n# shop ( shop_id, name, location, district, number_products, manager_name )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id",
    "difficulty": "extra",
    "question": "find the name of employee who was awarded the most times in the evaluation.",
    "pred": "SELECT employee.name FROM   evaluation JOIN   employee ON evaluation.employee_id = employee.employee_id GROUP BY   employee.name ORDER BY   COUNT(*) DESC LIMIT 1;",
    "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 278,
    "db_id": "employee_hire_evaluation",
    "db_info": "# employee ( employee_id, name, age, city )\n# evaluation ( employee_id, year_awarded, bonus )\n# hiring ( shop_id, employee_id, start_from, is_full_time )\n# shop ( shop_id, name, location, district, number_products, manager_name )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id",
    "difficulty": "extra",
    "question": "Which employee received the most awards in evaluations? Give me the employee name.",
    "pred": "SELECT employee.name FROM   employee JOIN   evaluation ON employee.employee_id = evaluation.employee_id GROUP BY   employee.employee_id ORDER BY   COUNT(*) DESC LIMIT 1;",
    "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 284,
    "db_id": "employee_hire_evaluation",
    "db_info": "# shop ( shop_id, name, location, district, number_products, manager_name )\n# hiring ( shop_id, employee_id, start_from, is_full_time )\n# hiring.shop_id = shop.shop_id",
    "difficulty": "extra",
    "question": "Which shop has the most employees? Give me the shop name.",
    "pred": "SELECT shop.name FROM shop JOIN ( SELECT shop_id, COUNT(employee_id) AS total_employees FROM hiring GROUP BY shop_id ) AS shop_employees ON shop.shop_id = shop_employees.shop_id ORDER BY shop_employees.total_employees DESC LIMIT 1;",
    "gold": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 287,
    "db_id": "employee_hire_evaluation",
    "db_info": "# shop ( shop_id, name, number_products, location, district, manager_name )\n# hiring ( shop_id, employee_id, start_from, is_full_time )\n# employee ( employee_id, name, age, city )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id",
    "difficulty": "medium",
    "question": "Find the number of employees hired in each shop; show the shop name as well.",
    "pred": "SELECT shop.name, COUNT(hiring.employee_id)  FROM  shop  LEFT JOIN  hiring  ON  shop.shop_id = hiring.shop_id  GROUP BY  shop.name;",
    "gold": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"
  },
  {
    "index": 293,
    "db_id": "employee_hire_evaluation",
    "db_info": "# shop ( district, number_products, shop_id, name, location, manager_name )\n# hiring ( shop_id, employee_id, start_from, is_full_time )\n# employee ( employee_id, name, age, city )\n# evaluation ( employee_id, year_awarded, bonus )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id",
    "difficulty": "hard",
    "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
    "pred": "SELECT shop.district FROM shop WHERE (number_products < 3000 AND shop_id IN (SELECT shop_id FROM shop WHERE number_products > 10000));",
    "gold": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000"
  },
  {
    "index": 294,
    "db_id": "employee_hire_evaluation",
    "db_info": "# shop ( number_products, location )",
    "difficulty": "hard",
    "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
    "pred": "SELECT shop.location FROM     shop WHERE     shop.number_products < 3000     AND shop.location IN (         SELECT             shop.location         FROM             shop         WHERE             shop.number_products > 10000     );",
    "gold": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000"
  },
  {
    "index": 309,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )\n# documents ( template_id, document_id, document_name, document_description, other_details )\n# documents.template_id = templates.template_id",
    "difficulty": "medium",
    "question": "Show all template ids and number of documents using each template.",
    "pred": "SELECT templates.template_id, COUNT(documents.document_id)  FROM templates  LEFT JOIN documents ON templates.template_id = documents.template_id  GROUP BY templates.template_id;",
    "gold": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"
  },
  {
    "index": 311,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# documents ( template_id )\n# templates ( template_id, template_type_code )\n# ref_template_types ( template_type_code )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id",
    "difficulty": "extra",
    "question": "What is the id and type code for the template used by the most documents?",
    "pred": "SELECT templates.template_id, templates.template_type_code  FROM  templates  INNER JOIN  documents  ON  templates.template_id = documents.template_id  GROUP BY  templates.template_id, templates.template_type_code  ORDER BY  COUNT(documents.template_id) DESC  LIMIT 1;",
    "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 312,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# templates ( template_id, template_type_code, version_number, date_effective_from, date_effective_to, template_details )\n# documents ( document_id, template_id, document_name, document_description, other_details )\n# ref_template_types ( template_type_code, template_type_description )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id",
    "difficulty": "extra",
    "question": "Return the id and type code of the template that is used for the greatest number of documents.",
    "pred": "SELECT templates.template_id, templates.template_type_code  FROM  templates  INNER JOIN documents ON templates.template_id = documents.template_id  GROUP BY templates.template_id, templates.template_type_code  HAVING COUNT(documents.document_id) = (     SELECT MAX(doc_count)     FROM (         SELECT COUNT(documents.document_id) AS doc_count          FROM documents         GROUP BY documents.template_id      ) AS counts  );",
    "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 322,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code, template_type_description )\n# templates ( template_type_code, template_id, version_number, date_effective_from, date_effective_to, template_details )\n# documents ( template_id, document_id, document_name, document_description, other_details )\n# paragraphs ( document_id, paragraph_id, paragraph_text, other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id",
    "difficulty": "easy",
    "question": "What are the different template type codes?",
    "pred": "SELECT DISTINCT template_type_code  FROM ref_template_types;",
    "gold": "SELECT DISTINCT template_type_code FROM Templates"
  },
  {
    "index": 330,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code, template_type_description )\n# templates ( template_type_code, template_id, version_number, date_effective_from, date_effective_to, template_details )\n# documents ( template_id, document_id, document_name, document_description, other_details )\n# paragraphs ( document_id, paragraph_id, paragraph_text, other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id",
    "difficulty": "medium",
    "question": "What are the different template type codes, and how many templates correspond to each?",
    "pred": "SELECT ref_template_types.template_type_code,      COUNT(templates.template_id) AS template_count     FROM      ref_template_types     LEFT JOIN      templates ON ref_template_types.template_type_code = templates.template_type_code     GROUP BY      ref_template_types.template_type_code;",
    "gold": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code"
  },
  {
    "index": 335,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# templates ( version_number, template_type_code, template_id )\n# ref_template_types ( template_type_code )\n# documents ( template_id, document_id )\n# paragraphs ( document_id, paragraph_text )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id",
    "difficulty": "medium",
    "question": "What the smallest version number and its template type code?",
    "pred": "SELECT MIN(templates.version_number), templates.template_type_code FROM templates GROUP BY templates.template_type_code ORDER BY MIN(templates.version_number) LIMIT 1;",
    "gold": "SELECT min(Version_Number) ,  template_type_code FROM Templates"
  },
  {
    "index": 336,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )\n# ref_template_types ( template_type_code, template_type_description )\n# documents ( document_id, template_id, document_name, document_description, other_details )\n# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id",
    "difficulty": "medium",
    "question": "Return the lowest version number, along with its corresponding template type code.",
    "pred": "SELECT template_type_code, MIN(version_number) AS \"min_version_number\"  FROM templates  GROUP BY template_type_code;",
    "gold": "SELECT min(Version_Number) ,  template_type_code FROM Templates"
  },
  {
    "index": 341,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# templates ( template_type_code, template_id, version_number, date_effective_from, date_effective_to, template_details )\n# ref_template_types ( template_type_code, template_type_description )\n# documents ( document_id, template_id, document_name, document_description, other_details )\n# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id",
    "difficulty": "medium",
    "question": "Show all template type codes and the number of documents using each type.",
    "pred": "SELECT ref_template_types.template_type_code,  COUNT(documents.document_id)  FROM ref_template_types  LEFT JOIN templates  ON ref_template_types.template_type_code = templates.template_type_code  LEFT JOIN documents  ON templates.template_id = documents.template_id  GROUP BY ref_template_types.template_type_code;",
    "gold": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"
  },
  {
    "index": 345,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code )\n# templates ( template_id, template_type_code, date_effective_from, date_effective_to )\n# documents ( document_id, template_id, document_name, document_description )\n# paragraphs ( paragraph_id, document_id, paragraph_text )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id",
    "difficulty": "hard",
    "question": "Show all template type codes that are not used by any document.",
    "pred": "SELECT ref_template_types.template_type_code  FROM  ref_template_types  LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  LEFT JOIN documents ON templates.template_id = documents.template_id  WHERE documents.template_id IS NULL;",
    "gold": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"
  },
  {
    "index": 346,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# ref_template_types ( template_type_code, template_type_description )\n# templates ( template_id, template_type_code, version_number, date_effective_from, date_effective_to, template_details )\n# documents ( document_id, template_id, document_name, document_description, other_details )\n# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id",
    "difficulty": "hard",
    "question": "What are the codes of template types that are not used for any document?",
    "pred": "SELECT ref_template_types.template_type_code  FROM  ref_template_types  LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  LEFT JOIN documents ON templates.template_id = documents.template_id  WHERE documents.template_id IS NULL;",
    "gold": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"
  },
  {
    "index": 359,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# documents ( document_name, document_id, template_id, document_description, other_details )\n# paragraphs ( paragraph_text, paragraph_id, document_id, other_details )\n# paragraphs.document_id = documents.document_id",
    "difficulty": "medium",
    "question": "How many paragraphs for the document with name 'Summer Show'?",
    "pred": "SELECT COUNT(paragraph_id) FROM paragraphs WHERE document_id = (     SELECT document_id     FROM documents     WHERE document_name = 'Summer Show' );",
    "gold": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"
  },
  {
    "index": 360,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# documents ( document_name, document_id, template_id, document_description, other_details )\n# paragraphs ( paragraph_text, paragraph_id, document_id, other_details )\n# paragraphs.document_id = documents.document_id",
    "difficulty": "medium",
    "question": "Count the number of paragraphs in the document named 'Summer Show'.",
    "pred": "SELECT COUNT(*)  FROM paragraphs  WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show');",
    "gold": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"
  },
  {
    "index": 362,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# paragraphs ( paragraph_text )\n# documents ( document_id, other_details )\n# templates ( template_id, template_details )\n# ref_template_types ( template_type_code, template_type_description )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id",
    "difficulty": "medium",
    "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
    "pred": "SELECT paragraphs.paragraph_text,  documents.other_details  FROM  documents  JOIN  paragraphs  ON  documents.document_id = paragraphs.document_id  WHERE  paragraphs.paragraph_text LIKE '%Korea %';",
    "gold": "select other_details from paragraphs where paragraph_text like 'korea'"
  },
  {
    "index": 363,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# documents ( document_id, template_id, document_name, document_description, other_details )\n# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )\n# templates ( template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details )\n# ref_template_types ( template_type_code, template_type_description )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id",
    "difficulty": "medium",
    "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
    "pred": "SELECT paragraph_id, paragraph_text FROM    paragraphs WHERE    document_id = (       SELECT document_id       FROM documents       WHERE document_name = 'Welcome to NY'    );",
    "gold": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"
  },
  {
    "index": 366,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# documents ( document_name, document_id, template_id )\n# paragraphs ( paragraph_text, document_id, paragraph_id )\n# ref_template_types ( template_type_code, template_type_description )\n# templates ( template_id, template_type_code, template_details, version_number, date_effective_from, date_effective_to )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id",
    "difficulty": "medium",
    "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
    "pred": "SELECT paragraph_text FROM   paragraphs WHERE   document_id = (     SELECT       document_id     FROM       documents     WHERE       document_name = 'Customer reviews'   );",
    "gold": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""
  },
  {
    "index": 373,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# paragraphs ( document_id, paragraph_id, paragraph_text, other_details )\n# documents ( document_id, document_name, template_id, document_description, other_details )\n# paragraphs.document_id = documents.document_id",
    "difficulty": "extra",
    "question": "What is the document id and name with greatest number of paragraphs?",
    "pred": "SELECT documents.document_id, documents.document_name FROM documents JOIN ( SELECT document_id, COUNT(*) AS paragraph_count FROM paragraphs GROUP BY document_id ) AS paragraph_counts ON documents.document_id = paragraph_counts.document_id ORDER BY paragraph_counts.paragraph_count DESC LIMIT 1;",
    "gold": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 374,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# documents ( document_id, document_name )\n# paragraphs ( paragraph_id, document_id, paragraph_text, other_details )\n# paragraphs.document_id = documents.document_id",
    "difficulty": "extra",
    "question": "Return the id and name of the document with the most paragraphs.",
    "pred": "SELECT documents.document_id, documents.document_name FROM     documents JOIN     paragraphs ON paragraphs.document_id = documents.document_id GROUP BY     documents.document_id, documents.document_name ORDER BY     COUNT(paragraphs.paragraph_id) DESC LIMIT 1;",
    "gold": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 376,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# paragraphs ( document_id, paragraph_id, paragraph_text, other_details )\n# documents ( document_id, template_id, document_name, document_description, other_details )\n# templates ( template_id, template_type_code, version_number, date_effective_from, date_effective_to, template_details )\n# ref_template_types ( template_type_code, template_type_description )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id",
    "difficulty": "hard",
    "question": "Return the id of the document with the fewest paragraphs.",
    "pred": "SELECT documents.document_id FROM documents LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY COUNT(paragraphs.paragraph_id) ASC LIMIT 1;",
    "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "index": 379,
    "db_id": "cre_Doc_Template_Mgt",
    "db_info": "# paragraphs ( document_id, paragraph_text, paragraph_id, other_details )\n# documents ( document_id, document_name, document_description, template_id )\n# ref_template_types ( template_type_code, template_type_description )\n# templates ( template_id, template_type_code, version_number, date_effective_from, date_effective_to, template_details )\n# templates.template_type_code = ref_template_types.template_type_code\n# documents.template_id = templates.template_id\n# paragraphs.document_id = documents.document_id",
    "difficulty": "hard",
    "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
    "pred": "SELECT documents.document_id  FROM  documents  JOIN  paragraphs  ON  documents.document_id = paragraphs.document_id  WHERE  paragraphs.paragraph_text LIKE '%Brazil%'  OR  paragraphs.paragraph_text LIKE '%Ireland%';",
    "gold": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'"
  },
  {
    "index": 391,
    "db_id": "course_teach",
    "db_info": "# teacher ( age, hometown, teacher_id, name )\n# course_arrange ( teacher_id, course_id, grade )\n# course ( course_id, course )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id",
    "difficulty": "medium",
    "question": "What is the hometown of the youngest teacher?",
    "pred": "SELECT teacher.hometown FROM     teacher WHERE     teacher.age = (         SELECT             MIN(age)         FROM             teacher     );",
    "gold": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"
  },
  {
    "index": 404,
    "db_id": "course_teach",
    "db_info": "# teacher ( name )\n# course_arrange ( teacher_id, course_id )\n# course_arrange.teacher_id = teacher.teacher_id",
    "difficulty": "hard",
    "question": "What are the names of the people who teach math courses?",
    "pred": "SELECT teacher.name  FROM  teacher  JOIN  course_arrange  ON  teacher.teacher_id = course_arrange.teacher_id  WHERE  course_arrange.course_id IN (SELECT course_id FROM course WHERE course_name = 'math');",
    "gold": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""
  },
  {
    "index": 407,
    "db_id": "course_teach",
    "db_info": "# teacher ( teacher_id, name, age, hometown )\n# course ( course_id, course )\n# course_arrange ( course_id, teacher_id, grade )\n# course_arrange.teacher_id = teacher.teacher_id\n# course_arrange.course_id = course.course_id",
    "difficulty": "medium",
    "question": "Show names of teachers that teach at least two courses.",
    "pred": "SELECT teacher.name FROM     teacher JOIN     course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY     teacher.teacher_id HAVING     COUNT(DISTINCT course_arrange.course_id) >= 2;",
    "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"
  },
  {
    "index": 420,
    "db_id": "museum_visit",
    "db_info": "# visit ( total_spent, museum_id, visitor_id, num_of_ticket )\n# visitor ( id, name, level_of_membership, age )\n# visit.visitor_id = visitor.id",
    "difficulty": "extra",
    "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
    "pred": "SELECT visitor.id, visitor.name, visitor.level_of_membership   FROM visitor   WHERE visitor.id IN (          SELECT visitor_id           FROM visit           GROUP BY visitor_id           ORDER BY SUM(total_spent) DESC           LIMIT 1 );",
    "gold": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1"
  },
  {
    "index": 426,
    "db_id": "museum_visit",
    "db_info": "# visitor ( name, id )\n# museum ( name, open_year, museum_id )\n# visit ( museum_id, visitor_id, num_of_ticket, total_spent )\n# visit.visitor_id = visitor.id\n# visit.museum_id = museum.museum_id",
    "difficulty": "extra",
    "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
    "pred": "SELECT visitor.name FROM     visitor WHERE     visitor.id IN (         SELECT             visit.visitor_id         FROM             visit             INNER JOIN museum ON visit.museum_id = museum.museum_id         WHERE             museum.open_year < 2009     )     AND visitor.id IN (         SELECT             visit.visitor_id         FROM             visit             INNER JOIN museum ON visit.museum_id = museum.museum_id         WHERE             museum.open_year > 2011     );",
    "gold": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011"
  },
  {
    "index": 433,
    "db_id": "wta_1",
    "db_info": "# players ( first_name, birth_date, player_id )\n# matches ( winner_name, winner_id, winner_ioc, winner_age )\n# rankings ( ranking_date, player_id )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id",
    "difficulty": "medium",
    "question": "List the first name and birth date of all players from the country with code USA.",
    "pred": "SELECT first_name, birth_date  FROM players  JOIN matches  ON players.player_id = matches.winner_id  WHERE matches.winner_ioc = 'USA'",
    "gold": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"
  },
  {
    "index": 434,
    "db_id": "wta_1",
    "db_info": "# players ( first_name, birth_date, player_id )\n# rankings ( player_id, ranking_date )\n# matches ( winner_id, loser_id, winner_name, loser_name, winner_age, loser_age )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id",
    "difficulty": "medium",
    "question": "What are the first names and birth dates of players from the USA?",
    "pred": "SELECT first_name, birth_date  FROM players  WHERE country = 'USA'",
    "gold": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"
  },
  {
    "index": 447,
    "db_id": "wta_1",
    "db_info": "# matches ( winner_id, winner_name, year, loser_id )\n# players ( player_id, first_name, last_name )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id",
    "difficulty": "hard",
    "question": "List the names of all winners who played in both 2013 and 2016.",
    "pred": "SELECT DISTINCT winner_name  FROM  matches  WHERE  year = 2013  AND  winner_id IN (     SELECT winner_id      FROM matches      WHERE year = 2016 );",
    "gold": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016"
  },
  {
    "index": 448,
    "db_id": "wta_1",
    "db_info": "# players ( player_id, first_name, last_name )\n# matches ( winner_name, winner_id, year )\n# rankings ( ranking_date, ranking, player_id, ranking_points, tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id",
    "difficulty": "hard",
    "question": "What are the names of players who won in both 2013 and 2016?",
    "pred": "SELECT p.first_name, p.last_name  FROM  players p  JOIN matches m1 ON p.player_id = m1.winner_id  JOIN matches m2 ON p.player_id = m2.winner_id  WHERE m1.year = 2013 AND m2.year = 2016;",
    "gold": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016"
  },
  {
    "index": 453,
    "db_id": "wta_1",
    "db_info": "# players ( first_name, country_code, player_id )\n# rankings ( player_id, ranking_date, ranking_points, ranking, tours )\n# rankings.player_id = players.player_id",
    "difficulty": "medium",
    "question": "Find the first name and country code of the oldest player.",
    "pred": "SELECT players.first_name, players.country_code  FROM  players  ORDER BY  players.player_id DESC  LIMIT 1;",
    "gold": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"
  },
  {
    "index": 454,
    "db_id": "wta_1",
    "db_info": "# players ( first_name, country_code, player_id )\n# rankings ( ranking_date, player_id, ranking_points, tours, ranking )\n# rankings.player_id = players.player_id",
    "difficulty": "medium",
    "question": "What is the first name and country code of the oldest player?",
    "pred": "SELECT players.first_name, players.country_code  FROM  players  JOIN  rankings  ON  players.player_id = rankings.player_id  ORDER BY  rankings.ranking_date DESC  LIMIT 1;",
    "gold": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"
  },
  {
    "index": 456,
    "db_id": "wta_1",
    "db_info": "# players ( player_id, first_name, last_name, birth_date, hand, country_code )\n# matches ( winner_id, loser_id, winner_name, loser_name )\n# rankings ( player_id, ranking_date, ranking, ranking_points, tours )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id",
    "difficulty": "medium",
    "question": "What are the full names of all players, sorted by birth date?",
    "pred": "SELECT first_name || ' ' || last_name AS full_name   FROM players   ORDER BY birth_date;",
    "gold": "SELECT first_name ,  last_name FROM players ORDER BY birth_date"
  },
  {
    "index": 459,
    "db_id": "wta_1",
    "db_info": "# rankings ( player_id, ranking_date, ranking, ranking_points, tours )\n# players ( player_id, first_name, country_code, last_name )\n# matches ( winner_id, loser_id, tourney_id, tourney_name, tourney_date )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id",
    "difficulty": "hard",
    "question": "Find the first name and country code of the player who did the most number of tours.",
    "pred": "SELECT players.first_name, players.country_code  FROM  players  JOIN  rankings  ON  players.player_id = rankings.player_id  GROUP BY  players.player_id  ORDER BY  SUM(rankings.tours) DESC  LIMIT 1;",
    "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"
  },
  {
    "index": 460,
    "db_id": "wta_1",
    "db_info": "# players ( player_id, first_name, last_name, birth_date, country_code, hand )\n# rankings ( ranking_date, ranking, player_id, ranking_points, tours )\n# rankings.player_id = players.player_id",
    "difficulty": "hard",
    "question": "What is the first name and country code of the player with the most tours?",
    "pred": "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY SUM(rankings.tours) DESC LIMIT 1;",
    "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"
  },
  {
    "index": 463,
    "db_id": "wta_1",
    "db_info": "# matches ( winner_name, winner_rank_points, winner_id )\n# players ( player_id )\n# rankings ( ranking_date, ranking, ranking_points, player_id )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id",
    "difficulty": "hard",
    "question": "Find the name and rank points of the winner who won the most times.",
    "pred": "SELECT matches.winner_name, matches.winner_rank_points FROM matches GROUP BY matches.winner_name, matches.winner_rank_points ORDER BY COUNT(*) DESC, matches.winner_rank_points DESC LIMIT 1;",
    "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 464,
    "db_id": "wta_1",
    "db_info": "# matches ( winner_name, winner_id, winner_rank_points )\n# players ( player_id, first_name, last_name )\n# rankings ( player_id, ranking_points )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id",
    "difficulty": "hard",
    "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
    "pred": "SELECT players.first_name || ' ' || players.last_name AS winner_name, rankings.ranking_points AS winner_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.winner_id = (     SELECT     winner_id     FROM (         SELECT          winner_id,         COUNT(*) as total_wins         FROM         matches         GROUP BY winner_id         ORDER BY total_wins DESC LIMIT 1     ) );",
    "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 469,
    "db_id": "wta_1",
    "db_info": "# players ( player_id, first_name, last_name, hand, birth_date, country_code )\n# rankings ( ranking_date, ranking, player_id, ranking_points, tours )\n# rankings.player_id = players.player_id",
    "difficulty": "medium",
    "question": "Find the average ranking for each player and their first name.",
    "pred": "SELECT players.first_name,  AVG(rankings.ranking) as Average_Ranking FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;",
    "gold": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
  },
  {
    "index": 471,
    "db_id": "wta_1",
    "db_info": "# players ( player_id, first_name, last_name, hand, birth_date, country_code )\n# rankings ( ranking_date, ranking, player_id, ranking_points, tours )\n# rankings.player_id = players.player_id",
    "difficulty": "medium",
    "question": "Find the total ranking points for each player and their first name.",
    "pred": "SELECT players.first_name,  SUM(rankings.ranking_points) AS total_ranking_points  FROM players  JOIN rankings  ON players.player_id = rankings.player_id  GROUP BY players.player_id, players.first_name;",
    "gold": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
  },
  {
    "index": 472,
    "db_id": "wta_1",
    "db_info": "# players ( first_name, player_id, last_name, hand, birth_date, country_code )\n# rankings ( player_id, ranking_date, ranking, ranking_points, tours )\n# rankings.player_id = players.player_id",
    "difficulty": "medium",
    "question": "What are the first names of all players, and their total ranking points?",
    "pred": "SELECT players.first_name, SUM(rankings.ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.player_id;",
    "gold": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
  },
  {
    "index": 480,
    "db_id": "wta_1",
    "db_info": "# rankings ( ranking_date, tours )\n# players ( player_id )\n# matches ( tourney_date )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id",
    "difficulty": "medium",
    "question": "How many total tours were there for each ranking date?",
    "pred": "SELECT ranking_date, COUNT(DISTINCT tours)  FROM  rankings  GROUP BY  ranking_date;",
    "gold": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"
  },
  {
    "index": 482,
    "db_id": "wta_1",
    "db_info": "# matches ( winner_id, loser_id, tourney_date, match_num, best_of, draw_size, round, score, surface, tourney_id, tourney_level, tourney_name, minutes )\n# players ( player_id, first_name, last_name, hand, birth_date, country_code )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id",
    "difficulty": "medium",
    "question": "How many matches were played in each year?",
    "pred": "SELECT COUNT(*) as num_matches, STRFTIME('%Y', tourney_date) as year FROM matches GROUP BY STRFTIME('%Y', tourney_date);",
    "gold": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR"
  },
  {
    "index": 483,
    "db_id": "wta_1",
    "db_info": "# players ( first_name, last_name, player_id )\n# matches ( winner_name, winner_rank, winner_age )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id",
    "difficulty": "medium",
    "question": "Find the name and rank of the 3 youngest winners across all matches.",
    "pred": "SELECT players.first_name, players.last_name, matches.winner_rank  FROM players  JOIN matches ON matches.winner_id = players.player_id  ORDER BY matches.winner_age ASC  LIMIT 3;",
    "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"
  },
  {
    "index": 487,
    "db_id": "wta_1",
    "db_info": "# matches ( winner_name, winner_ioc, winner_age, winner_rank_points )\n# players ( first_name, country_code, birth_date )\n# rankings ( ranking_points, player_id )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id",
    "difficulty": "hard",
    "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
    "pred": "SELECT players.first_name, players.country_code, players.birth_date FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY matches.winner_rank_points DESC LIMIT 1;",
    "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"
  },
  {
    "index": 493,
    "db_id": "battle_death",
    "db_info": "# battle ( name, date, result )\n# ship ( id )\n# death ( caused_by_ship_id )\n# ship.lost_in_battle = battle.id\n# death.caused_by_ship_id = ship.id",
    "difficulty": "medium",
    "question": "List the name, date and result of each battle.",
    "pred": "SELECT name, date, result  FROM  battle;",
    "gold": "SELECT name ,  date FROM battle"
  },
  {
    "index": 500,
    "db_id": "battle_death",
    "db_info": "# death ( injured, caused_by_ship_id, id, note, killed )\n# ship ( id, name, tonnage, ship_type, location, disposition_of_ship, lost_in_battle )\n# death.caused_by_ship_id = ship.id",
    "difficulty": "extra",
    "question": "What is the ship id and name that caused most total injuries?",
    "pred": "SELECT ship.id, ship.name  FROM  ship  JOIN  death  ON  ship.id = death.caused_by_ship_id  GROUP BY  ship.id, ship.name  ORDER BY  SUM(death.injured) DESC  LIMIT 1;",
    "gold": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 501,
    "db_id": "battle_death",
    "db_info": "# battle ( name )\n# ship ( lost_in_battle )\n# ship.lost_in_battle = battle.id",
    "difficulty": "medium",
    "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
    "pred": "SELECT DISTINCT b.name   FROM battle b   JOIN ship s1 ON s1.lost_in_battle = b.id   JOIN ship s2 ON s2.lost_in_battle = b.id  WHERE b.name IN ('Kaloyan', 'Baldwin I') AND s1.lost_in_battle = s2.lost_in_battle;",
    "gold": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"
  },
  {
    "index": 505,
    "db_id": "battle_death",
    "db_info": "# battle ( name, result, bulgarian_commander )\n# ship ( lost_in_battle, name, location )\n# ship.lost_in_battle = battle.id",
    "difficulty": "extra",
    "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
    "pred": "SELECT battle.name, battle.result, battle.bulgarian_commander  FROM  battle  WHERE  battle.name NOT IN (      SELECT      battle.name      FROM      battle      JOIN      ship ON ship.lost_in_battle = battle.name      WHERE      ship.location = 'English Channel' );",
    "gold": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'"
  },
  {
    "index": 515,
    "db_id": "student_transcripts_tracking",
    "db_info": "# departments ( department_id, department_name )\n# degree_programs ( department_id, degree_program_id )\n# degree_programs.department_id = departments.department_id",
    "difficulty": "extra",
    "question": "Which department offers the most number of degrees? List department name and id.",
    "pred": "SELECT departments.department_name, departments.department_id FROM departments INNER JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_name, departments.department_id ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1;",
    "gold": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 516,
    "db_id": "student_transcripts_tracking",
    "db_info": "# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )\n# departments ( department_id, department_name, department_description, other_details )\n# courses ( course_id, course_name, course_description, other_details )\n# sections ( section_id, course_id, section_name, section_description, other_details )\n# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )\n# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id",
    "difficulty": "extra",
    "question": "What is the name and id of the department with the most number of degrees ?",
    "pred": "SELECT departments.department_name, departments.department_id FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_name, departments.department_id HAVING COUNT(degree_programs.degree_program_id) = (     SELECT MAX(degree_count)     FROM (         SELECT COUNT(degree_programs.degree_program_id) AS degree_count         FROM departments         JOIN degree_programs ON departments.department_id = degree_programs.department_id         GROUP BY departments.department_id     ) AS counts );",
    "gold": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1"
  },
  {
    "index": 521,
    "db_id": "student_transcripts_tracking",
    "db_info": "# departments ( department_id, department_name, department_description, other_details )\n# degree_programs ( department_id, degree_program_id, degree_summary_name, degree_summary_description, other_details )\n# degree_programs.department_id = departments.department_id",
    "difficulty": "medium",
    "question": "How many degrees does the engineering department offer?",
    "pred": "SELECT COUNT(*)  FROM degree_programs  WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering');",
    "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"
  },
  {
    "index": 522,
    "db_id": "student_transcripts_tracking",
    "db_info": "# departments ( department_id, department_name, department_description, other_details )\n# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )\n# courses ( course_id, course_name, course_description, other_details )\n# degree_programs.department_id = departments.department_id",
    "difficulty": "medium",
    "question": "How many degrees does the engineering department have?",
    "pred": "SELECT COUNT(degree_program_id) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering');",
    "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"
  },
  {
    "index": 525,
    "db_id": "student_transcripts_tracking",
    "db_info": "# courses ( course_id, course_name )\n# sections ( section_id, course_id, section_name )\n# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )\n# departments ( department_id, department_name )\n# degree_programs ( degree_program_id, department_id, degree_summary_name )\n# semesters ( semester_id, semester_name )\n# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )\n# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )\n# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )\n# transcripts ( transcript_id, transcript_date, other_details )\n# transcript_contents ( student_course_id, transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id",
    "difficulty": "medium",
    "question": "What are the names and id of courses having at most 2 sections?",
    "pred": "SELECT courses.course_name, courses.course_id FROM courses LEFT JOIN sections ON courses.course_id = sections.course_id GROUP BY courses.course_name, courses.course_id   HAVING COUNT(sections.section_id) <= 2;",
    "gold": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"
  },
  {
    "index": 526,
    "db_id": "student_transcripts_tracking",
    "db_info": "# courses ( course_id, course_name, course_description, other_details )\n# sections ( section_id, course_id, section_name, section_description, other_details )\n# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )\n# departments ( department_id, department_name, department_description, other_details )\n# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )\n# semesters ( semester_id, semester_name, semester_description, other_details )\n# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )\n# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )\n# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )\n# transcripts ( transcript_id, transcript_date, other_details )\n# transcript_contents ( student_course_id, transcript_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id",
    "difficulty": "medium",
    "question": "What are the names and ids of every course with less than 2 sections?",
    "pred": "SELECT courses.course_name, courses.course_id  FROM  courses  WHERE  course_id NOT IN (     SELECT      course_id      FROM      sections      GROUP BY      course_id      HAVING      COUNT(section_id) > 1 );",
    "gold": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"
  },
  {
    "index": 529,
    "db_id": "student_transcripts_tracking",
    "db_info": "# semesters ( semester_id, semester_name, semester_description, other_details )\n# student_enrolment ( semester_id, student_enrolment_id, degree_program_id, student_id, other_details )\n# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id",
    "difficulty": "extra",
    "question": "What is the semester which most student registered in? Show both the name and the id.",
    "pred": "SELECT semesters.semester_name, semesters.semester_id FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;",
    "gold": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 530,
    "db_id": "student_transcripts_tracking",
    "db_info": "# semesters ( semester_id, semester_name, semester_description )\n# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id )\n# students ( student_id, first_name, last_name )\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id",
    "difficulty": "extra",
    "question": "For each semester, what is the name and id of the one with the most students registered?",
    "pred": "SELECT semesters.semester_name, semesters.semester_id  FROM semesters  JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id  GROUP BY semesters.semester_id, semesters.semester_name  HAVING COUNT(student_enrolment.student_id) = (     SELECT MAX(student_count)     FROM (         SELECT COUNT(student_enrolment.student_id) as student_count         FROM semesters          JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id          GROUP BY semesters.semester_id     ) as counts );",
    "gold": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 534,
    "db_id": "student_transcripts_tracking",
    "db_info": "# students ( student_id, first_name, middle_name, last_name, current_address_id, permanent_address_id, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )\n# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )\n# student_enrolment.student_id = students.student_id",
    "difficulty": "medium",
    "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
    "pred": "SELECT students.first_name,  students.middle_name,  students.last_name,  students.student_id  FROM students  JOIN student_enrolment  ON students.student_id = student_enrolment.student_id  GROUP BY students.student_id, student_enrolment.semester_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2;",
    "gold": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"
  },
  {
    "index": 536,
    "db_id": "student_transcripts_tracking",
    "db_info": "# students ( first_name, middle_name, last_name, student_id, current_address_id, permanent_address_id, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )\n# degree_programs ( department_id, degree_program_id, degree_summary_name, degree_summary_description, other_details )",
    "difficulty": "hard",
    "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
    "pred": "SELECT students.first_name, students.middle_name, students.last_name   FROM  students   INNER JOIN  degree_programs ON students.other_student_details = degree_programs.degree_program_id   WHERE  degree_programs.degree_summary_name LIKE '%Bachelors%';",
    "gold": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"
  },
  {
    "index": 539,
    "db_id": "student_transcripts_tracking",
    "db_info": "# student_enrolment ( degree_program_id, student_enrolment_id )\n# degree_programs ( degree_program_id, degree_summary_name, degree_summary_description )\n# students ( student_id )\n# student_enrolment_courses ( student_enrolment_id, course_id )\n# courses ( course_id )\n# semesters ( semester_id )\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id",
    "difficulty": "extra",
    "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
    "pred": "SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_program_id, degree_programs.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;",
    "gold": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 541,
    "db_id": "student_transcripts_tracking",
    "db_info": "# student_enrolment ( student_id, degree_program_id )\n# students ( first_name, middle_name, last_name )\n# student_enrolment.student_id = students.student_id",
    "difficulty": "extra",
    "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
    "pred": "SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(*) as enrollments  FROM  student_enrolment  JOIN  students  ON  student_enrolment.student_id = students.student_id  GROUP BY  students.student_id, students.first_name, students.middle_name, students.last_name ORDER BY  enrollments DESC  LIMIT 1;",
    "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 542,
    "db_id": "student_transcripts_tracking",
    "db_info": "# students ( student_id, first_name, middle_name, last_name )\n# student_enrolment ( student_id, student_enrolment_id )\n# degree_programs ( degree_program_id )\n# departments ( department_id )\n# transcripts ( transcript_id )\n# transcript_contents ( student_course_id )\n# degree_programs.department_id = departments.department_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# transcript_contents.transcript_id = transcripts.transcript_id",
    "difficulty": "extra",
    "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
    "pred": "SELECT students.first_name,  students.middle_name,  students.last_name,  students.student_id,  COUNT(student_enrolment.student_enrolment_id) AS enrollments  FROM students  INNER JOIN student_enrolment  ON students.student_id = student_enrolment.student_id  GROUP BY students.student_id  ORDER BY enrollments DESC  LIMIT 1;",
    "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 545,
    "db_id": "student_transcripts_tracking",
    "db_info": "# student_enrolment ( student_enrolment_id, student_id, degree_program_id, semester_id, other_details )\n# courses ( course_id, course_name, course_description, other_details )",
    "difficulty": "easy",
    "question": "What are all the course names of the courses which ever have students enrolled in?",
    "pred": "SELECT DISTINCT c.course_name  FROM  courses c  INNER JOIN student_enrolment se  ON c.course_id = se.course_id;",
    "gold": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"
  },
  {
    "index": 549,
    "db_id": "student_transcripts_tracking",
    "db_info": "# students ( student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details )\n# addresses ( address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details )\n# degree_programs ( degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details )\n# student_enrolment ( student_enrolment_id , degree_program_id , semester_id , student_id , other_details )\n# semesters ( semester_id , semester_name , semester_description , other_details )\n# courses ( course_id , course_name , course_description , other_details )\n# departments ( department_id , department_name , department_description , other_details )\n# transcripts ( transcript_id , transcript_date , other_details )\n# student_enrolment_courses ( student_course_id , course_id , student_enrolment_id )\n# sections ( section_id , course_id , section_name , section_description , other_details )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id",
    "difficulty": "extra",
    "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
    "pred": "SELECT last_name  FROM  students   INNER JOIN addresses AS current_address  ON students.current_address_id = current_address.address_id   LEFT JOIN student_enrolment  ON students.student_id = student_enrolment.student_id   WHERE  current_address.state_province_county = 'North Carolina'   AND student_enrolment.degree_program_id IS NULL;",
    "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
  },
  {
    "index": 550,
    "db_id": "student_transcripts_tracking",
    "db_info": "# students ( last_name, current_address_id, student_id, permanent_address_id, first_name, middle_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )\n# addresses ( address_id, state_province_county, line_1, line_2, line_3, city, zip_postcode, country, other_address_details )\n# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )\n# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id",
    "difficulty": "extra",
    "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
    "pred": "SELECT last_name  FROM  students  JOIN  addresses ON students.current_address_id = addresses.address_id  WHERE  addresses.state_province_county = 'North Carolina' AND students.student_id NOT IN (SELECT student_id FROM student_enrolment)",
    "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
  },
  {
    "index": 557,
    "db_id": "student_transcripts_tracking",
    "db_info": "# transcripts ( transcript_date, other_details )\n# students ( first_name, middle_name, last_name, date_first_registered )",
    "difficulty": "medium",
    "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
    "pred": "SELECT students.first_name, students.middle_name, students.last_name FROM     students ORDER BY     students.date_first_registered ASC LIMIT 1;",
    "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"
  },
  {
    "index": 558,
    "db_id": "student_transcripts_tracking",
    "db_info": "# students ( first_name, middle_name, last_name )",
    "difficulty": "medium",
    "question": "What is the first, middle, and last name of the earliest school graduate?",
    "pred": "SELECT first_name, middle_name, last_name  FROM students  WHERE graduation_date =  (SELECT MIN(graduation_date)  FROM students);  The SQL cannot be fixed as there is no graduation_date column in the students table. The structure of the students table should be updated to include this column.",
    "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"
  },
  {
    "index": 560,
    "db_id": "student_transcripts_tracking",
    "db_info": "# students ( first_name, permanent_address_id, current_address_id )\n# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country )\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id",
    "difficulty": "easy",
    "question": "What is the first name of the student whose permanent address is different from his or her current one?",
    "pred": "SELECT students.first_name FROM     students JOIN     addresses AS permanent ON students.permanent_address_id = permanent.address_id JOIN     addresses AS current ON students.current_address_id = current.address_id WHERE     permanent.line_1 <> current.line_1;",
    "gold": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id"
  },
  {
    "index": 561,
    "db_id": "student_transcripts_tracking",
    "db_info": "# students ( current_address_id, permanent_address_id, student_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )\n# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id",
    "difficulty": "extra",
    "question": "Which address holds the most number of students currently? List the address id and all lines.",
    "pred": "SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM students JOIN addresses ON students.current_address_id = addresses.address_id GROUP BY addresses.address_id, addresses.line_1, addresses.line_2 HAVING COUNT(*) = (     SELECT COUNT(*)      FROM students      JOIN addresses ON students.current_address_id = addresses.address_id     GROUP BY addresses.address_id     ORDER BY COUNT(*) DESC     LIMIT 1 ) LIMIT 1;",
    "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 572,
    "db_id": "student_transcripts_tracking",
    "db_info": "# courses ( course_id, course_name, course_description, other_details )\n# transcripts ( transcript_id, transcript_date, other_details )\n# transcript_contents ( student_course_id, transcript_id )\n# student_enrolment_courses ( student_course_id, course_id, student_enrolment_id )\n# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )\n# sections ( section_id, course_id, section_name, section_description, other_details )\n# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )\n# student_enrolment ( student_enrolment_id, degree_program_id, semester_id, student_id, other_details )\n# semesters ( semester_id, semester_name, semester_description, other_details )\n# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )\n# departments ( department_id, department_name, department_description, other_details )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id",
    "difficulty": "hard",
    "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
    "pred": "SELECT MAX(count_course) AS max_course_count, student_course_id AS enrollment_id  FROM (     SELECT student_course_id, COUNT(*) AS count_course      FROM transcript_contents      GROUP BY student_course_id ) AS subquery;",
    "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 573,
    "db_id": "student_transcripts_tracking",
    "db_info": "# transcripts ( transcript_date, transcript_id, other_details )\n# transcript_contents ( transcript_id, student_course_id )\n# transcript_contents.transcript_id = transcripts.transcript_id",
    "difficulty": "extra",
    "question": "Show the date of the transcript which shows the least number of results, also list the id.",
    "pred": "SELECT transcripts.transcript_date, transcripts.transcript_id FROM    transcripts INNER JOIN    transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY    transcripts.transcript_date, transcripts.transcript_id ORDER BY    COUNT(*) ASC LIMIT 1;",
    "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "index": 574,
    "db_id": "student_transcripts_tracking",
    "db_info": "# transcripts ( transcript_date, transcript_id )\n# addresses ( address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )\n# courses ( course_id, course_name, course_description, other_details )\n# departments ( department_id, department_name, department_description, other_details )\n# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )\n# sections ( section_id, course_id, section_name, section_description, other_details )\n# semesters ( semester_id, semester_name, semester_description, other_details )\n# students ( student_id )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id",
    "difficulty": "extra",
    "question": "What is the date and id of the transcript with the least number of results?",
    "pred": "SELECT transcript_date, transcript_id  FROM transcripts  GROUP BY transcript_date, transcript_id   HAVING COUNT(*) = (     SELECT MIN(count_results)      FROM (         SELECT COUNT(*) as count_results          FROM transcripts          GROUP BY transcript_date, transcript_id)     )   LIMIT 1;",
    "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "index": 575,
    "db_id": "student_transcripts_tracking",
    "db_info": "# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details )\n# students ( student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )\n# semesters ( semester_id, semester_name, semester_description, other_details )",
    "difficulty": "extra",
    "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
    "pred": "SELECT semesters.semester_id  FROM  semesters  JOIN  students  ON  semesters.semester_id = students.date_first_registered  JOIN  degree_programs  ON  students.other_student_details = degree_programs.degree_program_id  WHERE  degree_programs.degree_summary_name = 'Master'  INTERSECT  SELECT  semesters.semester_id  FROM  semesters  JOIN  students  ON  semesters.semester_id = students.date_first_registered  JOIN  degree_programs  ON  students.other_student_details = degree_programs.degree_program_id  WHERE  degree_programs.degree_summary_name = 'Bachelor';",
    "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"
  },
  {
    "index": 576,
    "db_id": "student_transcripts_tracking",
    "db_info": "# student_enrolment ( degree_program_id, semester_id, student_id )\n# degree_programs ( degree_program_id, department_id )\n# semesters ( semester_id, semester_name, semester_description )\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id",
    "difficulty": "extra",
    "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
    "pred": "SELECT se.semester_id  FROM student_enrolment se  JOIN degree_programs dp  ON se.degree_program_id = dp.degree_program_id  WHERE dp.department_id IN ('Masters', 'Bachelors')  GROUP BY se.semester_id  HAVING COUNT(DISTINCT dp.department_id) >= 2;",
    "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"
  },
  {
    "index": 580,
    "db_id": "student_transcripts_tracking",
    "db_info": "# students ( last_name, first_name, middle_name, student_id, current_address_id, permanent_address_id, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details )\n# addresses ( line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details )\n# degree_programs ( degree_summary_name, degree_summary_description, other_details )\n# departments ( department_name, department_description, other_details )\n# courses ( course_name, course_description, other_details )\n# sections ( section_name, section_description, other_details )\n# semesters ( semester_name, semester_description, other_details )\n# student_enrolment ( other_details )\n# student_enrolment_courses (  )\n# transcripts ( transcript_date, other_details )\n# transcript_contents (  )\n# degree_programs.department_id = departments.department_id\n# sections.course_id = courses.course_id\n# students.permanent_address_id = addresses.address_id\n# students.current_address_id = addresses.address_id\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n# student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id\n# student_enrolment_courses.course_id = courses.course_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n# transcript_contents.student_course_id = student_enrolment_courses.student_course_id",
    "difficulty": "easy",
    "question": "What other details can you tell me about students in reverse alphabetical order?",
    "pred": "SELECT students.last_name,  students.first_name,  students.middle_name,  students.student_id,  students.cell_mobile_number,  students.email_address,  students.ssn,  students.date_first_registered,  students.date_left,  students.other_student_details, addresses.line_1, addresses.line_2, addresses.line_3, addresses.city, addresses.zip_postcode, addresses.state_province_county, addresses.country, addresses.other_address_details FROM students LEFT JOIN addresses AS current_addresses ON students.current_address_id = current_addresses.address_id LEFT JOIN addresses AS permanent_addresses ON students.permanent_address_id = permanent_addresses.address_id ORDER BY students.last_name DESC;",
    "gold": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"
  },
  {
    "index": 602,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( series_name, package_option )\n# tv_series ( channel )\n# tv_series.channel = tv_channel.id",
    "difficulty": "easy",
    "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
    "pred": "SELECT tv_channel.package_option  FROM tv_channel  JOIN tv_series ON tv_channel.series_name = tv_series.channel  WHERE tv_channel.series_name = 'Sky Radio';",
    "gold": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";"
  },
  {
    "index": 631,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( hight_definition_tv, package_option, id )\n# tv_series ( channel )\n# cartoon ( channel, title )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id",
    "difficulty": "medium",
    "question": "Find the package choice and series name of the TV channel that has high definition TV.",
    "pred": "SELECT tv_channel.package_option, cartoon.title AS series_name  FROM  tv_channel  JOIN  cartoon ON tv_channel.id = cartoon.channel  WHERE  tv_channel.hight_definition_tv = 1;",
    "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""
  },
  {
    "index": 632,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( hight_definition_tv, package_option, id, series_name )\n# tv_series ( channel, id )\n# cartoon ( channel, title, id )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id",
    "difficulty": "medium",
    "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
    "pred": "SELECT tv_channel.package_option,  tv_series.series_name   FROM tv_channel   JOIN tv_series ON tv_channel.id = tv_series.channel  WHERE tv_channel.hight_definition_tv = 1;",
    "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""
  },
  {
    "index": 635,
    "db_id": "tvshow",
    "db_info": "# cartoon ( written_by, title, directed_by, original_air_date, production_code, channel )\n# tv_channel ( country, series_name, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )\n# cartoon.channel = tv_channel.id",
    "difficulty": "hard",
    "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
    "pred": "SELECT tv_channel.country FROM tv_channel LEFT JOIN cartoon ON cartoon.channel = tv_channel.id WHERE tv_channel.id NOT IN (     SELECT      cartoon.channel     FROM      cartoon     WHERE      cartoon.written_by = 'Todd Casey' );",
    "gold": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
  },
  {
    "index": 636,
    "db_id": "tvshow",
    "db_info": "# cartoon ( written_by, id, title )\n# tv_channel ( id, country )\n# tv_series ( channel, id, episode )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id",
    "difficulty": "hard",
    "question": "What are the countries that are not playing cartoons written by Todd Casey?",
    "pred": "SELECT tv_channel.country  FROM  tv_channel  WHERE  tv_channel.id NOT IN (      SELECT      tv_channel.id      FROM      cartoon      INNER JOIN      tv_channel      ON      cartoon.channel = tv_channel.id      WHERE      cartoon.written_by = 'Todd Casey'  );",
    "gold": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
  },
  {
    "index": 637,
    "db_id": "tvshow",
    "db_info": "# cartoon ( directed_by, title, id, written_by, original_air_date, production_code, channel )\n# tv_channel ( series_name, country, id, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option )\n# cartoon.channel = tv_channel.id",
    "difficulty": "extra",
    "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
    "pred": "SELECT tv_channel.series_name, tv_channel.country   FROM cartoon   JOIN tv_channel ON cartoon.channel = tv_channel.id   WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang');",
    "gold": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"
  },
  {
    "index": 638,
    "db_id": "tvshow",
    "db_info": "# cartoon ( directed_by, title, channel )\n# tv_channel ( series_name, country, id )\n# tv_series ( channel, id, episode, air_date )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id",
    "difficulty": "extra",
    "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
    "pred": "SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  JOIN cartoon ON cartoon.channel = tv_channel.id  WHERE cartoon.directed_by = 'Ben Jones' AND tv_channel.series_name IN      (SELECT tv_channel.series_name      FROM tv_channel      JOIN cartoon ON cartoon.channel = tv_channel.id      WHERE cartoon.directed_by = 'Michael Chang');",
    "gold": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"
  },
  {
    "index": 641,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( country, id )\n# tv_series ( channel, id )\n# cartoon ( channel, id )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id",
    "difficulty": "easy",
    "question": "find id of the tv channels that from the countries where have more than two tv channels.",
    "pred": "SELECT id FROM tv_channel WHERE country IN (     SELECT     country     FROM     tv_channel     GROUP BY     country     HAVING     COUNT(id) > 2 );",
    "gold": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"
  },
  {
    "index": 642,
    "db_id": "tvshow",
    "db_info": "# tv_channel ( id, series_name, country, language, content, pixel_aspect_ratio_par, pay_per_view_ppv, package_option )\n# tv_series ( id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel )\n# cartoon ( id, title, directed_by, written_by, original_air_date, production_code, channel )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id",
    "difficulty": "easy",
    "question": "What are the ids of all tv channels that have more than 2 TV channels?",
    "pred": "SELECT id FROM tv_channel WHERE id IN (     SELECT channel     FROM (         SELECT channel, COUNT(*) AS num_channels         FROM (             SELECT channel FROM tv_series             UNION ALL             SELECT channel FROM cartoon         ) AS channels         GROUP BY channel         HAVING num_channels > 2     ) );",
    "gold": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"
  },
  {
    "index": 700,
    "db_id": "voter_1",
    "db_info": "# contestants ( contestant_number )\n# votes ( contestant_number, state, phone_number )\n# area_code_state ( area_code, state )\n# votes.contestant_number = contestants.contestant_number\n# votes.state = area_code_state.state",
    "difficulty": "extra",
    "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
    "pred": "SELECT DISTINCT area_code_state.area_code  FROM votes  JOIN contestants ON votes.contestant_number = contestants.contestant_number  JOIN area_code_state ON votes.state = area_code_state.state  WHERE contestants.contestant_name = 'Tabatha Gehling'  AND area_code_state.area_code IN (     SELECT area_code_state.area_code      FROM votes      JOIN contestants ON votes.contestant_number = contestants.contestant_number      JOIN area_code_state ON votes.state = area_code_state.state      WHERE contestants.contestant_name = 'Kelly Clauss'  )",
    "gold": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'"
  },
  {
    "index": 711,
    "db_id": "world_1",
    "db_info": "# city ( name, district, id, countrycode, population )",
    "difficulty": "medium",
    "question": "What region is Kabul in?",
    "pred": "SELECT district AS region  FROM city  WHERE name = 'Kabul';",
    "gold": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""
  },
  {
    "index": 712,
    "db_id": "world_1",
    "db_info": "# countrylanguage ( language, countrycode )\n# city ( countrycode )\n# country ( code, name )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "Which language is the most popular in Aruba?",
    "pred": "SELECT language FROM     countrylanguage WHERE     countrycode = 'ABW' ORDER BY     percentage DESC LIMIT 1;",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"
  },
  {
    "index": 713,
    "db_id": "world_1",
    "db_info": "# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# countrylanguage ( language, countrycode, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "What language is predominantly spoken in Aruba?",
    "pred": "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND percentage = ( SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = 'ABW' )",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"
  },
  {
    "index": 719,
    "db_id": "world_1",
    "db_info": "# country ( continent, name, lifeexpectancy )\n# countrylanguage ( countrycode )\n# countrylanguage.countrycode = country.code",
    "difficulty": "easy",
    "question": "How long is the people's average life expectancy in Central Africa?",
    "pred": "SELECT AVG(lifeexpectancy)  FROM  country  WHERE  continent = 'Africa'  AND  name IN ('Angola', 'Burundi', 'Benin', 'Burkina Faso', 'Botswana', 'Central African Republic', 'Cote d\\'Ivoire', 'Cameroon', 'Congo, Democratic Republic of the', 'Congo, Republic of the', 'Comoros', 'Cape Verde', 'Djibouti', 'Algeria', 'Egypt', 'Eritrea', 'Ethiopia', 'Gabon', 'Gambia', 'Ghana', 'Guinea', 'Guinea-Bissau', 'Equatorial Guinea', 'Kenya', 'Liberia', 'Libya', 'Lesotho', 'Morocco', 'Madagascar', 'Mali', 'Mauritania', 'Mauritius', 'Malawi', 'Mozambique', 'Namibia', 'Niger', 'Nigeria', 'Reunion', 'Rwanda', 'Seychelles', 'Sudan', 'Saint Helena', 'Sierra Leone', 'Senegal', 'Somalia', 'South Sudan', 'Sao Tome and Principe', 'Swaziland', 'Seychelles', 'Chad', 'Togo', 'Tunisia', 'Tanzania', 'Uganda', 'South Africa', 'Zambia', 'Zimbabwe');",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""
  },
  {
    "index": 736,
    "db_id": "world_1",
    "db_info": "# countrylanguage ( language, isofficial, percentage )\n# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# countrylanguage.countrycode = country.code",
    "difficulty": "medium",
    "question": "What is the total number of languages used in Aruba?",
    "pred": "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW';",
    "gold": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""
  },
  {
    "index": 737,
    "db_id": "world_1",
    "db_info": "# country ( name, code )\n# countrylanguage ( countrycode, language )\n# countrylanguage.countrycode = country.code",
    "difficulty": "medium",
    "question": "How many languages are spoken in Aruba?",
    "pred": "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba');",
    "gold": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""
  },
  {
    "index": 738,
    "db_id": "world_1",
    "db_info": "# country ( code, name, governmentform )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "medium",
    "question": "How many official languages does Afghanistan have?",
    "pred": "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T';",
    "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""
  },
  {
    "index": 739,
    "db_id": "world_1",
    "db_info": "# country ( name, code, governmentform, continent, population, capital )\n# countrylanguage ( language, countrycode, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "medium",
    "question": "How many official languages are spoken in Afghanistan?",
    "pred": "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T';",
    "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""
  },
  {
    "index": 741,
    "db_id": "world_1",
    "db_info": "# country ( name )\n# countrylanguage ( countrycode, language )\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "Give the name of the nation that uses the greatest amount of languages.",
    "pred": "SELECT country.name  FROM country  JOIN countrylanguage  ON country.name = countrylanguage.countrycode  GROUP BY country.name  ORDER BY COUNT(DISTINCT countrylanguage.language) DESC  LIMIT 1;",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "index": 743,
    "db_id": "world_1",
    "db_info": "# country ( continent, code, name, population )\n# countrylanguage ( countrycode, language, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "Which continent speaks the most languages?",
    "pred": "SELECT country.continent FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.continent HAVING COUNT(DISTINCT countrylanguage.language) =  (SELECT COUNT(DISTINCT language) FROM countrylanguage JOIN country ON country.code = countrylanguage.countrycode GROUP BY country.continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1) LIMIT 1;",
    "gold": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "index": 744,
    "db_id": "world_1",
    "db_info": "# countrylanguage ( language, countrycode )\n# country ( code, name )\n# city ( countrycode )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code",
    "difficulty": "easy",
    "question": "How many countries speak both English and Dutch?",
    "pred": "SELECT COUNT(DISTINCT country.code) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' AND country.code IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'Dutch' )",
    "gold": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"
  },
  {
    "index": 745,
    "db_id": "world_1",
    "db_info": "# countrylanguage ( language, countrycode, isofficial, percentage )\n# country ( name, code, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# countrylanguage.countrycode = country.code",
    "difficulty": "easy",
    "question": "What is the number of nations that use English and Dutch?",
    "pred": "SELECT COUNT(*) FROM (     SELECT countrycode FROM countrylanguage WHERE language = 'English'     INTERSECT     SELECT countrycode FROM countrylanguage WHERE language = 'Dutch' ) AS nations;",
    "gold": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"
  },
  {
    "index": 746,
    "db_id": "world_1",
    "db_info": "# country ( name, code, population, governmentform )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "What are the names of nations speak both English and French?",
    "pred": "SELECT country.name FROM  country JOIN  countrylanguage as cl1 ON  country.code = cl1.countrycode JOIN  countrylanguage as cl2 ON  country.code = cl2.countrycode WHERE  cl1.language = 'English'  AND  cl2.language = 'French';",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""
  },
  {
    "index": 747,
    "db_id": "world_1",
    "db_info": "# country ( name, code, continent, headofstate )\n# countrylanguage ( language, countrycode, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "Give the names of nations that speak both English and French.",
    "pred": "SELECT country.name FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'French') GROUP BY country.name HAVING COUNT(DISTINCT countrylanguage.language) = 2;",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""
  },
  {
    "index": 755,
    "db_id": "world_1",
    "db_info": "# country ( name, governmentform, code, population, continent, indepyear, capital, region, surfacearea, lifeexpectancy, gnp, gnpold, localname, headofstate, code2 )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "Which countries have either English or Dutch as an official language?",
    "pred": "SELECT DISTINCT country.name   FROM country   INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode   WHERE countrylanguage.isofficial = 'T'   AND (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch');",
    "gold": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\""
  },
  {
    "index": 756,
    "db_id": "world_1",
    "db_info": "# country ( continent )\n# countrylanguage ( language, percentage, countrycode )\n# city ( countrycode )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "Which language is the most popular on the Asian continent?",
    "pred": "SELECT language FROM countrylanguage WHERE countrycode IN ( SELECT code FROM country WHERE continent = 'Asia' ) GROUP BY language ORDER BY MAX(percentage) DESC LIMIT 1;",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1"
  },
  {
    "index": 764,
    "db_id": "world_1",
    "db_info": "# country ( lifeexpectancy, name, code )\n# countrylanguage ( language, countrycode, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "What is average life expectancy in the countries where English is not the official language?",
    "pred": "SELECT AVG(lifeexpectancy) FROM     country WHERE     code NOT IN (         SELECT             countrycode         FROM             countrylanguage         WHERE             language = 'English'             AND isofficial = 'T'     );",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"
  },
  {
    "index": 765,
    "db_id": "world_1",
    "db_info": "# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "Give the mean life expectancy of countries in which English is not the official language.",
    "pred": "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (   SELECT countrycode   FROM countrylanguage   WHERE language = 'English' AND isofficial = 'T' );",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"
  },
  {
    "index": 766,
    "db_id": "world_1",
    "db_info": "# city ( population )\n# country ( population, code )\n# countrylanguage ( percentage, countrycode )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "What is the total number of people living in the nations that do not use English?",
    "pred": "SELECT SUM(country.population) FROM   country WHERE   country.code NOT IN (     SELECT       countrylanguage.countrycode     FROM       countrylanguage     WHERE       countrylanguage.language = 'English'   );",
    "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"
  },
  {
    "index": 767,
    "db_id": "world_1",
    "db_info": "# country ( population, code, name, continent, surfacearea, indepyear, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "How many people live in countries that do not speak English?",
    "pred": "SELECT SUM(country.population) FROM country WHERE country.code NOT IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' );",
    "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"
  },
  {
    "index": 772,
    "db_id": "world_1",
    "db_info": "# country ( name, surfacearea, continent, code )\n# city ( countrycode, name )\n# city.countrycode = country.code",
    "difficulty": "hard",
    "question": "What are the countries that have greater surface area than any country in Europe?",
    "pred": "SELECT country.name  FROM  country  WHERE  country.surfacearea > (     SELECT      MAX(surfacearea)      FROM      country      WHERE      continent = 'Europe' );",
    "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"
  },
  {
    "index": 773,
    "db_id": "world_1",
    "db_info": "# country ( surfacearea, name, continent, code, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# city ( countrycode, id, name, district, population )\n# city.countrycode = country.code",
    "difficulty": "hard",
    "question": "Which countries have greater area than that of any country in Europe?",
    "pred": "SELECT country.name   FROM country   WHERE country.surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe');",
    "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"
  },
  {
    "index": 774,
    "db_id": "world_1",
    "db_info": "# country ( name, continent, population, region )\n# city ( countrycode, population )\n# city.countrycode = country.code",
    "difficulty": "extra",
    "question": "What are the African countries that have a  population less than any country in Asia?",
    "pred": "SELECT c1.name  FROM  country c1  WHERE  c1.continent = 'Africa'  AND  c1.population < (          SELECT      MIN(c2.population)          FROM      country c2          WHERE      c2.continent = 'Asia'  );",
    "gold": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")"
  },
  {
    "index": 777,
    "db_id": "world_1",
    "db_info": "# country ( name, continent, population, region, surfacearea, indepyear, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code, code2 )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
    "pred": "SELECT c1.name   FROM  country c1   WHERE  c1.continent = 'Asia'   AND  c1.population > (SELECT MAX(c2.population) FROM country c2 WHERE c2.continent = 'Africa');",
    "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")"
  },
  {
    "index": 778,
    "db_id": "world_1",
    "db_info": "# country ( code, name, population, continent, region, surfacearea, indepyear, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "hard",
    "question": "What are the country codes for countries that do not speak English?",
    "pred": "SELECT country.code   FROM country   WHERE country.code NOT IN (          SELECT countrycode           FROM countrylanguage           WHERE language = 'English'  );",
    "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
  },
  {
    "index": 779,
    "db_id": "world_1",
    "db_info": "# country ( code, name, governmentform, continent, region, population, capital )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "hard",
    "question": "Return the country codes for countries that do not speak English.",
    "pred": "SELECT country.code  FROM  country  WHERE  country.code NOT IN (     SELECT      countrycode      FROM      countrylanguage      WHERE      language = 'English' AND isofficial = 'T'  );",
    "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
  },
  {
    "index": 780,
    "db_id": "world_1",
    "db_info": "# country ( code )\n# countrylanguage ( countrycode, language )\n# countrylanguage.countrycode = country.code",
    "difficulty": "easy",
    "question": "What are the country codes of countries where people use languages other than English?",
    "pred": "SELECT     country.code FROM     country WHERE     country.code IN (         SELECT             countrylanguage.countrycode         FROM             countrylanguage         WHERE             countrylanguage.language <> 'English'     );",
    "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""
  },
  {
    "index": 781,
    "db_id": "world_1",
    "db_info": "# country ( code, name, continent, region )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "easy",
    "question": "Give the country codes for countries in which people speak langauges that are not English.",
    "pred": "SELECT country.code  FROM country  WHERE country.code NOT IN      (     SELECT countrylanguage.countrycode      FROM countrylanguage      WHERE countrylanguage.language = 'English' AND countrylanguage.isofficial = 'T'     );",
    "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""
  },
  {
    "index": 784,
    "db_id": "world_1",
    "db_info": "# countrylanguage ( countrycode, language, isofficial, percentage )\n# city ( name, countrycode, district, population )\n# country ( code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "Which cities are in European countries where English is not the official language?",
    "pred": "SELECT city.name   FROM city   JOIN country ON city.countrycode = country.code   JOIN countrylanguage ON country.code = countrylanguage.countrycode   WHERE country.continent = 'Europe'   AND (countrylanguage.language != 'English' OR countrylanguage.isofficial = 'F');",
    "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
  },
  {
    "index": 785,
    "db_id": "world_1",
    "db_info": "# city ( name, countrycode, district, population, id )\n# countrylanguage ( countrycode, language, isofficial, percentage )",
    "difficulty": "extra",
    "question": "What are the names of cities in Europe for which English is not the official language?",
    "pred": "SELECT city.name  FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE city.countrycode IN (     SELECT countrycode      FROM countrylanguage      WHERE language = 'English' AND isofficial = 'F' ) AND city.district = 'Europe';",
    "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
  },
  {
    "index": 789,
    "db_id": "world_1",
    "db_info": "# country ( population, name, indepyear, surfacearea, code )\n# city ( population, countrycode, name, district )\n# city.countrycode = country.code",
    "difficulty": "medium",
    "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
    "pred": "SELECT country.name, country.indepyear, country.surfacearea   FROM country   WHERE country.population = (SELECT MIN(population) FROM country WHERE population > 0);",
    "gold": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"
  },
  {
    "index": 810,
    "db_id": "world_1",
    "db_info": "# country ( continent, population, surfacearea, name, indepyear, code, region, indepyear, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# city ( population, name, countrycode, district, id )\n# city.countrycode = country.code",
    "difficulty": "hard",
    "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
    "pred": "SELECT SUM(country.population) AS \"sum (population)\",  AVG(country.surfacearea) AS \"avg (surfacearea)\"  FROM country  WHERE continent = 'North America' AND surfacearea > 3000;",
    "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000"
  },
  {
    "index": 818,
    "db_id": "world_1",
    "db_info": "# countrylanguage ( language, isofficial, percentage )\n# country ( population, name, code )\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
    "pred": "SELECT COUNT(DISTINCT country.code) FROM     country JOIN     countrylanguage ON     country.code = countrylanguage.countrycode WHERE     countrylanguage.language = 'Spanish'     AND countrylanguage.percentage = (         SELECT             MAX(countrylanguage.percentage)         FROM             countrylanguage         WHERE             countrylanguage.countrycode=country.code     );",
    "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
  },
  {
    "index": 819,
    "db_id": "world_1",
    "db_info": "# countrylanguage ( language, isofficial, percentage, countrycode )\n# country ( name, code, population )\n# city ( countrycode )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code",
    "difficulty": "extra",
    "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
    "pred": "SELECT COUNT(DISTINCT countrycode)  FROM countrylanguage  WHERE language = 'Spanish' AND isofficial = 'T' AND percentage > 50;",
    "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
  },
  {
    "index": 820,
    "db_id": "world_1",
    "db_info": "# country ( code, name, population, region, surfacearea, continent, indepyear, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 )\n# countrylanguage ( countrycode, language, isofficial, percentage )\n# countrylanguage.countrycode = country.code",
    "difficulty": "medium",
    "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
    "pred": "SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish' ORDER BY countrylanguage.percentage DESC LIMIT 1;",
    "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
  },
  {
    "index": 821,
    "db_id": "world_1",
    "db_info": "# countrylanguage ( language, isofficial, percentage )\n# country ( code, name, continent, region )\n# countrylanguage.countrycode = country.code",
    "difficulty": "medium",
    "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
    "pred": "SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'Spanish' AND countrylanguage.percentage > 50;",
    "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
  },
  {
    "index": 842,
    "db_id": "orchestra",
    "db_info": "# conductor ( name, conductor_id, age, nationality, year_of_work )\n# orchestra ( conductor_id, orchestra_id, orchestra, record_company, year_of_founded, major_record_format )\n# orchestra.conductor_id = conductor.conductor_id",
    "difficulty": "medium",
    "question": "Show the names of conductors that have conducted more than one orchestras.",
    "pred": "SELECT conductor.name FROM conductor INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name HAVING COUNT(DISTINCT orchestra_id) > 1;",
    "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"
  },
  {
    "index": 843,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id, name, age, nationality, year_of_work )\n# orchestra ( orchestra_id, conductor_id, orchestra, record_company, year_of_founded, major_record_format )\n# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )\n# show ( show_id, performance_id, if_first_show, result, attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id",
    "difficulty": "medium",
    "question": "What are the names of conductors who have conducted at more than one orchestra?",
    "pred": "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1;",
    "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"
  },
  {
    "index": 844,
    "db_id": "orchestra",
    "db_info": "# conductor ( name, age, nationality, year_of_work )\n# orchestra ( conductor_id, orchestra, record_company, year_of_founded, major_record_format )\n# orchestra.conductor_id = conductor.conductor_id",
    "difficulty": "extra",
    "question": "Show the name of the conductor that has conducted the most number of orchestras.",
    "pred": "SELECT conductor.name  FROM  conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  ORDER BY COUNT(orchestra.orchestra) DESC  LIMIT 1;",
    "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "index": 845,
    "db_id": "orchestra",
    "db_info": "# conductor ( conductor_id, name, age, nationality, year_of_work )\n# orchestra ( orchestra_id, conductor_id, orchestra, record_company, year_of_founded, major_record_format )\n# performance ( performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share )\n# show ( show_id, performance_id, if_first_show, result, attendance )\n# orchestra.conductor_id = conductor.conductor_id\n# performance.orchestra_id = orchestra.orchestra_id\n# show.performance_id = performance.performance_id",
    "difficulty": "extra",
    "question": "What is the name of the conductor who has conducted the most orchestras?",
    "pred": "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY COUNT(DISTINCT orchestra.orchestra_id) DESC LIMIT 1;",
    "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "index": 851,
    "db_id": "orchestra",
    "db_info": "# orchestra ( major_record_format )\n# performance ( orchestra_id )\n# performance.orchestra_id = orchestra.orchestra_id",
    "difficulty": "medium",
    "question": "What are the major record formats of orchestras, sorted by their frequency?",
    "pred": "SELECT orchestra.major_record_format, COUNT(*) AS frequency   FROM orchestra   JOIN performance ON orchestra.orchestra_id = performance.orchestra_id  GROUP BY orchestra.major_record_format   ORDER BY frequency DESC;",
    "gold": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"
  },
  {
    "index": 882,
    "db_id": "network_1",
    "db_info": "# friend ( friend_id, student_id )\n# highschooler ( id, name, grade )\n# likes ( student_id, liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
    "difficulty": "medium",
    "question": "Show the student IDs and numbers of friends corresponding to each.",
    "pred": "SELECT highschooler.id, COUNT(friend.friend_id) as num_friends  FROM  highschooler  LEFT JOIN friend ON friend.student_id = highschooler.id  GROUP BY highschooler.id;",
    "gold": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id"
  },
  {
    "index": 884,
    "db_id": "network_1",
    "db_info": "# highschooler ( name, id )\n# friend ( student_id, friend_id )\n# likes ( student_id, liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
    "difficulty": "medium",
    "question": "Show the names of high school students and their corresponding number of friends.",
    "pred": "SELECT highschooler.name, COUNT(friend.friend_id) as friend_count  FROM highschooler  LEFT JOIN friend ON highschooler.id = friend.student_id  GROUP BY highschooler.id, highschooler.name;",
    "gold": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
  },
  {
    "index": 885,
    "db_id": "network_1",
    "db_info": "# highschooler ( name, id, grade )\n# friend ( student_id, friend_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id",
    "difficulty": "medium",
    "question": "What are the names of the high schoolers and how many friends does each have?",
    "pred": "SELECT highschooler.name, COUNT(friend.friend_id) AS friend_count  FROM  highschooler  LEFT JOIN  friend  ON  friend.student_id = highschooler.id  GROUP BY  highschooler.id, highschooler.name;",
    "gold": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
  },
  {
    "index": 892,
    "db_id": "network_1",
    "db_info": "# highschooler ( id, name, grade )\n# friend ( student_id, friend_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id",
    "difficulty": "medium",
    "question": "How many friends does the high school student Kyle have?",
    "pred": "SELECT COUNT(*) FROM     friend WHERE     student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');",
    "gold": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
  },
  {
    "index": 893,
    "db_id": "network_1",
    "db_info": "# highschooler ( id, name )\n# friend ( student_id, friend_id )\n# likes ( student_id, liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
    "difficulty": "medium",
    "question": "Count the number of friends Kyle has.",
    "pred": "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');",
    "gold": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
  },
  {
    "index": 896,
    "db_id": "network_1",
    "db_info": "# highschooler ( name, id, grade )\n# friend ( student_id, friend_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id",
    "difficulty": "hard",
    "question": "Show names of all high school students who do not have any friends.",
    "pred": "SELECT name FROM highschooler WHERE id NOT IN ( SELECT DISTINCT student_id FROM friend )",
    "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"
  },
  {
    "index": 897,
    "db_id": "network_1",
    "db_info": "# highschooler ( name, id, grade )\n# friend ( friend_id, student_id )\n# likes ( liked_id, student_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
    "difficulty": "hard",
    "question": "What are the names of students who have no friends?",
    "pred": "SELECT name  FROM  highschooler  WHERE  id NOT IN (SELECT friend_id FROM friend)  AND  id NOT IN (SELECT student_id FROM friend)",
    "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"
  },
  {
    "index": 898,
    "db_id": "network_1",
    "db_info": "# highschooler ( id, name, grade )\n# friend ( student_id, friend_id )\n# likes ( student_id, liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
    "difficulty": "hard",
    "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
    "pred": "SELECT highschooler.id FROM     highschooler WHERE     highschooler.id IN (SELECT friend_id FROM friend)     AND highschooler.id IN (SELECT liked_id FROM likes);",
    "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"
  },
  {
    "index": 899,
    "db_id": "network_1",
    "db_info": "# friend ( student_id, friend_id )\n# likes ( student_id, liked_id )\n# highschooler ( id, name, grade )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
    "difficulty": "hard",
    "question": "What are the ids of students who both have friends and are liked?",
    "pred": "SELECT DISTINCT hs1.id  FROM highschooler hs1   JOIN friend f1 ON f1.student_id = hs1.id   JOIN likes l1 ON l1.liked_id = hs1.id;",
    "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"
  },
  {
    "index": 900,
    "db_id": "network_1",
    "db_info": "# highschooler ( name, id )\n# friend ( student_id, friend_id )\n# likes ( student_id, liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
    "difficulty": "hard",
    "question": "Show name of all students who have some friends and also are liked by someone else.",
    "pred": "SELECT name   FROM  highschooler   WHERE  id IN (     SELECT      student_id           FROM      friend )  AND  id IN (     SELECT      liked_id      FROM      likes )",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"
  },
  {
    "index": 901,
    "db_id": "network_1",
    "db_info": "# highschooler ( name, id )\n# friend ( student_id, friend_id )\n# likes ( student_id, liked_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
    "difficulty": "hard",
    "question": "What are the names of high schoolers who both have friends and are liked?",
    "pred": "SELECT name  FROM  highschooler  WHERE  id IN (     SELECT      student_id      FROM      friend )  AND  id IN (     SELECT      liked_id      FROM      likes );",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"
  },
  {
    "index": 904,
    "db_id": "network_1",
    "db_info": "# likes ( student_id, liked_id )\n# highschooler ( name, id, grade )\n# friend ( student_id, friend_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
    "difficulty": "medium",
    "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
    "pred": "SELECT highschooler.name, COUNT(likes.liked_id)   FROM highschooler   JOIN likes ON likes.student_id = highschooler.id   GROUP BY highschooler.name;",
    "gold": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
  },
  {
    "index": 906,
    "db_id": "network_1",
    "db_info": "# highschooler ( name, id, grade )\n# likes ( student_id, liked_id )\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
    "difficulty": "extra",
    "question": "What is the name of the high schooler who has the greatest number of likes?",
    "pred": "SELECT highschooler.name  FROM  highschooler  JOIN  likes  ON  highschooler.id = likes.liked_id  GROUP BY  highschooler.name  ORDER BY  COUNT(likes.liked_id) DESC  LIMIT 1;",
    "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 907,
    "db_id": "network_1",
    "db_info": "# likes ( student_id, liked_id )\n# highschooler ( id, name, grade )\n# friend ( student_id, friend_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
    "difficulty": "extra",
    "question": "Give the name of the student with the most likes.",
    "pred": "SELECT h.name  FROM highschooler h  JOIN likes l ON h.id = l.liked_id  GROUP BY h.name  ORDER BY COUNT(l.liked_id) DESC  LIMIT 1;",
    "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 908,
    "db_id": "network_1",
    "db_info": "# likes ( student_id, liked_id )\n# highschooler ( id, name, grade )\n# friend ( student_id, friend_id )\n# friend.friend_id = highschooler.id\n# friend.student_id = highschooler.id\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
    "difficulty": "medium",
    "question": "Show the names of students who have at least 2 likes.",
    "pred": "SELECT highschooler.name  FROM  highschooler  JOIN likes ON likes.liked_id = highschooler.id  GROUP BY highschooler.name  HAVING COUNT(likes.student_id) >= 2;",
    "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2"
  },
  {
    "index": 912,
    "db_id": "network_1",
    "db_info": "# highschooler ( id, name, grade )\n# likes ( student_id, liked_id )\n# likes.student_id = highschooler.id\n# likes.liked_id = highschooler.id",
    "difficulty": "medium",
    "question": "How many likes does Kyle have?",
    "pred": "SELECT COUNT(*) FROM likes WHERE student_id = (     SELECT id     FROM highschooler     WHERE name = 'Kyle' );",
    "gold": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
  },
  {
    "index": 924,
    "db_id": "dog_kennels",
    "db_info": "# dogs ( name, dog_id, owner_id, breed_code, size_code, abandoned_yn, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )\n# treatments ( cost_of_treatment, dog_id, treatment_id, professional_id, treatment_type_code, date_of_treatment )\n# owners ( owner_id, first_name, last_name, email_address )\n# breeds ( breed_code, breed_name )\n# sizes ( size_code, size_description )\n# treatment_types ( treatment_type_code, treatment_type_description )\n# professionals ( professional_id, first_name, last_name )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code",
    "difficulty": "hard",
    "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
    "pred": "SELECT dogs.name   FROM dogs   LEFT JOIN treatments ON dogs.dog_id = treatments.dog_id   GROUP BY dogs.name   HAVING COALESCE(SUM(treatments.cost_of_treatment), 0) <= 1000;",
    "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )"
  },
  {
    "index": 925,
    "db_id": "dog_kennels",
    "db_info": "# dogs ( name, owner_id )\n# owners ( owner_id )\n# treatments ( dog_id, cost_of_treatment )\n# charges ( charge_amount )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# treatments.dog_id = dogs.dog_id",
    "difficulty": "hard",
    "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
    "pred": "SELECT dogs.name   FROM  dogs   LEFT JOIN treatments ON dogs.dog_id = treatments.dog_id   GROUP BY dogs.name   HAVING COALESCE(SUM(treatments.cost_of_treatment), 0) <= 1000;",
    "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )"
  },
  {
    "index": 926,
    "db_id": "dog_kennels",
    "db_info": "# professionals ( first_name, professional_id, role_code )\n# owners ( first_name, owner_id, last_name )\n# dogs ( owner_id )\n# breeds ( breed_name, breed_code )\n# charges ( charge_type, charge_amount )\n# sizes ( size_description, size_code )\n# treatment_types ( treatment_type_description, treatment_type_code )\n# treatments ( professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code",
    "difficulty": "hard",
    "question": "Which first names are used for professionals or owners but are not used as dog names?",
    "pred": "SELECT first_name  FROM  (     SELECT first_name FROM professionals      UNION      SELECT first_name FROM owners ) AS names  WHERE first_name NOT IN  (     SELECT dog_name FROM dogs  );",
    "gold": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"
  },
  {
    "index": 931,
    "db_id": "dog_kennels",
    "db_info": "# owners ( owner_id, first_name, last_name )\n# dogs ( owner_id, name )\n# treatments ( dog_id )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# treatments.dog_id = dogs.dog_id",
    "difficulty": "extra",
    "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
    "pred": "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners WHERE owners.owner_id IN (     SELECT dogs.owner_id     FROM dogs     GROUP BY dogs.owner_id     HAVING COUNT(*) = (         SELECT MAX(dog_count)         FROM (             SELECT COUNT(*) as dog_count             FROM dogs             GROUP BY owner_id         )     ) );",
    "gold": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 936,
    "db_id": "dog_kennels",
    "db_info": "# owners ( owner_id, last_name )\n# treatments ( dog_id, cost_of_treatment )\n# dogs ( dog_id, owner_id )\n# professionals ( professional_id )\n# treatment_types ( treatment_type_code )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code",
    "difficulty": "extra",
    "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
    "pred": "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY COUNT(treatments.cost_of_treatment) DESC LIMIT 1;",
    "gold": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 937,
    "db_id": "dog_kennels",
    "db_info": "# treatments ( cost_of_treatment, treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment )\n# dogs ( owner_id, dog_id, name, breed_code, size_code )\n# owners ( owner_id, last_name, first_name )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# treatments.dog_id = dogs.dog_id",
    "difficulty": "extra",
    "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
    "pred": "SELECT owners.owner_id,  owners.last_name   FROM  owners   JOIN  dogs ON dogs.owner_id = owners.owner_id   JOIN  treatments ON treatments.dog_id = dogs.dog_id   GROUP BY  owners.owner_id, owners.last_name   HAVING  SUM(treatments.cost_of_treatment) = (     SELECT      MAX(total_cost)      FROM (         SELECT          owners.owner_id,          SUM(treatments.cost_of_treatment) as total_cost         FROM          owners           JOIN          dogs ON dogs.owner_id = owners.owner_id           JOIN          treatments ON treatments.dog_id = dogs.dog_id           GROUP BY          owners.owner_id, owners.last_name     ) t );",
    "gold": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "index": 939,
    "db_id": "dog_kennels",
    "db_info": "# treatment_types ( treatment_type_code )\n# treatments ( treatment_type_code, cost_of_treatment )\n# treatments.treatment_type_code = treatment_types.treatment_type_code",
    "difficulty": "extra",
    "question": "Give me the description of the treatment type whose total cost is the lowest.",
    "pred": "SELECT treatment_types.treatment_type_code FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatment_types.treatment_type_code HAVING SUM(treatments.cost_of_treatment) = (     SELECT MIN(total_cost)     FROM (         SELECT SUM(cost_of_treatment) AS total_cost         FROM treatments         GROUP BY treatment_type_code     ) AS subquery ) LIMIT 1;",
    "gold": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"
  },
  {
    "index": 940,
    "db_id": "dog_kennels",
    "db_info": "# owners ( owner_id, zip_code )\n# dogs ( owner_id, dog_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id",
    "difficulty": "extra",
    "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
    "pred": "SELECT owners.owner_id, owners.zip_code   FROM owners   JOIN dogs ON dogs.owner_id = owners.owner_id   GROUP BY owners.owner_id, owners.zip_code   ORDER BY SUM(dogs.price) DESC   LIMIT 1;",
    "gold": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"
  },
  {
    "index": 941,
    "db_id": "dog_kennels",
    "db_info": "# treatments ( dog_id, cost_of_treatment )\n# dogs ( dog_id, owner_id )\n# owners ( owner_id, zip_code )\n# professionals ( professional_id )\n# treatment_types ( treatment_type_code )\n# breeds ( breed_code )\n# sizes ( size_code )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code",
    "difficulty": "extra",
    "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
    "pred": "SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;",
    "gold": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"
  },
  {
    "index": 944,
    "db_id": "dog_kennels",
    "db_info": "# professionals ( first_name, last_name )\n# treatments ( professional_id, cost_of_treatment )\n# treatments.professional_id = professionals.professional_id",
    "difficulty": "extra",
    "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
    "pred": "SELECT professionals.first_name, professionals.last_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);",
    "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"
  },
  {
    "index": 945,
    "db_id": "dog_kennels",
    "db_info": "# professionals ( professional_id, role_code, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )\n# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )\n# treatments.professional_id = professionals.professional_id",
    "difficulty": "extra",
    "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
    "pred": "SELECT professionals.first_name, professionals.last_name  FROM  professionals   INNER JOIN  treatments  ON  treatments.professional_id = professionals.professional_id   WHERE  treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)   GROUP BY  professionals.professional_id, professionals.first_name, professionals.last_name;",
    "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"
  },
  {
    "index": 954,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code, breed_name )\n# dogs ( breed_code, name, dog_id, date_of_birth )\n# treatments ( dog_id, date_of_treatment )\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id",
    "difficulty": "extra",
    "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
    "pred": "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id  WHERE dogs.breed_code = (     SELECT breed_code     FROM breeds     GROUP BY breed_code     ORDER BY COUNT(*) ASC     LIMIT 1 ) ORDER BY dogs.name ASC;",
    "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"
  },
  {
    "index": 955,
    "db_id": "dog_kennels",
    "db_info": "# dogs ( breed_code, name, date_of_birth, date_arrived, date_adopted, date_departed )\n# breeds ( breed_code, breed_name )\n# treatments ( dog_id, date_of_treatment )\n# treatment_types ( treatment_type_code )\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code",
    "difficulty": "extra",
    "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
    "pred": "SELECT dogs.name, treatments.date_of_treatment  FROM dogs  INNER JOIN breeds ON dogs.breed_code = breeds.breed_code  INNER JOIN treatments ON dogs.dog_id = treatments.dog_id  WHERE breeds.breed_name = (     SELECT breed_name      FROM breeds      GROUP BY breed_name      HAVING COUNT(breed_code) = (         SELECT MIN(breed_count)         FROM (             SELECT COUNT(breed_code) as breed_count             FROM breeds             GROUP BY breed_name         )     ) ) ORDER BY dogs.name, treatments.date_of_treatment;",
    "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"
  },
  {
    "index": 957,
    "db_id": "dog_kennels",
    "db_info": "# owners ( first_name, owner_id )\n# dogs ( owner_id, name, breed_code, size_code )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id",
    "difficulty": "medium",
    "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
    "pred": "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs  ON dogs.owner_id = owners.owner_id  WHERE owners.location = 'Virginia';",
    "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"
  },
  {
    "index": 960,
    "db_id": "dog_kennels",
    "db_info": "# dogs ( age, owner_id, dog_id, abandoned_yn, breed_code, size_code, name, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )\n# owners ( owner_id, last_name, first_name, street, city, state, zip_code, email_address, home_phone, cell_number )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id",
    "difficulty": "extra",
    "question": "List the last name of the owner owning the youngest dog.",
    "pred": "SELECT owners.last_name   FROM owners   JOIN dogs ON owners.owner_id = dogs.owner_id   ORDER BY dogs.date_of_birth DESC   LIMIT 1;",
    "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"
  },
  {
    "index": 961,
    "db_id": "dog_kennels",
    "db_info": "# dogs ( owner_id, date_of_birth, abandoned_yn, breed_code, size_code, name, age, gender, weight, date_arrived, date_adopted, date_departed )\n# owners ( owner_id, last_name, first_name, street, city, state, zip_code, email_address, home_phone, cell_number )\n# breeds ( breed_code, breed_name )\n# sizes ( size_code, size_description )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code",
    "difficulty": "extra",
    "question": "Who owns the youngest dog? Give me his or her last name.",
    "pred": "SELECT owners.last_name  FROM  owners  JOIN  dogs  ON  owners.owner_id = dogs.owner_id  WHERE  dogs.date_of_birth = (SELECT MAX(date_of_birth) FROM dogs)  LIMIT 1;",
    "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"
  },
  {
    "index": 976,
    "db_id": "dog_kennels",
    "db_info": "# treatments ( cost_of_treatment )\n# dogs ( dog_id )\n# professionals ( professional_id )\n# treatment_types ( treatment_type_code )\n# breeds ( breed_code )\n# sizes ( size_code )\n# owners ( owner_id )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code",
    "difficulty": "medium",
    "question": "How much does the most recent treatment cost?",
    "pred": "SELECT cost_of_treatment   FROM treatments   ORDER BY treatment_id DESC   LIMIT 1;",
    "gold": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"
  },
  {
    "index": 979,
    "db_id": "dog_kennels",
    "db_info": "# dogs ( owner_id )\n# treatments ( dog_id )\n# treatments.dog_id = dogs.dog_id",
    "difficulty": "extra",
    "question": "Tell me the number of dogs that have not received any treatment .",
    "pred": "SELECT COUNT(*)  FROM dogs  WHERE owner_id NOT IN (SELECT dog_id FROM treatments);",
    "gold": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )"
  },
  {
    "index": 980,
    "db_id": "dog_kennels",
    "db_info": "# owners ( owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number )\n# dogs ( dog_id, owner_id, breed_code, size_code, abandoned_yn, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )\n# breeds ( breed_code, breed_name )\n# charges ( charge_id, charge_type, charge_amount )\n# sizes ( size_code, size_description )\n# treatment_types ( treatment_type_code, treatment_type_description )\n# professionals ( professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number )\n# treatments ( treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id\n# treatments.professional_id = professionals.professional_id\n# treatments.treatment_type_code = treatment_types.treatment_type_code",
    "difficulty": "extra",
    "question": "How many owners temporarily do not have any dogs?",
    "pred": "SELECT COUNT(*) FROM owners WHERE owner_id NOT IN ( SELECT DISTINCT owner_id FROM dogs WHERE date_departed IS NOT NULL AND date_adopted IS NULL);",
    "gold": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )"
  },
  {
    "index": 981,
    "db_id": "dog_kennels",
    "db_info": "# owners ( owner_id, first_name, last_name, email_address, street, city, state, zip_code, home_phone, cell_number )\n# dogs ( owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed )\n# dogs.owner_id = owners.owner_id\n# dogs.owner_id = owners.owner_id",
    "difficulty": "extra",
    "question": "Find the number of owners who do not own any dogs at this moment.",
    "pred": "SELECT COUNT(*)  FROM owners  WHERE owner_id NOT IN      (SELECT DISTINCT owner_id      FROM dogs      WHERE date_adopted IS NULL AND date_departed IS NOT NULL)",
    "gold": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )"
  },
  {
    "index": 996,
    "db_id": "dog_kennels",
    "db_info": "# breeds ( breed_code, breed_name )\n# sizes ( size_code, size_description )\n# dogs ( breed_code, size_code )\n# treatments ( dog_id )\n# dogs.size_code = sizes.size_code\n# dogs.breed_code = breeds.breed_code\n# treatments.dog_id = dogs.dog_id",
    "difficulty": "medium",
    "question": "What are all the possible breed type and size type combinations?",
    "pred": "SELECT breeds.breed_name, sizes.size_description  FROM  breeds  JOIN dogs ON breeds.breed_code = dogs.breed_code  JOIN sizes ON dogs.size_code = sizes.size_code  GROUP BY breeds.breed_name, sizes.size_description;",
    "gold": "SELECT DISTINCT breed_code ,  size_code FROM dogs"
  },
  {
    "index": 999,
    "db_id": "dog_kennels",
    "db_info": "# professionals ( first_name )\n# treatments ( professional_id )\n# treatments.professional_id = professionals.professional_id",
    "difficulty": "medium",
    "question": "What are each professional's first name and description of the treatment they have performed?",
    "pred": "SELECT professionals.first_name,  treatments.treatment_description FROM  professionals   JOIN  treatments  ON  treatments.professional_id = professionals.professional_id;",
    "gold": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"
  },
  {
    "index": 1022,
    "db_id": "singer",
    "db_info": "# singer ( singer_id, name, birth_year, net_worth_millions, citizenship )\n# song ( song_id, title, singer_id, sales, highest_position )\n# song.singer_id = singer.singer_id",
    "difficulty": "medium",
    "question": "Show the names of singers that have more than one song.",
    "pred": "SELECT name  FROM  singer  WHERE  singer_id IN (     SELECT      singer_id      FROM      song      GROUP BY      singer_id      HAVING      COUNT(song_id) > 1 )",
    "gold": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
  },
  {
    "index": 1029,
    "db_id": "singer",
    "db_info": "# singer ( birth_year, citizenship, singer_id, name, net_worth_millions )\n# song ( singer_id, title, sales, highest_position, song_id )\n# song.singer_id = singer.singer_id",
    "difficulty": "hard",
    "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
    "pred": "SELECT citizenship  FROM  singer  WHERE  birth_year < 1945  AND  citizenship IN (     SELECT      citizenship      FROM      singer      WHERE      birth_year > 1955);",
    "gold": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955"
  },
  {
    "index": 1032,
    "db_id": "real_estate_properties",
    "db_info": "# properties ( property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details )\n# ref_property_types ( property_type_code, property_type_description )\n# properties.property_type_code = ref_property_types.property_type_code",
    "difficulty": "medium",
    "question": "Show the property type descriptions of properties belonging to that code.",
    "pred": "SELECT DISTINCT ref_property_types.property_type_description   FROM properties   JOIN ref_property_types  ON properties.property_type_code = ref_property_types.property_type_code;",
    "gold": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code"
  },
  {
    "index": 1033,
    "db_id": "real_estate_properties",
    "db_info": "# properties ( property_name, property_type_code, room_count )\n# ref_property_types ( property_type_code )\n# other_available_features ( feature_name )\n# ref_feature_types ( feature_type_code )\n# other_property_features ( property_id, feature_id, property_feature_description )\n# other_available_features.feature_type_code = ref_feature_types.feature_type_code\n# properties.property_type_code = ref_property_types.property_type_code\n# other_property_features.property_id = properties.property_id\n# other_property_features.feature_id = other_available_features.feature_id",
    "difficulty": "hard",
    "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
    "pred": "SELECT properties.property_name  FROM  properties  JOIN  ref_property_types  ON  properties.property_type_code = ref_property_types.property_type_code  WHERE  (ref_property_types.property_type_code IN ('house', 'apartment'))  AND  properties.room_count > 1;",
    "gold": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1"
  }
]