index: 7
db_id: concert_singer
medium pred: SELECT singer.name, singer.song_release_year FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id ORDER BY singer.age ASC LIMIT 1;
medium gold: SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1

index: 8
db_id: concert_singer
medium pred: SELECT singer.name, singer.song_release_year FROM singer WHERE singer.age = (SELECT MIN(age) FROM singer)
medium gold: SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1

index: 14
db_id: concert_singer
hard pred: SELECT singer.song_name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE singer.age > (SELECT AVG(age) FROM singer)
hard gold: SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)

index: 17
db_id: concert_singer
medium pred: SELECT MAX(capacity) AS maximum_capacity, AVG(capacity) AS average_capacity FROM stadium
medium gold: select max(capacity), average from stadium

index: 23
db_id: concert_singer
medium pred: SELECT stadium.name, COUNT(concert.concert_id) AS num_concerts FROM stadium JOIN concert ON concert.stadium_id = stadium.stadium_id GROUP BY stadium.name
medium gold: SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id

index: 24
db_id: concert_singer
medium pred: SELECT stadium.stadium_id, stadium.name, COUNT(concert.concert_id) AS number_of_concerts FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.stadium_id, stadium.name;
medium gold: SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id

index: 25
db_id: concert_singer
extra pred: SELECT stadium.name, stadium.capacity FROM stadium JOIN concert ON concert.stadium_id = stadium.stadium_id WHERE concert.year >= 2014 GROUP BY stadium.name, stadium.capacity ORDER BY COUNT(concert.concert_id) DESC LIMIT 1
extra gold: SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1

index: 27
db_id: concert_singer
hard pred: SELECT year, COUNT(*) AS num_concerts FROM concert GROUP BY year ORDER BY num_concerts DESC LIMIT 1;
hard gold: SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1

index: 28
db_id: concert_singer
hard pred: SELECT year FROM concert GROUP BY year HAVING COUNT(*) = (     SELECT MAX(concert_count)     FROM (         SELECT year, COUNT(*) AS concert_count         FROM concert         GROUP BY year     ) AS subquery )
hard gold: SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1

index: 31
db_id: concert_singer
hard pred: SELECT DISTINCT s1.country FROM singer s1, singer s2 WHERE s1.age > 40 AND s2.age < 30;
hard gold: SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30

index: 32
db_id: concert_singer
hard pred: SELECT stadium.name  FROM stadium  LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id  LEFT JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id  LEFT JOIN singer ON singer_in_concert.singer_id = singer.singer_id  WHERE concert.concert_name IS NULL OR concert.year <> 2014
hard gold: SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014

index: 33
db_id: concert_singer
hard pred: SELECT name FROM stadium WHERE stadium_id NOT IN (     SELECT stadium_id     FROM concert     WHERE year = 2014 )
hard gold: SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014

index: 34
db_id: concert_singer
medium pred: SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS number_of_singers FROM concert INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme
medium gold: SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id

index: 36
db_id: concert_singer
medium pred: SELECT singer.name, COUNT(concert.concert_id) AS concert_count FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY singer.name;
medium gold: SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id

index: 37
db_id: concert_singer
medium pred: SELECT singer.name, COUNT(concert.concert_id) AS number_of_concerts FROM singer JOIN singer_in_concert ON singer_in_concert.singer_id = singer.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY singer.name;
medium gold: SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id

index: 41
db_id: concert_singer
medium pred: SELECT singer.name, singer.country FROM singer WHERE EXISTS(   SELECT *   FROM song   WHERE song.title LIKE '%Hey%'   AND song.singer_id = singer.singer_id )
medium gold: SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'

index: 42
db_id: concert_singer
extra pred: SELECT stadium.name, stadium.location FROM stadium INNER JOIN concert ON concert.stadium_id = stadium.stadium_id INNER JOIN singer_in_concert ON singer_in_concert.concert_id = concert.concert_id INNER JOIN singer ON singer.singer_id = singer_in_concert.singer_id WHERE concert.year IN (2014, 2015)
extra gold: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015

index: 43
db_id: concert_singer
extra pred: SELECT stadium.name, stadium.location FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014 AND EXISTS (     SELECT 1     FROM concert AS c     JOIN singer_in_concert AS sic ON c.concert_id = sic.concert_id     JOIN singer ON sic.singer_id = singer.singer_id     WHERE c.year = 2015     AND concert.stadium_id = c.stadium_id ) GROUP BY stadium.name, stadium.location
extra gold: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015

index: 46
db_id: pets_1
easy pred: SELECT COUNT(*)  FROM has_pet  JOIN student ON has_pet.stuid = student.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.weight > 10;
easy gold: SELECT count(*) FROM pets WHERE weight  >  10

index: 47
db_id: pets_1
easy pred: SELECT COUNT(*) AS num_pets FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.weight > 10;
easy gold: SELECT count(*) FROM pets WHERE weight  >  10

index: 48
db_id: pets_1
medium pred: SELECT weight FROM pets  WHERE pettype = 'dog'  ORDER BY pet_age ASC  LIMIT 1;
medium gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1

index: 49
db_id: pets_1
medium pred: SELECT MIN(weight) AS youngest_dog_weight FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'dog'
medium gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1

index: 50
db_id: pets_1
medium pred: SELECT MAX(pets.weight) AS max_weight, pets.pettype FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN pets ON has_pet.petid = pets.petid GROUP BY pets.pettype;
medium gold: SELECT max(weight) ,  petType FROM pets GROUP BY petType

index: 51
db_id: pets_1
medium pred: SELECT pets.pettype, MAX(pets.weight) AS maximum_weight FROM pets INNER JOIN has_pet ON has_pet.petid = pets.petid GROUP BY pets.pettype;
medium gold: SELECT max(weight) ,  petType FROM pets GROUP BY petType

index: 58
db_id: pets_1
extra pred: SELECT student.fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog' GROUP BY student.fname ORDER BY student.fname ASC LIMIT 1;
extra gold: SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'

index: 60
db_id: pets_1
extra pred: SELECT fname FROM student WHERE stuid IN (     SELECT stuid     FROM has_pet     INNER JOIN pets ON has_pet.petid = pets.petid     WHERE pettype = 'cat' OR pettype = 'dog'     GROUP BY stuid     HAVING COUNT(DISTINCT pettype) = 2 )
extra gold: select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'

index: 61
db_id: pets_1
extra pred: SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND student.stuid IN (   SELECT stuid   FROM student   JOIN has_pet ON student.stuid = has_pet.stuid   JOIN pets ON has_pet.petid = pets.petid   WHERE pets.pettype = 'dog' )
extra gold: SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'

index: 62
db_id: pets_1
extra pred: SELECT student.major, student.age FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid LEFT JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype != 'cat' OR pets.pettype IS NULL;
extra gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

index: 64
db_id: pets_1
hard pred: SELECT student.stuid FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid WHERE has_pet.stuid IS NULL OR has_pet.petid NOT IN (     SELECT petid FROM pets WHERE pettype = 'cat' )
hard gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'

index: 65
db_id: pets_1
hard pred: SELECT student.stuid FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid LEFT JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype <> 'cat' OR pets.pettype IS NULL
hard gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'

index: 67
db_id: pets_1
extra pred: SELECT fname FROM student WHERE student.stuid IN    (SELECT stuid     FROM has_pet    INNER JOIN pets ON has_pet.petid = pets.petid    WHERE pettype = 'dog') AND student.stuid NOT IN    (SELECT stuid     FROM has_pet    INNER JOIN pets ON has_pet.petid = pets.petid    WHERE pettype = 'cat');
extra gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

index: 68
db_id: pets_1
medium pred: SELECT pets.pettype, pets.weight FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN pets ON has_pet.petid = pets.petid ORDER BY student.age ASC LIMIT 1
medium gold: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1

index: 69
db_id: pets_1
medium pred: SELECT pettype, pet_age, weight FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid ORDER BY pet_age ASC, weight DESC LIMIT 1;
medium gold: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1

index: 70
db_id: pets_1
medium pred: SELECT pets.petid, pets.weight FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pet_age > 1;
medium gold: SELECT petid ,  weight FROM pets WHERE pet_age  >  1

index: 71
db_id: pets_1
medium pred: SELECT pets.petid, pets.weight FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pet_age > 1
medium gold: SELECT petid ,  weight FROM pets WHERE pet_age  >  1

index: 72
db_id: pets_1
medium pred: SELECT pets.pettype, AVG(pets.pet_age) AS average_age, MAX(pets.pet_age) AS max_age FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN pets ON has_pet.petid = pets.petid GROUP BY pets.pettype;
medium gold: SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype

index: 75
db_id: pets_1
medium pred: SELECT pettype, AVG(weight) AS average_weight FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid GROUP BY pettype;
medium gold: SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype

index: 84
db_id: pets_1
hard pred: SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pet_age = 3 ORDER BY student.lname DESC LIMIT 1;
hard gold: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'

index: 85
db_id: pets_1
hard pred: SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pet_age = 3 ORDER BY student.lname DESC LIMIT 1
hard gold: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'

index: 92
db_id: car_1
easy pred: SELECT COUNT(DISTINCT countries.countryid) AS country_count FROM countries JOIN continents ON countries.continent = continents.contid JOIN car_makers ON car_makers.country = countries.countryid JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid
easy gold: SELECT count(*) FROM COUNTRIES;

index: 96
db_id: car_1
hard pred: SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid JOIN continents ON countries.continent = continents.contid WHERE cars_data.horsepower = (SELECT MIN(horsepower) FROM cars_data)
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;

index: 98
db_id: car_1
extra pred: SELECT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data)
extra gold: SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)

index: 99
db_id: car_1
extra pred: SELECT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.weight <      (SELECT AVG(weight) FROM cars_data)
extra gold: SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)

index: 100
db_id: car_1
extra pred: SELECT DISTINCT car_makers.maker  FROM car_makers  JOIN countries ON car_makers.country = countries.countryid  JOIN car_names ON car_names.makeid = cars_data.id  JOIN cars_data ON cars_data.id = car_names.makeid  WHERE cars_data.year = 1970
extra gold: SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';

index: 102
db_id: car_1
extra pred: SELECT car_makers.maker, cars_data.year FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid JOIN continents ON countries.continent = continents.contid WHERE cars_data.year = (     SELECT MIN(year)     FROM cars_data )
extra gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);

index: 103
db_id: car_1
extra pred: SELECT car_makers.maker, MIN(cars_data.year) AS earliest_year FROM continents JOIN countries ON continents.contid = countries.continent JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY car_makers.maker ORDER BY earliest_year ASC LIMIT 1;
extra gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);

index: 107
db_id: car_1
hard pred: SELECT c.continent, COUNT(cm.maker) AS car makers FROM continents c LEFT JOIN countries co ON c.contid = co.continent LEFT JOIN car_makers cm ON co.countryid = cm.country GROUP BY c.continent;
hard gold: SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;

index: 108
db_id: car_1
extra pred: SELECT countries.countryname  FROM countries  INNER JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.countryid ORDER BY COUNT(car_makers.id) DESC LIMIT 1;
extra gold: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;

index: 109
db_id: car_1
extra pred: SELECT countries.countryname FROM continents JOIN countries ON countries.continent = continents.contid JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) = (     SELECT MAX(car_makers_count)     FROM (         SELECT COUNT(DISTINCT car_makers.maker) AS car_makers_count         FROM continents         JOIN countries ON countries.continent = continents.contid         JOIN car_makers ON car_makers.country = countries.countryid         GROUP BY countries.countryname     ) AS car_makers_counts )
extra gold: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;

index: 110
db_id: car_1
medium pred: SELECT COUNT(model_list.model) AS count, car_makers.fullname FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.fullname
medium gold: select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;

index: 114
db_id: car_1
medium pred: SELECT COUNT(DISTINCT car_makers.id) AS car_maker_count FROM car_makers JOIN countries ON car_makers.country = countries.countryid JOIN continents ON countries.continent = continents.contid WHERE continents.continent = 'france';
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';

index: 115
db_id: car_1
medium pred: SELECT COUNT(DISTINCT car_makers.id) AS number_of_makers  FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.continent = 'France';
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';

index: 116
db_id: car_1
hard pred: SELECT COUNT(DISTINCT model_list.modelid) FROM continents JOIN countries ON countries.continent = continents.contid JOIN car_makers ON car_makers.country = countries.countryid JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE countries.countryname = 'usa';
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';

index: 117
db_id: car_1
hard pred: SELECT COUNT(DISTINCT model_list.model) FROM continents JOIN countries ON countries.continent = continents.contid JOIN car_makers ON car_makers.country = countries.countryid JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE countries.countryname = 'United States';
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';

index: 122
db_id: car_1
medium pred: SELECT car_makers.maker, model_list.model FROM continents JOIN countries ON continents.contid = countries.continent JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id;
medium gold: SELECT Maker ,  Model FROM MODEL_LIST;

index: 123
db_id: car_1
medium pred: SELECT car_makers.maker, model_list.model FROM continents JOIN countries ON continents.contid = countries.continent JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id
medium gold: SELECT Maker ,  Model FROM MODEL_LIST;

index: 124
db_id: car_1
medium pred: SELECT DISTINCT countries.countryid, countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country
medium gold: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;

index: 130
db_id: car_1
extra pred: SELECT DISTINCT c.countryname FROM countries c INNER JOIN car_makers cm ON c.countryid = cm.country GROUP BY c.countryid HAVING COUNT(DISTINCT cm.id) >= 3 ORDER BY c.countryname ASC;
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;

index: 131
db_id: car_1
extra pred: SELECT countries.countryname  FROM countries  INNER JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY countries.countryname  HAVING COUNT(DISTINCT car_makers.id) >= 3  AND countries.continent = 'Europe'
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;

index: 132
db_id: car_1
extra pred: SELECT MAX(cars_data.horsepower), car_makers.maker FROM car_makers JOIN countries ON car_makers.country = countries.countryid JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.cylinders = 3 GROUP BY car_makers.maker;
extra gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;

index: 133
db_id: car_1
extra pred: SELECT MAX(cars_data.horsepower), car_makers.maker FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3 GROUP BY car_makers.maker;
extra gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;

index: 134
db_id: car_1
hard pred: SELECT cars_data.id, cars_data.mpg, car_makers.maker, model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid JOIN continents ON countries.continent = continents.contid ORDER BY cars_data.mpg DESC LIMIT 1;
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;

index: 138
db_id: car_1
medium pred: SELECT AVG(cars_data.edispl) FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN car_makers ON model_list.maker = car_makers.id INNER JOIN countries ON car_makers.country = countries.countryid INNER JOIN continents ON countries.continent = continents.contid WHERE car_makers.maker = 'volvo'
medium gold: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';

index: 139
db_id: car_1
medium pred: SELECT AVG(cars_data.edispl) AS average_edispl  FROM cars_data  INNER JOIN car_names ON cars_data.id = car_names.makeid  INNER JOIN model_list ON car_names.model = model_list.model  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  INNER JOIN continents ON countries.continent = continents.contid  WHERE car_makers.fullname = 'volvo'
medium gold: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';

index: 142
db_id: car_1
hard pred: SELECT car_makers.id, car_makers.maker, COUNT(cars_data.id) AS num_cars FROM car_makers INNER JOIN model_list ON model_list.maker = car_makers.id INNER JOIN car_names ON car_names.model = model_list.model INNER JOIN cars_data ON cars_data.id = car_names.makeid GROUP BY car_makers.id, car_makers.maker ORDER BY num_cars DESC LIMIT 1;
hard gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;

index: 143
db_id: car_1
hard pred: SELECT model_list.model, COUNT(DISTINCT model_list.model) AS num_versions FROM model_list GROUP BY model_list.model ORDER BY num_versions DESC LIMIT 1;
hard gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;

index: 148
db_id: car_1
medium pred: SELECT COUNT(DISTINCT model_list.modelid)  FROM car_makers  JOIN countries ON car_makers.country = countries.countryid  JOIN model_list ON model_list.maker = car_makers.id  JOIN car_names ON car_names.model = model_list.model  JOIN cars_data ON cars_data.id = car_names.makeid  WHERE car_makers.fullname = 'American Motor Company';
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';

index: 151
db_id: car_1
medium pred: SELECT car_makers.id, car_makers.maker FROM car_makers INNER JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.modelid) > 3;
medium gold: SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;

index: 152
db_id: car_1
extra pred: SELECT DISTINCT model_list.model FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN car_makers ON model_list.maker = car_makers.id INNER JOIN countries ON car_makers.country = countries.countryid INNER JOIN continents ON countries.continent = continents.contid WHERE car_makers.fullname = 'General Motors' AND cars_data.weight > 3500;
extra gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;

index: 155
db_id: car_1
easy pred: SELECT DISTINCT year  FROM cars_data WHERE weight < 4000  AND year IN (   SELECT DISTINCT year    FROM cars_data    WHERE weight > 3000 )
easy gold: select distinct year from cars_data where weight between 3000 and 4000;

index: 157
db_id: car_1
medium pred: SELECT MAX(horsepower) AS horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1;
medium gold: SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;

index: 158
db_id: car_1
extra pred: SELECT MIN(cars_data.accelerate)  FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = 'volvo'
extra gold: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;

index: 160
db_id: car_1
hard pred: SELECT COUNT(*)  FROM cars_data  WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data)
hard gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );

index: 161
db_id: car_1
hard pred: SELECT COUNT(*) FROM cars_data WHERE accelerate > (   SELECT MAX(horsepower) FROM cars_data )
hard gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );

index: 163
db_id: car_1
medium pred: SELECT COUNT(DISTINCT countries.countryid)  FROM countries  JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY countries.continent  HAVING COUNT(DISTINCT car_makers.id) > 2;
medium gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2

index: 166
db_id: car_1
extra pred: SELECT MAX(cars_data.horsepower), model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.cylinders = 4 GROUP BY model_list.model ORDER BY cars_data.horsepower DESC LIMIT 1;
extra gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;

index: 167
db_id: car_1
extra pred: SELECT model_list.model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1;
extra gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;

index: 168
db_id: car_1
extra pred: SELECT car_names.makeid, car_makers.maker FROM car_names JOIN cars_data ON cars_data.id = car_names.makeid JOIN model_list ON model_list.model = car_names.model JOIN car_makers ON car_makers.id = model_list.maker WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cars_data.cylinders <= 3
extra gold: SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;

index: 169
db_id: car_1
extra pred: SELECT car_makers.id, car_makers.maker FROM car_makers JOIN countries ON car_makers.country = countries.countryid JOIN continents ON countries.continent = continents.contid JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.horsepower < (SELECT MIN(horsepower) FROM cars_data) AND cars_data.cylinders < 4;
extra gold: select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;

index: 172
db_id: car_1
extra pred: SELECT DISTINCT model_list.model FROM model_list JOIN car_names ON model_list.modelid = car_names.model JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid JOIN continents ON countries.continent = continents.contid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < 3500 AND car_makers.fullname <> 'Ford Motor Company'
extra gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';

index: 174
db_id: car_1
hard pred: SELECT DISTINCT countries.countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.country IS NULL
hard gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;

index: 175
db_id: car_1
hard pred: SELECT countryname FROM countries WHERE countryid NOT IN (   SELECT DISTINCT country   FROM car_makers )
hard gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;

index: 176
db_id: car_1
extra pred: SELECT car_makers.id, car_makers.maker FROM car_makers INNER JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.model) >= 2 AND COUNT(DISTINCT car_makers.id) > 3
extra gold: select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;

index: 177
db_id: car_1
extra pred: SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid JOIN countries ON countries.countryid = car_makers.country JOIN continents ON continents.contid = countries.continent GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.model) >= 2 AND COUNT(DISTINCT car_names.make) > 3
extra gold: SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;

index: 178
db_id: car_1
extra pred: SELECT countries.countryid, countries.countryname FROM countries JOIN continents ON countries.continent = continents.contid JOIN car_makers ON car_makers.country = countries.countryid JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model WHERE car_makers.maker = 'fiat' OR       (SELECT COUNT(DISTINCT car_makers.maker)        FROM car_makers        WHERE car_makers.country = countries.countryid) > 3
extra gold: SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';

index: 179
db_id: car_1
extra pred: SELECT countries.countryid, countries.countryname FROM countries JOIN car_makers ON car_makers.country = countries.countryid WHERE (   (SELECT COUNT(*) FROM car_makers WHERE car_makers.country = countries.countryid) > 3   OR car_makers.fullname = 'fiat' )
extra gold: select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';

index: 181
db_id: flight_2
easy pred: SELECT airlines.country FROM airlines WHERE airlines.abbreviation = 'Jetblue Airways'
easy gold: SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"

index: 185
db_id: flight_2
medium pred: SELECT airlines.uid, airlines.airline, airlines.abbreviation, airports.country FROM airlines INNER JOIN airports ON airlines.country = airports.countryabbrev WHERE airports.countryabbrev = 'USA'
medium gold: SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"

index: 206
db_id: flight_2
easy pred: SELECT COUNT(*)  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.airportname = 'ATO'
easy gold: SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"

index: 207
db_id: flight_2
easy pred: SELECT COUNT(*) AS flight_count FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname = 'ATO'
easy gold: SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"

index: 214
db_id: flight_2
medium pred: SELECT COUNT(*)  FROM flights  WHERE airline = 'JetBlue Airways'
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"

index: 215
db_id: flight_2
medium pred: SELECT COUNT(*)  FROM flights  WHERE airline = 'Jetblue Airways'
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"

index: 222
db_id: flight_2
extra pred: SELECT airports.city, COUNT(flights.destairport) AS arrival_count FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY airports.city ORDER BY arrival_count DESC LIMIT 1;
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1

index: 224
db_id: flight_2
extra pred: SELECT airports.city, COUNT(flights.sourceairport) AS num_departing_flights FROM flights INNER JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY airports.city ORDER BY num_departing_flights DESC LIMIT 1;
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1

index: 225
db_id: flight_2
extra pred: SELECT sourceairport AS city, COUNT(sourceairport) AS frequency FROM flights GROUP BY sourceairport ORDER BY frequency DESC LIMIT 1;
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1

index: 226
db_id: flight_2
extra pred: SELECT airports.airportcode, COUNT(*) AS flight_count FROM airports JOIN flights ON flights.destairport = airports.airportcode OR flights.sourceairport = airports.airportcode GROUP BY airports.airportcode ORDER BY flight_count DESC LIMIT 1;
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1

index: 228
db_id: flight_2
extra pred: SELECT airports.airportcode FROM airports LEFT JOIN flights ON flights.destairport = airports.airportcode LEFT JOIN flights ON flights.sourceairport = airports.airportcode GROUP BY airports.airportcode ORDER BY COUNT(flights.airline) ASC LIMIT 1
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1

index: 229
db_id: flight_2
extra pred: SELECT airports.airportcode AS airport_code, COUNT(flights.flightno) AS num_flights FROM airports INNER JOIN flights ON flights.destairport = airports.airportcode OR flights.sourceairport = airports.airportcode GROUP BY airports.airportcode ORDER BY num_flights ASC LIMIT 1;
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1

index: 230
db_id: flight_2
extra pred: SELECT airline, COUNT(*) as flight_count FROM flights GROUP BY airline ORDER BY flight_count DESC LIMIT 1;
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1

index: 231
db_id: flight_2
extra pred: SELECT airlines.airline, COUNT(*) AS num_flights FROM flights JOIN airlines ON flights.airline = airlines.uid GROUP BY airlines.airline ORDER BY num_flights DESC LIMIT 1;
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1

index: 232
db_id: flight_2
extra pred: SELECT abbreviation, country FROM airlines WHERE uid = (   SELECT airline   FROM flights   GROUP BY airline   ORDER BY COUNT(*) ASC   LIMIT 1 )
extra gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1

index: 233
db_id: flight_2
extra pred: SELECT abbreviation, country  FROM airlines WHERE uid = (   SELECT airline    FROM flights   GROUP BY airline   HAVING COUNT(*) = (     SELECT MIN(cnt)      FROM (       SELECT COUNT(*) AS cnt        FROM flights        GROUP BY airline     ) AS subquery   ) )
extra gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1

index: 234
db_id: flight_2
medium pred: SELECT DISTINCT airlines.uid, airlines.airline, airlines.abbreviation, airlines.country FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'AHD';
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"

index: 235
db_id: flight_2
medium pred: SELECT airlines.uid, airlines.airline, airlines.abbreviation, airlines.country FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'AHD'
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"

index: 236
db_id: flight_2
medium pred: SELECT airlines.uid, airlines.airline, airlines.abbreviation, airlines.country FROM airlines JOIN flights ON flights.airline = airlines.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportcode = 'AHD'
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"

index: 237
db_id: flight_2
medium pred: SELECT airlines.uid, airlines.airline, airlines.abbreviation, airlines.country FROM airlines INNER JOIN flights ON airlines.uid = flights.airline INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportcode = 'AHD'
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"

index: 238
db_id: flight_2
extra pred: SELECT DISTINCT airlines.uid, airlines.airline, airlines.abbreviation, airlines.country FROM flights INNER JOIN airlines ON flights.airline = airlines.uid INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'APG' AND EXISTS (     SELECT 1     FROM flights AS f     INNER JOIN airports AS a ON f.sourceairport = a.airportcode     WHERE a.city = 'CVO'     AND f.airline = airlines.uid )
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"

index: 239
db_id: flight_2
extra pred: SELECT a.airline, a.uid, a.abbreviation, a.country FROM airlines a JOIN flights f1 ON a.uid = f1.airline JOIN flights f2 ON a.uid = f2.airline JOIN airports apg ON f1.sourceairport = apg.airportcode JOIN airports cvo ON f2.sourceairport = cvo.airportcode WHERE apg.airportname = 'APG' AND cvo.airportname = 'CVO'
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"

index: 240
db_id: flight_2
extra pred: SELECT a.uid, a.airline, a.abbreviation, a.country FROM airlines a JOIN flights f ON f.airline = a.uid JOIN airports ap ON f.sourceairport = ap.airportcode WHERE ap.airportcode = 'CVO' AND a.uid NOT IN (   SELECT a2.uid   FROM airlines a2   JOIN flights f2 ON f2.airline = a2.uid   JOIN airports ap2 ON f2.sourceairport = ap2.airportcode   WHERE ap2.airportcode = 'APG' );
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"

index: 241
db_id: flight_2
extra pred: SELECT airlines.uid, airlines.airline, airlines.abbreviation, airlines.country  FROM airlines  INNER JOIN flights ON airlines.uid = flights.airline  INNER JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.city = 'CVO'  AND airlines.uid NOT IN    (SELECT airlines.uid    FROM airlines    INNER JOIN flights ON airlines.uid = flights.airline    INNER JOIN airports ON flights.sourceairport = airports.airportcode    WHERE airports.city = 'APG')
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"

index: 242
db_id: flight_2
medium pred: SELECT airlines.uid, airlines.airline, airlines.abbreviation, airlines.country FROM airlines INNER JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.uid, airlines.airline, airlines.abbreviation, airlines.country HAVING COUNT(flights.airline) >= 10;
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10

index: 243
db_id: flight_2
medium pred: SELECT airlines.uid, airlines.airline, airlines.abbreviation,         airlines.country FROM airlines INNER JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.uid, airlines.airline, airlines.abbreviation,           airlines.country HAVING COUNT(*) >= 10;
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10

index: 244
db_id: flight_2
medium pred: SELECT airlines.uid, airlines.airline, airlines.abbreviation, airlines.country FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.uid, airlines.airline, airlines.abbreviation, airlines.country HAVING COUNT(flights.flightno) < 200;
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200

index: 245
db_id: flight_2
medium pred: SELECT airlines.uid, airlines.airline, airlines.abbreviation, airlines.country FROM airlines WHERE airlines.uid IN (     SELECT flights.airline     FROM flights     GROUP BY flights.airline     HAVING COUNT(*) < 200 )
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200

index: 247
db_id: flight_2
medium pred: SELECT flightno FROM flights WHERE airline = 'United Airlines'
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"

index: 248
db_id: flight_2
easy pred: SELECT flights.flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'APG';
easy gold: SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"

index: 249
db_id: flight_2
easy pred: SELECT flights.flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname = 'APG'
easy gold: SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"

index: 250
db_id: flight_2
easy pred: SELECT flights.flightno FROM flights INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname = 'APG';
easy gold: SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"

index: 251
db_id: flight_2
easy pred: SELECT flights.flightno  FROM flights  JOIN airports    ON flights.destairport = airports.airportcode  WHERE airports.airportname = 'APG'
easy gold: SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"

index: 252
db_id: flight_2
medium pred: SELECT flights.flightno  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.city = 'Aberdeen'
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"

index: 266
db_id: employee_hire_evaluation
medium pred: SELECT city FROM employee GROUP BY city HAVING COUNT(DISTINCT employee_id) > 1 AND MAX(age) < 30;
medium gold: SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1

index: 278
db_id: employee_hire_evaluation
extra pred: SELECT e.name FROM employee AS e JOIN evaluation AS ev ON e.employee_id = ev.employee_id GROUP BY e.name ORDER BY COUNT(ev.year_awarded) DESC LIMIT 1
extra gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1

index: 279
db_id: employee_hire_evaluation
extra pred: SELECT employee.name FROM employee JOIN evaluation ON evaluation.employee_id = employee.employee_id GROUP BY employee.employee_id, employee.name ORDER BY COUNT(evaluation.year_awarded) DESC LIMIT 1;
extra gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1

index: 280
db_id: employee_hire_evaluation
hard pred: SELECT employee.name FROM employee INNER JOIN hiring ON hiring.employee_id = employee.employee_id INNER JOIN evaluation ON evaluation.employee_id = employee.employee_id WHERE evaluation.bonus IN (   SELECT MAX(bonus)   FROM evaluation )
hard gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1

index: 284
db_id: employee_hire_evaluation
extra pred: SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name HAVING COUNT(hiring.employee_id) = (     SELECT MAX(employee_count)     FROM (         SELECT COUNT(*) as employee_count         FROM hiring         GROUP BY shop_id     ) AS counts )
extra gold: SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1

index: 285
db_id: employee_hire_evaluation
extra pred: SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name ORDER BY COUNT(*) DESC LIMIT 1;
extra gold: SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1

index: 290
db_id: employee_hire_evaluation
easy pred: SELECT SUM(evaluation.bonus) AS total_bonus_given FROM evaluation JOIN employee ON evaluation.employee_id = employee.employee_id JOIN hiring ON hiring.employee_id = employee.employee_id JOIN shop ON hiring.shop_id = shop.shop_id
easy gold: SELECT sum(bonus) FROM evaluation

index: 292
db_id: employee_hire_evaluation
easy pred: SELECT employee.employee_id, employee.name, employee.age, employee.city FROM employee, shop, hiring, evaluation WHERE hiring.employee_id = employee.employee_id AND hiring.shop_id = shop.shop_id AND evaluation.employee_id = employee.employee_id
easy gold: SELECT * FROM hiring

index: 293
db_id: employee_hire_evaluation
easy pred: SELECT employee.employee_id, employee.name, employee.age, employee.city, shop.shop_id, shop.name, shop.location, shop.district, shop.number_products, shop.manager_name, hiring.start_from, hiring.is_full_time, evaluation.year_awarded, evaluation.bonus FROM employee JOIN hiring ON hiring.employee_id = employee.employee_id JOIN shop ON shop.shop_id = hiring.shop_id LEFT JOIN evaluation ON evaluation.employee_id = employee.employee_id
easy gold: SELECT * FROM hiring

index: 294
db_id: employee_hire_evaluation
hard pred: SELECT DISTINCT district FROM shop WHERE district IN (     SELECT district     FROM shop     WHERE number_products < 3000 ) AND district IN (     SELECT district     FROM shop     WHERE number_products > 10000 )
hard gold: SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000

index: 295
db_id: employee_hire_evaluation
hard pred: SELECT district FROM shop WHERE number_products < 3000   AND district IN (     SELECT district     FROM shop     WHERE number_products > 10000   );
hard gold: SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000

index: 306
db_id: cre_Doc_Template_Mgt
easy pred: SELECT COUNT(DISTINCT templates.template_type_code) AS total_templates FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code INNER JOIN documents ON templates.template_id = documents.template_id INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id
easy gold: SELECT count(DISTINCT template_id) FROM Documents

index: 307
db_id: cre_Doc_Template_Mgt
easy pred: SELECT COUNT(DISTINCT templates.template_type_code) FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code JOIN documents ON templates.template_id = documents.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id
easy gold: SELECT count(DISTINCT template_id) FROM Documents

index: 309
db_id: cre_Doc_Template_Mgt
medium pred: SELECT COUNT(DISTINCT documents.document_id) FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code JOIN documents ON documents.template_id = templates.template_id WHERE ref_template_types.template_type_description = 'PPT'
medium gold: SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'

index: 310
db_id: cre_Doc_Template_Mgt
medium pred: SELECT templates.template_id, COUNT(documents.template_id) AS number_of_documents FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id;
medium gold: SELECT template_id ,  count(*) FROM Documents GROUP BY template_id

index: 312
db_id: cre_Doc_Template_Mgt
extra pred: SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code GROUP BY templates.template_id, templates.template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
extra gold: SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1

index: 313
db_id: cre_Doc_Template_Mgt
extra pred: SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON documents.template_id = templates.template_id GROUP BY templates.template_id, templates.template_type_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1;
extra gold: SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1

index: 323
db_id: cre_Doc_Template_Mgt
easy pred: SELECT DISTINCT template_type_code FROM ref_template_types;
easy gold: SELECT DISTINCT template_type_code FROM Templates

index: 330
db_id: cre_Doc_Template_Mgt
medium pred: SELECT ref_template_types.template_type_code, COUNT(templates.template_id) AS number_of_templates FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_code;
medium gold: SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code

index: 331
db_id: cre_Doc_Template_Mgt
medium pred: SELECT ref_template_types.template_type_code, COUNT(templates.template_id) AS total_templates  FROM ref_template_types  LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  GROUP BY ref_template_types.template_type_code;
medium gold: SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code

index: 332
db_id: cre_Doc_Template_Mgt
hard pred: SELECT     template_type_code,     COUNT(*) AS number_of_templates FROM     ref_template_types JOIN     templates ON templates.template_type_code = ref_template_types.template_type_code GROUP BY     template_type_code ORDER BY     number_of_templates DESC LIMIT 1;
hard gold: SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1

index: 334
db_id: cre_Doc_Template_Mgt
easy pred: SELECT ref_template_types.template_type_code, ref_template_types.template_type_description FROM ref_template_types LEFT JOIN templates ON templates.template_type_code = ref_template_types.template_type_code GROUP BY ref_template_types.template_type_code, ref_template_types.template_type_description HAVING COUNT(templates.template_id) < 3;
easy gold: SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3

index: 335
db_id: cre_Doc_Template_Mgt
easy pred: SELECT ref_template_types.template_type_code, ref_template_types.template_type_description FROM ref_template_types INNER JOIN templates ON templates.template_type_code = ref_template_types.template_type_code GROUP BY ref_template_types.template_type_code, ref_template_types.template_type_description HAVING COUNT(templates.template_id) < 3;
easy gold: SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3

index: 336
db_id: cre_Doc_Template_Mgt
medium pred: SELECT MIN(version_number), template_type_code FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code;
medium gold: SELECT min(Version_Number) ,  template_type_code FROM Templates

index: 337
db_id: cre_Doc_Template_Mgt
medium pred: SELECT MIN(templates.version_number), templates.template_type_code FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code JOIN documents ON documents.template_id = templates.template_id JOIN paragraphs ON paragraphs.document_id = documents.document_id;
medium gold: SELECT min(Version_Number) ,  template_type_code FROM Templates

index: 342
db_id: cre_Doc_Template_Mgt
medium pred: SELECT ref_template_types.template_type_code, COUNT(*) AS num_documents FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code
medium gold: SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code

index: 343
db_id: cre_Doc_Template_Mgt
medium pred: SELECT ref_template_types.template_type_code, ref_template_types.template_type_description,  COUNT(documents.document_id) as num_documents FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code JOIN documents ON documents.template_id = templates.template_id GROUP BY ref_template_types.template_type_code, ref_template_types.template_type_description
medium gold: SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code

index: 344
db_id: cre_Doc_Template_Mgt
extra pred: SELECT ref_template_types.template_type_code, ref_template_types.template_type_description FROM ref_template_types JOIN templates ON templates.template_type_code = ref_template_types.template_type_code JOIN documents ON documents.template_id = templates.template_id GROUP BY ref_template_types.template_type_code, ref_template_types.template_type_description ORDER BY COUNT(*) DESC LIMIT 1;
extra gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1

index: 345
db_id: cre_Doc_Template_Mgt
extra pred: SELECT template_type_code FROM ref_template_types INNER JOIN templates ON templates.template_type_code = ref_template_types.template_type_code INNER JOIN documents ON documents.template_id = templates.template_id INNER JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
extra gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1

index: 346
db_id: cre_Doc_Template_Mgt
hard pred: SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_type_code FROM templates)
hard gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id

index: 347
db_id: cre_Doc_Template_Mgt
hard pred: SELECT ref_template_types.template_type_code, ref_template_types.template_type_description FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code WHERE templates.template_type_code IS NULL;
hard gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id

index: 348
db_id: cre_Doc_Template_Mgt
medium pred: SELECT ref_template_types.template_type_code, ref_template_types.template_type_description  FROM ref_template_types  JOIN templates ON templates.template_type_code = ref_template_types.template_type_code
medium gold: SELECT template_type_code ,  template_type_description FROM Ref_template_types

index: 349
db_id: cre_Doc_Template_Mgt
medium pred: SELECT ref_template_types.template_type_code, ref_template_types.template_type_description FROM ref_template_types JOIN templates ON templates.template_type_code = ref_template_types.template_type_code JOIN documents ON documents.template_id = templates.template_id JOIN paragraphs ON paragraphs.document_id = documents.document_id
medium gold: SELECT template_type_code ,  template_type_description FROM Ref_template_types

index: 350
db_id: cre_Doc_Template_Mgt
easy pred: SELECT ref_template_types.template_type_description FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE templates.template_type_code = "AD"
easy gold: SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"

index: 351
db_id: cre_Doc_Template_Mgt
easy pred: SELECT ref_template_types.template_type_description  FROM ref_template_types  JOIN templates ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_code = 'AD'
easy gold: SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"

index: 354
db_id: cre_Doc_Template_Mgt
medium pred: SELECT DISTINCT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON templates.template_type_code = ref_template_types.template_type_code JOIN documents ON documents.template_id = templates.template_id JOIN paragraphs ON paragraphs.document_id = documents.document_id
medium gold: SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID

index: 355
db_id: cre_Doc_Template_Mgt
medium pred: SELECT DISTINCT ref_template_types.template_type_description FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code JOIN documents ON documents.template_id = templates.template_id JOIN paragraphs ON paragraphs.document_id = documents.document_id;
medium gold: SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID

index: 362
db_id: cre_Doc_Template_Mgt
medium pred: SELECT paragraphs.paragraph_id, paragraphs.document_id, paragraphs.paragraph_text, paragraphs.other_details  FROM paragraphs  INNER JOIN documents ON paragraphs.document_id = documents.document_id  INNER JOIN templates ON documents.template_id = templates.template_id  INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE paragraphs.paragraph_text = 'Korea'
medium gold: select other_details from paragraphs where paragraph_text like 'korea'

index: 363
db_id: cre_Doc_Template_Mgt
medium pred: SELECT * FROM paragraphs INNER JOIN documents ON paragraphs.document_id = documents.document_id INNER JOIN templates ON documents.template_id = templates.template_id INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE paragraph_text LIKE '%Korea%'
medium gold: select other_details from paragraphs where paragraph_text like 'korea'

index: 368
db_id: cre_Doc_Template_Mgt
medium pred: SELECT documents.document_id, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN paragraphs ON paragraphs.document_id = documents.document_id ORDER BY documents.document_id;
medium gold: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id

index: 374
db_id: cre_Doc_Template_Mgt
extra pred: SELECT documents.document_id, documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1;
extra gold: SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1

index: 375
db_id: cre_Doc_Template_Mgt
extra pred: SELECT d.document_id, d.document_name FROM documents d INNER JOIN templates t ON d.template_id = t.template_id INNER JOIN (     SELECT document_id, COUNT(*) AS paragraph_count     FROM paragraphs     GROUP BY document_id ) p ON d.document_id = p.document_id ORDER BY p.paragraph_count DESC LIMIT 1;
extra gold: SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1

index: 376
db_id: cre_Doc_Template_Mgt
hard pred: SELECT documents.document_id  FROM documents  LEFT JOIN (SELECT document_id, COUNT(*) AS num_paragraphs             FROM paragraphs             GROUP BY document_id) AS p  ON documents.document_id = p.document_id  ORDER BY num_paragraphs ASC  LIMIT 1;
hard gold: SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1

index: 377
db_id: cre_Doc_Template_Mgt
hard pred: SELECT documents.document_id FROM documents LEFT JOIN templates ON documents.template_id = templates.template_id LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY COUNT(paragraphs.paragraph_id) LIMIT 1;
hard gold: SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1

index: 378
db_id: cre_Doc_Template_Mgt
easy pred: SELECT documents.document_id FROM documents INNER JOIN templates ON documents.template_id = templates.template_id INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE LENGTH(paragraphs.paragraph_text) BETWEEN 1 AND 2;
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2

index: 379
db_id: cre_Doc_Template_Mgt
easy pred: SELECT documents.document_id FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE (     SELECT COUNT(paragraph_id)     FROM paragraphs     WHERE paragraphs.document_id = documents.document_id ) BETWEEN 1 AND 2
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2

index: 380
db_id: cre_Doc_Template_Mgt
hard pred: SELECT documents.document_id, paragraphs.paragraph_text FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text = 'Brazil' AND paragraphs.paragraph_text = 'Ireland'
hard gold: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'

index: 381
db_id: cre_Doc_Template_Mgt
hard pred: SELECT documents.document_id FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE paragraphs.paragraph_text = 'Brazil' AND paragraphs.paragraph_text = 'Ireland'
hard gold: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'

index: 386
db_id: course_teach
medium pred: SELECT teacher.age, teacher.hometown  FROM teacher  JOIN course_arrange ON course_arrange.teacher_id = teacher.teacher_id  JOIN course ON course_arrange.course_id = course.course_id
medium gold: SELECT Age ,  Hometown FROM teacher

index: 387
db_id: course_teach
medium pred: SELECT teacher.age, teacher.hometown FROM teacher JOIN course_arrange ON course_arrange.teacher_id = teacher.teacher_id JOIN course ON course_arrange.course_id = course.course_id;
medium gold: SELECT Age ,  Hometown FROM teacher

index: 394
db_id: course_teach
medium pred: SELECT teacher.hometown, COUNT(teacher.teacher_id) AS num_of_teachers FROM teacher INNER JOIN course_arrange ON course_arrange.teacher_id = teacher.teacher_id GROUP BY teacher.hometown;
medium gold: SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown

index: 395
db_id: course_teach
medium pred: SELECT teacher.hometown, COUNT(teacher.teacher_id) as teacher_count FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.hometown;
medium gold: SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown

index: 396
db_id: course_teach
hard pred: SELECT hometown, COUNT(*) AS count FROM teacher GROUP BY hometown ORDER BY count DESC LIMIT 1;
hard gold: SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1

index: 397
db_id: course_teach
hard pred: SELECT teacher.hometown, COUNT(*) as total_count FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.hometown ORDER BY total_count DESC LIMIT 1;
hard gold: SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1

index: 398
db_id: course_teach
easy pred: SELECT t1.hometown FROM teacher t1 JOIN teacher t2 ON t1.hometown = t2.hometown WHERE t1.teacher_id <> t2.teacher_id
easy gold: SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2

index: 408
db_id: course_teach
medium pred: SELECT teacher.name FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.teacher_id HAVING COUNT(DISTINCT course_arrange.course_id) >= 2;
medium gold: SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2

index: 409
db_id: course_teach
medium pred: SELECT t.name FROM teacher t INNER JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.teacher_id HAVING COUNT(DISTINCT ca.course_id) >= 2
medium gold: SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2

index: 421
db_id: museum_visit
extra pred: SELECT visitor.id, visitor.name, visitor.level_of_membership  FROM visitor JOIN visit ON visit.visitor_id = visitor.id GROUP BY visitor.id, visitor.name, visitor.level_of_membership ORDER BY SUM(visit.total_spent) DESC LIMIT 1;
extra gold: SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1

index: 424
db_id: museum_visit
hard pred: SELECT visitor.name, visitor.age FROM visitor INNER JOIN visit ON visitor.id = visit.visitor_id GROUP BY visit.visitor_id ORDER BY SUM(visit.num_of_ticket) DESC LIMIT 1;
hard gold: SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1

index: 427
db_id: museum_visit
extra pred: SELECT visitor.name FROM visitor JOIN visit ON visit.visitor_id = visitor.id JOIN museum ON visit.museum_id = museum.museum_id WHERE visit.museum_id IN (     SELECT museum_id     FROM museum     WHERE open_year < 2009 ) AND visit.museum_id IN (     SELECT museum_id     FROM museum     WHERE open_year > 2011 )
extra gold: SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011

index: 428
db_id: museum_visit
extra pred: SELECT COUNT(DISTINCT visitor.id) AS num_visitors FROM visitor LEFT JOIN visit ON visitor.id = visit.visitor_id LEFT JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2010 OR visit.museum_id IS NULL
extra gold: SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)

index: 435
db_id: wta_1
medium pred: SELECT players.first_name, players.birth_date FROM players JOIN matches ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id WHERE players.country_code = 'USA';
medium gold: SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'

index: 436
db_id: wta_1
medium pred: SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id
medium gold: SELECT avg(loser_age) ,  avg(winner_age) FROM matches

index: 437
db_id: wta_1
medium pred: SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches INNER JOIN players ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id
medium gold: SELECT avg(loser_age) ,  avg(winner_age) FROM matches

index: 439
db_id: wta_1
easy pred: SELECT AVG(winner_rank) AS average_rank  FROM matches  INNER JOIN players ON matches.winner_id = players.player_id  INNER JOIN rankings ON rankings.player_id = players.player_id
easy gold: SELECT avg(winner_rank) FROM matches

index: 440
db_id: wta_1
easy pred: SELECT MAX(loser_rank) AS highest_rank FROM matches JOIN players ON matches.loser_id = players.player_id
easy gold: SELECT min(loser_rank) FROM matches

index: 441
db_id: wta_1
easy pred: SELECT MAX(loser_rank) AS best_rank_of_losers FROM matches INNER JOIN players ON matches.loser_id = players.player_id INNER JOIN rankings ON rankings.player_id = players.player_id
easy gold: SELECT min(loser_rank) FROM matches

index: 445
db_id: wta_1
easy pred: SELECT COUNT(DISTINCT loser_name) AS num_different_loser_names FROM players JOIN matches ON matches.loser_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id;
easy gold: SELECT count(DISTINCT loser_name) FROM matches

index: 448
db_id: wta_1
hard pred: SELECT DISTINCT winner_name  FROM matches INNER JOIN players ON matches.winner_id = players.player_id WHERE matches.year IN (2013, 2016) GROUP BY winner_name HAVING COUNT(DISTINCT matches.year) = 2
hard gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016

index: 449
db_id: wta_1
hard pred: SELECT p.first_name, p.last_name FROM players p  INNER JOIN matches m1 ON p.player_id = m1.winner_id  INNER JOIN matches m2 ON p.player_id = m2.winner_id  WHERE m1.year = 2013 AND m2.year = 2016
hard gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016

index: 452
db_id: wta_1
extra pred: SELECT players.country_code, players.first_name FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND matches.year = 'Australian Open' GROUP BY players.country_code, players.first_name
extra gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'

index: 453
db_id: wta_1
extra pred: SELECT players.first_name, players.country_code  FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id WHERE tournaments.winner_id = players.player_id AND tournaments.tourney_name = 'WTA Championships'  AND tournaments.tourney_name = 'Australian Open'
extra gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'

index: 455
db_id: wta_1
medium pred: SELECT players.first_name, players.country_code FROM players WHERE players.birth_date = (SELECT MIN(birth_date) FROM players)
medium gold: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1

index: 457
db_id: wta_1
medium pred: SELECT CONCAT(players.first_name, ' ', players.last_name) AS full_name FROM players ORDER BY players.birth_date
medium gold: SELECT first_name ,  last_name FROM players ORDER BY birth_date

index: 459
db_id: wta_1
medium pred: SELECT CONCAT(players.first_name,' ',players.last_name) AS full_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
medium gold: SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date

index: 462
db_id: wta_1
hard pred: SELECT year FROM matches GROUP BY year HAVING COUNT(*) = (SELECT MAX(total_matches)                   FROM (SELECT year, COUNT(*) AS total_matches                         FROM matches                         GROUP BY year) AS match_counts);
hard gold: SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1

index: 463
db_id: wta_1
hard pred: SELECT year, COUNT(*) as match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1;
hard gold: SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1

index: 464
db_id: wta_1
hard pred: SELECT players.first_name, players.last_name, players.rank_points FROM players JOIN (     SELECT winner_id, COUNT(*) as total_wins     FROM matches     GROUP BY winner_id     ORDER BY total_wins DESC     LIMIT 1 ) AS most_wins ON players.player_id = most_wins.winner_id
hard gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1

index: 465
db_id: wta_1
hard pred: SELECT      players.first_name,     players.last_name,     players.country_code,     players.hand,     rankings.ranking_points FROM      players JOIN      (     SELECT          winner_id,         COUNT(winner_id) AS num_wins     FROM          matches     GROUP BY          winner_id     ORDER BY          num_wins DESC     LIMIT 1     ) AS most_wins ON most_wins.winner_id = players.player_id JOIN      rankings ON players.player_id = rankings.player_id ORDER BY      rankings.ranking_points DESC LIMIT 1;
hard gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1

index: 466
db_id: wta_1
hard pred: SELECT p.first_name, p.last_name FROM players p JOIN matches m ON m.winner_id = p.player_id JOIN rankings r ON r.player_id = p.player_id WHERE m.tourney_name = 'Australian Open' ORDER BY r.ranking_points DESC LIMIT 1;
hard gold: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1

index: 467
db_id: wta_1
hard pred: SELECT winner_name FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;
hard gold: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1

index: 468
db_id: wta_1
medium pred: SELECT winner.first_name, winner.last_name, loser.first_name, loser.last_name FROM matches JOIN players AS winner ON matches.winner_id = winner.player_id JOIN players AS loser ON matches.loser_id = loser.player_id WHERE matches.minutes = (SELECT MAX(minutes) FROM matches)
medium gold: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1

index: 470
db_id: wta_1
medium pred: SELECT players.first_name, AVG(rankings.ranking) FROM players INNER JOIN matches ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id INNER JOIN rankings ON rankings.player_id = players.player_id GROUP BY players.first_name
medium gold: SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name

index: 471
db_id: wta_1
medium pred: SELECT players.first_name, AVG(rankings.ranking) AS average_ranking  FROM players  JOIN matches ON matches.winner_id = players.player_id  JOIN rankings ON rankings.player_id = players.player_id  GROUP BY players.first_name;
medium gold: SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name

index: 472
db_id: wta_1
medium pred: SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN matches ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id GROUP BY players.first_name
medium gold: SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name

index: 473
db_id: wta_1
medium pred: SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN matches ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id GROUP BY players.first_name;
medium gold: SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name

index: 479
db_id: wta_1
easy pred: SELECT DISTINCT players.country_code FROM players JOIN matches ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id GROUP BY players.country_code HAVING COUNT(DISTINCT players.player_id) > 50;
easy gold: SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50

index: 480
db_id: wta_1
medium pred: SELECT ranking_date, COUNT(tours) AS total_tours FROM rankings GROUP BY ranking_date;
medium gold: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date

index: 484
db_id: wta_1
medium pred: SELECT      players.first_name,     players.last_name,     players.rank FROM     players INNER JOIN     matches ON matches.winner_id = players.player_id INNER JOIN     rankings ON rankings.player_id = players.player_id ORDER BY     players.birth_date DESC LIMIT     3
medium gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3

index: 485
db_id: wta_1
medium pred: SELECT first_name, last_name, winner_rank FROM players JOIN matches ON matches.winner_id = players.player_id ORDER BY winner_age LIMIT 3;
medium gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3

index: 486
db_id: wta_1
medium pred: SELECT COUNT(DISTINCT m1.winner_id) FROM matches m1 JOIN players p ON m1.winner_id = p.player_id WHERE p.hand = 'L' AND EXISTS (     SELECT 1     FROM matches m2     WHERE m2.loser_id = m1.winner_id     AND m2.tourney_name = 'WTA Championships' )
medium gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'

index: 487
db_id: wta_1
medium pred: SELECT COUNT(players.player_id) AS left_handed_winners FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id WHERE players.hand = 'L' AND matches.tourney_name = 'WTA Championships'
medium gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'

index: 488
db_id: wta_1
hard pred: SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN rankings r ON p.player_id = r.player_id JOIN matches m ON m.winner_id = p.player_id WHERE r.ranking_points = (     SELECT MAX(ranking_points)     FROM rankings ) LIMIT 1;
hard gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1

index: 489
db_id: wta_1
hard pred: SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN (     SELECT winner_id, SUM(winner_rank_points) AS total_points     FROM matches     GROUP BY winner_id     ORDER BY total_points DESC     LIMIT 1 ) m ON p.player_id = m.winner_id
hard gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1

index: 492
db_id: battle_death
easy pred: SELECT COUNT(*)  FROM ship JOIN battle ON ship.lost_in_battle = battle.id WHERE battle.result = 'Captured'
easy gold: SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'

index: 494
db_id: battle_death
medium pred: SELECT name, date, result FROM battle
medium gold: SELECT name ,  date FROM battle

index: 496
db_id: battle_death
easy pred: SELECT AVG(killed + injured) AS average_injuries FROM death JOIN ship ON death.caused_by_ship_id = ship.id JOIN battle ON ship.lost_in_battle = battle.id
easy gold: SELECT avg(injured) FROM death

index: 497
db_id: battle_death
medium pred: SELECT death.*, injury.* FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';
medium gold: SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'

index: 499
db_id: battle_death
medium pred: SELECT battle.id, battle.name FROM battle WHERE EXISTS (   SELECT *   FROM ship   WHERE ship.lost_in_battle = battle.id    AND ship.ship_type LIKE '%Brig%' )
medium gold: SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'

index: 501
db_id: battle_death
extra pred: SELECT ship.id, ship.name FROM ship INNER JOIN battle ON ship.lost_in_battle = battle.id INNER JOIN death ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1;
extra gold: SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1

index: 505
db_id: battle_death
extra pred: SELECT b.name, b.date FROM battle b JOIN ship s1 ON s1.lost_in_battle = b.id JOIN ship s2 ON s2.lost_in_battle = b.id WHERE s1.name = 'Lettice' AND s2.name = 'HMS Atalanta'
extra gold: SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'

index: 506
db_id: battle_death
extra pred: SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON ship.lost_in_battle = battle.id WHERE battle.location = 'English Channel' AND ship.id IS NULL;
extra gold: SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'

index: 513
db_id: student_transcripts_tracking
easy pred: SELECT course_description  FROM courses
easy gold: SELECT course_description FROM Courses WHERE course_name  =  'math'

index: 515
db_id: student_transcripts_tracking
easy pred: SELECT addresses.zip_postcode FROM addresses JOIN students ON students.permanent_address_id = addresses.address_id JOIN departments ON degree_programs.department_id = departments.department_id JOIN student_enrolment ON student_enrolment.student_id = students.student_id JOIN student_enrolment_courses ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id JOIN courses ON student_enrolment_courses.course_id = courses.course_id JOIN sections ON sections.course_id = courses.course_id JOIN semesters ON student_enrolment.semester_id = semesters.semester_id JOIN transcripts ON transcript_contents.transcript_id = transcripts.transcript_id JOIN transcript_contents ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id WHERE departments.department_name = 'Port Chelsea'
easy gold: SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'

index: 516
db_id: student_transcripts_tracking
extra pred: SELECT departments.department_name, departments.department_id FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_name, departments.department_id ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1;
extra gold: SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1

index: 517
db_id: student_transcripts_tracking
extra pred: SELECT departments.department_id, departments.department_name FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_id, departments.department_name ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1;
extra gold: select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1

index: 522
db_id: student_transcripts_tracking
medium pred: SELECT COUNT(degree_programs.degree_program_id) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id
medium gold: SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'

index: 523
db_id: student_transcripts_tracking
medium pred: SELECT COUNT(*)  FROM degree_programs  WHERE department_id = (SELECT department_id                         FROM departments                         WHERE department_name = 'engineering')
medium gold: SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'

index: 527
db_id: student_transcripts_tracking
medium pred: SELECT courses.course_id, courses.course_name FROM courses LEFT JOIN sections ON courses.course_id = sections.course_id GROUP BY courses.course_id, courses.course_name HAVING COUNT(sections.section_id) < 2;
medium gold: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2

index: 530
db_id: student_transcripts_tracking
extra pred: SELECT semesters.semester_id, semesters.semester_name FROM semesters JOIN student_enrolment ON student_enrolment.semester_id = semesters.semester_id GROUP BY semesters.semester_id, semesters.semester_name ORDER BY COUNT(*) DESC LIMIT 1;
extra gold: SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1

index: 531
db_id: student_transcripts_tracking
extra pred: SELECT s.semester_name, s.semester_id, COUNT(*) AS num_students FROM semesters s JOIN student_enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_name, s.semester_id ORDER BY num_students DESC LIMIT 1;
extra gold: SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1

index: 534
db_id: student_transcripts_tracking
medium pred: SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students JOIN student_enrolment ON student_enrolment.student_id = students.student_id JOIN student_enrolment_courses ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id JOIN courses ON courses.course_id = student_enrolment_courses.course_id JOIN degree_programs ON degree_programs.degree_program_id = student_enrolment.degree_program_id WHERE degree_programs.department_id IN (     SELECT department_id      FROM degree_programs     GROUP BY department_id     HAVING COUNT(*) > 1 ) AND student_enrolment.semester_id = (SELECT semester_id FROM semesters WHERE semester_name = 'current semester');
medium gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2

index: 538
db_id: student_transcripts_tracking
extra pred: SELECT courses.course_name, COUNT(*) AS enrolment_count FROM student_enrolment_courses INNER JOIN courses ON student_enrolment_courses.course_id = courses.course_id GROUP BY student_enrolment_courses.course_id ORDER BY enrolment_count DESC LIMIT 1;
extra gold: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1

index: 540
db_id: student_transcripts_tracking
extra pred: SELECT courses.course_id, courses.course_name, courses.course_description FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY courses.course_id, courses.course_name, courses.course_description ORDER BY COUNT(*) DESC LIMIT 1;
extra gold: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1

index: 542
db_id: student_transcripts_tracking
extra pred: SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS enrollments FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY enrollments DESC LIMIT 1;
extra gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

index: 543
db_id: student_transcripts_tracking
extra pred: SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(ec.course_id) as enrollments FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN student_enrolment_courses ec ON se.student_enrolment_id = ec.student_enrolment_id GROUP BY s.student_id ORDER BY enrollments DESC LIMIT 1;
extra gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

index: 547
db_id: student_transcripts_tracking
easy pred: SELECT course_name FROM courses WHERE course_id IN (     SELECT course_id     FROM student_enrolment_courses )
easy gold: SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id

index: 550
db_id: student_transcripts_tracking
extra pred: SELECT last_name  FROM students  INNER JOIN addresses ON students.current_address_id = addresses.address_id  LEFT JOIN student_enrolment ON student_enrolment.student_id = students.student_id  WHERE state_province_county = 'North Carolina'  AND student_enrolment_id IS NULL;
extra gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id

index: 551
db_id: student_transcripts_tracking
extra pred: SELECT students.last_name  FROM students  JOIN addresses ON students.current_address_id = addresses.address_id LEFT JOIN student_enrolment ON student_enrolment.student_id = students.student_id WHERE addresses.state_province_county = 'North Carolina'  AND student_enrolment.student_id IS NULL
extra gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id

index: 552
db_id: student_transcripts_tracking
medium pred: SELECT transcript_date, transcript_id  FROM transcripts  JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id  JOIN student_enrolment_courses ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id  GROUP BY transcript_id  HAVING COUNT(DISTINCT student_enrolment_courses.course_id) >= 2;
medium gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2

index: 553
db_id: student_transcripts_tracking
medium pred: SELECT transcript_date, transcript_id  FROM transcripts  JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id  JOIN student_enrolment_courses ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id  GROUP BY transcripts.transcript_id  HAVING COUNT(DISTINCT student_enrolment_courses.course_id) >= 2
medium gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2

index: 558
db_id: student_transcripts_tracking
medium pred: SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered ASC LIMIT 1;
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1

index: 559
db_id: student_transcripts_tracking
medium pred: SELECT students.first_name, students.middle_name, students.last_name FROM students ORDER BY students.date_first_registered ASC LIMIT 1;
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1

index: 562
db_id: student_transcripts_tracking
extra pred: SELECT addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3 FROM addresses JOIN students ON students.current_address_id = addresses.address_id GROUP BY addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3 ORDER BY COUNT(students.student_id) DESC LIMIT 1;
extra gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1

index: 567
db_id: student_transcripts_tracking
medium pred: SELECT MIN(transcript_date)  FROM transcripts
medium gold: SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1

index: 573
db_id: student_transcripts_tracking
hard pred: SELECT COUNT(*) AS num_of_times, course_id FROM student_enrolment_courses GROUP BY course_id HAVING COUNT(*) = (     SELECT MAX(count)     FROM (         SELECT COUNT(*) AS count         FROM student_enrolment_courses         GROUP BY course_id     ) AS counts )
hard gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1

index: 574
db_id: student_transcripts_tracking
extra pred: SELECT transcript_date, transcript_id FROM transcripts ORDER BY transcript_id LIMIT 1;
extra gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1

index: 575
db_id: student_transcripts_tracking
extra pred: SELECT transcript_date, transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id JOIN student_enrolment_courses ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1;
extra gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1

index: 576
db_id: student_transcripts_tracking
extra pred: SELECT semesters.semester_name FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Master' AND EXISTS (     SELECT 1     FROM student_enrolment     INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id     WHERE degree_programs.degree_summary_name = 'Bachelor'     AND student_enrolment.semester_id = semesters.semester_id )
extra gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'

index: 577
db_id: student_transcripts_tracking
extra pred: SELECT semester_id FROM semesters WHERE semester_id IN (     SELECT semester_id     FROM student_enrolment     WHERE degree_program_id IN (         SELECT degree_program_id         FROM degree_programs         WHERE department_id = (             SELECT department_id             FROM departments             WHERE department_name = 'Masters'         )     )     AND semester_id IN (         SELECT semester_id         FROM student_enrolment         WHERE degree_program_id IN (             SELECT degree_program_id             FROM degree_programs             WHERE department_id = (                 SELECT department_id                 FROM departments                 WHERE department_name = 'Bachelors'             )         )     ) )
extra gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'

index: 579
db_id: student_transcripts_tracking
easy pred: SELECT DISTINCT addresses.line_1, addresses.line_2, addresses.line_3, addresses.city, addresses.zip_postcode, addresses.state_province_county, addresses.country, addresses.other_address_details FROM students JOIN addresses ON students.current_address_id = addresses.address_id JOIN student_enrolment ON student_enrolment.student_id = students.student_id JOIN student_enrolment_courses ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id JOIN courses ON student_enrolment_courses.course_id = courses.course_id;
easy gold: SELECT count(DISTINCT current_address_id) FROM Students

index: 580
db_id: student_transcripts_tracking
easy pred: SELECT * FROM students ORDER BY last_name DESC, first_name DESC
easy gold: SELECT other_student_details FROM Students ORDER BY other_student_details DESC

index: 581
db_id: student_transcripts_tracking
easy pred: SELECT * FROM students ORDER BY last_name DESC
easy gold: SELECT other_student_details FROM Students ORDER BY other_student_details DESC

index: 582
db_id: student_transcripts_tracking
easy pred: SELECT h.address_id, h.line_1, h.line_2, h.line_3, h.city, h.zip_postcode, h.state_province_county, h.country, h.other_address_details,        c.course_id, c.course_name, c.course_description, c.other_details,        d.department_id, d.department_name, d.department_description, d.other_details,        dp.degree_program_id, dp.department_id, dp.degree_summary_name, dp.degree_summary_description, dp.other_details,        s.section_id, s.course_id, s.section_name, s.section_description, s.other_details,        se.semester_id, se.semester_name, se.semester_description, se.other_details,        stu.student_id, stu.current_address_id, stu.permanent_address_id, stu.first_name, stu.middle_name, stu.last_name, stu.cell_mobile_number,         stu.email_address, stu.ssn, stu.date_first_registered, stu.date_left, stu.other_student_details,        se.student_enrolment_id, se.degree_program_id, se.semester_id, se.student_id, se.other_details,        sec.student_course_id, sec.course_id, sec.student_enrolment_id,        t.transcript_id, t.transcript_date, t.other_details,        tc.student_course_id, tc.transcript_id FROM addresses as h, courses as c, departments as d, degree_programs as dp, sections as s,       semesters as se, students as stu, student_enrolment as se, student_enrolment_courses as sec,       transcripts as t, transcript_contents as tc WHERE dp.department_id = d.department_id    AND s.course_id = c.course_id    AND stu.permanent_address_id = h.address_id    AND stu.current_address_id = h.address_id    AND se.student_id = stu.student_id    AND se.semester_id = se.semester_id    AND se.degree_program_id = dp.degree_program_id    AND sec.student_enrolment_id = se.student_enrolment_id    AND sec.course_id = c.course_id    AND tc.transcript_id = t.transcript_id    AND tc.student_course_id = sec.student_course_id
easy gold: SELECT section_description FROM Sections WHERE section_name  =  'h'

index: 585
db_id: student_transcripts_tracking
hard pred: SELECT first_name  FROM students  JOIN addresses ON students.permanent_address_id = addresses.address_id  JOIN student_enrolment ON student_enrolment.student_id = students.student_id  JOIN student_enrolment_courses ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id  JOIN courses ON student_enrolment_courses.course_id = courses.course_id  WHERE addresses.country = 'Haiti' OR students.cell_mobile_number = '09700166582'
hard gold: select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'

index: 592
db_id: tvshow
medium pred: SELECT cartoon.title, cartoon.directed_by  FROM cartoon  JOIN tv_series ON cartoon.id = tv_series.id  JOIN tv_channel ON tv_series.channel = tv_channel.id  ORDER BY tv_series.air_date;
medium gold: SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date

index: 593
db_id: tvshow
medium pred: SELECT cartoon.title, cartoon.directed_by FROM cartoon JOIN tv_series ON cartoon.channel = tv_series.channel ORDER BY tv_series.air_date;
medium gold: SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date

index: 599
db_id: tvshow
medium pred: SELECT COUNT(DISTINCT tv_series.series_name) AS total_series,        COUNT(DISTINCT tv_channel.content) AS total_contents FROM tv_channel LEFT JOIN tv_series ON tv_series.channel = tv_channel.id LEFT JOIN cartoon ON cartoon.channel = tv_channel.id
medium gold: SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;

index: 602
db_id: tvshow
easy pred: SELECT tv_channel.package_option FROM tv_channel JOIN tv_series ON tv_series.channel = tv_channel.id WHERE tv_series.series_name = "Sky Radio"
easy gold: SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";

index: 603
db_id: tvshow
easy pred: SELECT tv_channel.package_option FROM tv_channel JOIN tv_series ON tv_series.channel = tv_channel.id WHERE tv_series.series_name = 'Sky Radio'
easy gold: SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";

index: 607
db_id: tvshow
hard pred: SELECT language, COUNT(*) AS channel_count FROM tv_channel GROUP BY language HAVING channel_count = (SELECT MIN(t.channel_count)                         FROM (SELECT COUNT(*) AS channel_count                              FROM tv_channel                              GROUP BY language) AS t)
hard gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;

index: 608
db_id: tvshow
medium pred: SELECT language, COUNT(tv_channel.id) AS num_channels FROM tv_channel JOIN tv_series ON tv_series.channel = tv_channel.id JOIN cartoon ON cartoon.channel = tv_channel.id GROUP BY language
medium gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE

index: 612
db_id: tvshow
medium pred: SELECT cartoon.title  FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id JOIN tv_series ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio'
medium gold: SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";

index: 613
db_id: tvshow
medium pred: SELECT cartoon.title FROM cartoon JOIN tv_series ON cartoon.channel = tv_series.channel JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE tv_series.series_name = "Sky Radio"
medium gold: SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";

index: 614
db_id: tvshow
easy pred: SELECT episode FROM tv_series ORDER BY rating DESC;
easy gold: SELECT Episode FROM TV_series ORDER BY rating

index: 615
db_id: tvshow
easy pred: SELECT *  FROM tv_series ORDER BY rating DESC;
easy gold: SELECT Episode FROM TV_series ORDER BY rating

index: 616
db_id: tvshow
medium pred: SELECT series_name, episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3;
medium gold: SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;

index: 625
db_id: tvshow
medium pred: SELECT tv_series.series_name  FROM tv_series  WHERE tv_series.episode = 'A Love of a Lifetime'
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";

index: 627
db_id: tvshow
medium pred: SELECT episode FROM tv_series WHERE series_name = 'Sky Radio'
medium gold: SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";

index: 629
db_id: tvshow
medium pred: SELECT tv_director.name, COUNT(cartoon.id) AS num_cartoons FROM tv_director JOIN cartoon ON cartoon.directed_by = tv_director.id GROUP BY tv_director.name
medium gold: SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by

index: 631
db_id: tvshow
medium pred: SELECT cartoon.production_code, tv_channel.channel FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id ORDER BY cartoon.original_air_date DESC LIMIT 1;
medium gold: select production_code ,  channel from cartoon order by original_air_date desc limit 1

index: 636
db_id: tvshow
hard pred: SELECT DISTINCT tv_channel.country FROM tv_channel LEFT JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.written_by <> 'Todd Casey' OR cartoon.written_by IS NULL;
hard gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'

index: 637
db_id: tvshow
hard pred: SELECT DISTINCT country  FROM tv_channel  WHERE id NOT IN (   SELECT channel   FROM cartoon   WHERE written_by = 'Todd Casey' )
hard gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'

index: 638
db_id: tvshow
extra pred: SELECT tv_channel.series_name, tv_channel.country FROM tv_channel INNER JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang')
extra gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'

index: 639
db_id: tvshow
extra pred: SELECT tv_channel.series_name, tv_channel.country FROM tv_channel JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang')
extra gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'

index: 642
db_id: tvshow
easy pred: SELECT tv_channel.id  FROM tv_channel WHERE country IN (     SELECT country     FROM tv_channel     GROUP BY country     HAVING COUNT(*) > 2 )
easy gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2

index: 643
db_id: tvshow
easy pred: SELECT id FROM tv_channel HAVING COUNT(*) > 2;
easy gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2

index: 644
db_id: tvshow
hard pred: SELECT tv_channel.id FROM tv_channel LEFT JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.directed_by != 'Ben Jones' OR cartoon.directed_by IS NULL;
hard gold: SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'

index: 646
db_id: tvshow
hard pred: SELECT package_option FROM tv_channel WHERE id NOT IN (     SELECT tv_series.channel     FROM tv_series     INNER JOIN cartoon ON cartoon.channel = tv_series.channel     WHERE cartoon.directed_by = 'Ben Jones' )
hard gold: SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')

index: 653
db_id: poker_player
medium pred: SELECT poker_player.poker_player_id, poker_player.final_table_made, poker_player.best_finish FROM poker_player JOIN people ON poker_player.people_id = people.people_id;
medium gold: SELECT Final_Table_Made ,  Best_Finish FROM poker_player

index: 666
db_id: poker_player
hard pred: SELECT p.birth_date FROM poker_player pp JOIN people p ON pp.people_id = p.people_id WHERE pp.earnings = (SELECT MIN(earnings) FROM poker_player)
hard gold: SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1

index: 674
db_id: poker_player
medium pred: SELECT people.nationality, COUNT(*) AS count FROM poker_player JOIN people ON poker_player.people_id = people.people_id GROUP BY people.nationality;
medium gold: SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality

index: 676
db_id: poker_player
hard pred: SELECT nationality, COUNT(*) AS count FROM people GROUP BY nationality ORDER BY count DESC LIMIT 1;
hard gold: SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1

index: 679
db_id: poker_player
easy pred: SELECT p.nationality FROM poker_player pp JOIN people p ON pp.people_id = p.people_id GROUP BY p.nationality HAVING COUNT(*) >= 2;
easy gold: SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2

index: 680
db_id: poker_player
medium pred: SELECT people.name, people.birth_date FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY people.name ASC
medium gold: SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC

index: 682
db_id: poker_player
easy pred: SELECT p.name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id WHERE p.nationality <> 'Russia'
easy gold: SELECT Name FROM people WHERE Nationality != "Russia"

index: 687
db_id: poker_player
easy pred: SELECT COUNT(DISTINCT nationality) AS num_of_nationalities  FROM poker_player  JOIN people ON poker_player.people_id = people.people_id
easy gold: SELECT count(DISTINCT Nationality) FROM people

index: 690
db_id: voter_1
medium pred: SELECT votes.vote_id, votes.phone_number, area_code_state.state FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number JOIN area_code_state ON votes.state = area_code_state.state
medium gold: SELECT vote_id ,  phone_number ,  state FROM votes

index: 700
db_id: voter_1
medium pred: SELECT votes.created, area_code_state.state, votes.phone_number FROM votes INNER JOIN contestants ON votes.contestant_number = contestants.contestant_number INNER JOIN area_code_state ON votes.state = area_code_state.state WHERE contestants.contestant_name = 'Tabatha Gehling'
medium gold: SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'

index: 701
db_id: voter_1
extra pred: SELECT DISTINCT area_code_state.area_code FROM area_code_state INNER JOIN votes ON votes.state = area_code_state.state INNER JOIN contestants ON votes.contestant_number = contestants.contestant_number WHERE contestants.contestant_name = 'Tabatha Gehling' AND        EXISTS (SELECT 1                FROM votes AS v                WHERE v.phone_number = votes.phone_number AND                      v.contestant_number = (SELECT contestant_number                                             FROM contestants                                             WHERE contestant_name = 'Kelly Clauss')              )
extra gold: SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'

index: 708
db_id: world_1
easy pred: SELECT SUM(surfacearea)  FROM country  WHERE continent = 'Caribbean';
easy gold: SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"

index: 709
db_id: world_1
easy pred: SELECT country.continent FROM country WHERE country.code = (     SELECT city.countrycode     FROM city     WHERE city.id = (         SELECT country.capital         FROM country         WHERE country.code = 'AI'     ) )
easy gold: SELECT Continent FROM country WHERE Name  =  "Anguilla"

index: 710
db_id: world_1
easy pred: SELECT country.continent FROM country JOIN city ON city.countrycode = country.code WHERE city.name = 'Anguilla'
easy gold: SELECT Continent FROM country WHERE Name  =  "Anguilla"

index: 713
db_id: world_1
extra pred: SELECT language FROM countrylanguage WHERE countrycode = (   SELECT code   FROM country   WHERE name = 'Aruba' ) ORDER BY percentage DESC LIMIT 1;
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1

index: 714
db_id: world_1
extra pred: SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Aruba'
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1

index: 715
db_id: world_1
medium pred: SELECT population, lifeexpectancy FROM country WHERE code = 'BRA';
medium gold: SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"

index: 720
db_id: world_1
easy pred: SELECT AVG(lifeexpectancy) AS average_life_expectancy FROM country WHERE continent = 'Central Africa'
easy gold: SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"

index: 721
db_id: world_1
hard pred: SELECT country.name FROM country ORDER BY country.lifeexpectancy LIMIT 1
hard gold: SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1

index: 724
db_id: world_1
medium pred: SELECT COUNT(*) AS total_population, MAX(gnp) AS largest_gnp  FROM country  WHERE continent = 'Asia'
medium gold: SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"

index: 729
db_id: world_1
easy pred: SELECT COUNT(*)  FROM city  WHERE district = 'Gelderland'
easy gold: SELECT sum(Population) FROM city WHERE District  =  "Gelderland"

index: 732
db_id: world_1
medium pred: SELECT AVG(country.gnp) AS mean_gnp, SUM(country.population) AS total_population FROM country WHERE country.continent = 'North America' AND country.name IN (     SELECT DISTINCT countrycode     FROM city     WHERE city.name = 'Guam' OR city.name = 'Puerto Rico' OR city.name = 'U.S. Virgin Islands' )
medium gold: SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"

index: 735
db_id: world_1
easy pred: SELECT COUNT(DISTINCT governmentform) AS number_of_governments FROM country
easy gold: SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"

index: 737
db_id: world_1
medium pred: SELECT COUNT(DISTINCT(countrylanguage.language)) AS total_languages FROM countrylanguage WHERE countrylanguage.countrycode = (     SELECT code     FROM country     WHERE name = 'Aruba' );
medium gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"

index: 738
db_id: world_1
medium pred: SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba');
medium gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"

index: 739
db_id: world_1
medium pred: SELECT COUNT(DISTINCT language)  FROM countrylanguage WHERE countrycode = 'AFG';
medium gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"

index: 740
db_id: world_1
medium pred: SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE countrycode = 'AFG' AND isofficial = TRUE;
medium gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"

index: 741
db_id: world_1
extra pred: SELECT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  GROUP BY country.code  ORDER BY COUNT(countrylanguage.language) DESC  LIMIT 1;
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1

index: 742
db_id: world_1
extra pred: SELECT country.name FROM country JOIN (     SELECT countrycode, COUNT(DISTINCT language) AS language_count     FROM countrylanguage     GROUP BY countrycode     ORDER BY language_count DESC     LIMIT 1 ) AS lang_count ON country.code = lang_count.countrycode
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1

index: 743
db_id: world_1
extra pred: SELECT continent  FROM country GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1;
extra gold: SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1

index: 744
db_id: world_1
extra pred: SELECT continent, COUNT(DISTINCT language) AS language_count FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY continent ORDER BY language_count DESC LIMIT 1;
extra gold: SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1

index: 745
db_id: world_1
easy pred: SELECT COUNT(*)  FROM countrylanguage  WHERE language IN ('English', 'Dutch')  GROUP BY countrycode  HAVING COUNT(DISTINCT language) = 2
easy gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")

index: 746
db_id: world_1
easy pred: SELECT COUNT(DISTINCT country.code) AS number_of_nations FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE (countrylanguage.language = 'English' AND countrylanguage.isofficial = 'T')     AND (countrylanguage.language = 'Dutch' AND countrylanguage.isofficial = 'T');
easy gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")

index: 747
db_id: world_1
extra pred: SELECT DISTINCT c.name FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language IN ('English', 'French') GROUP BY c.name HAVING COUNT(DISTINCT cl.language) = 2
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"

index: 748
db_id: world_1
extra pred: SELECT      country.name  FROM      country  JOIN      countrylanguage      ON country.code = countrylanguage.countrycode  WHERE      countrylanguage.language = 'English'      AND country.code IN (         SELECT              countrycode          FROM              countrylanguage          WHERE              language = 'French'     );
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"

index: 754
db_id: world_1
hard pred: SELECT city.* FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON countrylanguage.countrycode = country.code WHERE countrylanguage.language IN ('Dutch', 'English') GROUP BY city.id, city.name, city.countrycode, city.district, city.population
hard gold: SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"

index: 756
db_id: world_1
extra pred: SELECT DISTINCT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'T'  AND (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch')
extra gold: SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"

index: 757
db_id: world_1
extra pred: SELECT countrylanguage.language, COUNT(*) AS count  FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY countrylanguage.language HAVING country.continent = 'Asia' ORDER BY count DESC LIMIT 1;
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1

index: 758
db_id: world_1
extra pred: SELECT country.language FROM country JOIN countrylanguage ON country.countrycode = countrylanguage.countrycode GROUP BY country.language ORDER BY COUNT(DISTINCT country.code) DESC LIMIT 1;
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1

index: 759
db_id: world_1
hard pred: SELECT DISTINCT language FROM countrylanguage WHERE language NOT IN (     SELECT language     FROM countrylanguage     GROUP BY language     HAVING COUNT(DISTINCT countrycode) > 1 ) AND countrycode IN (     SELECT code     FROM country     WHERE governmentform LIKE '%Republic%' )
hard gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1

index: 761
db_id: world_1
extra pred: SELECT city.name  FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1;
extra gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1

index: 762
db_id: world_1
extra pred: SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1;
extra gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1

index: 765
db_id: world_1
extra pred: SELECT AVG(lifeexpectancy)  FROM country  WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')
extra gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")

index: 766
db_id: world_1
extra pred: SELECT AVG(lifeexpectancy) as average_life_expectancy FROM country WHERE country.code NOT IN (   SELECT countrycode   FROM countrylanguage   WHERE language = 'English' AND isofficial = 'T' )
extra gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")

index: 767
db_id: world_1
extra pred: SELECT SUM(country.population) AS total_people FROM country WHERE country.code NOT IN (     SELECT countrylanguage.countrycode     FROM countrylanguage     WHERE countrylanguage.language = 'English'     AND countrylanguage.isofficial = 'T' )
extra gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")

index: 768
db_id: world_1
extra pred: SELECT COUNT(*)  FROM country WHERE country.code NOT IN (     SELECT DISTINCT countrycode      FROM countrylanguage      WHERE language = 'English' )
extra gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")

index: 769
db_id: world_1
medium pred: SELECT countrylanguage.language  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code  WHERE country.headofstate = 'Beatrix'
medium gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"

index: 770
db_id: world_1
medium pred: SELECT countrylanguage.language FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.headofstate = 'Beatrix'
medium gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"

index: 771
db_id: world_1
medium pred: SELECT COUNT(DISTINCT countrylanguage.language)  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.indepyear < 1930
medium gold: SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"

index: 772
db_id: world_1
medium pred: SELECT COUNT(DISTINCT countrylanguage.language)  FROM countrylanguage  INNER JOIN country ON countrylanguage.countrycode = country.code  WHERE country.indepyear < 1930
medium gold: SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"

index: 773
db_id: world_1
hard pred: SELECT DISTINCT country.name FROM country WHERE country.code <> 'EU'  AND country.surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')
hard gold: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")

index: 774
db_id: world_1
hard pred: SELECT DISTINCT country.name FROM country WHERE country.surfacearea > (     SELECT MAX(surfacearea)     FROM country     WHERE continent = 'Europe' )
hard gold: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")

index: 775
db_id: world_1
extra pred: SELECT c1.name FROM country c1 WHERE c1.continent = 'Africa' AND      c1.population < (SELECT MIN(c2.population)                       FROM country c2                       WHERE c2.continent = 'Asia')
extra gold: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  "Asia")

index: 778
db_id: world_1
extra pred: SELECT country.name FROM country WHERE country.population > (     SELECT MAX(country.population)     FROM country     WHERE country.continent = 'Africa' ) AND country.continent = 'Asia'
extra gold: SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  "Africa")

index: 779
db_id: world_1
hard pred: SELECT DISTINCT country.code FROM country WHERE country.code NOT IN (     SELECT DISTINCT countrylanguage.countrycode     FROM countrylanguage     WHERE language = 'English' )
hard gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

index: 780
db_id: world_1
hard pred: SELECT code FROM country WHERE code NOT IN (     SELECT DISTINCT countrycode     FROM countrylanguage     WHERE language = 'English' )
hard gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

index: 781
db_id: world_1
easy pred: SELECT country.code, country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language <> 'English';
easy gold: SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"

index: 783
db_id: world_1
hard pred: SELECT country.code  FROM country  WHERE country.language <> 'English' AND country.governmentform <> 'Republic';
hard gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

index: 784
db_id: world_1
hard pred: SELECT c.code FROM country c LEFT JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language != 'English' AND c.governmentform != 'Republic'
hard gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

index: 785
db_id: world_1
extra pred: SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe'  AND countrylanguage.language <> 'English' AND countrylanguage.isofficial = 'T' ORDER BY city.name;
extra gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')

index: 786
db_id: world_1
extra pred: SELECT city.name FROM city INNER JOIN country ON city.countrycode = country.code INNER JOIN countrylanguage ON countrylanguage.countrycode = country.code WHERE country.continent = 'Europe' AND countrylanguage.language <> 'English' AND countrylanguage.isofficial = 'T' GROUP BY city.name
extra gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')

index: 789
db_id: world_1
medium pred: SELECT c.name, c.indepyear, c.surfacearea FROM country c WHERE c.population = (SELECT MIN(population) FROM country)
medium gold: SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1

index: 790
db_id: world_1
medium pred: SELECT country.name, country.indepyear, country.surfacearea FROM country WHERE country.population = (   SELECT MIN(population)   FROM city   JOIN country ON city.countrycode = country.code ) LIMIT 1;
medium gold: SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1

index: 797
db_id: world_1
medium pred: SELECT governmentform, SUM(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform
medium gold: SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72

index: 798
db_id: world_1
medium pred: SELECT governmentform, SUM(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform;
medium gold: SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72

index: 799
db_id: world_1
medium pred: SELECT continent, AVG(lifeexpectancy) AS average_life_expectancy, SUM(population) AS total_population FROM country WHERE AVG(lifeexpectancy) < 72 GROUP BY continent;
medium gold: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72

index: 800
db_id: world_1
medium pred: SELECT continent, SUM(population) AS total_population, AVG(lifeexpectancy) AS average_life_expectancy FROM country WHERE continent IN (SELECT continent FROM country WHERE average_life_expectancy < 72) GROUP BY continent;
medium gold: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72

index: 815
db_id: world_1
hard pred: SELECT country.language FROM countrylanguage GROUP BY country.language ORDER BY COUNT(DISTINCT countrylanguage.countrycode) DESC LIMIT 1;
hard gold: SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1

index: 817
db_id: world_1
medium pred: SELECT country.code, MAX(countrylanguage.percentage) FROM country JOIN countrylanguage ON countrylanguage.countrycode = country.code GROUP BY country.code;
medium gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode

index: 818
db_id: world_1
medium pred: SELECT country.code, countrylanguage.language FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrylanguage.countrycode = country.code) ORDER BY country.code ASC
medium gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode

index: 819
db_id: world_1
extra pred: SELECT COUNT(DISTINCT country.code) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language = 'Spanish' AND percentage = (   SELECT MAX(percentage)   FROM countrylanguage   WHERE language = 'Spanish' )
extra gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode

index: 820
db_id: world_1
extra pred: SELECT COUNT(DISTINCT country.code) FROM country INNER JOIN countrylanguage ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'Spanish'  AND countrylanguage.isofficial = 'T' AND countrylanguage.percentage > 50;
extra gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode

index: 821
db_id: world_1
medium pred: SELECT country.code FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish' GROUP BY country.code ORDER BY SUM(countrylanguage.percentage) DESC LIMIT 1
medium gold: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode

index: 822
db_id: world_1
medium pred: SELECT country.code FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish' AND countrylanguage.isofficial = 'T'
medium gold: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode

index: 835
db_id: orchestra
easy pred: SELECT COUNT(DISTINCT conductor.nationality) AS count_nationalities  FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id JOIN performance ON orchestra.orchestra_id = performance.orchestra_id JOIN show ON show.performance_id = performance.performance_id
easy gold: SELECT count(DISTINCT Nationality) FROM conductor

index: 844
db_id: orchestra
medium pred: SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name HAVING COUNT(DISTINCT o.orchestra_id) > 1;
medium gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1

index: 845
db_id: orchestra
extra pred: SELECT conductor.name  FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  ORDER BY COUNT(orchestra.orchestra_id) DESC  LIMIT 1;
extra gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1

index: 846
db_id: orchestra
extra pred: SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1;
extra gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1

index: 851
db_id: orchestra
medium pred: SELECT o.orchestra, COUNT(o.orchestra_id) AS count FROM orchestra o JOIN conductor c ON o.conductor_id = c.conductor_id GROUP BY o.orchestra, c.conductor_id ORDER BY count ASC;
medium gold: SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC

index: 852
db_id: orchestra
medium pred: SELECT major_record_format, COUNT(major_record_format) AS frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC
medium gold: SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC

index: 853
db_id: orchestra
hard pred: SELECT record_company FROM orchestra GROUP BY record_company HAVING COUNT(DISTINCT orchestra_id) = (SELECT COUNT(DISTINCT orchestra_id)                                        FROM orchestra                                        GROUP BY record_company                                        ORDER BY COUNT(DISTINCT orchestra_id) DESC                                        LIMIT 1)
hard gold: SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1

index: 854
db_id: orchestra
hard pred: SELECT record_company, COUNT(DISTINCT orchestra_id) AS num_orchestras FROM orchestra GROUP BY record_company ORDER BY num_orchestras DESC LIMIT 1;
hard gold: SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1

index: 855
db_id: orchestra
hard pred: SELECT o.name  FROM orchestra o LEFT JOIN performance p ON o.orchestra_id = p.orchestra_id WHERE p.performance_id IS NULL;
hard gold: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)

index: 857
db_id: orchestra
hard pred: SELECT      orchestra.record_company FROM      orchestra INNER JOIN      conductor ON orchestra.conductor_id = conductor.conductor_id LEFT JOIN      performance ON orchestra.orchestra_id = performance.orchestra_id LEFT JOIN      show ON performance.performance_id = show.performance_id WHERE      orchestra.year_of_founded < 2003     AND orchestra.year_of_founded > 2003;
hard gold: SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003

index: 858
db_id: orchestra
hard pred: SELECT DISTINCT record_company FROM orchestra WHERE orchestra_id IN (  SELECT orchestra_id  FROM orchestra  WHERE year_of_founded < 2003 ) AND orchestra_id IN (  SELECT orchestra_id  FROM orchestra  WHERE year_of_founded > 2003 )
hard gold: SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003

index: 862
db_id: orchestra
medium pred: SELECT year_of_founded FROM orchestra INNER JOIN performance ON orchestra.orchestra_id = performance.orchestra_id GROUP BY year_of_founded HAVING COUNT(DISTINCT performance_id) > 1;
medium gold: SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1

index: 868
db_id: network_1
easy pred: SELECT highschooler.id, highschooler.name, highschooler.grade FROM highschooler
easy gold: SELECT grade FROM Highschooler

index: 879
db_id: network_1
hard pred: SELECT grade, COUNT(*) AS count FROM highschooler GROUP BY grade ORDER BY count DESC LIMIT 1;
hard gold: SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1

index: 883
db_id: network_1
medium pred: SELECT s.id, f.friend_id FROM highschooler s JOIN friend f ON f.student_id = s.id ORDER BY s.id;
medium gold: SELECT student_id ,  count(*) FROM Friend GROUP BY student_id

index: 884
db_id: network_1
medium pred: SELECT highschooler.id, highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON friend.friend_id = highschooler.id GROUP BY highschooler.id, highschooler.name
medium gold: SELECT student_id ,  count(*) FROM Friend GROUP BY student_id

index: 885
db_id: network_1
medium pred: SELECT highschooler.name, COUNT(friend.friend_id) AS number_of_friends FROM highschooler JOIN friend ON friend.friend_id = highschooler.id GROUP BY highschooler.name;
medium gold: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id

index: 886
db_id: network_1
medium pred: SELECT h.name, COUNT(f.friend_id) as num_friends FROM highschooler h LEFT JOIN friend f ON f.student_id = h.id GROUP BY h.name
medium gold: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id

index: 887
db_id: network_1
extra pred: SELECT h.name  FROM highschooler h  JOIN friend f ON f.friend_id = h.id  GROUP BY h.id  ORDER BY COUNT(f.student_id) DESC  LIMIT 1;
extra gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

index: 892
db_id: network_1
hard pred: SELECT highschooler.name  FROM highschooler JOIN friend ON friend.friend_id = highschooler.id WHERE friend.student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')
hard gold: SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"

index: 893
db_id: network_1
medium pred: SELECT COUNT(*) AS num_friends FROM friend WHERE friend.student_id = (   SELECT id   FROM highschooler   WHERE name = 'Kyle' )
medium gold: SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"

index: 894
db_id: network_1
medium pred: SELECT COUNT(*) FROM friend WHERE friend.student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
medium gold: SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"

index: 895
db_id: network_1
hard pred: SELECT h.id FROM highschooler h WHERE NOT EXISTS (     SELECT 1     FROM friend f     WHERE f.student_id = h.id OR f.friend_id = h.id )
hard gold: SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend

index: 896
db_id: network_1
hard pred: SELECT h.id FROM highschooler h LEFT JOIN friend f1 ON h.id = f1.student_id LEFT JOIN friend f2 ON h.id = f2.friend_id WHERE f1.student_id IS NULL AND f2.friend_id IS NULL
hard gold: SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend

index: 897
db_id: network_1
hard pred: SELECT h.name FROM highschooler h LEFT JOIN friend f ON f.friend_id = h.id LEFT JOIN likes l ON l.liked_id = h.id WHERE f.friend_id IS NULL AND l.liked_id IS NULL;
hard gold: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id

index: 898
db_id: network_1
hard pred: SELECT name FROM highschooler WHERE id NOT IN   (SELECT student_id   FROM friend) AND id NOT IN   (SELECT friend_id   FROM friend) ;
hard gold: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id

index: 899
db_id: network_1
hard pred: SELECT h.id FROM highschooler h WHERE h.id IN (   SELECT f.student_id   FROM friend f   WHERE f.friend_id = h.id ) AND h.id IN (   SELECT l.student_id   FROM likes l   WHERE l.liked_id <> h.id )
hard gold: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes

index: 900
db_id: network_1
hard pred: SELECT highschooler.id  FROM highschooler  JOIN friend ON friend.friend_id = highschooler.id  JOIN likes ON likes.student_id = highschooler.id  WHERE highschooler.id IN (SELECT friend.student_id FROM friend) AND highschooler.id IN (SELECT likes.student_id FROM likes)
hard gold: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes

index: 901
db_id: network_1
hard pred: SELECT h1.name FROM highschooler h1 INNER JOIN friend f ON f.friend_id = h1.id INNER JOIN likes l ON l.student_id = h1.id WHERE EXISTS (     SELECT 1     FROM friend f2     INNER JOIN likes l2 ON l2.student_id = h1.id     WHERE f2.student_id = h1.id AND l2.liked_id <> h1.id )
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id

index: 902
db_id: network_1
hard pred: SELECT h.name FROM highschooler h JOIN friend f ON f.friend_id = h.id JOIN likes l ON l.student_id = h.id AND l.liked_id = h.id
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id

index: 904
db_id: network_1
medium pred: SELECT student_id, COUNT(likes.student_id) AS likes_count FROM highschooler LEFT JOIN likes ON likes.student_id = highschooler.id GROUP BY student_id;
medium gold: SELECT student_id ,  count(*) FROM Likes GROUP BY student_id

index: 906
db_id: network_1
medium pred: SELECT highschooler.name, COUNT(likes.liked_id) AS likes_count FROM highschooler JOIN friend ON friend.friend_id = highschooler.id JOIN likes ON likes.student_id = highschooler.id GROUP BY highschooler.name
medium gold: SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id

index: 908
db_id: network_1
extra pred: SELECT h.name  FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY h.name  ORDER BY COUNT(l.liked_id) DESC LIMIT 1;
extra gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

index: 910
db_id: network_1
medium pred: SELECT highschooler.name FROM highschooler JOIN likes ON likes.student_id = highschooler.id GROUP BY highschooler.name HAVING COUNT(likes.liked_id) >= 2;
medium gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2

index: 911
db_id: network_1
hard pred: SELECT h.name FROM highschooler h INNER JOIN friend f1 ON h.id = f1.student_id INNER JOIN friend f2 ON h.id = f2.friend_id INNER JOIN likes l ON h.id = l.student_id WHERE h.grade > 5 GROUP BY h.id, h.name HAVING COUNT(DISTINCT f1.friend_id) >= 2
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2

index: 913
db_id: network_1
medium pred: SELECT COUNT(*) AS likes_count FROM likes WHERE likes.student_id = (     SELECT id     FROM highschooler     WHERE name = 'Kyle' );
medium gold: SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"

index: 915
db_id: network_1
hard pred: SELECT AVG(grade) FROM highschooler WHERE EXISTS (     SELECT *     FROM friend     WHERE friend.student_id = highschooler.id        OR friend.friend_id = highschooler.id ) AND EXISTS (     SELECT *     FROM likes     WHERE likes.student_id = highschooler.id        OR likes.liked_id = highschooler.id )
hard gold: SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)

index: 916
db_id: network_1
hard pred: SELECT AVG(h.grade)  FROM highschooler h  JOIN friend f ON h.id = f.student_id  JOIN highschooler h2 ON f.friend_id = h2.id
hard gold: SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)

index: 917
db_id: network_1
extra pred: SELECT MIN(g.grade) FROM highschooler g LEFT JOIN friend f ON g.id = f.student_id OR g.id = f.friend_id WHERE f.student_id IS NULL AND f.friend_id IS NULL
extra gold: SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)

index: 919
db_id: dog_kennels
hard pred: SELECT DISTINCT state FROM owners WHERE owner_id IN (     SELECT DISTINCT owner_id     FROM dogs     WHERE breed_code IN (         SELECT breed_code         FROM breeds     )     AND owner_id IN (         SELECT owner_id         FROM professionals         WHERE state = owners.state     ) )
hard gold: SELECT state FROM Owners INTERSECT SELECT state FROM Professionals

index: 920
db_id: dog_kennels
hard pred: SELECT DISTINCT owners.state FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN professionals ON dogs.owner_id = professionals.owner_id WHERE owners.state = professionals.state;
hard gold: SELECT state FROM Owners INTERSECT SELECT state FROM Professionals

index: 921
db_id: dog_kennels
hard pred: SELECT AVG(dogs.age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_id IS NOT NULL
hard gold: SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )

index: 922
db_id: dog_kennels
hard pred: SELECT AVG(age) AS average_age FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_type_code IS NOT NULL;
hard gold: SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )

index: 925
db_id: dog_kennels
hard pred: SELECT d.name FROM dogs d LEFT JOIN treatments t ON d.dog_id = t.dog_id GROUP BY d.name HAVING COALESCE(SUM(t.cost_of_treatment), 0) <= 1000;
hard gold: select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )

index: 926
db_id: dog_kennels
hard pred: SELECT dogs.name FROM dogs JOIN treatments ON treatments.dog_id = dogs.dog_id JOIN owners ON dogs.owner_id = owners.owner_id WHERE treatments.cost_of_treatment <= 1000;
hard gold: select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )

index: 927
db_id: dog_kennels
hard pred: SELECT DISTINCT owners.first_name FROM owners LEFT JOIN dogs ON dogs.owner_id = owners.owner_id LEFT JOIN professionals ON professionals.first_name = owners.first_name LEFT JOIN breeds ON breeds.breed_code = dogs.breed_code WHERE dogs.name IS NULL AND professionals.first_name IS NOT NULL
hard gold: SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs

index: 928
db_id: dog_kennels
hard pred: SELECT DISTINCT owners.first_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN professionals ON professionals.first_name = owners.first_name WHERE professionals.role_code = 'Professional' OR professionals.role_code = 'Owner' AND owners.first_name NOT IN (     SELECT name      FROM dogs )
hard gold: SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs

index: 929
db_id: dog_kennels
extra pred: SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals WHERE professionals.professional_id NOT IN (   SELECT treatments.professional_id   FROM treatments   JOIN dogs ON treatments.dog_id = dogs.dog_id   WHERE dogs.breed_code = 'breed_code' ) AND professionals.role_code <> 'DO';
extra gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id

index: 930
db_id: dog_kennels
extra pred: SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals LEFT JOIN treatments ON treatments.professional_id = professionals.professional_id LEFT JOIN dogs ON treatments.dog_id = dogs.dog_id WHERE treatments.treatment_id IS NULL AND dogs.breed_code NOT LIKE '%D%' AND dogs.breed_code NOT LIKE '%d%';
extra gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id

index: 931
db_id: dog_kennels
extra pred: SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id GROUP BY owners.owner_id, owners.first_name, owners.last_name ORDER BY COUNT(dogs.owner_id) DESC LIMIT 1;
extra gold: SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1

index: 936
db_id: dog_kennels
extra pred: SELECT breed_name  FROM breeds  GROUP BY breed_name  ORDER BY COUNT(*) DESC  LIMIT 1;
extra gold: SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1

index: 937
db_id: dog_kennels
extra pred: SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;
extra gold: SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1

index: 938
db_id: dog_kennels
extra pred: SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;
extra gold: SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1

index: 939
db_id: dog_kennels
extra pred: SELECT tt.treatment_type_description FROM treatment_types tt JOIN treatments t ON tt.treatment_type_code = t.treatment_type_code GROUP BY tt.treatment_type_description ORDER BY SUM(t.cost_of_treatment) LIMIT 1;
extra gold: SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1

index: 940
db_id: dog_kennels
extra pred: SELECT treatment_types.treatment_type_description  FROM treatment_types  JOIN treatments ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY treatment_types.treatment_type_description ORDER BY SUM(treatments.cost_of_treatment) ASC LIMIT 1;
extra gold: SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1

index: 941
db_id: dog_kennels
extra pred: SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;
extra gold: SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1

index: 942
db_id: dog_kennels
extra pred: SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;
extra gold: SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1

index: 945
db_id: dog_kennels
extra pred: SELECT professionals.first_name, professionals.last_name FROM professionals WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)
extra gold: SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )

index: 946
db_id: dog_kennels
extra pred: SELECT professionals.first_name, professionals.last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id JOIN dogs ON treatments.dog_id = dogs.dog_id JOIN charges ON treatments.cost_of_treatment < (SELECT AVG(charge_amount) FROM charges) JOIN owners ON dogs.owner_id = owners.owner_id
extra gold: SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )

index: 951
db_id: dog_kennels
medium pred: SELECT owners.first_name, owners.last_name, sizes.size_description  FROM owners  JOIN dogs ON dogs.owner_id = owners.owner_id  JOIN sizes ON dogs.size_code = sizes.size_code
medium gold: SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id

index: 952
db_id: dog_kennels
medium pred: SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN sizes ON dogs.size_code = sizes.size_code
medium gold: SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id

index: 955
db_id: dog_kennels
extra pred: SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON treatments.dog_id = dogs.dog_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code WHERE breeds.breed_code IN (     SELECT breed_code     FROM dogs     GROUP BY breed_code     HAVING COUNT(*) = 1 ) ORDER BY dogs.name;
extra gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )

index: 956
db_id: dog_kennels
extra pred: SELECT dogs.name, treatments.date_of_treatment FROM dogs  JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE breeds.breed_name = 'rarest'
extra gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )

index: 961
db_id: dog_kennels
extra pred: SELECT owners.last_name  FROM dogs  JOIN owners ON dogs.owner_id = owners.owner_id  WHERE dogs.age = (SELECT MIN(age) FROM dogs)
extra gold: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )

index: 962
db_id: dog_kennels
extra pred: SELECT last_name  FROM owners  JOIN dogs ON dogs.owner_id = owners.owner_id  WHERE age = (SELECT MIN(age)               FROM dogs)
extra gold: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )

index: 964
db_id: dog_kennels
medium pred: SELECT professionals.email_address FROM professionals JOIN owners ON professionals.owner_id = owners.owner_id WHERE owners.state = 'Hawaii' OR owners.state = 'Wisconsin'
medium gold: SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'

index: 967
db_id: dog_kennels
easy pred: SELECT COUNT(*) FROM dogs WHERE EXISTS (   SELECT 1 FROM treatments   WHERE dogs.dog_id = treatments.dog_id )
easy gold: SELECT count(DISTINCT dog_id) FROM Treatments

index: 968
db_id: dog_kennels
easy pred: SELECT COUNT(dog_id) AS number_of_dogs FROM dogs JOIN treatments ON treatments.dog_id = dogs.dog_id JOIN owners ON dogs.owner_id = owners.owner_id JOIN sizes ON dogs.size_code = sizes.size_code JOIN breeds ON dogs.breed_code = breeds.breed_code
easy gold: SELECT count(DISTINCT dog_id) FROM Treatments

index: 970
db_id: dog_kennels
easy pred: SELECT COUNT(DISTINCT professionals.professional_id) AS number_of_professionals FROM professionals INNER JOIN treatments ON professionals.professional_id = treatments.professional_id INNER JOIN dogs ON treatments.dog_id = dogs.dog_id WHERE dogs.breed_code = 'dogs' AND treatments.treatment_type_code = 'treatment_type_code'
easy gold: SELECT count(DISTINCT professional_id) FROM Treatments

index: 972
db_id: dog_kennels
medium pred: SELECT professionals.role_code, professionals.street, professionals.city, professionals.state FROM professionals INNER JOIN treatments ON professionals.professional_id = treatments.professional_id INNER JOIN dogs ON treatments.dog_id = dogs.dog_id INNER JOIN owners ON dogs.owner_id = owners.owner_id WHERE professionals.city LIKE '%West%'
medium gold: SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'

index: 977
db_id: dog_kennels
medium pred: SELECT MAX(cost_of_treatment)  FROM treatments
medium gold: SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1

index: 981
db_id: dog_kennels
extra pred: SELECT COUNT(*) AS owners_without_dogs FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs WHERE abandoned_yn = 'Y')
extra gold: SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )

index: 997
db_id: dog_kennels
medium pred: SELECT breeds.breed_code, breeds.breed_name, sizes.size_code, sizes.size_description FROM breeds, sizes
medium gold: SELECT DISTINCT breed_code ,  size_code FROM dogs

index: 999
db_id: dog_kennels
medium pred: SELECT professionals.first_name, treatments.description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN dogs ON treatments.dog_id = dogs.dog_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
medium gold: SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code

index: 1000
db_id: dog_kennels
medium pred: SELECT professionals.first_name, treatments.treatment_type_description FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
medium gold: SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code

index: 1015
db_id: singer
hard pred: SELECT citizenship, COUNT(citizenship) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;
hard gold: SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1

index: 1016
db_id: singer
hard pred: SELECT citizenship, COUNT(*) as count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;
hard gold: select citizenship from singer group by citizenship order by count(*) desc limit 1

index: 1022
db_id: singer
medium pred: SELECT name FROM singer WHERE singer_id IN (     SELECT singer_id FROM song WHERE sales > 300000 )
medium gold: SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000

index: 1023
db_id: singer
medium pred: SELECT DISTINCT name FROM singer WHERE singer_id IN (   SELECT singer_id   FROM song   GROUP BY singer_id   HAVING COUNT(*) > 1 )
medium gold: SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1

index: 1029
db_id: singer
hard pred: SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955
hard gold: SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955

index: 1030
db_id: singer
hard pred: SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955
hard gold: SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955

index: 1031
db_id: real_estate_properties
easy pred: SELECT COUNT(*) AS total_available_features  FROM other_available_features  JOIN ref_feature_types ON other_available_features.feature_type_code = ref_feature_types.feature_type_code  JOIN properties ON properties.property_type_code = ref_property_types.property_type_code  JOIN other_property_features ON other_property_features.property_id = properties.property_id  AND other_property_features.feature_id = other_available_features.feature_id
easy gold: SELECT count(*) FROM Other_Available_Features

index: 1032
db_id: real_estate_properties
medium pred: SELECT feature_type_name  FROM ref_feature_types  WHERE feature_type_code IN (   SELECT feature_type_code    FROM other_available_features    WHERE feature_name = 'AirCon' )
medium gold: SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  "AirCon"

index: 1033
db_id: real_estate_properties
medium pred: SELECT ref_property_types.property_type_description FROM ref_property_types JOIN properties ON properties.property_type_code = ref_property_types.property_type_code JOIN other_property_features ON other_property_features.property_id = properties.property_id JOIN other_available_features ON other_property_features.feature_id = other_available_features.feature_id JOIN ref_feature_types ON other_available_features.feature_type_code = ref_feature_types.feature_type_code WHERE properties.property_id = {code};
medium gold: SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code

index: 1034
db_id: real_estate_properties
hard pred: SELECT property_name FROM properties WHERE (property_type_code = 'hse' OR property_type_code = 'apt') AND room_count > 1;
hard gold: SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1

